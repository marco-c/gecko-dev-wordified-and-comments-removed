#
ifndef
nsListControlFrame_h___
#
define
nsListControlFrame_h___
#
ifdef
DEBUG_evaughan
#
endif
#
ifdef
DEBUG_rods
#
endif
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsGfxScrollFrame
.
h
"
#
include
"
nsIFormControlFrame
.
h
"
#
include
"
nsISelectControlFrame
.
h
"
#
include
"
nsSelectsAreaFrame
.
h
"
#
ifdef
KeyPress
#
undef
KeyPress
#
endif
class
nsComboboxControlFrame
;
class
nsPresContext
;
class
nsListEventListener
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Event
;
class
HTMLOptionElement
;
class
HTMLSelectElement
;
class
HTMLOptionsCollection
;
}
}
class
nsListControlFrame
final
:
public
nsHTMLScrollFrame
public
nsIFormControlFrame
public
nsISelectControlFrame
{
public
:
typedef
mozilla
:
:
dom
:
:
HTMLOptionElement
HTMLOptionElement
;
friend
nsListControlFrame
*
NS_NewListControlFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsListControlFrame
)
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
final
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
final
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
final
;
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
final
;
void
Reflow
(
nsPresContext
*
aCX
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
final
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
final
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
final
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
final
;
nsContainerFrame
*
GetContentInsertionFrame
(
)
final
;
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
final
{
return
nsHTMLScrollFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
final
;
#
endif
nsresult
SetFormProperty
(
nsAtom
*
aName
const
nsAString
&
aValue
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
SetFocus
(
bool
aOn
=
true
bool
aRepaint
=
false
)
final
;
mozilla
:
:
ScrollStyles
GetScrollStyles
(
)
const
final
;
bool
ShouldPropagateComputedBSizeToScrolledContent
(
)
const
final
;
#
ifdef
ACCESSIBILITY
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
final
;
#
endif
void
SetComboboxFrame
(
nsIFrame
*
aComboboxFrame
)
;
int32_t
GetSelectedIndex
(
)
;
HTMLOptionElement
*
GetCurrentOption
(
)
;
void
GetOptionText
(
uint32_t
aIndex
nsAString
&
aStr
)
;
void
CaptureMouseEvents
(
bool
aGrabMouseEvents
)
;
nscoord
GetBSizeOfARow
(
)
;
uint32_t
GetNumberOfOptions
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
AboutToDropDown
(
)
;
void
AboutToRollup
(
)
;
MOZ_CAN_RUN_SCRIPT
void
FireOnInputAndOnChange
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
ComboboxFinish
(
int32_t
aIndex
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
OnContentReset
(
)
;
NS_IMETHOD
AddOption
(
int32_t
index
)
final
;
NS_IMETHOD
RemoveOption
(
int32_t
index
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
DoneAddingChildren
(
bool
aIsDone
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
OnOptionSelected
(
int32_t
aIndex
bool
aSelected
)
final
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD_
(
void
)
OnSetSelectedIndex
(
int32_t
aOldIndex
int32_t
aNewIndex
)
final
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseDown
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseUp
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseMove
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DragMove
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
KeyDown
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
KeyPress
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
mozilla
:
:
dom
:
:
HTMLOptionsCollection
*
GetOptions
(
)
const
;
HTMLOptionElement
*
GetOption
(
uint32_t
aIndex
)
const
;
static
void
ComboboxFocusSet
(
)
;
bool
IsFocused
(
)
{
return
this
=
=
mFocused
;
}
void
PaintFocus
(
mozilla
:
:
gfx
:
:
DrawTarget
*
aDrawTarget
nsPoint
aPt
)
;
void
InvalidateFocus
(
)
;
nscoord
CalcBSizeOfARow
(
)
;
bool
MightNeedSecondPass
(
)
const
{
return
mMightNeedSecondPass
;
}
void
SetSuppressScrollbarUpdate
(
bool
aSuppress
)
{
nsHTMLScrollFrame
:
:
SetSuppressScrollbarUpdate
(
aSuppress
)
;
}
bool
IsInDropDownMode
(
)
const
;
uint32_t
GetNumDisplayRows
(
)
const
{
return
mNumDisplayRows
;
}
bool
GetDropdownCanGrow
(
)
const
{
return
mDropdownCanGrow
;
}
static
void
Shutdown
(
)
;
#
ifdef
ACCESSIBILITY
void
FireMenuItemActiveEvent
(
)
;
#
endif
protected
:
HTMLOptionElement
*
GetNonDisabledOptionFrom
(
int32_t
aFromIndex
int32_t
*
aFoundIndex
=
nullptr
)
;
MOZ_CAN_RUN_SCRIPT
bool
UpdateSelection
(
)
;
bool
GetMultiple
(
)
const
{
return
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
multiple
)
;
}
MOZ_CAN_RUN_SCRIPT
void
DropDownToggleKey
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
bool
IsOptionInteractivelySelectable
(
int32_t
aIndex
)
const
;
static
bool
IsOptionInteractivelySelectable
(
mozilla
:
:
dom
:
:
HTMLSelectElement
*
aSelect
mozilla
:
:
dom
:
:
HTMLOptionElement
*
aOption
)
;
MOZ_CAN_RUN_SCRIPT
void
ScrollToFrame
(
HTMLOptionElement
&
aOptElement
)
;
MOZ_CAN_RUN_SCRIPT
void
ScrollToIndex
(
int32_t
anIndex
)
;
bool
IgnoreMouseEventForSelection
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
void
UpdateInListState
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
void
AdjustIndexForDisabledOpt
(
int32_t
aStartIndex
int32_t
&
anNewIndex
int32_t
aNumOptions
int32_t
aDoAdjustInc
int32_t
aDoAdjustIncNext
)
;
MOZ_CAN_RUN_SCRIPT
void
ResetList
(
bool
aAllowScrolling
)
;
explicit
nsListControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
~
nsListControlFrame
(
)
;
nsresult
GetIndexFromDOMEvent
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
int32_t
&
aCurIndex
)
;
bool
CheckIfAllFramesHere
(
)
;
bool
IsLeftButton
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nscoord
CalcFallbackRowBSize
(
float
aFontSizeInflation
)
;
nscoord
CalcIntrinsicBSize
(
nscoord
aBSizeOfARow
int32_t
aNumberOfOptions
)
;
void
SetComboboxItem
(
int32_t
aIndex
)
;
void
ReflowAsDropdown
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
;
bool
SetOptionsSelectedFromFrame
(
int32_t
aStartIndex
int32_t
aEndIndex
bool
aValue
bool
aClearAll
)
;
bool
ToggleOptionSelectedFromFrame
(
int32_t
aIndex
)
;
MOZ_CAN_RUN_SCRIPT
bool
SingleSelection
(
int32_t
aClickedIndex
bool
aDoToggle
)
;
bool
ExtendedSelection
(
int32_t
aStartIndex
int32_t
aEndIndex
bool
aClearAll
)
;
MOZ_CAN_RUN_SCRIPT
bool
PerformSelection
(
int32_t
aClickedIndex
bool
aIsShift
bool
aIsControl
)
;
MOZ_CAN_RUN_SCRIPT
bool
HandleListSelection
(
mozilla
:
:
dom
:
:
Event
*
aDOMEvent
int32_t
selectedIndex
)
;
void
InitSelectionRange
(
int32_t
aClickedIndex
)
;
MOZ_CAN_RUN_SCRIPT
void
PostHandleKeyEvent
(
int32_t
aNewIndex
uint32_t
aCharCode
bool
aIsShift
bool
aIsControlOrMeta
)
;
public
:
nsSelectsAreaFrame
*
GetOptionsContainer
(
)
const
{
return
static_cast
<
nsSelectsAreaFrame
*
>
(
GetScrolledFrame
(
)
)
;
}
protected
:
nscoord
BSizeOfARow
(
)
{
return
GetOptionsContainer
(
)
-
>
BSizeOfARow
(
)
;
}
uint32_t
GetNumberOfRows
(
)
;
nsView
*
GetViewInternal
(
)
const
final
{
return
mView
;
}
void
SetViewInternal
(
nsView
*
aView
)
final
{
mView
=
aView
;
}
int32_t
mStartSelectionIndex
;
int32_t
mEndSelectionIndex
;
nsComboboxControlFrame
*
mComboboxFrame
;
nsView
*
mView
;
uint32_t
mNumDisplayRows
;
bool
mChangesSinceDragStart
:
1
;
bool
mButtonDown
:
1
;
bool
mItemSelectionStarted
:
1
;
bool
mIsAllContentHere
:
1
;
bool
mIsAllFramesHere
:
1
;
bool
mHasBeenInitialized
:
1
;
bool
mNeedToReset
:
1
;
bool
mPostChildrenLoadedReset
:
1
;
bool
mControlSelectMode
:
1
;
bool
mMightNeedSecondPass
:
1
;
bool
mHasPendingInterruptAtStartOfReflow
:
1
;
bool
mDropdownCanGrow
:
1
;
bool
mForceSelection
:
1
;
nscoord
mLastDropdownComputedBSize
;
nscolor
mLastDropdownBackstopColor
;
RefPtr
<
nsListEventListener
>
mEventListener
;
static
nsListControlFrame
*
mFocused
;
static
nsString
*
sIncrementalString
;
#
ifdef
DO_REFLOW_COUNTER
int32_t
mReflowId
;
#
endif
private
:
static
nsAString
&
GetIncrementalString
(
)
;
static
DOMTimeStamp
gLastKeyTime
;
class
MOZ_RAII
AutoIncrementalSearchResetter
{
public
:
AutoIncrementalSearchResetter
(
)
:
mCancelled
(
false
)
{
}
~
AutoIncrementalSearchResetter
(
)
{
if
(
!
mCancelled
)
{
nsListControlFrame
:
:
GetIncrementalString
(
)
.
Truncate
(
)
;
}
}
void
Cancel
(
)
{
mCancelled
=
true
;
}
private
:
bool
mCancelled
;
}
;
}
;
#
endif
