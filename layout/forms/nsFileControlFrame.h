#
ifndef
nsFileControlFrame_h___
#
define
nsFileControlFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsIFormControlFrame
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
class
FileList
;
class
BlobImpl
;
class
DataTransfer
;
}
}
class
nsFileControlFrame
final
:
public
nsBlockFrame
public
nsIFormControlFrame
public
nsIAnonymousContentCreator
{
using
Element
=
mozilla
:
:
dom
:
:
Element
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsFileControlFrame
)
explicit
nsFileControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
nsresult
SetFormProperty
(
nsAtom
*
aName
const
nsAString
&
aValue
)
override
;
virtual
void
SetFocus
(
bool
aOn
bool
aRepaint
)
override
;
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
virtual
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
#
ifdef
ACCESSIBILITY
virtual
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
typedef
bool
(
*
AcceptAttrCallback
)
(
const
nsAString
&
void
*
)
;
protected
:
class
MouseListener
;
friend
class
MouseListener
;
class
MouseListener
:
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
explicit
MouseListener
(
nsFileControlFrame
*
aFrame
)
:
mFrame
(
aFrame
)
{
}
void
ForgetFrame
(
)
{
mFrame
=
nullptr
;
}
protected
:
virtual
~
MouseListener
(
)
=
default
;
nsFileControlFrame
*
mFrame
;
}
;
class
DnDListener
:
public
MouseListener
{
public
:
explicit
DnDListener
(
nsFileControlFrame
*
aFrame
)
:
MouseListener
(
aFrame
)
{
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
HandleEvent
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
override
;
nsresult
GetBlobImplForWebkitDirectory
(
mozilla
:
:
dom
:
:
FileList
*
aFileList
mozilla
:
:
dom
:
:
BlobImpl
*
*
aBlobImpl
)
;
bool
IsValidDropData
(
mozilla
:
:
dom
:
:
DataTransfer
*
aDataTransfer
)
;
bool
CanDropTheseFiles
(
mozilla
:
:
dom
:
:
DataTransfer
*
aDataTransfer
bool
aSupportsMultiple
)
;
}
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsBlockFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
RefPtr
<
Element
>
mTextContent
;
RefPtr
<
Element
>
mBrowseFilesOrDirs
;
RefPtr
<
DnDListener
>
mMouseListener
;
protected
:
static
bool
CropTextToWidth
(
gfxContext
&
aRenderingContext
const
nsIFrame
*
aFrame
nscoord
aWidth
nsString
&
aText
)
;
void
UpdateDisplayedValue
(
const
nsAString
&
aValue
bool
aNotify
)
;
}
;
#
endif
