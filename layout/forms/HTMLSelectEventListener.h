#
ifndef
mozilla_HTMLSelectEventListener_h
#
define
mozilla_HTMLSelectEventListener_h
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
class
nsIFrame
;
class
nsListControlFrame
;
namespace
mozilla
{
namespace
dom
{
class
HTMLSelectElement
;
class
HTMLOptionElement
;
class
Event
;
}
class
HTMLSelectEventListener
final
:
public
nsStubMutationObserver
public
nsIDOMEventListener
{
public
:
enum
class
SelectType
:
uint8_t
{
Listbox
Combobox
}
;
HTMLSelectEventListener
(
dom
:
:
HTMLSelectElement
&
aElement
SelectType
aSelectType
)
:
mElement
(
&
aElement
)
mIsCombobox
(
aSelectType
=
=
SelectType
:
:
Combobox
)
{
Attach
(
)
;
}
NS_DECL_ISUPPORTS
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
HandleEvent
(
dom
:
:
Event
*
)
override
;
void
Attach
(
)
;
void
Detach
(
)
;
dom
:
:
HTMLOptionElement
*
GetCurrentOption
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
FireOnInputAndOnChange
(
)
;
private
:
int32_t
ItemsPerPage
(
)
const
;
nsListControlFrame
*
GetListControlFrame
(
)
const
;
MOZ_CAN_RUN_SCRIPT
nsresult
KeyDown
(
dom
:
:
Event
*
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
KeyPress
(
dom
:
:
Event
*
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseDown
(
dom
:
:
Event
*
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseUp
(
dom
:
:
Event
*
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MouseMove
(
dom
:
:
Event
*
)
;
void
AdjustIndexForDisabledOpt
(
int32_t
aStartIndex
int32_t
&
aNewIndex
int32_t
aNumOptions
int32_t
aDoAdjustInc
int32_t
aDoAdjustIncNext
)
;
bool
IsOptionInteractivelySelectable
(
uint32_t
aIndex
)
const
;
int32_t
GetEndSelectionIndex
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
PostHandleKeyEvent
(
int32_t
aNewIndex
uint32_t
aCharCode
bool
aIsShift
bool
aIsControlOrMeta
)
;
dom
:
:
HTMLOptionElement
*
GetNonDisabledOptionFrom
(
int32_t
aFromIndex
int32_t
*
aFoundIndex
=
nullptr
)
const
;
void
ComboboxMightHaveChanged
(
)
;
void
OptionValueMightHaveChanged
(
nsIContent
*
aMutatingNode
)
;
~
HTMLSelectEventListener
(
)
;
RefPtr
<
dom
:
:
HTMLSelectElement
>
mElement
;
const
bool
mIsCombobox
;
bool
mButtonDown
=
false
;
bool
mControlSelectMode
=
false
;
}
;
}
#
endif
