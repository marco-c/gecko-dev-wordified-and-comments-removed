#
include
"
nsSearchControlFrame
.
h
"
#
include
"
HTMLInputElement
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
AccTypes
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsIFrame
*
NS_NewSearchControlFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsSearchControlFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsSearchControlFrame
)
NS_QUERYFRAME_HEAD
(
nsSearchControlFrame
)
NS_QUERYFRAME_ENTRY
(
nsSearchControlFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsTextControlFrame
)
nsSearchControlFrame
:
:
nsSearchControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsTextControlFrame
(
aStyle
aPresContext
kClassID
)
{
}
void
nsSearchControlFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
aPostDestroyData
.
AddAnonymousContent
(
mClearButton
.
forget
(
)
)
;
nsTextControlFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
nsresult
nsSearchControlFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
mClearButton
=
MakeAnonElement
(
PseudoStyleType
:
:
mozSearchClearButton
nullptr
nsGkAtoms
:
:
button
)
;
aElements
.
AppendElement
(
mClearButton
)
;
nsTextControlFrame
:
:
CreateAnonymousContent
(
aElements
)
;
UpdateClearButtonState
(
)
;
return
NS_OK
;
}
void
nsSearchControlFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
{
if
(
mClearButton
)
{
aElements
.
AppendElement
(
mClearButton
)
;
}
nsTextControlFrame
:
:
AppendAnonymousContentTo
(
aElements
aFilter
)
;
}
void
nsSearchControlFrame
:
:
UpdateClearButtonState
(
)
{
if
(
!
mClearButton
)
{
return
;
}
auto
*
content
=
HTMLInputElement
:
:
FromNode
(
mContent
)
;
nsGenericHTMLElement
*
element
=
nsGenericHTMLElement
:
:
FromNode
(
mClearButton
)
;
nsCOMPtr
<
nsICSSDeclaration
>
declaration
=
element
-
>
Style
(
)
;
if
(
content
-
>
IsValueEmpty
(
)
)
{
declaration
-
>
SetProperty
(
"
visibility
"
_ns
"
hidden
"
_ns
"
"
_ns
IgnoreErrors
(
)
)
;
}
else
{
nsAutoCString
dummy
;
declaration
-
>
RemoveProperty
(
"
visibility
"
_ns
dummy
IgnoreErrors
(
)
)
;
}
}
