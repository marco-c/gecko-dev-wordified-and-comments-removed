#
ifndef
nsProgressFrame_h___
#
define
nsProgressFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
enum
class
PseudoStyleType
:
uint8_t
;
}
class
nsProgressFrame
final
:
public
nsContainerFrame
public
nsIAnonymousContentCreator
{
using
Element
=
mozilla
:
:
dom
:
:
Element
;
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsProgressFrame
)
explicit
nsProgressFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
~
nsProgressFrame
(
)
;
void
Destroy
(
DestroyContext
&
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
void
Reflow
(
nsPresContext
*
ReflowOutput
&
const
ReflowInput
&
nsReflowStatus
&
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
Progress
"
_ns
aResult
)
;
}
#
endif
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
nscoord
IntrinsicISize
(
const
mozilla
:
:
IntrinsicSizeInput
&
aInput
mozilla
:
:
IntrinsicISizeType
aType
)
override
;
bool
ShouldUseNativeStyle
(
)
const
;
protected
:
void
ReflowChildFrame
(
nsIFrame
*
aChild
nsPresContext
*
aPresContext
const
ReflowInput
&
aReflowInput
const
mozilla
:
:
LogicalSize
&
aParentContentBoxSize
nsReflowStatus
&
aStatus
)
;
nsCOMPtr
<
Element
>
mBarDiv
;
}
;
#
endif
