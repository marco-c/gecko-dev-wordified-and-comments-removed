#
include
"
nsNumberControlFrame
.
h
"
#
include
"
HTMLInputElement
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
FloatingPoint
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
mozilla
/
a11y
/
AccTypes
.
h
"
#
endif
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsIFrame
*
NS_NewNumberControlFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsNumberControlFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsNumberControlFrame
)
NS_QUERYFRAME_HEAD
(
nsNumberControlFrame
)
NS_QUERYFRAME_ENTRY
(
nsNumberControlFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsTextControlFrame
)
nsNumberControlFrame
:
:
nsNumberControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsTextControlFrame
(
aStyle
aPresContext
kClassID
)
{
}
nsresult
nsNumberControlFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
nsTextControlFrame
:
:
CreateAnonymousContent
(
aElements
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
return
NS_OK
;
#
else
if
(
StyleDisplay
(
)
-
>
EffectiveAppearance
(
)
=
=
StyleAppearance
:
:
Textfield
)
{
return
NS_OK
;
}
mButton
=
MakeAnonElement
(
PseudoStyleType
:
:
mozNumberSpinBox
)
;
mSpinUp
=
MakeAnonElement
(
PseudoStyleType
:
:
mozNumberSpinUp
mButton
)
;
mSpinDown
=
MakeAnonElement
(
PseudoStyleType
:
:
mozNumberSpinDown
mButton
)
;
aElements
.
AppendElement
(
mButton
)
;
return
NS_OK
;
#
endif
}
nsNumberControlFrame
*
nsNumberControlFrame
:
:
GetNumberControlFrameForSpinButton
(
nsIFrame
*
aFrame
)
{
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
auto
*
nacHost
=
content
-
>
GetClosestNativeAnonymousSubtreeRootParentOrHost
(
)
;
if
(
!
nacHost
)
{
return
nullptr
;
}
auto
*
input
=
HTMLInputElement
:
:
FromNode
(
nacHost
)
;
if
(
!
input
|
|
input
-
>
ControlType
(
)
!
=
FormControlType
:
:
InputNumber
)
{
return
nullptr
;
}
return
do_QueryFrame
(
input
-
>
GetPrimaryFrame
(
)
)
;
}
int32_t
nsNumberControlFrame
:
:
GetSpinButtonForPointerEvent
(
WidgetGUIEvent
*
aEvent
)
const
{
MOZ_ASSERT
(
aEvent
-
>
mClass
=
=
eMouseEventClass
"
Unexpected
event
type
"
)
;
if
(
!
mButton
)
{
return
eSpinButtonNone
;
}
if
(
aEvent
-
>
mOriginalTarget
=
=
mSpinUp
)
{
return
eSpinButtonUp
;
}
if
(
aEvent
-
>
mOriginalTarget
=
=
mSpinDown
)
{
return
eSpinButtonDown
;
}
if
(
aEvent
-
>
mOriginalTarget
=
=
mButton
)
{
LayoutDeviceIntPoint
absPoint
=
aEvent
-
>
mRefPoint
;
nsPoint
point
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
absPoint
RelativeTo
{
mButton
-
>
GetPrimaryFrame
(
)
}
)
;
if
(
point
!
=
nsPoint
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
)
{
if
(
point
.
y
<
mButton
-
>
GetPrimaryFrame
(
)
-
>
GetSize
(
)
.
height
/
2
)
{
return
eSpinButtonUp
;
}
return
eSpinButtonDown
;
}
}
return
eSpinButtonNone
;
}
void
nsNumberControlFrame
:
:
SpinnerStateChanged
(
)
const
{
if
(
mSpinUp
)
{
nsIFrame
*
spinUpFrame
=
mSpinUp
-
>
GetPrimaryFrame
(
)
;
if
(
spinUpFrame
&
&
spinUpFrame
-
>
IsThemed
(
)
)
{
spinUpFrame
-
>
InvalidateFrame
(
)
;
}
}
if
(
mSpinDown
)
{
nsIFrame
*
spinDownFrame
=
mSpinDown
-
>
GetPrimaryFrame
(
)
;
if
(
spinDownFrame
&
&
spinDownFrame
-
>
IsThemed
(
)
)
{
spinDownFrame
-
>
InvalidateFrame
(
)
;
}
}
}
bool
nsNumberControlFrame
:
:
SpinnerUpButtonIsDepressed
(
)
const
{
return
HTMLInputElement
:
:
FromNode
(
mContent
)
-
>
NumberSpinnerUpButtonIsDepressed
(
)
;
}
bool
nsNumberControlFrame
:
:
SpinnerDownButtonIsDepressed
(
)
const
{
return
HTMLInputElement
:
:
FromNode
(
mContent
)
-
>
NumberSpinnerDownButtonIsDepressed
(
)
;
}
#
ifdef
ACCESSIBILITY
a11y
:
:
AccType
nsNumberControlFrame
:
:
AccessibleType
(
)
{
return
a11y
:
:
eHTMLSpinnerType
;
}
#
endif
