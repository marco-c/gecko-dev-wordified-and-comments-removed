#
include
"
nsGfxButtonControlFrame
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
mozilla
/
StyleSetHandleInlines
.
h
"
#
include
"
mozilla
/
dom
/
HTMLInputElement
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsIDOMHTMLInputElement
.
h
"
#
include
"
nsTextNode
.
h
"
using
namespace
mozilla
;
nsGfxButtonControlFrame
:
:
nsGfxButtonControlFrame
(
nsStyleContext
*
aContext
)
:
nsHTMLButtonControlFrame
(
aContext
kClassID
)
{
}
nsContainerFrame
*
NS_NewGfxButtonControlFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
return
new
(
aPresShell
)
nsGfxButtonControlFrame
(
aContext
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsGfxButtonControlFrame
)
void
nsGfxButtonControlFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
{
nsContentUtils
:
:
DestroyAnonymousContent
(
&
mTextContent
)
;
nsHTMLButtonControlFrame
:
:
DestroyFrom
(
aDestructRoot
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsGfxButtonControlFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ButtonControl
"
)
aResult
)
;
}
#
endif
nsresult
nsGfxButtonControlFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
nsAutoString
label
;
nsresult
rv
=
GetLabel
(
label
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mTextContent
=
new
nsTextNode
(
mContent
-
>
NodeInfo
(
)
-
>
NodeInfoManager
(
)
)
;
mTextContent
-
>
SetText
(
label
false
)
;
aElements
.
AppendElement
(
mTextContent
)
;
return
NS_OK
;
}
void
nsGfxButtonControlFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
{
if
(
mTextContent
)
{
aElements
.
AppendElement
(
mTextContent
)
;
}
}
NS_QUERYFRAME_HEAD
(
nsGfxButtonControlFrame
)
NS_QUERYFRAME_ENTRY
(
nsIAnonymousContentCreator
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsHTMLButtonControlFrame
)
nsresult
nsGfxButtonControlFrame
:
:
GetDefaultLabel
(
nsAString
&
aString
)
const
{
nsCOMPtr
<
nsIFormControl
>
form
=
do_QueryInterface
(
mContent
)
;
NS_ENSURE_TRUE
(
form
NS_ERROR_UNEXPECTED
)
;
int32_t
type
=
form
-
>
ControlType
(
)
;
const
char
*
prop
;
if
(
type
=
=
NS_FORM_INPUT_RESET
)
{
prop
=
"
Reset
"
;
}
else
if
(
type
=
=
NS_FORM_INPUT_SUBMIT
)
{
prop
=
"
Submit
"
;
}
else
{
aString
.
Truncate
(
)
;
return
NS_OK
;
}
return
nsContentUtils
:
:
GetLocalizedString
(
nsContentUtils
:
:
eFORMS_PROPERTIES
prop
aString
)
;
}
nsresult
nsGfxButtonControlFrame
:
:
GetLabel
(
nsString
&
aLabel
)
{
dom
:
:
HTMLInputElement
*
elt
=
dom
:
:
HTMLInputElement
:
:
FromContent
(
mContent
)
;
if
(
mContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
value
)
&
&
elt
)
{
elt
-
>
GetValue
(
aLabel
dom
:
:
CallerType
:
:
System
)
;
}
else
{
nsresult
rv
;
rv
=
GetDefaultLabel
(
aLabel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
if
(
!
StyleText
(
)
-
>
WhiteSpaceIsSignificant
(
)
)
{
aLabel
.
CompressWhitespace
(
)
;
}
else
if
(
aLabel
.
Length
(
)
>
2
&
&
aLabel
.
First
(
)
=
=
'
'
&
&
aLabel
.
CharAt
(
aLabel
.
Length
(
)
-
1
)
=
=
'
'
)
{
aLabel
.
Cut
(
0
1
)
;
aLabel
.
Truncate
(
aLabel
.
Length
(
)
-
1
)
;
}
return
NS_OK
;
}
nsresult
nsGfxButtonControlFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
nsresult
rv
=
NS_OK
;
if
(
nsGkAtoms
:
:
value
=
=
aAttribute
)
{
if
(
mTextContent
&
&
mContent
)
{
nsAutoString
label
;
rv
=
GetLabel
(
label
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mTextContent
-
>
SetText
(
label
true
)
;
}
else
{
rv
=
NS_ERROR_UNEXPECTED
;
}
}
else
{
rv
=
nsHTMLButtonControlFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
return
rv
;
}
nsContainerFrame
*
nsGfxButtonControlFrame
:
:
GetContentInsertionFrame
(
)
{
return
this
;
}
nsresult
nsGfxButtonControlFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
const
nsStyleUserInterface
*
uiStyle
=
StyleUserInterface
(
)
;
if
(
uiStyle
-
>
mUserInput
=
=
StyleUserInput
:
:
None
|
|
uiStyle
-
>
mUserInput
=
=
StyleUserInput
:
:
Disabled
)
{
return
nsFrame
:
:
HandleEvent
(
aPresContext
aEvent
aEventStatus
)
;
}
return
NS_OK
;
}
