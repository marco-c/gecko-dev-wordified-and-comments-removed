#
include
"
nsComboboxControlFrame
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsIFormControl
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsListControlFrame
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsISelectControlFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
HTMLSelectElement
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsITheme
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsTextFrameUtils
.
h
"
#
include
"
nsTextRunTransformations
.
h
"
#
include
"
HTMLSelectEventListener
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
<
algorithm
>
#
include
"
nsTextNode
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
PresShellInlines
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
gfx
;
NS_IMETHODIMP
nsComboboxControlFrame
:
:
RedisplayTextEvent
:
:
Run
(
)
{
if
(
mControlFrame
)
mControlFrame
-
>
HandleRedisplayTextEvent
(
)
;
return
NS_OK
;
}
nsComboboxControlFrame
*
NS_NewComboboxControlFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
nsComboboxControlFrame
*
it
=
new
(
aPresShell
)
nsComboboxControlFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
return
it
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsComboboxControlFrame
)
nsComboboxControlFrame
:
:
nsComboboxControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsHTMLButtonControlFrame
(
aStyle
aPresContext
kClassID
)
{
}
nsComboboxControlFrame
:
:
~
nsComboboxControlFrame
(
)
=
default
;
NS_QUERYFRAME_HEAD
(
nsComboboxControlFrame
)
NS_QUERYFRAME_ENTRY
(
nsComboboxControlFrame
)
NS_QUERYFRAME_ENTRY
(
nsIAnonymousContentCreator
)
NS_QUERYFRAME_ENTRY
(
nsISelectControlFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsHTMLButtonControlFrame
)
#
ifdef
ACCESSIBILITY
a11y
:
:
AccType
nsComboboxControlFrame
:
:
AccessibleType
(
)
{
return
a11y
:
:
eHTMLComboboxType
;
}
#
endif
bool
nsComboboxControlFrame
:
:
HasDropDownButton
(
)
const
{
const
nsStyleDisplay
*
disp
=
StyleDisplay
(
)
;
return
disp
-
>
EffectiveAppearance
(
)
=
=
StyleAppearance
:
:
Menulist
&
&
(
!
IsThemed
(
disp
)
|
|
PresContext
(
)
-
>
Theme
(
)
-
>
ThemeNeedsComboboxDropmarker
(
)
)
;
}
nscoord
nsComboboxControlFrame
:
:
DropDownButtonISize
(
)
{
if
(
!
HasDropDownButton
(
)
)
{
return
0
;
}
nsPresContext
*
pc
=
PresContext
(
)
;
LayoutDeviceIntSize
dropdownButtonSize
=
pc
-
>
Theme
(
)
-
>
GetMinimumWidgetSize
(
pc
this
StyleAppearance
:
:
MozMenulistArrowButton
)
;
return
pc
-
>
DevPixelsToAppUnits
(
dropdownButtonSize
.
width
)
;
}
int32_t
nsComboboxControlFrame
:
:
CharCountOfLargestOptionForInflation
(
)
const
{
uint32_t
maxLength
=
0
;
nsAutoString
label
;
for
(
auto
i
:
IntegerRange
(
Select
(
)
.
Options
(
)
-
>
Length
(
)
)
)
{
GetOptionText
(
i
label
)
;
maxLength
=
std
:
:
max
(
maxLength
nsTextFrameUtils
:
:
ComputeApproximateLengthWithWhitespaceCompression
(
label
StyleText
(
)
)
)
;
}
if
(
MOZ_UNLIKELY
(
maxLength
>
uint32_t
(
INT32_MAX
)
)
)
{
return
INT32_MAX
;
}
return
int32_t
(
maxLength
)
;
}
nscoord
nsComboboxControlFrame
:
:
GetLongestOptionISize
(
gfxContext
*
aRenderingContext
)
const
{
nscoord
maxOptionSize
=
0
;
nsAutoString
label
;
nsAutoString
transformedLabel
;
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetInflatedFontMetricsForFrame
(
this
)
;
const
nsStyleText
*
textStyle
=
StyleText
(
)
;
auto
textTransform
=
textStyle
-
>
mTextTransform
.
IsNone
(
)
?
Nothing
(
)
:
Some
(
textStyle
-
>
mTextTransform
)
;
nsAtom
*
language
=
StyleFont
(
)
-
>
mLanguage
;
AutoTArray
<
bool
50
>
charsToMergeArray
;
AutoTArray
<
bool
50
>
deletedCharsArray
;
for
(
auto
i
:
IntegerRange
(
Select
(
)
.
Options
(
)
-
>
Length
(
)
)
)
{
GetOptionText
(
i
label
)
;
const
nsAutoString
*
stringToUse
=
&
label
;
if
(
textTransform
|
|
textStyle
-
>
mWebkitTextSecurity
!
=
StyleTextSecurity
:
:
None
)
{
transformedLabel
.
Truncate
(
)
;
charsToMergeArray
.
SetLengthAndRetainStorage
(
0
)
;
deletedCharsArray
.
SetLengthAndRetainStorage
(
0
)
;
nsCaseTransformTextRunFactory
:
:
TransformString
(
label
transformedLabel
textTransform
textStyle
-
>
TextSecurityMaskChar
(
)
false
language
charsToMergeArray
deletedCharsArray
)
;
stringToUse
=
&
transformedLabel
;
}
maxOptionSize
=
std
:
:
max
(
maxOptionSize
nsLayoutUtils
:
:
AppUnitWidthOfStringBidi
(
*
stringToUse
this
*
fm
*
aRenderingContext
)
)
;
}
if
(
maxOptionSize
)
{
maxOptionSize
+
=
1
;
}
return
maxOptionSize
;
}
nscoord
nsComboboxControlFrame
:
:
GetIntrinsicISize
(
gfxContext
*
aRenderingContext
IntrinsicISizeType
aType
)
{
Maybe
<
nscoord
>
containISize
=
ContainIntrinsicISize
(
NS_UNCONSTRAINEDSIZE
)
;
if
(
containISize
&
&
*
containISize
!
=
NS_UNCONSTRAINEDSIZE
)
{
return
*
containISize
;
}
nscoord
displayISize
=
0
;
if
(
!
containISize
&
&
!
StyleContent
(
)
-
>
mContent
.
IsNone
(
)
)
{
displayISize
+
=
GetLongestOptionISize
(
aRenderingContext
)
;
}
displayISize
+
=
DropDownButtonISize
(
)
;
return
displayISize
;
}
nscoord
nsComboboxControlFrame
:
:
GetMinISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
minISize
;
minISize
=
GetIntrinsicISize
(
aRenderingContext
IntrinsicISizeType
:
:
MinISize
)
;
return
minISize
;
}
nscoord
nsComboboxControlFrame
:
:
GetPrefISize
(
gfxContext
*
aRenderingContext
)
{
nscoord
prefISize
;
prefISize
=
GetIntrinsicISize
(
aRenderingContext
IntrinsicISizeType
:
:
PrefISize
)
;
return
prefISize
;
}
dom
:
:
HTMLSelectElement
&
nsComboboxControlFrame
:
:
Select
(
)
const
{
return
*
static_cast
<
dom
:
:
HTMLSelectElement
*
>
(
GetContent
(
)
)
;
}
void
nsComboboxControlFrame
:
:
GetOptionText
(
uint32_t
aIndex
nsAString
&
aText
)
const
{
aText
.
Truncate
(
)
;
if
(
Element
*
el
=
Select
(
)
.
Options
(
)
-
>
GetElementAt
(
aIndex
)
)
{
static_cast
<
dom
:
:
HTMLOptionElement
*
>
(
el
)
-
>
GetRenderedLabel
(
aText
)
;
}
}
void
nsComboboxControlFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
mDisplayedIndex
=
Select
(
)
.
SelectedIndex
(
)
;
RedisplayText
(
)
;
WritingMode
wm
=
aReflowInput
.
GetWritingMode
(
)
;
const
nscoord
buttonISize
=
DropDownButtonISize
(
)
;
const
auto
padding
=
aReflowInput
.
ComputedLogicalPadding
(
wm
)
;
mDisplayISize
=
aReflowInput
.
ComputedISize
(
)
-
buttonISize
;
if
(
buttonISize
)
{
mDisplayISize
+
=
padding
.
IEnd
(
wm
)
;
}
nsHTMLButtonControlFrame
:
:
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
}
void
nsComboboxControlFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsHTMLButtonControlFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mEventListener
=
new
HTMLSelectEventListener
(
Select
(
)
HTMLSelectEventListener
:
:
SelectType
:
:
Combobox
)
;
}
nsresult
nsComboboxControlFrame
:
:
RedisplaySelectedText
(
)
{
nsAutoScriptBlocker
scriptBlocker
;
mDisplayedIndex
=
Select
(
)
.
SelectedIndex
(
)
;
return
RedisplayText
(
)
;
}
nsresult
nsComboboxControlFrame
:
:
RedisplayText
(
)
{
nsString
previewValue
;
nsString
previousText
(
mDisplayedOptionTextOrPreview
)
;
Select
(
)
.
GetPreviewValue
(
previewValue
)
;
if
(
!
previewValue
.
IsEmpty
(
)
)
{
mDisplayedOptionTextOrPreview
=
previewValue
;
}
else
if
(
mDisplayedIndex
!
=
-
1
&
&
!
StyleContent
(
)
-
>
mContent
.
IsNone
(
)
)
{
GetOptionText
(
mDisplayedIndex
mDisplayedOptionTextOrPreview
)
;
}
else
{
mDisplayedOptionTextOrPreview
.
Truncate
(
)
;
}
nsresult
rv
=
NS_OK
;
if
(
!
previousText
.
Equals
(
mDisplayedOptionTextOrPreview
)
)
{
mRedisplayTextEvent
.
Revoke
(
)
;
NS_ASSERTION
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
If
we
happen
to
run
our
redisplay
event
now
we
might
kill
"
"
ourselves
!
"
)
;
mRedisplayTextEvent
=
new
RedisplayTextEvent
(
this
)
;
nsContentUtils
:
:
AddScriptRunner
(
mRedisplayTextEvent
.
get
(
)
)
;
}
return
rv
;
}
void
nsComboboxControlFrame
:
:
HandleRedisplayTextEvent
(
)
{
AutoWeakFrame
weakThis
(
this
)
;
PresContext
(
)
-
>
Document
(
)
-
>
FlushPendingNotifications
(
FlushType
:
:
ContentAndNotify
)
;
if
(
!
weakThis
.
IsAlive
(
)
)
{
return
;
}
mRedisplayTextEvent
.
Forget
(
)
;
ActuallyDisplayText
(
true
)
;
}
void
nsComboboxControlFrame
:
:
ActuallyDisplayText
(
bool
aNotify
)
{
RefPtr
<
dom
:
:
Text
>
displayContent
=
mDisplayLabel
-
>
GetFirstChild
(
)
-
>
AsText
(
)
;
displayContent
-
>
SetText
(
mDisplayedOptionTextOrPreview
.
IsEmpty
(
)
?
u
"
\
ufeff
"
_ns
:
mDisplayedOptionTextOrPreview
aNotify
)
;
}
bool
nsComboboxControlFrame
:
:
IsDroppedDown
(
)
const
{
return
Select
(
)
.
OpenInParentProcess
(
)
;
}
NS_IMETHODIMP
nsComboboxControlFrame
:
:
DoneAddingChildren
(
bool
aIsDone
)
{
return
NS_OK
;
}
NS_IMETHODIMP
nsComboboxControlFrame
:
:
AddOption
(
int32_t
aIndex
)
{
if
(
aIndex
<
=
mDisplayedIndex
)
{
+
+
mDisplayedIndex
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsComboboxControlFrame
:
:
RemoveOption
(
int32_t
aIndex
)
{
if
(
Select
(
)
.
Options
(
)
-
>
Length
(
)
)
{
if
(
aIndex
<
mDisplayedIndex
)
{
-
-
mDisplayedIndex
;
}
else
if
(
aIndex
=
=
mDisplayedIndex
)
{
mDisplayedIndex
=
0
;
RedisplayText
(
)
;
}
}
else
{
mDisplayedIndex
=
-
1
;
RedisplayText
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP_
(
void
)
nsComboboxControlFrame
:
:
OnSetSelectedIndex
(
int32_t
aOldIndex
int32_t
aNewIndex
)
{
nsAutoScriptBlocker
scriptBlocker
;
mDisplayedIndex
=
aNewIndex
;
RedisplayText
(
)
;
}
nsresult
nsComboboxControlFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
NS_ENSURE_ARG_POINTER
(
aEventStatus
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aEventStatus
)
{
return
NS_OK
;
}
return
nsHTMLButtonControlFrame
:
:
HandleEvent
(
aPresContext
aEvent
aEventStatus
)
;
}
nsresult
nsComboboxControlFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
dom
:
:
Document
*
doc
=
mContent
-
>
OwnerDoc
(
)
;
mDisplayLabel
=
doc
-
>
CreateHTMLElement
(
nsGkAtoms
:
:
label
)
;
{
RefPtr
<
nsTextNode
>
text
=
doc
-
>
CreateEmptyTextNode
(
)
;
mDisplayLabel
-
>
AppendChildTo
(
text
false
IgnoreErrors
(
)
)
;
}
mDisplayedIndex
=
Select
(
)
.
SelectedIndex
(
)
;
if
(
mDisplayedIndex
!
=
-
1
)
{
GetOptionText
(
mDisplayedIndex
mDisplayedOptionTextOrPreview
)
;
}
ActuallyDisplayText
(
false
)
;
aElements
.
AppendElement
(
mDisplayLabel
)
;
if
(
HasDropDownButton
(
)
)
{
mButtonContent
=
mContent
-
>
OwnerDoc
(
)
-
>
CreateHTMLElement
(
nsGkAtoms
:
:
button
)
;
{
RefPtr
<
nsTextNode
>
text
=
doc
-
>
CreateTextNode
(
u
"
\
ufeff
"
_ns
)
;
mButtonContent
-
>
AppendChildTo
(
text
false
IgnoreErrors
(
)
)
;
}
mButtonContent
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
type
u
"
button
"
_ns
false
)
;
mButtonContent
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
tabindex
u
"
-
1
"
_ns
false
)
;
aElements
.
AppendElement
(
mButtonContent
)
;
}
return
NS_OK
;
}
void
nsComboboxControlFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
{
if
(
mDisplayLabel
)
{
aElements
.
AppendElement
(
mDisplayLabel
)
;
}
if
(
mButtonContent
)
{
aElements
.
AppendElement
(
mButtonContent
)
;
}
}
namespace
mozilla
{
class
ComboboxLabelFrame
final
:
public
nsBlockFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
ComboboxLabelFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
final
{
return
MakeFrameName
(
u
"
ComboboxLabel
"
_ns
aResult
)
;
}
#
endif
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
final
;
public
:
ComboboxLabelFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBlockFrame
(
aStyle
aPresContext
kClassID
)
{
}
}
;
NS_QUERYFRAME_HEAD
(
ComboboxLabelFrame
)
NS_QUERYFRAME_ENTRY
(
ComboboxLabelFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBlockFrame
)
NS_IMPL_FRAMEARENA_HELPERS
(
ComboboxLabelFrame
)
void
ComboboxLabelFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
const
nsComboboxControlFrame
*
combobox
=
do_QueryFrame
(
GetParent
(
)
-
>
GetParent
(
)
)
;
MOZ_ASSERT
(
combobox
"
Combobox
'
s
frame
tree
is
wrong
!
"
)
;
MOZ_ASSERT
(
aReflowInput
.
ComputedPhysicalBorderPadding
(
)
=
=
nsMargin
(
)
"
We
shouldn
'
t
have
border
and
padding
in
UA
!
"
)
;
ReflowInput
state
(
aReflowInput
)
;
state
.
SetComputedISize
(
combobox
-
>
mDisplayISize
)
;
nsBlockFrame
:
:
Reflow
(
aPresContext
aDesiredSize
state
aStatus
)
;
aStatus
.
Reset
(
)
;
}
}
nsIFrame
*
NS_NewComboboxLabelFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
ComboboxLabelFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
void
nsComboboxControlFrame
:
:
Destroy
(
DestroyContext
&
aContext
)
{
mRedisplayTextEvent
.
Revoke
(
)
;
mEventListener
-
>
Detach
(
)
;
aContext
.
AddAnonymousContent
(
mDisplayLabel
.
forget
(
)
)
;
aContext
.
AddAnonymousContent
(
mButtonContent
.
forget
(
)
)
;
nsHTMLButtonControlFrame
:
:
Destroy
(
aContext
)
;
}
NS_IMETHODIMP
nsComboboxControlFrame
:
:
OnOptionSelected
(
int32_t
aIndex
bool
aSelected
)
{
if
(
aSelected
)
{
nsAutoScriptBlocker
blocker
;
mDisplayedIndex
=
aIndex
;
RedisplayText
(
)
;
}
else
{
AutoWeakFrame
weakFrame
(
this
)
;
RedisplaySelectedText
(
)
;
if
(
weakFrame
.
IsAlive
(
)
)
{
FireValueChangeEvent
(
)
;
}
}
return
NS_OK
;
}
void
nsComboboxControlFrame
:
:
FireValueChangeEvent
(
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
AsyncEventDispatcher
(
mContent
u
"
ValueChange
"
_ns
CanBubble
:
:
eYes
ChromeOnlyDispatch
:
:
eNo
)
)
;
}
