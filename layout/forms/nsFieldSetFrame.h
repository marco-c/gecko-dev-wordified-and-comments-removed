#
ifndef
nsFieldSetFrame_h___
#
define
nsFieldSetFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
ImgDrawResult
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
class
nsFieldSetFrame
final
:
public
nsContainerFrame
{
typedef
mozilla
:
:
image
:
:
ImgDrawResult
ImgDrawResult
;
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsFieldSetFrame
)
NS_DECL_QUERYFRAME
explicit
nsFieldSetFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
nscoord
GetIntrinsicISize
(
gfxContext
*
aRenderingContext
mozilla
:
:
IntrinsicISizeType
)
;
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nsRect
VisualBorderRectRelativeToSelf
(
)
const
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
nscoord
GetLogicalBaseline
(
mozilla
:
:
WritingMode
aWM
)
const
override
;
bool
GetVerticalAlignBaseline
(
mozilla
:
:
WritingMode
aWM
nscoord
*
aBaseline
)
const
override
;
bool
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
nscoord
*
aBaseline
)
const
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
ImgDrawResult
PaintBorder
(
nsDisplayListBuilder
*
aBuilder
gfxContext
&
aRenderingContext
nsPoint
aPt
const
nsRect
&
aDirtyRect
)
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
;
#
ifdef
DEBUG
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
#
endif
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
nsIFrame
:
:
eCanContainOverflowContainers
)
;
}
nsIScrollableFrame
*
GetScrollTargetFrame
(
)
const
override
;
void
AppendDirectlyOwnedAnonBoxes
(
nsTArray
<
OwnedAnonBox
>
&
aResult
)
override
;
#
ifdef
ACCESSIBILITY
virtual
mozilla
:
:
a11y
:
:
AccType
AccessibleType
(
)
override
;
#
endif
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
FieldSet
"
_ns
aResult
)
;
}
#
endif
nsContainerFrame
*
GetInner
(
)
const
;
nsIFrame
*
GetLegend
(
)
const
;
nscoord
LegendSpace
(
)
const
{
return
mLegendSpace
;
}
protected
:
void
EnsureChildContinuation
(
nsIFrame
*
aChild
const
nsReflowStatus
&
aStatus
)
;
mozilla
:
:
LogicalRect
mLegendRect
;
nscoord
mLegendSpace
;
}
;
#
endif
