#
ifndef
nsCheckboxRadioFrame_h___
#
define
nsCheckboxRadioFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsAtomicContainerFrame
.
h
"
#
include
"
nsDisplayList
.
h
"
class
nsCheckboxRadioFrame
final
:
public
nsAtomicContainerFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsCheckboxRadioFrame
)
explicit
nsCheckboxRadioFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
nscoord
IntrinsicISize
(
gfxContext
*
aContext
mozilla
:
:
IntrinsicISizeType
aType
)
override
;
mozilla
:
:
LogicalSize
ComputeAutoSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorderPadding
const
mozilla
:
:
StyleSizeOverrides
&
aSizeOverrides
mozilla
:
:
ComputeSizeFlags
aFlags
)
override
;
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
Maybe
<
nscoord
>
GetNaturalBaselineBOffset
(
mozilla
:
:
WritingMode
aWM
BaselineSharingGroup
aBaselineGroup
BaselineExportContext
)
const
override
;
void
Reflow
(
nsPresContext
*
aCX
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
CheckboxRadio
"
_ns
aResult
)
;
}
#
endif
protected
:
virtual
~
nsCheckboxRadioFrame
(
)
;
nscoord
DefaultSize
(
)
;
}
;
#
endif
