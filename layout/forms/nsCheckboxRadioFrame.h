#
ifndef
nsCheckboxRadioFrame_h___
#
define
nsCheckboxRadioFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIFormControlFrame
.
h
"
#
include
"
nsAtomicContainerFrame
.
h
"
#
include
"
nsDisplayList
.
h
"
class
nsCheckboxRadioFrame
final
:
public
nsAtomicContainerFrame
public
nsIFormControlFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsCheckboxRadioFrame
)
explicit
nsCheckboxRadioFrame
(
nsStyleContext
*
aContext
)
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsAtomicContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
{
DO_GLOBAL_REFLOW_COUNT_DSP
(
"
nsCheckboxRadioFrame
"
)
;
DisplayBorderBackgroundOutline
(
aBuilder
aLists
)
;
}
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
mozilla
:
:
LogicalSize
ComputeAutoSize
(
gfxContext
*
aRenderingContext
mozilla
:
:
WritingMode
aWM
const
mozilla
:
:
LogicalSize
&
aCBSize
nscoord
aAvailableISize
const
mozilla
:
:
LogicalSize
&
aMargin
const
mozilla
:
:
LogicalSize
&
aBorder
const
mozilla
:
:
LogicalSize
&
aPadding
ComputeSizeFlags
aFlags
)
override
;
virtual
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
virtual
nscoord
GetLogicalBaseline
(
mozilla
:
:
WritingMode
aWritingMode
)
const
override
;
virtual
void
Reflow
(
nsPresContext
*
aCX
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
override
;
virtual
void
SetFocus
(
bool
aOn
=
true
bool
aRepaint
=
false
)
override
;
virtual
nsresult
SetFormProperty
(
nsAtom
*
aName
const
nsAString
&
aValue
)
override
;
static
nsresult
RegUnRegAccessKey
(
nsIFrame
*
aFrame
bool
aDoReg
)
;
static
nsRect
GetUsableScreenRect
(
nsPresContext
*
aPresContext
)
;
protected
:
virtual
~
nsCheckboxRadioFrame
(
)
;
static
nscoord
DefaultSize
(
)
{
return
nsPresContext
:
:
CSSPixelsToAppUnits
(
9
)
;
}
void
GetCurrentCheckState
(
bool
*
aState
)
;
}
;
#
endif
