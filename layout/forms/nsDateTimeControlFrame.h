#
ifndef
nsDateTimeControlFrame_h__
#
define
nsDateTimeControlFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsCOMPtr
.
h
"
namespace
mozilla
{
namespace
dom
{
struct
DateTimeValue
;
}
}
class
nsDateTimeControlFrame
final
:
public
nsContainerFrame
{
typedef
mozilla
:
:
dom
:
:
DateTimeValue
DateTimeValue
;
explicit
nsDateTimeControlFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
public
:
friend
nsIFrame
*
NS_NewDateTimeControlFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
void
ContentStatesChanged
(
mozilla
:
:
EventStates
aStates
)
override
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsDateTimeControlFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
DateTimeControl
"
)
aResult
)
;
}
#
endif
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
)
)
;
}
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
private
:
class
SyncDisabledStateEvent
;
friend
class
SyncDisabledStateEvent
;
class
SyncDisabledStateEvent
:
public
mozilla
:
:
Runnable
{
public
:
explicit
SyncDisabledStateEvent
(
nsDateTimeControlFrame
*
aFrame
)
:
mozilla
:
:
Runnable
(
"
nsDateTimeControlFrame
:
:
SyncDisabledStateEvent
"
)
mFrame
(
aFrame
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsDateTimeControlFrame
*
frame
=
static_cast
<
nsDateTimeControlFrame
*
>
(
mFrame
.
GetFrame
(
)
)
;
NS_ENSURE_STATE
(
frame
)
;
frame
-
>
SyncDisabledState
(
)
;
return
NS_OK
;
}
private
:
WeakFrame
mFrame
;
}
;
void
SyncDisabledState
(
)
;
}
;
#
endif
