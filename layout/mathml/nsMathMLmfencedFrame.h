#
ifndef
nsMathMLmfencedFrame_h
#
define
nsMathMLmfencedFrame_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsMathMLContainerFrame
.
h
"
class
nsFontMetrics
;
class
nsMathMLmfencedFrame
final
:
public
nsMathMLContainerFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmfencedFrame
)
friend
nsIFrame
*
NS_NewMathMLmfencedFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
virtual
void
SetAdditionalStyleContext
(
int32_t
aIndex
nsStyleContext
*
aStyleContext
)
override
;
virtual
nsStyleContext
*
GetAdditionalStyleContext
(
int32_t
aIndex
)
const
override
;
NS_IMETHOD
InheritAutomaticData
(
nsIFrame
*
aParent
)
override
;
virtual
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
void
GetIntrinsicISizeMetrics
(
gfxContext
*
aRenderingContext
ReflowOutput
&
aDesiredSize
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
nsresult
ChildListChanged
(
int32_t
aModType
)
override
;
virtual
nscoord
FixInterFrameSpacing
(
ReflowOutput
&
aDesiredSize
)
override
;
nsresult
ReflowChar
(
DrawTarget
*
aDrawTarget
nsFontMetrics
&
aFontMetrics
float
aFontSizeInflation
nsMathMLChar
*
aMathMLChar
nsOperatorFlags
aForm
int32_t
aScriptLevel
nscoord
axisHeight
nscoord
leading
nscoord
em
nsBoundingMetrics
&
aContainerSize
nscoord
&
aAscent
nscoord
&
aDescent
bool
aRTL
)
;
static
void
PlaceChar
(
nsMathMLChar
*
aMathMLChar
nscoord
aDesiredSize
nsBoundingMetrics
&
bm
nscoord
&
dx
)
;
virtual
bool
IsMrowLike
(
)
override
{
return
true
;
}
protected
:
explicit
nsMathMLmfencedFrame
(
nsStyleContext
*
aContext
)
:
nsMathMLContainerFrame
(
aContext
kClassID
)
mOpenChar
(
nullptr
)
mCloseChar
(
nullptr
)
mSeparatorsChar
(
nullptr
)
mSeparatorsCount
(
0
)
{
}
virtual
~
nsMathMLmfencedFrame
(
)
;
nsMathMLChar
*
mOpenChar
;
nsMathMLChar
*
mCloseChar
;
nsMathMLChar
*
mSeparatorsChar
;
int32_t
mSeparatorsCount
;
void
RemoveFencesAndSeparators
(
)
;
void
CreateFencesAndSeparators
(
nsPresContext
*
aPresContext
)
;
}
;
#
endif
