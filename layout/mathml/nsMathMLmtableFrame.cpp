#
include
"
gfxContext
.
h
"
#
include
"
nsMathMLmtableFrame
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
mozilla
/
dom
/
MathMLElement
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTableFrame
.
h
"
#
include
"
celldata
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
<
algorithm
>
#
include
"
nsIScriptError
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsLayoutUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
image
;
using
mozilla
:
:
dom
:
:
Element
;
static
int8_t
ParseStyleValue
(
nsAtom
*
aAttribute
const
nsAString
&
aAttributeValue
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
rowalign
)
{
if
(
aAttributeValue
.
EqualsLiteral
(
"
top
"
)
)
{
return
static_cast
<
int8_t
>
(
StyleVerticalAlignKeyword
:
:
Top
)
;
}
if
(
aAttributeValue
.
EqualsLiteral
(
"
bottom
"
)
)
{
return
static_cast
<
int8_t
>
(
StyleVerticalAlignKeyword
:
:
Bottom
)
;
}
if
(
aAttributeValue
.
EqualsLiteral
(
"
center
"
)
)
{
return
static_cast
<
int8_t
>
(
StyleVerticalAlignKeyword
:
:
Middle
)
;
}
return
static_cast
<
int8_t
>
(
StyleVerticalAlignKeyword
:
:
Baseline
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
columnalign
)
{
if
(
aAttributeValue
.
EqualsLiteral
(
"
left
"
)
)
{
return
int8_t
(
StyleTextAlign
:
:
Left
)
;
}
if
(
aAttributeValue
.
EqualsLiteral
(
"
right
"
)
)
{
return
int8_t
(
StyleTextAlign
:
:
Right
)
;
}
return
int8_t
(
StyleTextAlign
:
:
Center
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
rowlines
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnlines
)
{
if
(
aAttributeValue
.
EqualsLiteral
(
"
solid
"
)
)
{
return
static_cast
<
int8_t
>
(
StyleBorderStyle
:
:
Solid
)
;
}
if
(
aAttributeValue
.
EqualsLiteral
(
"
dashed
"
)
)
{
return
static_cast
<
int8_t
>
(
StyleBorderStyle
:
:
Dashed
)
;
}
return
static_cast
<
int8_t
>
(
StyleBorderStyle
:
:
None
)
;
}
MOZ_CRASH
(
"
Unrecognized
attribute
.
"
)
;
return
-
1
;
}
static
nsTArray
<
int8_t
>
*
ExtractStyleValues
(
const
nsAString
&
aString
nsAtom
*
aAttribute
bool
aAllowMultiValues
)
{
nsTArray
<
int8_t
>
*
styleArray
=
nullptr
;
const
char16_t
*
start
=
aString
.
BeginReading
(
)
;
const
char16_t
*
end
=
aString
.
EndReading
(
)
;
int32_t
startIndex
=
0
;
int32_t
count
=
0
;
while
(
start
<
end
)
{
while
(
(
start
<
end
)
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
startIndex
+
+
;
}
while
(
(
start
<
end
)
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
count
+
+
;
}
if
(
count
>
0
)
{
if
(
!
styleArray
)
{
styleArray
=
new
nsTArray
<
int8_t
>
(
)
;
}
if
(
styleArray
-
>
Length
(
)
>
1
&
&
!
aAllowMultiValues
)
{
delete
styleArray
;
return
nullptr
;
}
nsDependentSubstring
valueString
(
aString
startIndex
count
)
;
int8_t
styleValue
=
ParseStyleValue
(
aAttribute
valueString
)
;
styleArray
-
>
AppendElement
(
styleValue
)
;
startIndex
+
=
count
;
count
=
0
;
}
}
return
styleArray
;
}
static
nsresult
ReportParseError
(
nsIFrame
*
aFrame
const
char16_t
*
aAttribute
const
char16_t
*
aValue
)
{
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
AutoTArray
<
nsString
3
>
params
;
params
.
AppendElement
(
aValue
)
;
params
.
AppendElement
(
aAttribute
)
;
params
.
AppendElement
(
nsDependentAtomString
(
content
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
)
;
return
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
errorFlag
"
Layout
:
MathML
"
_ns
content
-
>
OwnerDoc
(
)
nsContentUtils
:
:
eMATHML_PROPERTIES
"
AttributeParsingError
"
params
)
;
}
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
RowAlignProperty
nsTArray
<
int8_t
>
)
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
RowLinesProperty
nsTArray
<
int8_t
>
)
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
ColumnAlignProperty
nsTArray
<
int8_t
>
)
NS_DECLARE_FRAME_PROPERTY_DELETABLE
(
ColumnLinesProperty
nsTArray
<
int8_t
>
)
static
const
FramePropertyDescriptor
<
nsTArray
<
int8_t
>
>
*
AttributeToProperty
(
nsAtom
*
aAttribute
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
rowalign
)
{
return
RowAlignProperty
(
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
rowlines
)
{
return
RowLinesProperty
(
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
columnalign
)
{
return
ColumnAlignProperty
(
)
;
}
NS_ASSERTION
(
aAttribute
=
=
nsGkAtoms
:
:
columnlines
"
Invalid
attribute
"
)
;
return
ColumnLinesProperty
(
)
;
}
static
nsTArray
<
int8_t
>
*
FindCellProperty
(
const
nsIFrame
*
aCellFrame
const
FramePropertyDescriptor
<
nsTArray
<
int8_t
>
>
*
aFrameProperty
)
{
const
nsIFrame
*
currentFrame
=
aCellFrame
;
nsTArray
<
int8_t
>
*
propertyData
=
nullptr
;
while
(
currentFrame
)
{
propertyData
=
currentFrame
-
>
GetProperty
(
aFrameProperty
)
;
bool
frameIsTable
=
(
currentFrame
-
>
IsTableFrame
(
)
)
;
if
(
propertyData
|
|
frameIsTable
)
{
currentFrame
=
nullptr
;
}
else
{
currentFrame
=
currentFrame
-
>
GetParent
(
)
;
}
}
return
propertyData
;
}
static
void
ApplyBorderToStyle
(
const
nsMathMLmtdFrame
*
aFrame
nsStyleBorder
&
aStyleBorder
)
{
uint32_t
rowIndex
=
aFrame
-
>
RowIndex
(
)
;
uint32_t
columnIndex
=
aFrame
-
>
ColIndex
(
)
;
nscoord
borderWidth
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
1
)
;
nsTArray
<
int8_t
>
*
rowLinesList
=
FindCellProperty
(
aFrame
RowLinesProperty
(
)
)
;
nsTArray
<
int8_t
>
*
columnLinesList
=
FindCellProperty
(
aFrame
ColumnLinesProperty
(
)
)
;
const
auto
a2d
=
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
if
(
rowIndex
>
0
&
&
rowLinesList
)
{
uint32_t
listLength
=
rowLinesList
-
>
Length
(
)
;
if
(
rowIndex
<
listLength
)
{
aStyleBorder
.
SetBorderStyle
(
eSideTop
static_cast
<
StyleBorderStyle
>
(
rowLinesList
-
>
ElementAt
(
rowIndex
-
1
)
)
)
;
}
else
{
aStyleBorder
.
SetBorderStyle
(
eSideTop
static_cast
<
StyleBorderStyle
>
(
rowLinesList
-
>
ElementAt
(
listLength
-
1
)
)
)
;
}
aStyleBorder
.
SetBorderWidth
(
eSideTop
borderWidth
a2d
)
;
}
if
(
columnIndex
>
0
&
&
columnLinesList
)
{
uint32_t
listLength
=
columnLinesList
-
>
Length
(
)
;
if
(
columnIndex
<
listLength
)
{
aStyleBorder
.
SetBorderStyle
(
eSideLeft
static_cast
<
StyleBorderStyle
>
(
columnLinesList
-
>
ElementAt
(
columnIndex
-
1
)
)
)
;
}
else
{
aStyleBorder
.
SetBorderStyle
(
eSideLeft
static_cast
<
StyleBorderStyle
>
(
columnLinesList
-
>
ElementAt
(
listLength
-
1
)
)
)
;
}
aStyleBorder
.
SetBorderWidth
(
eSideLeft
borderWidth
a2d
)
;
}
}
static
nsMargin
ComputeBorderOverflow
(
nsMathMLmtdFrame
*
aFrame
const
nsStyleBorder
&
aStyleBorder
)
{
nsMargin
overflow
;
int32_t
rowIndex
;
int32_t
columnIndex
;
nsTableFrame
*
table
=
aFrame
-
>
GetTableFrame
(
)
;
aFrame
-
>
GetCellIndexes
(
rowIndex
columnIndex
)
;
if
(
!
columnIndex
)
{
overflow
.
left
=
table
-
>
GetColSpacing
(
-
1
)
;
overflow
.
right
=
table
-
>
GetColSpacing
(
0
)
/
2
;
}
else
if
(
columnIndex
=
=
table
-
>
GetColCount
(
)
-
1
)
{
overflow
.
left
=
table
-
>
GetColSpacing
(
columnIndex
-
1
)
/
2
;
overflow
.
right
=
table
-
>
GetColSpacing
(
columnIndex
+
1
)
;
}
else
{
overflow
.
left
=
table
-
>
GetColSpacing
(
columnIndex
-
1
)
/
2
;
overflow
.
right
=
table
-
>
GetColSpacing
(
columnIndex
)
/
2
;
}
if
(
!
rowIndex
)
{
overflow
.
top
=
table
-
>
GetRowSpacing
(
-
1
)
;
overflow
.
bottom
=
table
-
>
GetRowSpacing
(
0
)
/
2
;
}
else
if
(
rowIndex
=
=
table
-
>
GetRowCount
(
)
-
1
)
{
overflow
.
top
=
table
-
>
GetRowSpacing
(
rowIndex
-
1
)
/
2
;
overflow
.
bottom
=
table
-
>
GetRowSpacing
(
rowIndex
+
1
)
;
}
else
{
overflow
.
top
=
table
-
>
GetRowSpacing
(
rowIndex
-
1
)
/
2
;
overflow
.
bottom
=
table
-
>
GetRowSpacing
(
rowIndex
)
/
2
;
}
return
overflow
;
}
class
nsDisplaymtdBorder
final
:
public
nsDisplayBorder
{
public
:
nsDisplaymtdBorder
(
nsDisplayListBuilder
*
aBuilder
nsMathMLmtdFrame
*
aFrame
)
:
nsDisplayBorder
(
aBuilder
aFrame
)
{
}
nsRect
GetBounds
(
nsDisplayListBuilder
*
aBuilder
bool
*
aSnap
)
const
override
{
*
aSnap
=
true
;
nsStyleBorder
styleBorder
=
*
mFrame
-
>
StyleBorder
(
)
;
nsMathMLmtdFrame
*
frame
=
static_cast
<
nsMathMLmtdFrame
*
>
(
mFrame
)
;
ApplyBorderToStyle
(
frame
styleBorder
)
;
nsRect
bounds
=
CalculateBounds
<
nsRect
>
(
styleBorder
)
;
nsMargin
overflow
=
ComputeBorderOverflow
(
frame
styleBorder
)
;
bounds
.
Inflate
(
overflow
)
;
return
bounds
;
}
void
Paint
(
nsDisplayListBuilder
*
aBuilder
gfxContext
*
aCtx
)
override
{
nsStyleBorder
styleBorder
=
*
mFrame
-
>
StyleBorder
(
)
;
nsMathMLmtdFrame
*
frame
=
static_cast
<
nsMathMLmtdFrame
*
>
(
mFrame
)
;
ApplyBorderToStyle
(
frame
styleBorder
)
;
nsRect
bounds
=
nsRect
(
ToReferenceFrame
(
)
mFrame
-
>
GetSize
(
)
)
;
nsMargin
overflow
=
ComputeBorderOverflow
(
frame
styleBorder
)
;
bounds
.
Inflate
(
overflow
)
;
PaintBorderFlags
flags
=
aBuilder
-
>
ShouldSyncDecodeImages
(
)
?
PaintBorderFlags
:
:
SyncDecodeImages
:
PaintBorderFlags
(
)
;
Unused
<
<
nsCSSRendering
:
:
PaintBorderWithStyleBorder
(
mFrame
-
>
PresContext
(
)
*
aCtx
mFrame
GetPaintRect
(
aBuilder
aCtx
)
bounds
styleBorder
mFrame
-
>
Style
(
)
flags
mFrame
-
>
GetSkipSides
(
)
)
;
}
bool
CreateWebRenderCommands
(
mozilla
:
:
wr
:
:
DisplayListBuilder
&
aBuilder
mozilla
:
:
wr
:
:
IpcResourceUpdateQueue
&
aResources
const
StackingContextHelper
&
aSc
mozilla
:
:
layers
:
:
RenderRootStateManager
*
aManager
nsDisplayListBuilder
*
aDisplayListBuilder
)
override
{
return
false
;
}
bool
IsInvisibleInRect
(
const
nsRect
&
aRect
)
const
override
{
return
false
;
}
}
;
#
ifdef
DEBUG
#
define
DEBUG_VERIFY_THAT_FRAME_IS
(
_frame
_expected
)
\
MOZ_ASSERT
(
\
mozilla
:
:
StyleDisplay
:
:
_expected
=
=
_frame
-
>
StyleDisplay
(
)
-
>
mDisplay
\
"
internal
error
"
)
;
#
else
#
define
DEBUG_VERIFY_THAT_FRAME_IS
(
_frame
_expected
)
#
endif
static
void
ParseFrameAttribute
(
nsIFrame
*
aFrame
nsAtom
*
aAttribute
bool
aAllowMultiValues
)
{
nsAutoString
attrValue
;
Element
*
frameElement
=
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
frameElement
-
>
GetAttr
(
aAttribute
attrValue
)
;
if
(
!
attrValue
.
IsEmpty
(
)
)
{
nsTArray
<
int8_t
>
*
valueList
=
ExtractStyleValues
(
attrValue
aAttribute
aAllowMultiValues
)
;
if
(
valueList
)
{
NS_ASSERTION
(
valueList
-
>
Length
(
)
>
=
1
"
valueList
should
not
be
empty
!
"
)
;
aFrame
-
>
SetProperty
(
AttributeToProperty
(
aAttribute
)
valueList
)
;
}
else
{
ReportParseError
(
aFrame
aAttribute
-
>
GetUTF16String
(
)
attrValue
.
get
(
)
)
;
}
}
}
static
const
float
kDefaultRowspacingEx
=
1
.
0f
;
static
const
float
kDefaultColumnspacingEm
=
0
.
8f
;
static
const
float
kDefaultFramespacingArg0Em
=
0
.
4f
;
static
const
float
kDefaultFramespacingArg1Ex
=
0
.
5f
;
static
void
ExtractSpacingValues
(
const
nsAString
&
aString
nsAtom
*
aAttribute
nsTArray
<
nscoord
>
&
aSpacingArray
nsIFrame
*
aFrame
nscoord
aDefaultValue0
nscoord
aDefaultValue1
float
aFontSizeInflation
)
{
nsPresContext
*
presContext
=
aFrame
-
>
PresContext
(
)
;
ComputedStyle
*
computedStyle
=
aFrame
-
>
Style
(
)
;
const
char16_t
*
start
=
aString
.
BeginReading
(
)
;
const
char16_t
*
end
=
aString
.
EndReading
(
)
;
int32_t
startIndex
=
0
;
int32_t
count
=
0
;
int32_t
elementNum
=
0
;
while
(
start
<
end
)
{
while
(
(
start
<
end
)
&
&
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
startIndex
+
+
;
}
while
(
(
start
<
end
)
&
&
!
nsCRT
:
:
IsAsciiSpace
(
*
start
)
)
{
start
+
+
;
count
+
+
;
}
if
(
count
>
0
)
{
const
nsAString
&
str
=
Substring
(
aString
startIndex
count
)
;
nsAutoString
valueString
;
valueString
.
Assign
(
str
)
;
nscoord
newValue
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
framespacing
&
&
elementNum
)
{
newValue
=
aDefaultValue1
;
}
else
{
newValue
=
aDefaultValue0
;
}
nsMathMLFrame
:
:
ParseNumericValue
(
valueString
&
newValue
0
presContext
computedStyle
aFontSizeInflation
)
;
aSpacingArray
.
AppendElement
(
newValue
)
;
startIndex
+
=
count
;
count
=
0
;
elementNum
+
+
;
}
}
}
static
void
ParseSpacingAttribute
(
nsMathMLmtableFrame
*
aFrame
nsAtom
*
aAttribute
)
{
NS_ASSERTION
(
aAttribute
=
=
nsGkAtoms
:
:
rowspacing
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnspacing
|
|
aAttribute
=
=
nsGkAtoms
:
:
framespacing
"
Non
spacing
attribute
passed
"
)
;
nsAutoString
attrValue
;
Element
*
frameElement
=
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
frameElement
-
>
GetAttr
(
aAttribute
attrValue
)
;
if
(
nsGkAtoms
:
:
framespacing
=
=
aAttribute
)
{
nsAutoString
frame
;
frameElement
-
>
GetAttr
(
nsGkAtoms
:
:
frame
frame
)
;
if
(
frame
.
IsEmpty
(
)
|
|
frame
.
EqualsLiteral
(
"
none
"
)
)
{
aFrame
-
>
SetFrameSpacing
(
0
0
)
;
return
;
}
}
nscoord
value
;
nscoord
value2
;
float
fontSizeInflation
=
nsLayoutUtils
:
:
FontSizeInflationFor
(
aFrame
)
;
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetFontMetricsForFrame
(
aFrame
fontSizeInflation
)
;
if
(
nsGkAtoms
:
:
rowspacing
=
=
aAttribute
)
{
value
=
kDefaultRowspacingEx
*
fm
-
>
XHeight
(
)
;
value2
=
0
;
}
else
if
(
nsGkAtoms
:
:
columnspacing
=
=
aAttribute
)
{
value
=
kDefaultColumnspacingEm
*
fm
-
>
EmHeight
(
)
;
value2
=
0
;
}
else
{
value
=
kDefaultFramespacingArg0Em
*
fm
-
>
EmHeight
(
)
;
value2
=
kDefaultFramespacingArg1Ex
*
fm
-
>
XHeight
(
)
;
}
nsTArray
<
nscoord
>
valueList
;
ExtractSpacingValues
(
attrValue
aAttribute
valueList
aFrame
value
value2
fontSizeInflation
)
;
if
(
valueList
.
Length
(
)
=
=
0
)
{
if
(
frameElement
-
>
HasAttr
(
aAttribute
)
)
{
ReportParseError
(
aFrame
aAttribute
-
>
GetUTF16String
(
)
attrValue
.
get
(
)
)
;
}
valueList
.
AppendElement
(
value
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
framespacing
)
{
if
(
valueList
.
Length
(
)
=
=
1
)
{
if
(
frameElement
-
>
HasAttr
(
aAttribute
)
)
{
ReportParseError
(
aFrame
aAttribute
-
>
GetUTF16String
(
)
attrValue
.
get
(
)
)
;
}
valueList
.
AppendElement
(
value2
)
;
}
else
if
(
valueList
.
Length
(
)
!
=
2
)
{
ReportParseError
(
aFrame
aAttribute
-
>
GetUTF16String
(
)
attrValue
.
get
(
)
)
;
}
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
rowspacing
)
{
aFrame
-
>
SetRowSpacingArray
(
valueList
)
;
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
columnspacing
)
{
aFrame
-
>
SetColSpacingArray
(
valueList
)
;
}
else
{
aFrame
-
>
SetFrameSpacing
(
valueList
.
ElementAt
(
0
)
valueList
.
ElementAt
(
1
)
)
;
}
}
static
void
ParseSpacingAttributes
(
nsMathMLmtableFrame
*
aTableFrame
)
{
ParseSpacingAttribute
(
aTableFrame
nsGkAtoms
:
:
rowspacing
)
;
ParseSpacingAttribute
(
aTableFrame
nsGkAtoms
:
:
columnspacing
)
;
ParseSpacingAttribute
(
aTableFrame
nsGkAtoms
:
:
framespacing
)
;
aTableFrame
-
>
SetUseCSSSpacing
(
)
;
}
static
void
MapAllAttributesIntoCSS
(
nsMathMLmtableFrame
*
aTableFrame
)
{
ParseFrameAttribute
(
aTableFrame
nsGkAtoms
:
:
rowalign
true
)
;
ParseFrameAttribute
(
aTableFrame
nsGkAtoms
:
:
rowlines
true
)
;
ParseFrameAttribute
(
aTableFrame
nsGkAtoms
:
:
columnalign
true
)
;
ParseFrameAttribute
(
aTableFrame
nsGkAtoms
:
:
columnlines
true
)
;
ParseSpacingAttributes
(
aTableFrame
)
;
nsIFrame
*
rgFrame
=
aTableFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
!
rgFrame
|
|
!
rgFrame
-
>
IsTableRowGroupFrame
(
)
)
{
return
;
}
for
(
nsIFrame
*
rowFrame
:
rgFrame
-
>
PrincipalChildList
(
)
)
{
DEBUG_VERIFY_THAT_FRAME_IS
(
rowFrame
TableRow
)
;
if
(
rowFrame
-
>
IsTableRowFrame
(
)
)
{
ParseFrameAttribute
(
rowFrame
nsGkAtoms
:
:
rowalign
false
)
;
ParseFrameAttribute
(
rowFrame
nsGkAtoms
:
:
columnalign
true
)
;
for
(
nsIFrame
*
cellFrame
:
rowFrame
-
>
PrincipalChildList
(
)
)
{
DEBUG_VERIFY_THAT_FRAME_IS
(
cellFrame
TableCell
)
;
if
(
cellFrame
-
>
IsTableCellFrame
(
)
)
{
ParseFrameAttribute
(
cellFrame
nsGkAtoms
:
:
rowalign
false
)
;
ParseFrameAttribute
(
cellFrame
nsGkAtoms
:
:
columnalign
false
)
;
}
}
}
}
}
enum
eAlign
{
eAlign_top
eAlign_bottom
eAlign_center
eAlign_baseline
eAlign_axis
}
;
static
void
ParseAlignAttribute
(
nsString
&
aValue
eAlign
&
aAlign
int32_t
&
aRowIndex
)
{
aRowIndex
=
0
;
aAlign
=
eAlign_axis
;
int32_t
len
=
0
;
aValue
.
CompressWhitespace
(
true
false
)
;
if
(
0
=
=
aValue
.
Find
(
u
"
top
"
)
)
{
len
=
3
;
aAlign
=
eAlign_top
;
}
else
if
(
0
=
=
aValue
.
Find
(
u
"
bottom
"
)
)
{
len
=
6
;
aAlign
=
eAlign_bottom
;
}
else
if
(
0
=
=
aValue
.
Find
(
u
"
center
"
)
)
{
len
=
6
;
aAlign
=
eAlign_center
;
}
else
if
(
0
=
=
aValue
.
Find
(
u
"
baseline
"
)
)
{
len
=
8
;
aAlign
=
eAlign_baseline
;
}
else
if
(
0
=
=
aValue
.
Find
(
u
"
axis
"
)
)
{
len
=
4
;
aAlign
=
eAlign_axis
;
}
if
(
len
)
{
nsresult
error
;
aValue
.
Cut
(
0
len
)
;
aRowIndex
=
aValue
.
ToInteger
(
&
error
)
;
if
(
NS_FAILED
(
error
)
)
{
aRowIndex
=
0
;
}
}
}
NS_QUERYFRAME_HEAD
(
nsMathMLmtableWrapperFrame
)
NS_QUERYFRAME_ENTRY
(
nsIMathMLFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsTableWrapperFrame
)
nsContainerFrame
*
NS_NewMathMLmtableOuterFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmtableWrapperFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmtableWrapperFrame
)
nsMathMLmtableWrapperFrame
:
:
~
nsMathMLmtableWrapperFrame
(
)
=
default
;
nsresult
nsMathMLmtableWrapperFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
nsIFrame
*
tableFrame
=
mFrames
.
FirstChild
(
)
;
NS_ASSERTION
(
tableFrame
&
&
tableFrame
-
>
IsTableFrame
(
)
"
should
always
have
an
inner
table
frame
"
)
;
nsIFrame
*
rgFrame
=
tableFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
!
rgFrame
|
|
!
rgFrame
-
>
IsTableRowGroupFrame
(
)
)
{
return
NS_OK
;
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
aAttribute
=
=
nsGkAtoms
:
:
align
)
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
None
NS_FRAME_IS_DIRTY
)
;
return
NS_OK
;
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
rowspacing
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnspacing
|
|
aAttribute
=
=
nsGkAtoms
:
:
framespacing
)
)
{
nsMathMLmtableFrame
*
mathMLmtableFrame
=
do_QueryFrame
(
tableFrame
)
;
if
(
mathMLmtableFrame
)
{
ParseSpacingAttribute
(
mathMLmtableFrame
aAttribute
)
;
mathMLmtableFrame
-
>
SetUseCSSSpacing
(
)
;
}
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
FrameAncestorsAndDescendants
NS_FRAME_IS_DIRTY
)
;
return
NS_OK
;
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
rowalign
|
|
aAttribute
=
=
nsGkAtoms
:
:
rowlines
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnalign
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnlines
)
)
{
tableFrame
-
>
RemoveProperty
(
AttributeToProperty
(
aAttribute
)
)
;
ParseFrameAttribute
(
tableFrame
aAttribute
true
)
;
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
FrameAncestorsAndDescendants
NS_FRAME_IS_DIRTY
)
;
return
NS_OK
;
}
return
nsContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
nsIFrame
*
nsMathMLmtableWrapperFrame
:
:
GetRowFrameAt
(
int32_t
aRowIndex
)
{
int32_t
rowCount
=
GetRowCount
(
)
;
if
(
aRowIndex
<
0
)
{
aRowIndex
=
rowCount
+
aRowIndex
;
}
else
{
-
-
aRowIndex
;
}
if
(
0
<
=
aRowIndex
&
&
aRowIndex
<
=
rowCount
)
{
nsIFrame
*
tableFrame
=
mFrames
.
FirstChild
(
)
;
NS_ASSERTION
(
tableFrame
&
&
tableFrame
-
>
IsTableFrame
(
)
"
should
always
have
an
inner
table
frame
"
)
;
nsIFrame
*
rgFrame
=
tableFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
!
rgFrame
|
|
!
rgFrame
-
>
IsTableRowGroupFrame
(
)
)
{
return
nullptr
;
}
for
(
nsIFrame
*
rowFrame
:
rgFrame
-
>
PrincipalChildList
(
)
)
{
if
(
aRowIndex
=
=
0
)
{
DEBUG_VERIFY_THAT_FRAME_IS
(
rowFrame
TableRow
)
;
if
(
!
rowFrame
-
>
IsTableRowFrame
(
)
)
{
return
nullptr
;
}
return
rowFrame
;
}
-
-
aRowIndex
;
}
}
return
nullptr
;
}
void
nsMathMLmtableWrapperFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
nsAutoString
value
;
nsTableWrapperFrame
:
:
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
NS_ASSERTION
(
aDesiredSize
.
Height
(
)
>
=
0
"
illegal
height
for
mtable
"
)
;
NS_ASSERTION
(
aDesiredSize
.
Width
(
)
>
=
0
"
illegal
width
for
mtable
"
)
;
int32_t
rowIndex
=
0
;
eAlign
tableAlign
=
eAlign_axis
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
nsGkAtoms
:
:
align
value
)
;
if
(
!
value
.
IsEmpty
(
)
)
{
ParseAlignAttribute
(
value
tableAlign
rowIndex
)
;
}
nscoord
dy
=
0
;
WritingMode
wm
=
aDesiredSize
.
GetWritingMode
(
)
;
nscoord
blockSize
=
aDesiredSize
.
BSize
(
wm
)
;
nsIFrame
*
rowFrame
=
nullptr
;
if
(
rowIndex
)
{
rowFrame
=
GetRowFrameAt
(
rowIndex
)
;
if
(
rowFrame
)
{
nsIFrame
*
frame
=
rowFrame
;
LogicalRect
rect
(
wm
frame
-
>
GetRect
(
)
aReflowInput
.
ComputedSizeAsContainerIfConstrained
(
)
)
;
blockSize
=
rect
.
BSize
(
wm
)
;
do
{
nsIFrame
*
parent
=
frame
-
>
GetParent
(
)
;
dy
+
=
frame
-
>
BStart
(
wm
parent
-
>
GetSize
(
)
)
;
frame
=
parent
;
}
while
(
frame
!
=
this
)
;
}
}
switch
(
tableAlign
)
{
case
eAlign_top
:
aDesiredSize
.
SetBlockStartAscent
(
dy
)
;
break
;
case
eAlign_bottom
:
aDesiredSize
.
SetBlockStartAscent
(
dy
+
blockSize
)
;
break
;
case
eAlign_center
:
aDesiredSize
.
SetBlockStartAscent
(
dy
+
blockSize
/
2
)
;
break
;
case
eAlign_baseline
:
if
(
rowFrame
)
{
nscoord
rowAscent
=
(
(
nsTableRowFrame
*
)
rowFrame
)
-
>
GetMaxCellAscent
(
)
;
if
(
rowAscent
)
{
aDesiredSize
.
SetBlockStartAscent
(
dy
+
rowAscent
)
;
break
;
}
}
aDesiredSize
.
SetBlockStartAscent
(
dy
+
blockSize
/
2
)
;
break
;
case
eAlign_axis
:
default
:
{
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetInflatedFontMetricsForFrame
(
this
)
;
nscoord
axisHeight
;
GetAxisHeight
(
aReflowInput
.
mRenderingContext
-
>
GetDrawTarget
(
)
fm
axisHeight
)
;
if
(
rowFrame
)
{
nscoord
rowAscent
=
(
(
nsTableRowFrame
*
)
rowFrame
)
-
>
GetMaxCellAscent
(
)
;
if
(
rowAscent
)
{
aDesiredSize
.
SetBlockStartAscent
(
dy
+
rowAscent
)
;
break
;
}
}
aDesiredSize
.
SetBlockStartAscent
(
dy
+
blockSize
/
2
+
axisHeight
)
;
}
}
mReference
.
x
=
0
;
mReference
.
y
=
aDesiredSize
.
BlockStartAscent
(
)
;
mBoundingMetrics
=
nsBoundingMetrics
(
)
;
mBoundingMetrics
.
ascent
=
aDesiredSize
.
BlockStartAscent
(
)
;
mBoundingMetrics
.
descent
=
aDesiredSize
.
Height
(
)
-
aDesiredSize
.
BlockStartAscent
(
)
;
mBoundingMetrics
.
width
=
aDesiredSize
.
Width
(
)
;
mBoundingMetrics
.
leftBearing
=
0
;
mBoundingMetrics
.
rightBearing
=
aDesiredSize
.
Width
(
)
;
aDesiredSize
.
mBoundingMetrics
=
mBoundingMetrics
;
}
nsContainerFrame
*
NS_NewMathMLmtableFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmtableFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmtableFrame
)
nsMathMLmtableFrame
:
:
~
nsMathMLmtableFrame
(
)
=
default
;
void
nsMathMLmtableFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
{
nsTableFrame
:
:
SetInitialChildList
(
aListID
std
:
:
move
(
aChildList
)
)
;
MapAllAttributesIntoCSS
(
this
)
;
}
void
nsMathMLmtableFrame
:
:
RestyleTable
(
)
{
MapAllAttributesIntoCSS
(
this
)
;
PresContext
(
)
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
mContent
-
>
AsElement
(
)
RestyleHint
:
:
RestyleSubtree
(
)
nsChangeHint_AllReflowHints
)
;
}
nscoord
nsMathMLmtableFrame
:
:
GetColSpacing
(
int32_t
aColIndex
)
{
if
(
mUseCSSSpacing
)
{
return
nsTableFrame
:
:
GetColSpacing
(
aColIndex
)
;
}
if
(
!
mColSpacing
.
Length
(
)
)
{
NS_ERROR
(
"
mColSpacing
should
not
be
empty
"
)
;
return
0
;
}
if
(
aColIndex
<
0
|
|
aColIndex
>
=
GetColCount
(
)
)
{
NS_ASSERTION
(
aColIndex
=
=
-
1
|
|
aColIndex
=
=
GetColCount
(
)
"
Desired
column
beyond
bounds
of
table
and
border
"
)
;
return
mFrameSpacingX
;
}
if
(
(
uint32_t
)
aColIndex
>
=
mColSpacing
.
Length
(
)
)
{
return
mColSpacing
.
LastElement
(
)
;
}
return
mColSpacing
.
ElementAt
(
aColIndex
)
;
}
nscoord
nsMathMLmtableFrame
:
:
GetColSpacing
(
int32_t
aStartColIndex
int32_t
aEndColIndex
)
{
if
(
mUseCSSSpacing
)
{
return
nsTableFrame
:
:
GetColSpacing
(
aStartColIndex
aEndColIndex
)
;
}
if
(
aStartColIndex
=
=
aEndColIndex
)
{
return
0
;
}
if
(
!
mColSpacing
.
Length
(
)
)
{
NS_ERROR
(
"
mColSpacing
should
not
be
empty
"
)
;
return
0
;
}
nscoord
space
=
0
;
if
(
aStartColIndex
<
0
)
{
NS_ASSERTION
(
aStartColIndex
=
=
-
1
"
Desired
column
beyond
bounds
of
table
and
border
"
)
;
space
+
=
mFrameSpacingX
;
aStartColIndex
=
0
;
}
if
(
aEndColIndex
>
=
GetColCount
(
)
)
{
NS_ASSERTION
(
aEndColIndex
=
=
GetColCount
(
)
"
Desired
column
beyond
bounds
of
table
and
border
"
)
;
space
+
=
mFrameSpacingX
;
aEndColIndex
=
GetColCount
(
)
;
}
int32_t
min
=
std
:
:
min
(
aEndColIndex
(
int32_t
)
mColSpacing
.
Length
(
)
)
;
for
(
int32_t
i
=
aStartColIndex
;
i
<
min
;
i
+
+
)
{
space
+
=
mColSpacing
.
ElementAt
(
i
)
;
}
space
+
=
(
aEndColIndex
-
min
)
*
mColSpacing
.
LastElement
(
)
;
return
space
;
}
nscoord
nsMathMLmtableFrame
:
:
GetRowSpacing
(
int32_t
aRowIndex
)
{
if
(
mUseCSSSpacing
)
{
return
nsTableFrame
:
:
GetRowSpacing
(
aRowIndex
)
;
}
if
(
!
mRowSpacing
.
Length
(
)
)
{
NS_ERROR
(
"
mRowSpacing
should
not
be
empty
"
)
;
return
0
;
}
if
(
aRowIndex
<
0
|
|
aRowIndex
>
=
GetRowCount
(
)
)
{
NS_ASSERTION
(
aRowIndex
=
=
-
1
|
|
aRowIndex
=
=
GetRowCount
(
)
"
Desired
row
beyond
bounds
of
table
and
border
"
)
;
return
mFrameSpacingY
;
}
if
(
(
uint32_t
)
aRowIndex
>
=
mRowSpacing
.
Length
(
)
)
{
return
mRowSpacing
.
LastElement
(
)
;
}
return
mRowSpacing
.
ElementAt
(
aRowIndex
)
;
}
nscoord
nsMathMLmtableFrame
:
:
GetRowSpacing
(
int32_t
aStartRowIndex
int32_t
aEndRowIndex
)
{
if
(
mUseCSSSpacing
)
{
return
nsTableFrame
:
:
GetRowSpacing
(
aStartRowIndex
aEndRowIndex
)
;
}
if
(
aStartRowIndex
=
=
aEndRowIndex
)
{
return
0
;
}
if
(
!
mRowSpacing
.
Length
(
)
)
{
NS_ERROR
(
"
mRowSpacing
should
not
be
empty
"
)
;
return
0
;
}
nscoord
space
=
0
;
if
(
aStartRowIndex
<
0
)
{
NS_ASSERTION
(
aStartRowIndex
=
=
-
1
"
Desired
row
beyond
bounds
of
table
and
border
"
)
;
space
+
=
mFrameSpacingY
;
aStartRowIndex
=
0
;
}
if
(
aEndRowIndex
>
=
GetRowCount
(
)
)
{
NS_ASSERTION
(
aEndRowIndex
=
=
GetRowCount
(
)
"
Desired
row
beyond
bounds
of
table
and
border
"
)
;
space
+
=
mFrameSpacingY
;
aEndRowIndex
=
GetRowCount
(
)
;
}
int32_t
min
=
std
:
:
min
(
aEndRowIndex
(
int32_t
)
mRowSpacing
.
Length
(
)
)
;
for
(
int32_t
i
=
aStartRowIndex
;
i
<
min
;
i
+
+
)
{
space
+
=
mRowSpacing
.
ElementAt
(
i
)
;
}
space
+
=
(
aEndRowIndex
-
min
)
*
mRowSpacing
.
LastElement
(
)
;
return
space
;
}
void
nsMathMLmtableFrame
:
:
SetUseCSSSpacing
(
)
{
mUseCSSSpacing
=
!
(
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
nsGkAtoms
:
:
rowspacing
)
|
|
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
columnspacing
)
|
|
mContent
-
>
AsElement
(
)
-
>
HasAttr
(
nsGkAtoms
:
:
framespacing
)
)
;
}
NS_QUERYFRAME_HEAD
(
nsMathMLmtableFrame
)
NS_QUERYFRAME_ENTRY
(
nsMathMLmtableFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsTableFrame
)
nsContainerFrame
*
NS_NewMathMLmtrFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmtrFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmtrFrame
)
nsMathMLmtrFrame
:
:
~
nsMathMLmtrFrame
(
)
=
default
;
nsresult
nsMathMLmtrFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
!
=
kNameSpaceID_None
|
|
(
aAttribute
!
=
nsGkAtoms
:
:
rowalign
&
&
aAttribute
!
=
nsGkAtoms
:
:
columnalign
)
)
{
return
nsContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
RemoveProperty
(
AttributeToProperty
(
aAttribute
)
)
;
bool
allowMultiValues
=
(
aAttribute
=
=
nsGkAtoms
:
:
columnalign
)
;
ParseFrameAttribute
(
this
aAttribute
allowMultiValues
)
;
PresShell
(
)
-
>
FrameNeedsReflow
(
this
IntrinsicDirty
:
:
FrameAncestorsAndDescendants
NS_FRAME_IS_DIRTY
)
;
return
NS_OK
;
}
nsContainerFrame
*
NS_NewMathMLmtdFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
{
return
new
(
aPresShell
)
nsMathMLmtdFrame
(
aStyle
aTableFrame
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmtdFrame
)
nsMathMLmtdFrame
:
:
~
nsMathMLmtdFrame
(
)
=
default
;
void
nsMathMLmtdFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsTableCellFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
RemoveStateBits
(
NS_FRAME_FONT_INFLATION_FLOW_ROOT
)
;
}
nsresult
nsMathMLmtdFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
rowalign
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnalign
)
)
{
RemoveProperty
(
AttributeToProperty
(
aAttribute
)
)
;
ParseFrameAttribute
(
this
aAttribute
false
)
;
return
NS_OK
;
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
rowspan
|
|
aAttribute
=
=
nsGkAtoms
:
:
columnspan
)
)
{
return
nsTableCellFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
return
nsContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
StyleVerticalAlignKeyword
nsMathMLmtdFrame
:
:
GetVerticalAlign
(
)
const
{
auto
alignment
=
nsTableCellFrame
:
:
GetVerticalAlign
(
)
;
nsTArray
<
int8_t
>
*
alignmentList
=
FindCellProperty
(
this
RowAlignProperty
(
)
)
;
if
(
alignmentList
)
{
uint32_t
rowIndex
=
RowIndex
(
)
;
return
static_cast
<
StyleVerticalAlignKeyword
>
(
(
rowIndex
<
alignmentList
-
>
Length
(
)
)
?
alignmentList
-
>
ElementAt
(
rowIndex
)
:
alignmentList
-
>
LastElement
(
)
)
;
}
return
alignment
;
}
void
nsMathMLmtdFrame
:
:
ProcessBorders
(
nsTableFrame
*
aFrame
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
aLists
.
BorderBackground
(
)
-
>
AppendNewToTop
<
nsDisplaymtdBorder
>
(
aBuilder
this
)
;
}
LogicalMargin
nsMathMLmtdFrame
:
:
GetBorderWidth
(
WritingMode
aWM
)
const
{
nsStyleBorder
styleBorder
=
*
StyleBorder
(
)
;
ApplyBorderToStyle
(
this
styleBorder
)
;
return
LogicalMargin
(
aWM
styleBorder
.
GetComputedBorder
(
)
)
;
}
nsMargin
nsMathMLmtdFrame
:
:
GetBorderOverflow
(
)
{
nsStyleBorder
styleBorder
=
*
StyleBorder
(
)
;
ApplyBorderToStyle
(
this
styleBorder
)
;
nsMargin
overflow
=
ComputeBorderOverflow
(
this
styleBorder
)
;
return
overflow
;
}
NS_QUERYFRAME_HEAD
(
nsMathMLmtdInnerFrame
)
NS_QUERYFRAME_ENTRY
(
nsIMathMLFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBlockFrame
)
nsContainerFrame
*
NS_NewMathMLmtdInnerFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmtdInnerFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmtdInnerFrame
)
nsMathMLmtdInnerFrame
:
:
nsMathMLmtdInnerFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBlockFrame
(
aStyle
aPresContext
kClassID
)
mUniqueStyleText
(
MakeUnique
<
nsStyleText
>
(
*
StyleText
(
)
)
)
{
}
void
nsMathMLmtdInnerFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
nsBlockFrame
:
:
Reflow
(
aPresContext
aDesiredSize
aReflowInput
aStatus
)
;
}
const
nsStyleText
*
nsMathMLmtdInnerFrame
:
:
StyleTextForLineLayout
(
)
{
auto
alignment
=
uint8_t
(
StyleText
(
)
-
>
mTextAlign
)
;
nsTArray
<
int8_t
>
*
alignmentList
=
FindCellProperty
(
this
ColumnAlignProperty
(
)
)
;
if
(
alignmentList
)
{
nsMathMLmtdFrame
*
cellFrame
=
(
nsMathMLmtdFrame
*
)
GetParent
(
)
;
uint32_t
columnIndex
=
cellFrame
-
>
ColIndex
(
)
;
if
(
columnIndex
<
alignmentList
-
>
Length
(
)
)
{
alignment
=
alignmentList
-
>
ElementAt
(
columnIndex
)
;
}
else
{
alignment
=
alignmentList
-
>
ElementAt
(
alignmentList
-
>
Length
(
)
-
1
)
;
}
}
mUniqueStyleText
-
>
mTextAlign
=
StyleTextAlign
(
alignment
)
;
return
mUniqueStyleText
.
get
(
)
;
}
void
nsMathMLmtdInnerFrame
:
:
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
{
nsBlockFrame
:
:
DidSetComputedStyle
(
aOldComputedStyle
)
;
mUniqueStyleText
=
MakeUnique
<
nsStyleText
>
(
*
StyleText
(
)
)
;
}
