#
ifndef
nsMathMLmtableFrame_h___
#
define
nsMathMLmtableFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsMathMLContainerFrame
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsTableWrapperFrame
.
h
"
#
include
"
nsTableRowFrame
.
h
"
#
include
"
nsTableCellFrame
.
h
"
namespace
mozilla
{
class
nsDisplayListBuilder
;
class
nsDisplayListSet
;
class
PresShell
;
}
class
nsMathMLmtableWrapperFrame
final
:
public
nsTableWrapperFrame
public
nsMathMLFrame
{
public
:
friend
nsContainerFrame
*
NS_NewMathMLmtableOuterFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmtableWrapperFrame
)
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsTableWrapperFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eMathML
)
)
;
}
protected
:
explicit
nsMathMLmtableWrapperFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsTableWrapperFrame
(
aStyle
aPresContext
kClassID
)
{
}
virtual
~
nsMathMLmtableWrapperFrame
(
)
;
nsIFrame
*
GetRowFrameAt
(
int32_t
aRowIndex
)
;
}
;
class
nsMathMLmtableFrame
final
:
public
nsTableFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmtableFrame
)
friend
nsContainerFrame
*
NS_NewMathMLmtableFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
{
nsTableFrame
:
:
AppendFrames
(
aListID
std
:
:
move
(
aFrameList
)
)
;
RestyleTable
(
)
;
}
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
{
nsTableFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aPrevFrameLine
aFrameList
)
;
RestyleTable
(
)
;
}
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
{
nsTableFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
RestyleTable
(
)
;
}
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsTableFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eMathML
)
)
;
}
void
RestyleTable
(
)
;
nscoord
GetColSpacing
(
int32_t
aColIndex
)
override
;
nscoord
GetColSpacing
(
int32_t
aStartColIndex
int32_t
aEndColIndex
)
override
;
nscoord
GetRowSpacing
(
int32_t
aRowIndex
)
override
;
nscoord
GetRowSpacing
(
int32_t
aStartRowIndex
int32_t
aEndRowIndex
)
override
;
void
SetColSpacingArray
(
const
nsTArray
<
nscoord
>
&
aColSpacing
)
{
mColSpacing
=
aColSpacing
.
Clone
(
)
;
}
void
SetRowSpacingArray
(
const
nsTArray
<
nscoord
>
&
aRowSpacing
)
{
mRowSpacing
=
aRowSpacing
.
Clone
(
)
;
}
void
SetFrameSpacing
(
nscoord
aSpacingX
nscoord
aSpacingY
)
{
mFrameSpacingX
=
aSpacingX
;
mFrameSpacingY
=
aSpacingY
;
}
void
SetUseCSSSpacing
(
)
;
bool
GetUseCSSSpacing
(
)
{
return
mUseCSSSpacing
;
}
protected
:
explicit
nsMathMLmtableFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsTableFrame
(
aStyle
aPresContext
kClassID
)
mFrameSpacingX
(
0
)
mFrameSpacingY
(
0
)
mUseCSSSpacing
(
false
)
{
}
virtual
~
nsMathMLmtableFrame
(
)
;
private
:
nsTArray
<
nscoord
>
mColSpacing
;
nsTArray
<
nscoord
>
mRowSpacing
;
nscoord
mFrameSpacingX
;
nscoord
mFrameSpacingY
;
bool
mUseCSSSpacing
;
}
;
class
nsMathMLmtrFrame
final
:
public
nsTableRowFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmtrFrame
)
friend
nsContainerFrame
*
NS_NewMathMLmtrFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
{
nsTableRowFrame
:
:
AppendFrames
(
aListID
std
:
:
move
(
aFrameList
)
)
;
RestyleTable
(
)
;
}
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aFrameList
)
override
{
nsTableRowFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aPrevFrameLine
aFrameList
)
;
RestyleTable
(
)
;
}
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
{
nsTableRowFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
RestyleTable
(
)
;
}
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsTableRowFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eMathML
)
)
;
}
void
RestyleTable
(
)
{
nsTableFrame
*
tableFrame
=
GetTableFrame
(
)
;
if
(
tableFrame
&
&
tableFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eMathML
)
)
{
(
(
nsMathMLmtableFrame
*
)
tableFrame
)
-
>
RestyleTable
(
)
;
}
}
protected
:
explicit
nsMathMLmtrFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsTableRowFrame
(
aStyle
aPresContext
kClassID
)
{
}
virtual
~
nsMathMLmtrFrame
(
)
;
}
;
class
nsMathMLmtdFrame
final
:
public
nsTableCellFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmtdFrame
)
friend
nsContainerFrame
*
NS_NewMathMLmtdFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
mozilla
:
:
StyleVerticalAlignKeyword
GetVerticalAlign
(
)
const
override
;
virtual
nsresult
ProcessBorders
(
nsTableFrame
*
aFrame
mozilla
:
:
nsDisplayListBuilder
*
aBuilder
const
mozilla
:
:
nsDisplayListSet
&
aLists
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsTableCellFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eMathML
)
)
;
}
virtual
LogicalMargin
GetBorderWidth
(
WritingMode
aWM
)
const
override
;
virtual
nsMargin
GetBorderOverflow
(
)
override
;
protected
:
nsMathMLmtdFrame
(
ComputedStyle
*
aStyle
nsTableFrame
*
aTableFrame
)
:
nsTableCellFrame
(
aStyle
aTableFrame
kClassID
)
{
}
virtual
~
nsMathMLmtdFrame
(
)
;
}
;
class
nsMathMLmtdInnerFrame
final
:
public
nsBlockFrame
public
nsMathMLFrame
{
public
:
friend
nsContainerFrame
*
NS_NewMathMLmtdInnerFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmtdInnerFrame
)
NS_IMETHOD
UpdatePresentationDataFromChildAt
(
int32_t
aFirstIndex
int32_t
aLastIndex
uint32_t
aFlagsValues
uint32_t
aFlagsToUpdate
)
override
{
nsMathMLContainerFrame
:
:
PropagatePresentationDataFromChildAt
(
this
aFirstIndex
aLastIndex
aFlagsValues
aFlagsToUpdate
)
;
return
NS_OK
;
}
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsBlockFrame
:
:
IsFrameOfType
(
aFlags
&
~
nsIFrame
:
:
eMathML
)
;
}
virtual
const
nsStyleText
*
StyleTextForLineLayout
(
)
override
;
virtual
void
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
override
;
bool
IsMrowLike
(
)
override
{
return
mFrames
.
FirstChild
(
)
!
=
mFrames
.
LastChild
(
)
|
|
!
mFrames
.
FirstChild
(
)
;
}
protected
:
explicit
nsMathMLmtdInnerFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
~
nsMathMLmtdInnerFrame
(
)
=
default
;
mozilla
:
:
UniquePtr
<
nsStyleText
>
mUniqueStyleText
;
}
;
#
endif
