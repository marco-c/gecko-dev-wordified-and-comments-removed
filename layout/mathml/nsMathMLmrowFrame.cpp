#
include
"
nsMathMLmrowFrame
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
using
namespace
mozilla
;
nsIFrame
*
NS_NewMathMLmrowFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmrowFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmrowFrame
)
nsMathMLmrowFrame
:
:
~
nsMathMLmrowFrame
(
)
=
default
;
NS_IMETHODIMP
nsMathMLmrowFrame
:
:
InheritAutomaticData
(
nsIFrame
*
aParent
)
{
nsMathMLContainerFrame
:
:
InheritAutomaticData
(
aParent
)
;
mPresentationData
.
flags
|
=
NS_MATHML_STRETCH_ALL_CHILDREN_VERTICALLY
;
return
NS_OK
;
}
nsresult
nsMathMLmrowFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
mContent
-
>
IsMathMLElement
(
nsGkAtoms
:
:
mtable_
)
)
{
nsIFrame
*
frame
=
mFrames
.
FirstChild
(
)
;
for
(
;
frame
;
frame
=
frame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
)
{
if
(
frame
-
>
IsTableWrapperFrame
(
)
)
return
frame
-
>
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
mtable
wrapper
without
the
real
table
frame
"
)
;
}
return
nsMathMLContainerFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
eMathMLFrameType
nsMathMLmrowFrame
:
:
GetMathMLFrameType
(
)
{
if
(
!
IsMrowLike
(
)
)
{
nsIMathMLFrame
*
child
=
do_QueryFrame
(
mFrames
.
FirstChild
(
)
)
;
if
(
child
)
{
return
child
-
>
GetMathMLFrameType
(
)
;
}
}
return
nsMathMLFrame
:
:
GetMathMLFrameType
(
)
;
}
