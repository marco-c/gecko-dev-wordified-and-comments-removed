#
include
"
nsMathMLmspaceFrame
.
h
"
#
include
"
mozilla
/
dom
/
MathMLElement
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
<
algorithm
>
using
namespace
mozilla
;
nsIFrame
*
NS_NewMathMLmspaceFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMathMLmspaceFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMathMLmspaceFrame
)
nsMathMLmspaceFrame
:
:
~
nsMathMLmspaceFrame
(
)
=
default
;
void
nsMathMLmspaceFrame
:
:
ProcessAttributes
(
nsPresContext
*
aPresContext
)
{
nsAutoString
value
;
float
fontSizeInflation
=
nsLayoutUtils
:
:
FontSizeInflationFor
(
this
)
;
mWidth
=
0
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
width
value
)
;
if
(
!
value
.
IsEmpty
(
)
)
{
ParseNumericValue
(
value
&
mWidth
dom
:
:
MathMLElement
:
:
PARSE_ALLOW_NEGATIVE
aPresContext
mComputedStyle
fontSizeInflation
)
;
}
mHeight
=
0
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
height
value
)
;
if
(
!
value
.
IsEmpty
(
)
)
{
ParseNumericValue
(
value
&
mHeight
0
aPresContext
mComputedStyle
fontSizeInflation
)
;
}
mDepth
=
0
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
depth_
value
)
;
if
(
!
value
.
IsEmpty
(
)
)
{
ParseNumericValue
(
value
&
mDepth
0
aPresContext
mComputedStyle
fontSizeInflation
)
;
}
}
void
nsMathMLmspaceFrame
:
:
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
{
MarkInReflow
(
)
;
MOZ_ASSERT
(
aStatus
.
IsEmpty
(
)
"
Caller
should
pass
a
fresh
reflow
status
!
"
)
;
mPresentationData
.
flags
&
=
~
NS_MATHML_ERROR
;
ProcessAttributes
(
aPresContext
)
;
mBoundingMetrics
=
nsBoundingMetrics
(
)
;
mBoundingMetrics
.
width
=
mWidth
;
mBoundingMetrics
.
ascent
=
mHeight
;
mBoundingMetrics
.
descent
=
mDepth
;
mBoundingMetrics
.
leftBearing
=
0
;
mBoundingMetrics
.
rightBearing
=
mBoundingMetrics
.
width
;
aDesiredSize
.
SetBlockStartAscent
(
mHeight
)
;
aDesiredSize
.
Width
(
)
=
std
:
:
max
(
0
mBoundingMetrics
.
width
)
;
aDesiredSize
.
Height
(
)
=
aDesiredSize
.
BlockStartAscent
(
)
+
mDepth
;
aDesiredSize
.
mBoundingMetrics
=
mBoundingMetrics
;
NS_FRAME_SET_TRUNCATION
(
aStatus
aReflowInput
aDesiredSize
)
;
}
nsresult
nsMathMLmspaceFrame
:
:
MeasureForWidth
(
DrawTarget
*
aDrawTarget
ReflowOutput
&
aDesiredSize
)
{
ProcessAttributes
(
PresContext
(
)
)
;
mBoundingMetrics
=
nsBoundingMetrics
(
)
;
mBoundingMetrics
.
width
=
mWidth
;
aDesiredSize
.
Width
(
)
=
std
:
:
max
(
0
mBoundingMetrics
.
width
)
;
aDesiredSize
.
mBoundingMetrics
=
mBoundingMetrics
;
return
NS_OK
;
}
