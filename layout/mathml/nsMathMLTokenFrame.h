#
ifndef
nsMathMLTokenFrame_h___
#
define
nsMathMLTokenFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsMathMLContainerFrame
.
h
"
namespace
mozilla
{
class
PresShell
;
}
class
nsMathMLTokenFrame
:
public
nsMathMLContainerFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLTokenFrame
)
friend
nsIFrame
*
NS_NewMathMLTokenFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
NS_IMETHOD
TransmitAutomaticData
(
)
override
{
if
(
mContent
-
>
IsMathMLElement
(
nsGkAtoms
:
:
mtext_
)
)
{
mPresentationData
.
flags
|
=
NS_MATHML_SPACE_LIKE
;
}
return
NS_OK
;
}
NS_IMETHOD
InheritAutomaticData
(
nsIFrame
*
aParent
)
override
;
virtual
eMathMLFrameType
GetMathMLFrameType
(
)
override
;
virtual
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
override
;
virtual
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aChildList
)
override
;
virtual
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
aChildList
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
virtual
nsresult
Place
(
DrawTarget
*
aDrawTarget
bool
aPlaceOrigin
ReflowOutput
&
aDesiredSize
)
override
;
protected
:
explicit
nsMathMLTokenFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
=
kClassID
)
:
nsMathMLContainerFrame
(
aStyle
aPresContext
aID
)
{
}
virtual
~
nsMathMLTokenFrame
(
)
;
void
MarkTextFramesAsTokenMathML
(
)
;
}
;
#
endif
