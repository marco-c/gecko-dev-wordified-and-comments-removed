#
ifndef
nsMathMLmencloseFrame_h___
#
define
nsMathMLmencloseFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EnumSet
.
h
"
#
include
"
nsMathMLContainerFrame
.
h
"
enum
nsMencloseNotation
{
NOTATION_LONGDIV
NOTATION_RADICAL
NOTATION_ROUNDEDBOX
NOTATION_CIRCLE
NOTATION_LEFT
NOTATION_RIGHT
NOTATION_TOP
NOTATION_BOTTOM
NOTATION_UPDIAGONALSTRIKE
NOTATION_DOWNDIAGONALSTRIKE
NOTATION_VERTICALSTRIKE
NOTATION_HORIZONTALSTRIKE
NOTATION_UPDIAGONALARROW
NOTATION_PHASORANGLE
}
;
class
nsMathMLmencloseFrame
:
public
nsMathMLContainerFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsMathMLmencloseFrame
)
friend
nsIFrame
*
NS_NewMathMLmencloseFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
;
virtual
nsresult
Place
(
DrawTarget
*
aDrawTarget
bool
aPlaceOrigin
ReflowOutput
&
aDesiredSize
)
override
;
virtual
nsresult
MeasureForWidth
(
DrawTarget
*
aDrawTarget
ReflowOutput
&
aDesiredSize
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
SetAdditionalStyleContext
(
int32_t
aIndex
nsStyleContext
*
aStyleContext
)
override
;
virtual
nsStyleContext
*
GetAdditionalStyleContext
(
int32_t
aIndex
)
const
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
NS_IMETHOD
InheritAutomaticData
(
nsIFrame
*
aParent
)
override
;
NS_IMETHOD
TransmitAutomaticData
(
)
override
;
virtual
nscoord
FixInterFrameSpacing
(
ReflowOutput
&
aDesiredSize
)
override
;
bool
IsMrowLike
(
)
override
{
return
mFrames
.
FirstChild
(
)
!
=
mFrames
.
LastChild
(
)
|
|
!
mFrames
.
FirstChild
(
)
;
}
protected
:
explicit
nsMathMLmencloseFrame
(
nsStyleContext
*
aContext
ClassID
aID
=
kClassID
)
;
virtual
~
nsMathMLmencloseFrame
(
)
;
nsresult
PlaceInternal
(
DrawTarget
*
aDrawTarget
bool
aPlaceOrigin
ReflowOutput
&
aDesiredSize
bool
aWidthOnly
)
;
nsresult
AddNotation
(
const
nsAString
&
aNotation
)
;
void
InitNotations
(
)
;
mozilla
:
:
EnumSet
<
nsMencloseNotation
>
mNotationsToDraw
;
bool
IsToDraw
(
nsMencloseNotation
notation
)
{
return
mNotationsToDraw
.
contains
(
notation
)
;
}
nscoord
mRuleThickness
;
nscoord
mRadicalRuleThickness
;
nsTArray
<
nsMathMLChar
>
mMathMLChar
;
int8_t
mLongDivCharIndex
mRadicalCharIndex
;
nscoord
mContentWidth
;
nsresult
AllocateMathMLChar
(
nsMencloseNotation
mask
)
;
void
DisplayNotation
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
const
nsRect
&
aRect
const
nsDisplayListSet
&
aLists
nscoord
aThickness
nsMencloseNotation
aType
)
;
}
;
#
endif
