const
Cm
=
Components
.
manager
;
var
OnRefTestLoad
OnRefTestUnload
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
resProto
"
"
mozilla
.
org
/
network
/
protocol
;
1
?
name
=
resource
"
"
nsISubstitutingProtocolHandler
"
)
;
XPCOMUtils
.
defineLazyServiceGetter
(
this
"
aomStartup
"
"
mozilla
.
org
/
addons
/
addon
-
manager
-
startup
;
1
"
"
amIAddonManagerStartup
"
)
;
function
processTerminated
(
)
{
return
new
Promise
(
resolve
=
>
{
Services
.
obs
.
addObserver
(
function
observe
(
subject
topic
)
{
if
(
topic
=
=
"
ipc
:
content
-
shutdown
"
)
{
Services
.
obs
.
removeObserver
(
observe
topic
)
;
resolve
(
)
;
}
}
"
ipc
:
content
-
shutdown
"
)
;
}
)
;
}
function
startAndroid
(
win
)
{
win
.
setTimeout
(
function
(
)
{
OnRefTestLoad
(
win
)
;
}
0
)
;
}
function
GetMainWindow
(
)
{
let
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
browser
"
)
;
if
(
!
win
)
{
win
=
Services
.
wm
.
getMostRecentWindow
(
"
navigator
:
geckoview
"
)
;
}
return
win
;
}
this
.
reftest
=
class
extends
ExtensionAPI
{
onStartup
(
)
{
let
uri
=
Services
.
io
.
newURI
(
"
chrome
/
reftest
/
res
/
"
null
this
.
extension
.
rootURI
)
;
resProto
.
setSubstitutionWithFlags
(
"
reftest
"
uri
resProto
.
ALLOW_CONTENT_ACCESS
)
;
const
manifestURI
=
Services
.
io
.
newURI
(
"
manifest
.
json
"
null
this
.
extension
.
rootURI
)
;
let
manifestDirectives
=
[
[
"
content
"
"
reftest
"
"
chrome
/
reftest
/
content
/
"
"
contentaccessible
=
yes
"
]
]
;
if
(
Services
.
appinfo
.
OS
=
=
"
Android
"
)
{
manifestDirectives
.
push
(
[
"
override
"
"
chrome
:
/
/
global
/
skin
/
global
.
css
"
"
chrome
:
/
/
reftest
/
content
/
fake
-
global
.
css
"
]
)
;
}
this
.
chromeHandle
=
aomStartup
.
registerChrome
(
manifestURI
manifestDirectives
)
;
let
win
=
GetMainWindow
(
)
;
if
(
Services
.
appinfo
.
OS
=
=
"
Android
"
)
{
(
{
OnRefTestLoad
OnRefTestUnload
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
reftest
/
reftest
.
jsm
"
)
)
;
if
(
win
)
{
startAndroid
(
win
)
;
}
else
{
Services
.
obs
.
addObserver
(
function
observer
(
aSubject
aTopic
aData
)
{
Services
.
obs
.
removeObserver
(
observer
aTopic
)
;
startAndroid
(
GetMainWindow
(
)
)
;
}
"
initial
-
document
-
element
-
inserted
"
)
;
}
return
;
}
Services
.
io
.
manageOfflineStatus
=
false
;
Services
.
io
.
offline
=
false
;
let
dummy
=
Services
.
ww
.
openWindow
(
null
"
about
:
blank
"
"
dummy
"
"
chrome
dialog
=
no
left
=
800
height
=
200
width
=
200
all
"
null
)
;
dummy
.
onload
=
async
function
(
)
{
win
.
close
(
)
;
const
{
PerTestCoverageUtils
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
reftest
/
PerTestCoverageUtils
.
jsm
"
)
;
if
(
PerTestCoverageUtils
.
enabled
)
{
await
processTerminated
(
)
;
}
dummy
.
focus
(
)
;
Services
.
ww
.
openWindow
(
null
"
chrome
:
/
/
reftest
/
content
/
reftest
.
xhtml
"
"
_blank
"
"
chrome
dialog
=
no
all
"
{
}
)
;
}
;
}
onShutdown
(
)
{
resProto
.
setSubstitution
(
"
reftest
"
null
)
;
this
.
chromeHandle
.
destruct
(
)
;
this
.
chromeHandle
=
null
;
if
(
Services
.
appinfo
.
OS
=
=
"
Android
"
)
{
OnRefTestUnload
(
)
;
Cu
.
unload
(
"
resource
:
/
/
reftest
/
reftest
.
jsm
"
)
;
}
}
}
;
