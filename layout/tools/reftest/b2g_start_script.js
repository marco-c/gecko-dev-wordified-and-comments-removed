const
{
utils
:
Cu
classes
:
Cc
interfaces
:
Ci
}
=
Components
;
function
setPermissions
(
)
{
if
(
__marionetteParams
.
length
<
2
)
{
return
;
}
let
serverAddr
=
__marionetteParams
[
0
]
;
let
serverPort
=
__marionetteParams
[
1
]
;
let
perms
=
Cc
[
"
mozilla
.
org
/
permissionmanager
;
1
"
]
.
getService
(
Ci
.
nsIPermissionManager
)
;
let
ioService
=
Cc
[
"
mozilla
.
org
/
network
/
io
-
service
;
1
"
]
.
getService
(
Ci
.
nsIIOService
)
;
let
uri
=
ioService
.
newURI
(
"
http
:
/
/
"
+
serverAddr
+
"
:
"
+
serverPort
null
null
)
;
perms
.
add
(
uri
"
allowXULXBL
"
Ci
.
nsIPermissionManager
.
ALLOW_ACTION
)
;
}
var
cm
=
Cc
[
"
mozilla
.
org
/
categorymanager
;
1
"
]
.
getService
(
Ci
.
nsICategoryManager
)
;
if
(
cm
)
{
cm
.
deleteCategoryEntry
(
"
update
-
timer
"
"
WebappsUpdateTimer
"
false
)
;
cm
.
deleteCategoryEntry
(
"
update
-
timer
"
"
nsUpdateService
"
false
)
;
}
var
wm
=
Cc
[
"
mozilla
.
org
/
appshell
/
window
-
mediator
;
1
"
]
.
getService
(
Ci
.
nsIWindowMediator
)
;
var
win
=
wm
.
getMostRecentWindow
(
'
'
)
;
setPermissions
(
)
;
var
reftest
=
{
}
;
Cu
.
import
(
"
chrome
:
/
/
reftest
/
content
/
reftest
.
jsm
"
reftest
)
;
navigator
.
mozPower
.
screenEnabled
=
true
;
var
settingLock
=
navigator
.
mozSettings
.
createLock
(
)
;
var
settingResult
=
settingLock
.
set
(
{
'
screen
.
timeout
'
:
0
}
)
;
settingResult
.
onsuccess
=
function
(
)
{
dump
(
"
Set
screen
.
time
to
0
\
n
"
)
;
reftest
.
OnRefTestLoad
(
win
)
;
}
settingResult
.
onerror
=
function
(
)
{
dump
(
"
Change
screen
.
time
failed
\
n
"
)
;
reftest
.
OnRefTestLoad
(
win
)
;
}
