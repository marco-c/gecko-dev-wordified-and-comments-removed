#
ifndef
mozilla_InspectorFontFace_h
#
define
mozilla_InspectorFontFace_h
#
include
"
gfxTypes
.
h
"
#
include
"
mozilla
/
dom
/
CSSFontFaceRule
.
h
"
#
include
"
mozilla
/
dom
/
InspectorUtilsBinding
.
h
"
#
include
"
mozilla
/
dom
/
NonRefcountedDOMObject
.
h
"
#
include
"
nsRange
.
h
"
class
gfxFontEntry
;
class
gfxFontGroup
;
namespace
mozilla
:
:
dom
{
class
InspectorFontFace
final
:
public
NonRefcountedDOMObject
{
public
:
InspectorFontFace
(
gfxFontEntry
*
aFontEntry
gfxFontGroup
*
aFontGroup
FontMatchType
aMatchType
)
;
~
InspectorFontFace
(
)
;
gfxFontEntry
*
GetFontEntry
(
)
const
{
return
mFontEntry
;
}
void
AddMatchType
(
FontMatchType
aMatchType
)
{
mMatchType
|
=
aMatchType
;
}
void
AddRange
(
nsRange
*
aRange
)
;
size_t
RangeCount
(
)
const
{
return
mRanges
.
Length
(
)
;
}
bool
FromFontGroup
(
)
;
bool
FromLanguagePrefs
(
)
;
bool
FromSystemFallback
(
)
;
void
GetName
(
nsAString
&
aName
)
;
void
GetCSSFamilyName
(
nsAString
&
aCSSFamilyName
)
;
void
GetCSSGeneric
(
nsAString
&
aGeneric
)
;
CSSFontFaceRule
*
GetRule
(
)
;
int32_t
SrcIndex
(
)
;
void
GetURI
(
nsAString
&
aURI
)
;
void
GetLocalName
(
nsAString
&
aLocalName
)
;
void
GetFormat
(
nsAString
&
aFormat
)
;
void
GetMetadata
(
nsAString
&
aMetadata
)
;
void
GetVariationAxes
(
nsTArray
<
InspectorVariationAxis
>
&
aResult
ErrorResult
&
aRV
)
;
void
GetVariationInstances
(
nsTArray
<
InspectorVariationInstance
>
&
aResult
ErrorResult
&
aRV
)
;
void
GetFeatures
(
nsTArray
<
InspectorFontFeature
>
&
aResult
ErrorResult
&
aRV
)
;
void
GetRanges
(
nsTArray
<
RefPtr
<
nsRange
>
>
&
aResult
)
;
bool
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
JS
:
:
MutableHandle
<
JSObject
*
>
aReflector
)
{
return
InspectorFontFace_Binding
:
:
Wrap
(
aCx
this
aGivenProto
aReflector
)
;
}
protected
:
RefPtr
<
gfxFontEntry
>
mFontEntry
;
RefPtr
<
gfxFontGroup
>
mFontGroup
;
RefPtr
<
CSSFontFaceRule
>
mRule
;
FontMatchType
mMatchType
;
nsTArray
<
RefPtr
<
nsRange
>
>
mRanges
;
}
;
}
#
endif
