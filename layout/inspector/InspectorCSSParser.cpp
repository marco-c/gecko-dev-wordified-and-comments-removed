#
include
"
mozilla
/
dom
/
InspectorCSSParser
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
namespace
mozilla
:
:
dom
{
InspectorCSSParser
:
:
InspectorCSSParser
(
const
nsACString
&
aText
)
:
mInput
(
aText
)
{
mParserState
=
Servo_CSSParser_create
(
&
mInput
)
;
}
UniquePtr
<
InspectorCSSParser
>
InspectorCSSParser
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aText
)
{
return
MakeUnique
<
InspectorCSSParser
>
(
aText
)
;
}
InspectorCSSParser
:
:
~
InspectorCSSParser
(
)
{
Servo_CSSParser_destroy
(
mParserState
)
;
mParserState
=
nullptr
;
}
uint32_t
InspectorCSSParser
:
:
LineNumber
(
)
const
{
return
mLineNumber
;
}
uint32_t
InspectorCSSParser
:
:
ColumnNumber
(
)
const
{
return
mColumnNumber
-
1
;
}
void
InspectorCSSParser
:
:
NextToken
(
Nullable
<
InspectorCSSToken
>
&
aResult
)
{
StyleCSSToken
cssToken
;
if
(
!
Servo_CSSParser_NextToken
(
&
mInput
mParserState
&
cssToken
)
)
{
aResult
.
SetNull
(
)
;
mLineNumber
=
Servo_CSSParser_GetCurrentLine
(
mParserState
)
;
mColumnNumber
=
Servo_CSSParser_GetCurrentColumn
(
mParserState
)
;
return
;
}
InspectorCSSToken
&
inspectorCssToken
=
aResult
.
SetValue
(
)
;
inspectorCssToken
.
mText
.
Append
(
cssToken
.
text
)
;
inspectorCssToken
.
mTokenType
.
Append
(
cssToken
.
token_type
)
;
if
(
cssToken
.
has_unit
)
{
inspectorCssToken
.
mUnit
.
Append
(
cssToken
.
unit
)
;
}
else
{
inspectorCssToken
.
mUnit
.
SetIsVoid
(
true
)
;
}
if
(
cssToken
.
has_number
)
{
inspectorCssToken
.
mNumber
=
round
(
cssToken
.
number
*
100
)
/
100
.
0
;
}
mLineNumber
=
cssToken
.
line
;
mColumnNumber
=
cssToken
.
column
;
}
}
