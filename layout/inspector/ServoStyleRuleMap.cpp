#
include
"
mozilla
/
ServoStyleRuleMap
.
h
"
#
include
"
mozilla
/
css
/
GroupRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSImportRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSRuleBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleRule
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
nsStyleSheetService
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
void
ServoStyleRuleMap
:
:
EnsureTable
(
ServoStyleSet
&
aStyleSet
)
{
if
(
!
IsEmpty
(
)
)
{
return
;
}
aStyleSet
.
EnumerateStyleSheets
(
[
&
]
(
StyleSheet
&
aSheet
)
{
FillTableFromStyleSheet
(
aSheet
)
;
}
)
;
}
void
ServoStyleRuleMap
:
:
EnsureTable
(
ShadowRoot
&
aShadowRoot
)
{
if
(
!
IsEmpty
(
)
)
{
return
;
}
for
(
auto
index
:
IntegerRange
(
aShadowRoot
.
SheetCount
(
)
)
)
{
FillTableFromStyleSheet
(
*
aShadowRoot
.
SheetAt
(
index
)
)
;
}
for
(
auto
&
sheet
:
aShadowRoot
.
AdoptedStyleSheets
(
)
)
{
FillTableFromStyleSheet
(
*
sheet
)
;
}
}
void
ServoStyleRuleMap
:
:
SheetAdded
(
StyleSheet
&
aStyleSheet
)
{
if
(
!
IsEmpty
(
)
)
{
FillTableFromStyleSheet
(
aStyleSheet
)
;
}
}
void
ServoStyleRuleMap
:
:
SheetCloned
(
StyleSheet
&
aStyleSheet
)
{
}
void
ServoStyleRuleMap
:
:
SheetRemoved
(
StyleSheet
&
aStyleSheet
)
{
mTable
.
Clear
(
)
;
}
void
ServoStyleRuleMap
:
:
RuleAdded
(
StyleSheet
&
aStyleSheet
css
:
:
Rule
&
aStyleRule
)
{
if
(
!
IsEmpty
(
)
)
{
FillTableFromRule
(
aStyleRule
)
;
}
}
void
ServoStyleRuleMap
:
:
RuleRemoved
(
StyleSheet
&
aStyleSheet
css
:
:
Rule
&
aStyleRule
)
{
if
(
IsEmpty
(
)
)
{
return
;
}
switch
(
aStyleRule
.
Type
(
)
)
{
case
StyleCssRuleType
:
:
Style
:
{
auto
&
rule
=
static_cast
<
CSSStyleRule
&
>
(
aStyleRule
)
;
mTable
.
Remove
(
rule
.
Raw
(
)
)
;
break
;
}
case
StyleCssRuleType
:
:
Import
:
case
StyleCssRuleType
:
:
Media
:
case
StyleCssRuleType
:
:
Supports
:
case
StyleCssRuleType
:
:
LayerBlock
:
case
StyleCssRuleType
:
:
Container
:
case
StyleCssRuleType
:
:
Document
:
{
mTable
.
Clear
(
)
;
break
;
}
case
StyleCssRuleType
:
:
LayerStatement
:
case
StyleCssRuleType
:
:
FontFace
:
case
StyleCssRuleType
:
:
Page
:
case
StyleCssRuleType
:
:
Property
:
case
StyleCssRuleType
:
:
Keyframes
:
case
StyleCssRuleType
:
:
Keyframe
:
case
StyleCssRuleType
:
:
Namespace
:
case
StyleCssRuleType
:
:
CounterStyle
:
case
StyleCssRuleType
:
:
FontFeatureValues
:
case
StyleCssRuleType
:
:
FontPaletteValues
:
break
;
}
}
size_t
ServoStyleRuleMap
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
mTable
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
return
n
;
}
void
ServoStyleRuleMap
:
:
FillTableFromRule
(
css
:
:
Rule
&
aRule
)
{
switch
(
aRule
.
Type
(
)
)
{
case
StyleCssRuleType
:
:
Style
:
{
auto
&
rule
=
static_cast
<
CSSStyleRule
&
>
(
aRule
)
;
mTable
.
InsertOrUpdate
(
rule
.
Raw
(
)
&
rule
)
;
break
;
}
case
StyleCssRuleType
:
:
LayerBlock
:
case
StyleCssRuleType
:
:
Media
:
case
StyleCssRuleType
:
:
Supports
:
case
StyleCssRuleType
:
:
Container
:
case
StyleCssRuleType
:
:
Document
:
{
auto
&
rule
=
static_cast
<
css
:
:
GroupRule
&
>
(
aRule
)
;
if
(
ServoCSSRuleList
*
ruleList
=
rule
.
GetCssRules
(
)
)
{
FillTableFromRuleList
(
*
ruleList
)
;
}
break
;
}
case
StyleCssRuleType
:
:
Import
:
{
auto
&
rule
=
static_cast
<
CSSImportRule
&
>
(
aRule
)
;
if
(
auto
*
sheet
=
rule
.
GetStyleSheet
(
)
)
{
FillTableFromStyleSheet
(
*
sheet
)
;
}
break
;
}
case
StyleCssRuleType
:
:
LayerStatement
:
case
StyleCssRuleType
:
:
FontFace
:
case
StyleCssRuleType
:
:
Page
:
case
StyleCssRuleType
:
:
Property
:
case
StyleCssRuleType
:
:
Keyframes
:
case
StyleCssRuleType
:
:
Keyframe
:
case
StyleCssRuleType
:
:
Namespace
:
case
StyleCssRuleType
:
:
CounterStyle
:
case
StyleCssRuleType
:
:
FontFeatureValues
:
case
StyleCssRuleType
:
:
FontPaletteValues
:
break
;
}
}
void
ServoStyleRuleMap
:
:
FillTableFromRuleList
(
ServoCSSRuleList
&
aRuleList
)
{
for
(
uint32_t
i
:
IntegerRange
(
aRuleList
.
Length
(
)
)
)
{
FillTableFromRule
(
*
aRuleList
.
GetRule
(
i
)
)
;
}
}
void
ServoStyleRuleMap
:
:
FillTableFromStyleSheet
(
StyleSheet
&
aSheet
)
{
if
(
aSheet
.
IsComplete
(
)
)
{
FillTableFromRuleList
(
*
aSheet
.
GetCssRulesInternal
(
)
)
;
}
}
}
