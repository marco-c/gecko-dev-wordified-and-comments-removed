#
include
"
inLayoutUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
namespace
mozilla
;
EventStateManager
*
inLayoutUtils
:
:
GetEventStateManagerFor
(
Element
&
aElement
)
{
Document
*
doc
=
aElement
.
OwnerDoc
(
)
;
nsPresContext
*
presContext
=
doc
-
>
GetPresContext
(
)
;
if
(
!
presContext
)
return
nullptr
;
return
presContext
-
>
EventStateManager
(
)
;
}
Document
*
inLayoutUtils
:
:
GetSubDocumentFor
(
nsINode
*
aNode
)
{
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
aNode
)
;
if
(
content
)
{
nsCOMPtr
<
Document
>
doc
=
content
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
return
doc
-
>
GetSubDocumentFor
(
content
)
;
}
}
return
nullptr
;
}
nsINode
*
inLayoutUtils
:
:
GetContainerFor
(
const
Document
&
aDoc
)
{
nsPIDOMWindowOuter
*
pwin
=
aDoc
.
GetWindow
(
)
;
if
(
!
pwin
)
{
return
nullptr
;
}
return
pwin
-
>
GetFrameElementInternal
(
)
;
}
