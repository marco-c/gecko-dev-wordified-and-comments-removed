#
ifndef
mozilla_dom_InspectorUtils_h
#
define
mozilla_dom_InspectorUtils_h
#
include
"
mozilla
/
dom
/
InspectorUtilsBinding
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsLayoutUtils
.
h
"
class
nsAtom
;
class
nsINode
;
class
nsINodeList
;
class
nsRange
;
namespace
mozilla
{
class
StyleSheet
;
namespace
css
{
class
Rule
;
}
namespace
dom
{
class
CharacterData
;
class
Document
;
class
Element
;
class
InspectorFontFace
;
}
}
namespace
mozilla
:
:
dom
{
class
CSSStyleRule
;
class
InspectorUtils
{
public
:
static
void
GetAllStyleSheets
(
GlobalObject
&
aGlobal
Document
&
aDocument
bool
aDocumentOnly
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aResult
)
;
static
void
GetCSSStyleRules
(
GlobalObject
&
aGlobal
Element
&
aElement
const
nsAString
&
aPseudo
bool
aIncludeVisitedStyle
nsTArray
<
RefPtr
<
CSSStyleRule
>
>
&
aResult
)
;
static
uint32_t
GetRuleLine
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
uint32_t
GetRuleColumn
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
uint32_t
GetRelativeRuleLine
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
bool
HasRulesModifiedByCSSOM
(
GlobalObject
&
aGlobal
StyleSheet
&
aSheet
)
;
static
void
GetAllStyleSheetCSSStyleRules
(
GlobalObject
&
aGlobal
StyleSheet
&
aSheet
nsTArray
<
RefPtr
<
css
:
:
Rule
>
>
&
aResult
)
;
static
bool
IsInheritedProperty
(
GlobalObject
&
aGlobal
const
nsACString
&
aPropertyName
)
;
static
void
GetCSSPropertyNames
(
GlobalObject
&
aGlobal
const
PropertyNamesOptions
&
aOptions
nsTArray
<
nsString
>
&
aResult
)
;
static
void
GetCSSPropertyPrefs
(
GlobalObject
&
aGlobal
nsTArray
<
PropertyPref
>
&
aResult
)
;
static
void
GetCSSValuesForProperty
(
GlobalObject
&
aGlobal
const
nsACString
&
aPropertyName
nsTArray
<
nsString
>
&
aResult
ErrorResult
&
aRv
)
;
static
void
RgbToColorName
(
GlobalObject
&
aGlobal
uint8_t
aR
uint8_t
aG
uint8_t
aB
nsACString
&
aResult
)
;
static
void
ColorToRGBA
(
GlobalObject
&
const
nsACString
&
aColorString
const
Document
*
Nullable
<
InspectorRGBATuple
>
&
aResult
)
;
static
bool
IsValidCSSColor
(
GlobalObject
&
aGlobal
const
nsACString
&
aColorString
)
;
static
void
GetSubpropertiesForCSSProperty
(
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
nsTArray
<
nsString
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
CssPropertyIsShorthand
(
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
ErrorResult
&
aRv
)
;
static
bool
CssPropertySupportsType
(
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
InspectorPropertyType
ErrorResult
&
aRv
)
;
static
bool
Supports
(
GlobalObject
&
const
nsACString
&
aDeclaration
const
SupportsOptions
&
)
;
static
bool
IsIgnorableWhitespace
(
GlobalObject
&
aGlobalObject
CharacterData
&
aDataNode
)
{
return
IsIgnorableWhitespace
(
aDataNode
)
;
}
static
bool
IsIgnorableWhitespace
(
CharacterData
&
aDataNode
)
;
static
nsINode
*
GetParentForNode
(
nsINode
&
aNode
bool
aShowingAnonymousContent
)
;
static
nsINode
*
GetParentForNode
(
GlobalObject
&
aGlobalObject
nsINode
&
aNode
bool
aShowingAnonymousContent
)
{
return
GetParentForNode
(
aNode
aShowingAnonymousContent
)
;
}
static
void
GetChildrenForNode
(
GlobalObject
&
nsINode
&
aNode
bool
aShowingAnonymousContent
bool
aIncludeAssignedNodes
nsTArray
<
RefPtr
<
nsINode
>
>
&
aResult
)
{
return
GetChildrenForNode
(
aNode
aShowingAnonymousContent
aIncludeAssignedNodes
true
aResult
)
;
}
static
void
GetChildrenForNode
(
nsINode
&
aNode
bool
aShowingAnonymousContent
bool
aIncludeAssignedNodes
bool
aIncludeSubdocuments
nsTArray
<
RefPtr
<
nsINode
>
>
&
aResult
)
;
static
bool
SetContentState
(
GlobalObject
&
aGlobal
Element
&
aElement
uint64_t
aState
ErrorResult
&
aRv
)
;
static
bool
RemoveContentState
(
GlobalObject
&
aGlobal
Element
&
aElement
uint64_t
aState
bool
aClearActiveDocument
ErrorResult
&
aRv
)
;
static
uint64_t
GetContentState
(
GlobalObject
&
aGlobal
Element
&
aElement
)
;
static
void
GetUsedFontFaces
(
GlobalObject
&
aGlobal
nsRange
&
aRange
uint32_t
aMaxRanges
bool
aSkipCollapsedWhitespace
nsLayoutUtils
:
:
UsedFontFaceList
&
aResult
ErrorResult
&
aRv
)
;
static
void
GetCSSPseudoElementNames
(
GlobalObject
&
aGlobal
nsTArray
<
nsString
>
&
aResult
)
;
static
void
AddPseudoClassLock
(
GlobalObject
&
aGlobal
Element
&
aElement
const
nsAString
&
aPseudoClass
bool
aEnabled
)
;
static
void
RemovePseudoClassLock
(
GlobalObject
&
aGlobal
Element
&
aElement
const
nsAString
&
aPseudoClass
)
;
static
bool
HasPseudoClassLock
(
GlobalObject
&
aGlobal
Element
&
aElement
const
nsAString
&
aPseudoClass
)
;
static
void
ClearPseudoClassLocks
(
GlobalObject
&
aGlobal
Element
&
aElement
)
;
static
bool
IsElementThemed
(
GlobalObject
&
aGlobal
Element
&
aElement
)
;
static
Element
*
ContainingBlockOf
(
GlobalObject
&
Element
&
)
;
MOZ_CAN_RUN_SCRIPT
static
already_AddRefed
<
nsINodeList
>
GetOverflowingChildrenOfElement
(
GlobalObject
&
aGlobal
Element
&
element
)
;
static
void
ParseStyleSheet
(
GlobalObject
&
aGlobal
StyleSheet
&
aSheet
const
nsACString
&
aInput
ErrorResult
&
aRv
)
;
static
bool
IsCustomElementName
(
GlobalObject
&
const
nsAString
&
aName
const
nsAString
&
aNamespaceURI
)
;
static
void
GetRegisteredCssHighlights
(
GlobalObject
&
aGlobal
Document
&
aDocument
bool
aActiveOnly
nsTArray
<
nsString
>
&
aResult
)
;
static
void
GetCSSRegisteredProperties
(
GlobalObject
&
aGlobal
Document
&
aDocument
nsTArray
<
InspectorCSSPropertyDefinition
>
&
aResult
)
;
}
;
}
#
endif
