#
ifndef
mozilla_dom_InspectorUtils_h
#
define
mozilla_dom_InspectorUtils_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
class
nsAtom
;
class
nsGenericDOMDataNode
;
class
nsIDocument
;
class
nsStyleContext
;
namespace
mozilla
{
class
StyleSheet
;
namespace
css
{
class
Rule
;
}
namespace
dom
{
class
Element
;
}
}
namespace
mozilla
{
namespace
dom
{
class
InspectorUtils
{
public
:
static
void
GetAllStyleSheets
(
GlobalObject
&
aGlobal
nsIDocument
&
aDocument
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aResult
)
;
static
void
GetCSSStyleRules
(
GlobalObject
&
aGlobal
Element
&
aElement
const
nsAString
&
aPseudo
nsTArray
<
RefPtr
<
css
:
:
Rule
>
>
&
aResult
)
;
static
uint32_t
GetRuleLine
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
uint32_t
GetRuleColumn
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
uint32_t
GetRelativeRuleLine
(
GlobalObject
&
aGlobal
css
:
:
Rule
&
aRule
)
;
static
CSSLexer
*
GetCSSLexer
(
GlobalObject
&
aGlobal
const
nsAString
&
aText
)
;
static
uint32_t
GetSelectorCount
(
GlobalObject
&
aGlobal
BindingStyleRule
&
aRule
)
;
static
void
GetSelectorText
(
GlobalObject
&
aGlobal
BindingStyleRule
&
aRule
uint32_t
aSelectorIndex
nsString
&
aText
ErrorResult
&
aRv
)
;
static
uint64_t
GetSpecificity
(
GlobalObject
&
aGlobal
BindingStyleRule
&
aRule
uint32_t
aSelectorIndex
ErrorResult
&
aRv
)
;
static
bool
SelectorMatchesElement
(
GlobalObject
&
aGlobal
Element
&
aElement
BindingStyleRule
&
aRule
uint32_t
aSelectorIndex
const
nsAString
&
aPseudo
ErrorResult
&
aRv
)
;
static
bool
IsInheritedProperty
(
GlobalObject
&
aGlobal
const
nsAString
&
aPropertyName
)
;
static
void
GetCSSPropertyNames
(
GlobalObject
&
aGlobal
const
PropertyNamesOptions
&
aOptions
nsTArray
<
nsString
>
&
aResult
)
;
static
void
GetCSSValuesForProperty
(
GlobalObject
&
aGlobal
const
nsAString
&
aPropertyName
nsTArray
<
nsString
>
&
aResult
ErrorResult
&
aRv
)
;
static
void
RgbToColorName
(
GlobalObject
&
aGlobal
uint8_t
aR
uint8_t
aG
uint8_t
aB
nsAString
&
aResult
ErrorResult
&
aRv
)
;
static
void
ColorToRGBA
(
GlobalObject
&
aGlobal
const
nsAString
&
aColorString
Nullable
<
InspectorRGBATuple
>
&
aResult
)
;
static
bool
IsValidCSSColor
(
GlobalObject
&
aGlobal
const
nsAString
&
aColorString
)
;
static
void
GetSubpropertiesForCSSProperty
(
GlobalObject
&
aGlobal
const
nsAString
&
aProperty
nsTArray
<
nsString
>
&
aResult
ErrorResult
&
aRv
)
;
static
bool
CssPropertyIsShorthand
(
GlobalObject
&
aGlobal
const
nsAString
&
aProperty
ErrorResult
&
aRv
)
;
static
bool
CssPropertySupportsType
(
GlobalObject
&
aGlobal
const
nsAString
&
aProperty
uint32_t
aType
ErrorResult
&
aRv
)
;
static
bool
IsIgnorableWhitespace
(
GlobalObject
&
aGlobalObject
nsGenericDOMDataNode
&
aDataNode
)
{
return
IsIgnorableWhitespace
(
aDataNode
)
;
}
static
bool
IsIgnorableWhitespace
(
nsGenericDOMDataNode
&
aDataNode
)
;
static
nsINode
*
GetParentForNode
(
nsINode
&
aNode
bool
aShowingAnonymousContent
)
;
static
nsINode
*
GetParentForNode
(
GlobalObject
&
aGlobalObject
nsINode
&
aNode
bool
aShowingAnonymousContent
)
{
return
GetParentForNode
(
aNode
aShowingAnonymousContent
)
;
}
private
:
static
already_AddRefed
<
nsStyleContext
>
GetCleanStyleContextForElement
(
Element
*
aElement
nsAtom
*
aPseudo
)
;
}
;
}
}
#
endif
