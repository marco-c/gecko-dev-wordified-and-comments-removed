#
ifndef
mozilla_PresShell_h
#
define
mozilla_PresShell_h
#
include
"
DepthOrderedFrameList
.
h
"
#
include
"
mozilla
/
PresShellForwards
.
h
"
#
include
<
stdio
.
h
>
#
include
"
FrameMetrics
.
h
"
#
include
"
LayoutConstants
.
h
"
#
include
"
TouchManager
.
h
"
#
include
"
Units
.
h
"
#
include
"
Visibility
.
h
"
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ScrollTypes
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
dom
/
DocumentBinding
.
h
"
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
layout
/
LayoutTelemetryTools
.
h
"
#
include
"
mozilla
/
widget
/
ThemeChangeKind
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
nsFrameState
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsPresArena
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRefreshObservers
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStubDocumentObserver
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsWeakReference
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
nsAccessibilityService
.
h
"
#
endif
class
AutoPointerEventTargetUpdater
;
class
AutoWeakFrame
;
class
gfxContext
;
class
MobileViewportManager
;
class
nsAutoCauseReflowNotifier
;
class
nsCanvasFrame
;
class
nsCaret
;
class
nsCSSFrameConstructor
;
class
nsDocShell
;
class
nsFrameSelection
;
class
nsIDocShell
;
class
nsIFrame
;
class
nsILayoutHistoryState
;
class
nsINode
;
class
nsPageSequenceFrame
;
class
nsIReflowCallback
;
class
nsIScrollableFrame
;
class
nsITimer
;
class
nsPIDOMWindowOuter
;
class
nsPresShellEventCB
;
class
nsRange
;
class
nsRefreshDriver
;
class
nsRegion
;
class
nsView
;
class
nsViewManager
;
class
nsWindowSizes
;
struct
RangePaintInfo
;
#
ifdef
MOZ_REFLOW_PERF
class
ReflowCountMgr
;
#
endif
class
WeakFrame
;
class
ZoomConstraintsClient
;
struct
nsCallbackEventRequest
;
namespace
mozilla
{
class
nsDisplayList
;
class
nsDisplayListBuilder
;
class
FallbackRenderer
;
class
AccessibleCaretEventHub
;
class
GeckoMVMContext
;
class
OverflowChangedTracker
;
class
StyleSheet
;
class
ProfileChunkedBuffer
;
#
ifdef
ACCESSIBILITY
namespace
a11y
{
class
DocAccessible
;
}
#
endif
namespace
dom
{
class
BrowserParent
;
class
Element
;
class
Event
;
class
HTMLSlotElement
;
class
Selection
;
}
namespace
gfx
{
class
SourceSurface
;
}
namespace
layers
{
class
LayerManager
;
struct
LayersId
;
}
namespace
layout
{
class
ScrollAnchorContainer
;
}
#
define
NS_PRESSHELL_IID
\
{
\
0x039d8ffc
0xfa55
0x42d7
{
\
0xa5
0x3a
0x38
0x8c
0xb1
0x29
0xb0
0x52
\
}
\
}
#
undef
NOISY_INTERRUPTIBLE_REFLOW
class
PresShell
final
:
public
nsStubDocumentObserver
public
nsISelectionController
public
nsIObserver
public
nsSupportsWeakReference
{
typedef
dom
:
:
Document
Document
;
typedef
dom
:
:
Element
Element
;
typedef
gfx
:
:
SourceSurface
SourceSurface
;
typedef
layers
:
:
FocusTarget
FocusTarget
;
typedef
layers
:
:
FrameMetrics
FrameMetrics
;
typedef
layers
:
:
LayerManager
LayerManager
;
typedef
nsTHashSet
<
nsIFrame
*
>
VisibleFrames
;
public
:
explicit
PresShell
(
Document
*
aDocument
)
;
NS_DECL_ISUPPORTS
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_PRESSHELL_IID
)
static
bool
AccessibleCaretEnabled
(
nsIDocShell
*
aDocShell
)
;
static
nsIContent
*
GetCapturingContent
(
)
{
return
sCapturingContentInfo
.
mContent
;
}
static
dom
:
:
BrowserParent
*
GetCapturingRemoteTarget
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
sCapturingContentInfo
.
mRemoteTarget
;
}
static
void
AllowMouseCapture
(
bool
aAllowed
)
{
sCapturingContentInfo
.
mAllowed
=
aAllowed
;
}
static
bool
IsMouseCapturePreventingDrag
(
)
{
return
sCapturingContentInfo
.
mPreventDrag
&
&
sCapturingContentInfo
.
mContent
;
}
static
void
ClearMouseCaptureOnView
(
nsView
*
aView
)
;
static
void
ClearMouseCapture
(
)
;
static
void
ClearMouseCapture
(
nsIFrame
*
aFrame
)
;
#
ifdef
ACCESSIBILITY
a11y
:
:
DocAccessible
*
GetDocAccessible
(
)
const
{
return
mDocAccessible
;
}
void
SetDocAccessible
(
a11y
:
:
DocAccessible
*
aDocAccessible
)
{
mDocAccessible
=
aDocAccessible
;
}
#
endif
const
nsPoint
&
GetLastOverWindowPointerLocation
(
)
const
{
return
mLastOverWindowPointerLocation
;
}
MOZ_CAN_RUN_SCRIPT
void
Init
(
nsPresContext
*
nsViewManager
*
)
;
void
Destroy
(
)
;
bool
IsDestroying
(
)
{
return
mIsDestroying
;
}
void
*
AllocateFrame
(
nsQueryFrame
:
:
FrameIID
aID
size_t
aSize
)
{
#
define
FRAME_ID
(
classname
.
.
.
)
\
static_assert
(
size_t
(
nsQueryFrame
:
:
FrameIID
:
:
classname
#
#
_id
)
=
=
\
size_t
(
eArenaObjectID_
#
#
classname
)
\
"
"
)
;
#
define
ABSTRACT_FRAME_ID
(
classname
)
\
static_assert
(
size_t
(
nsQueryFrame
:
:
FrameIID
:
:
classname
#
#
_id
)
=
=
\
size_t
(
eArenaObjectID_
#
#
classname
)
\
"
"
)
;
#
include
"
mozilla
/
FrameIdList
.
h
"
#
undef
FRAME_ID
#
undef
ABSTRACT_FRAME_ID
return
AllocateByObjectID
(
ArenaObjectID
(
size_t
(
aID
)
)
aSize
)
;
}
void
FreeFrame
(
nsQueryFrame
:
:
FrameIID
aID
void
*
aPtr
)
{
return
FreeByObjectID
(
ArenaObjectID
(
size_t
(
aID
)
)
aPtr
)
;
}
void
*
AllocateByObjectID
(
ArenaObjectID
aID
size_t
aSize
)
{
void
*
result
=
mFrameArena
.
Allocate
(
aID
aSize
)
;
RecordAlloc
(
result
)
;
return
result
;
}
void
FreeByObjectID
(
ArenaObjectID
aID
void
*
aPtr
)
{
RecordFree
(
aPtr
)
;
if
(
!
mIsDestroying
)
{
mFrameArena
.
Free
(
aID
aPtr
)
;
}
}
Document
*
GetDocument
(
)
const
{
return
mDocument
;
}
nsPresContext
*
GetPresContext
(
)
const
{
return
mPresContext
;
}
nsViewManager
*
GetViewManager
(
)
const
{
return
mViewManager
;
}
nsRefreshDriver
*
GetRefreshDriver
(
)
const
;
nsCSSFrameConstructor
*
FrameConstructor
(
)
const
{
return
mFrameConstructor
.
get
(
)
;
}
already_AddRefed
<
nsFrameSelection
>
FrameSelection
(
)
;
const
nsFrameSelection
*
ConstFrameSelection
(
)
const
{
return
mSelection
;
}
void
BeginObservingDocument
(
)
;
void
EndObservingDocument
(
)
;
bool
IsObservingDocument
(
)
const
{
return
mIsObservingDocument
;
}
bool
DidInitialize
(
)
const
{
return
mDidInitialize
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
Initialize
(
)
;
MOZ_CAN_RUN_SCRIPT
void
ResizeReflow
(
nscoord
aWidth
nscoord
aHeight
ResizeReflowOptions
=
ResizeReflowOptions
:
:
NoOption
)
;
MOZ_CAN_RUN_SCRIPT
bool
ResizeReflowIgnoreOverride
(
nscoord
aWidth
nscoord
aHeight
ResizeReflowOptions
=
ResizeReflowOptions
:
:
NoOption
)
;
MOZ_CAN_RUN_SCRIPT
void
ForceResizeReflowWithCurrentDimensions
(
)
;
void
AddResizeEventFlushObserverIfNeeded
(
)
;
bool
InRDMPane
(
)
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
void
MaybeNotifyShowDynamicToolbar
(
)
;
#
endif
void
RefreshZoomConstraintsForScreenSizeChange
(
)
;
private
:
bool
SimpleResizeReflow
(
nscoord
aWidth
nscoord
aHeight
)
;
public
:
MOZ_CAN_RUN_SCRIPT_BOUNDARY
bool
DoFlushLayout
(
bool
aInterruptible
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeRecreateMobileViewportManager
(
bool
aAfterInitialization
)
;
bool
UsesMobileViewportSizing
(
)
const
;
RefPtr
<
MobileViewportManager
>
GetMobileViewportManager
(
)
const
;
bool
IsLayoutFlushObserver
(
)
;
void
LoadComplete
(
)
;
nsIFrame
*
GetRootFrame
(
)
const
{
return
mFrameManager
-
>
GetRootFrame
(
)
;
}
nsIFrame
*
GetRootScrollFrame
(
)
const
;
nsIScrollableFrame
*
GetRootScrollFrameAsScrollable
(
)
const
;
already_AddRefed
<
nsIContent
>
GetContentForScrolling
(
)
const
;
already_AddRefed
<
nsIContent
>
GetSelectedContentForScrolling
(
)
const
;
nsIScrollableFrame
*
GetScrollableFrameToScrollForContent
(
nsIContent
*
aContent
layers
:
:
ScrollDirections
aDirections
)
;
nsIScrollableFrame
*
GetScrollableFrameToScroll
(
layers
:
:
ScrollDirections
aDirections
)
;
nsPageSequenceFrame
*
GetPageSequenceFrame
(
)
const
;
nsCanvasFrame
*
GetCanvasFrame
(
)
const
;
void
PostPendingScrollAnchorSelection
(
layout
:
:
ScrollAnchorContainer
*
aContainer
)
;
void
FlushPendingScrollAnchorSelections
(
)
;
void
PostPendingScrollAnchorAdjustment
(
layout
:
:
ScrollAnchorContainer
*
aContainer
)
;
void
PostPendingScrollResnap
(
nsIScrollableFrame
*
aScrollableFrame
)
;
void
FlushPendingScrollResnap
(
)
;
void
CancelAllPendingReflows
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
NotifyCounterStylesAreDirty
(
)
;
bool
FrameIsAncestorOfDirtyRoot
(
nsIFrame
*
aFrame
)
const
;
void
DestroyFramesForAndRestyle
(
Element
*
aElement
)
;
void
ShadowRootWillBeAttached
(
Element
&
aElement
)
;
void
SlotAssignmentWillChange
(
Element
&
aElement
dom
:
:
HTMLSlotElement
*
aOldSlot
dom
:
:
HTMLSlotElement
*
aNewSlot
)
;
void
PostRecreateFramesFor
(
Element
*
)
;
void
RestyleForAnimation
(
Element
*
RestyleHint
)
;
bool
IsSafeToFlush
(
)
const
;
void
NotifyFontFaceSetOnRefresh
(
)
;
void
StopObservingRefreshDriver
(
)
;
void
StartObservingRefreshDriver
(
)
;
bool
ObservingStyleFlushes
(
)
const
{
return
mObservingStyleFlushes
;
}
bool
ObservingLayoutFlushes
(
)
const
{
return
mObservingLayoutFlushes
;
}
void
ObserveStyleFlushes
(
)
{
if
(
!
ObservingStyleFlushes
(
)
)
{
DoObserveStyleFlushes
(
)
;
}
}
nsresult
PostReflowCallback
(
nsIReflowCallback
*
aCallback
)
;
void
CancelReflowCallback
(
nsIReflowCallback
*
aCallback
)
;
void
ScheduleBeforeFirstPaint
(
)
;
void
UnsuppressAndInvalidate
(
)
;
void
ClearFrameRefs
(
nsIFrame
*
aFrame
)
;
void
FrameSelectionWillTakeFocus
(
nsFrameSelection
&
)
;
void
FrameSelectionWillLoseFocus
(
nsFrameSelection
&
)
;
mozilla
:
:
UniquePtr
<
gfxContext
>
CreateReferenceRenderingContext
(
)
;
MOZ_CAN_RUN_SCRIPT
bool
ScrollFrameIntoView
(
nsIFrame
*
aTargetFrame
const
Maybe
<
nsRect
>
&
aKnownRectRelativeToTarget
ScrollAxis
aVertical
ScrollAxis
aHorizontal
ScrollFlags
aScrollFlags
)
;
void
SetIgnoreFrameDestruction
(
bool
aIgnore
)
;
already_AddRefed
<
AccessibleCaretEventHub
>
GetAccessibleCaretEventHub
(
)
const
;
already_AddRefed
<
nsCaret
>
GetCaret
(
)
const
;
void
SetCaret
(
nsCaret
*
aNewCaret
)
;
void
RestoreCaret
(
)
;
dom
:
:
Selection
*
GetCurrentSelection
(
SelectionType
aSelectionType
)
;
nsFrameSelection
*
GetLastFocusedFrameSelection
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventWithTarget
(
WidgetEvent
*
aEvent
nsIFrame
*
aFrame
nsIContent
*
aContent
nsEventStatus
*
aEventStatus
bool
aIsHandlingNativeEvent
=
false
nsIContent
*
*
aTargetContent
=
nullptr
nsIContent
*
aOverrideClickTarget
=
nullptr
)
{
MOZ_ASSERT
(
aEvent
)
;
EventHandler
eventHandler
(
*
this
)
;
return
eventHandler
.
HandleEventWithTarget
(
aEvent
aFrame
aContent
aEventStatus
aIsHandlingNativeEvent
aTargetContent
aOverrideClickTarget
)
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
HandleDOMEventWithTarget
(
nsIContent
*
aTargetContent
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleDOMEventWithTarget
(
nsIContent
*
aTargetContent
dom
:
:
Event
*
aEvent
nsEventStatus
*
aStatus
)
;
bool
CanDispatchEvent
(
const
WidgetGUIEvent
*
aEvent
=
nullptr
)
const
;
nsIFrame
*
GetCurrentEventFrame
(
)
;
already_AddRefed
<
nsIContent
>
GetEventTargetContent
(
WidgetEvent
*
aEvent
)
;
nsresult
CaptureHistoryState
(
nsILayoutHistoryState
*
*
aLayoutHistoryState
)
;
bool
IsReflowLocked
(
)
const
{
return
mIsReflowing
;
}
bool
IsPaintingSuppressed
(
)
const
{
return
mPaintingSuppressed
;
}
void
TryUnsuppressPaintingSoon
(
)
;
void
UnsuppressPainting
(
)
;
void
InitPaintSuppressionTimer
(
)
;
void
CancelPaintSuppressionTimer
(
)
;
MOZ_CAN_RUN_SCRIPT
void
ReconstructFrames
(
)
;
static
bool
GetVerifyReflowEnable
(
)
;
static
void
SetVerifyReflowEnable
(
bool
aEnabled
)
;
nsIFrame
*
GetAbsoluteContainingBlock
(
nsIFrame
*
aFrame
)
;
#
ifdef
MOZ_REFLOW_PERF
void
DumpReflows
(
)
;
void
CountReflows
(
const
char
*
aName
nsIFrame
*
aFrame
)
;
void
PaintCount
(
const
char
*
aName
gfxContext
*
aRenderingContext
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
const
nsPoint
&
aOffset
uint32_t
aColor
)
;
void
SetPaintFrameCount
(
bool
aOn
)
;
bool
IsPaintingFrameCounts
(
)
;
#
endif
#
ifdef
DEBUG
void
ListComputedStyles
(
FILE
*
out
int32_t
aIndent
=
0
)
;
#
endif
#
if
defined
(
DEBUG
)
|
|
defined
(
MOZ_LAYOUT_DEBUGGER
)
void
ListStyleSheets
(
FILE
*
out
int32_t
aIndent
=
0
)
;
#
endif
void
Freeze
(
bool
aIncludeSubDocuments
=
true
)
;
bool
IsFrozen
(
)
{
return
mFrozen
;
}
void
Thaw
(
bool
aIncludeSubDocuments
=
true
)
;
void
FireOrClearDelayedEvents
(
bool
aFireEvents
)
;
void
SetForwardingContainer
(
const
WeakPtr
<
nsDocShell
>
&
aContainer
)
;
nsresult
RenderDocument
(
const
nsRect
&
aRect
RenderDocumentFlags
aFlags
nscolor
aBackgroundColor
gfxContext
*
aRenderedContext
)
;
already_AddRefed
<
SourceSurface
>
RenderNode
(
nsINode
*
aNode
const
Maybe
<
CSSIntRegion
>
&
aRegion
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
RenderImageFlags
aFlags
)
;
already_AddRefed
<
SourceSurface
>
RenderSelection
(
dom
:
:
Selection
*
aSelection
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
RenderImageFlags
aFlags
)
;
void
AddAutoWeakFrame
(
AutoWeakFrame
*
aWeakFrame
)
;
void
AddWeakFrame
(
WeakFrame
*
aWeakFrame
)
;
void
RemoveAutoWeakFrame
(
AutoWeakFrame
*
aWeakFrame
)
;
void
RemoveWeakFrame
(
WeakFrame
*
aWeakFrame
)
;
void
DisableNonTestMouseEvents
(
bool
aDisable
)
;
void
SetCanvasBackground
(
nscolor
aColor
)
{
mCanvasBackgroundColor
=
aColor
;
}
nscolor
GetCanvasBackground
(
)
const
{
return
mCanvasBackgroundColor
;
}
struct
CanvasBackground
{
nscolor
mColor
=
0
;
bool
mCSSSpecified
=
false
;
}
;
CanvasBackground
ComputeCanvasBackground
(
)
const
;
void
UpdateCanvasBackground
(
)
;
void
AddPrintPreviewBackgroundItem
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
nsIFrame
*
aFrame
const
nsRect
&
aBounds
)
;
nscolor
ComputeBackstopColor
(
nsView
*
aDisplayRoot
)
;
void
ObserveNativeAnonMutationsForPrint
(
bool
aObserve
)
{
mObservesMutationsForPrint
=
aObserve
;
}
bool
ObservesNativeAnonMutationsForPrint
(
)
{
return
mObservesMutationsForPrint
;
}
void
ActivenessMaybeChanged
(
)
;
bool
IsActive
(
)
const
{
return
mIsActive
;
}
bool
IsInActiveTab
(
)
const
{
return
mIsInActiveTab
;
}
uint64_t
GetPaintCount
(
)
{
return
mPaintCount
;
}
void
IncrementPaintCount
(
)
{
+
+
mPaintCount
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
GetRootWindow
(
)
;
already_AddRefed
<
nsPIDOMWindowOuter
>
GetFocusedDOMWindowInOurWindow
(
)
;
already_AddRefed
<
nsIContent
>
GetFocusedContentInOurWindow
(
)
const
;
WindowRenderer
*
GetWindowRenderer
(
)
;
bool
AsyncPanZoomEnabled
(
)
;
bool
IgnoringViewportScrolling
(
)
const
{
return
!
!
(
mRenderingStateFlags
&
RenderingStateFlags
:
:
IgnoringViewportScrolling
)
;
}
float
GetResolution
(
)
const
{
return
mResolution
.
valueOr
(
1
.
0
)
;
}
float
GetCumulativeResolution
(
)
const
;
bool
IsResolutionUpdated
(
)
const
{
return
mResolutionUpdated
;
}
void
SetResolutionUpdated
(
bool
aUpdated
)
{
mResolutionUpdated
=
aUpdated
;
}
bool
IsResolutionUpdatedByApz
(
)
const
{
return
mResolutionUpdatedByApz
;
}
void
SetRestoreResolution
(
float
aResolution
LayoutDeviceIntSize
aDisplaySize
)
;
bool
InDrawWindowNotFlushing
(
)
const
{
return
!
!
(
mRenderingStateFlags
&
RenderingStateFlags
:
:
DrawWindowNotFlushing
)
;
}
void
SetIsFirstPaint
(
bool
aIsFirstPaint
)
{
mIsFirstPaint
=
aIsFirstPaint
;
}
bool
GetIsFirstPaint
(
)
const
{
return
mIsFirstPaint
;
}
uint32_t
GetPresShellId
(
)
{
return
mPresShellId
;
}
void
SynthesizeMouseMove
(
bool
aFromScroll
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEvent
(
nsIFrame
*
aFrame
WidgetGUIEvent
*
aEvent
bool
aDontRetargetEvents
nsEventStatus
*
aEventStatus
)
;
bool
ShouldIgnoreInvalidation
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DidPaintWindow
(
)
;
bool
IsVisible
(
)
const
;
bool
IsUnderHiddenEmbedderElement
(
)
const
{
return
mUnderHiddenEmbedderElement
;
}
void
SetIsUnderHiddenEmbedderElement
(
bool
aUnderHiddenEmbedderElement
)
;
MOZ_CAN_RUN_SCRIPT
void
DispatchSynthMouseMove
(
WidgetGUIEvent
*
aEvent
)
;
void
SuppressDisplayport
(
bool
aEnabled
)
;
void
RespectDisplayportSuppression
(
bool
aEnabled
)
;
bool
IsDisplayportSuppressed
(
)
;
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
;
uint32_t
FontSizeInflationEmPerLine
(
)
const
{
return
mFontSizeInflationEmPerLine
;
}
uint32_t
FontSizeInflationMinTwips
(
)
const
{
return
mFontSizeInflationMinTwips
;
}
uint32_t
FontSizeInflationLineThreshold
(
)
const
{
return
mFontSizeInflationLineThreshold
;
}
bool
FontSizeInflationForceEnabled
(
)
const
{
return
mFontSizeInflationForceEnabled
;
}
bool
FontSizeInflationDisabledInMasterProcess
(
)
const
{
return
mFontSizeInflationDisabledInMasterProcess
;
}
bool
FontSizeInflationEnabled
(
)
const
{
return
mFontSizeInflationEnabled
;
}
void
RecomputeFontSizeInflationEnabled
(
)
;
bool
IsReflowInterrupted
(
)
const
{
return
mWasLastReflowInterrupted
;
}
bool
SuppressInterruptibleReflows
(
)
const
{
return
mWasLastReflowInterrupted
;
}
void
ScheduleApproximateFrameVisibilityUpdateSoon
(
)
;
void
ScheduleApproximateFrameVisibilityUpdateNow
(
)
;
void
RebuildApproximateFrameVisibilityDisplayList
(
const
nsDisplayList
&
aList
)
;
void
RebuildApproximateFrameVisibility
(
nsRect
*
aRect
=
nullptr
bool
aRemoveOnly
=
false
)
;
void
EnsureFrameInApproximatelyVisibleList
(
nsIFrame
*
aFrame
)
;
void
RemoveFrameFromApproximatelyVisibleList
(
nsIFrame
*
aFrame
)
;
bool
AssumeAllFramesVisible
(
)
;
nsresult
HasRuleProcessorUsedByMultipleStyleSets
(
uint32_t
aSheetType
bool
*
aRetVal
)
;
bool
HasHandledUserInput
(
)
const
{
return
mHasHandledUserInput
;
}
MOZ_CAN_RUN_SCRIPT
void
FireResizeEvent
(
)
;
MOZ_CAN_RUN_SCRIPT
void
FireResizeEventSync
(
)
;
void
NativeAnonymousContentRemoved
(
nsIContent
*
aAnonContent
)
;
void
SetKeyPressEventModel
(
uint16_t
aKeyPressEventModel
)
{
mForceUseLegacyKeyCodeAndCharCodeValues
|
=
aKeyPressEventModel
=
=
dom
:
:
Document_Binding
:
:
KEYPRESS_EVENT_MODEL_SPLIT
;
}
bool
AddRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
const
char
*
aObserverDescription
)
;
bool
RemoveRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
;
bool
AddPostRefreshObserver
(
nsAPostRefreshObserver
*
)
;
bool
AddPostRefreshObserver
(
mozilla
:
:
ManagedPostRefreshObserver
*
)
=
delete
;
bool
RemovePostRefreshObserver
(
nsAPostRefreshObserver
*
)
;
bool
RemovePostRefreshObserver
(
mozilla
:
:
ManagedPostRefreshObserver
*
)
=
delete
;
struct
VisualScrollUpdate
{
nsPoint
mVisualScrollOffset
;
FrameMetrics
:
:
ScrollOffsetUpdateType
mUpdateType
;
bool
mAcknowledged
=
false
;
}
;
void
ScrollToVisual
(
const
nsPoint
&
aVisualViewportOffset
FrameMetrics
:
:
ScrollOffsetUpdateType
aUpdateType
ScrollMode
aMode
)
;
void
AcknowledgePendingVisualScrollUpdate
(
)
;
void
ClearPendingVisualScrollUpdate
(
)
;
const
Maybe
<
VisualScrollUpdate
>
&
GetPendingVisualScrollUpdate
(
)
const
{
return
mPendingVisualScrollUpdate
;
}
nsPoint
GetLayoutViewportOffset
(
)
const
;
nsSize
GetLayoutViewportSize
(
)
const
;
bool
IsNeverPainting
(
)
{
return
mIsNeverPainting
;
}
void
SetNeverPainting
(
bool
aNeverPainting
)
{
mIsNeverPainting
=
aNeverPainting
;
}
bool
HasPendingReflow
(
)
const
{
return
mObservingLayoutFlushes
|
|
mReflowContinueTimer
;
}
void
SyncWindowProperties
(
bool
aSync
)
;
struct
WindowSizeConstraints
{
nsSize
mMinSize
;
nsSize
mMaxSize
;
}
;
WindowSizeConstraints
GetWindowSizeConstraints
(
)
;
Document
*
GetPrimaryContentDocument
(
)
;
struct
MOZ_RAII
AutoAssertNoFlush
{
explicit
AutoAssertNoFlush
(
PresShell
&
aPresShell
)
:
mPresShell
(
aPresShell
)
mOldForbidden
(
mPresShell
.
mForbiddenToFlush
)
{
mPresShell
.
mForbiddenToFlush
=
true
;
}
~
AutoAssertNoFlush
(
)
{
mPresShell
.
mForbiddenToFlush
=
mOldForbidden
;
}
PresShell
&
mPresShell
;
const
bool
mOldForbidden
;
}
;
NS_IMETHOD
GetSelectionFromScript
(
RawSelectionType
aRawSelectionType
dom
:
:
Selection
*
*
aSelection
)
override
;
dom
:
:
Selection
*
GetSelection
(
RawSelectionType
aRawSelectionType
)
override
;
NS_IMETHOD
SetDisplaySelection
(
int16_t
aToggle
)
override
;
NS_IMETHOD
GetDisplaySelection
(
int16_t
*
aToggle
)
override
;
NS_IMETHOD
ScrollSelectionIntoView
(
RawSelectionType
aRawSelectionType
SelectionRegion
aRegion
int16_t
aFlags
)
override
;
NS_IMETHOD
RepaintSelection
(
RawSelectionType
aRawSelectionType
)
override
;
void
SelectionWillTakeFocus
(
)
override
;
void
SelectionWillLoseFocus
(
)
override
;
MOZ_CAN_RUN_SCRIPT
bool
FixUpFocus
(
)
;
nsresult
SetResolutionAndScaleTo
(
float
aResolution
ResolutionChangeOrigin
aOrigin
)
;
ResolutionChangeOrigin
GetLastResolutionChangeOrigin
(
)
{
return
mLastResolutionChangeOrigin
;
}
void
WindowSizeMoveDone
(
)
;
void
BackingScaleFactorChanged
(
)
{
mPresContext
-
>
UIResolutionChangedSync
(
)
;
}
MOZ_CAN_RUN_SCRIPT
void
PaintAndRequestComposite
(
nsView
*
aView
PaintFlags
aFlags
)
;
MOZ_CAN_RUN_SCRIPT
void
SyncPaintFallback
(
nsView
*
aView
)
;
MOZ_CAN_RUN_SCRIPT
void
WillPaint
(
)
;
void
ScheduleViewManagerFlush
(
)
;
NS_IMETHOD
SetCaretEnabled
(
bool
aInEnable
)
override
;
NS_IMETHOD
SetCaretReadOnly
(
bool
aReadOnly
)
override
;
NS_IMETHOD
GetCaretEnabled
(
bool
*
aOutEnabled
)
override
;
NS_IMETHOD
SetCaretVisibilityDuringSelection
(
bool
aVisibility
)
override
;
NS_IMETHOD
GetCaretVisible
(
bool
*
_retval
)
override
;
NS_IMETHOD
SetSelectionFlags
(
int16_t
aFlags
)
override
;
NS_IMETHOD
GetSelectionFlags
(
int16_t
*
aFlags
)
override
;
int16_t
GetSelectionFlags
(
)
const
{
return
mSelectionFlags
;
}
NS_IMETHOD
PhysicalMove
(
int16_t
aDirection
int16_t
aAmount
bool
aExtend
)
override
;
NS_IMETHOD
CharacterMove
(
bool
aForward
bool
aExtend
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
WordMove
(
bool
aForward
bool
aExtend
)
override
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
NS_IMETHOD
LineMove
(
bool
aForward
bool
aExtend
)
override
;
NS_IMETHOD
IntraLineMove
(
bool
aForward
bool
aExtend
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
PageMove
(
bool
aForward
bool
aExtend
)
override
;
NS_IMETHOD
ScrollPage
(
bool
aForward
)
override
;
NS_IMETHOD
ScrollLine
(
bool
aForward
)
override
;
NS_IMETHOD
ScrollCharacter
(
bool
aRight
)
override
;
NS_IMETHOD
CompleteScroll
(
bool
aForward
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
CompleteMove
(
bool
aForward
bool
aExtend
)
override
;
void
DocumentStatesChanged
(
dom
:
:
DocumentState
)
;
NS_DECL_NSIDOCUMENTOBSERVER_BEGINLOAD
NS_DECL_NSIDOCUMENTOBSERVER_ENDLOAD
NS_DECL_NSIDOCUMENTOBSERVER_CONTENTSTATECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CHARACTERDATACHANGED
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTEWILLCHANGE
NS_DECL_NSIMUTATIONOBSERVER_ATTRIBUTECHANGED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTAPPENDED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTINSERTED
NS_DECL_NSIMUTATIONOBSERVER_CONTENTREMOVED
NS_DECL_NSIOBSERVER
inline
void
EnsureStyleFlush
(
)
;
inline
void
SetNeedStyleFlush
(
)
;
inline
void
SetNeedLayoutFlush
(
)
;
inline
void
SetNeedThrottledAnimationFlush
(
)
;
inline
ServoStyleSet
*
StyleSet
(
)
const
;
bool
NeedFlush
(
FlushType
aType
)
const
{
MOZ_ASSERT
(
aType
>
=
FlushType
:
:
Style
)
;
return
mNeedStyleFlush
|
|
(
mNeedLayoutFlush
&
&
aType
>
=
FlushType
:
:
InterruptibleLayout
)
|
|
aType
>
=
FlushType
:
:
Display
|
|
mNeedThrottledAnimationFlush
|
|
mInFlush
;
}
bool
NeedLayoutFlush
(
)
const
{
return
mNeedLayoutFlush
;
}
bool
NeedStyleFlush
(
)
const
{
return
mNeedStyleFlush
;
}
MOZ_CAN_RUN_SCRIPT
void
FlushPendingNotifications
(
FlushType
aType
)
{
if
(
!
NeedFlush
(
aType
)
)
{
return
;
}
DoFlushPendingNotifications
(
aType
)
;
}
MOZ_CAN_RUN_SCRIPT
void
FlushPendingNotifications
(
ChangesToFlush
aType
)
{
if
(
!
NeedFlush
(
aType
.
mFlushType
)
)
{
return
;
}
DoFlushPendingNotifications
(
aType
)
;
}
void
FrameNeedsReflow
(
nsIFrame
*
aFrame
IntrinsicDirty
aIntrinsicDirty
nsFrameState
aBitToAdd
ReflowRootHandling
aRootHandling
=
ReflowRootHandling
:
:
InferFromBitToAdd
)
;
void
MarkFixedFramesForReflow
(
IntrinsicDirty
aIntrinsicDirty
)
;
void
MaybeReflowForInflationScreenSizeChange
(
)
;
void
CompleteChangeToVisualViewportSize
(
)
;
bool
SetVisualViewportOffset
(
const
nsPoint
&
aScrollOffset
const
nsPoint
&
aPrevLayoutScrollPos
)
;
void
ResetVisualViewportOffset
(
)
;
nsPoint
GetVisualViewportOffset
(
)
const
{
if
(
mVisualViewportOffset
.
isSome
(
)
)
{
return
*
mVisualViewportOffset
;
}
return
GetLayoutViewportOffset
(
)
;
}
bool
IsVisualViewportOffsetSet
(
)
const
{
return
mVisualViewportOffset
.
isSome
(
)
;
}
void
SetVisualViewportSize
(
nscoord
aWidth
nscoord
aHeight
)
;
void
ResetVisualViewportSize
(
)
;
bool
IsVisualViewportSizeSet
(
)
{
return
mVisualViewportSizeSet
;
}
nsSize
GetVisualViewportSize
(
)
{
NS_ASSERTION
(
mVisualViewportSizeSet
"
asking
for
visual
viewport
size
when
its
not
set
?
"
)
;
return
mVisualViewportSize
;
}
nsPoint
GetVisualViewportOffsetRelativeToLayoutViewport
(
)
const
;
DynamicToolbarState
GetDynamicToolbarState
(
)
const
{
if
(
!
mPresContext
)
{
return
DynamicToolbarState
:
:
None
;
}
return
mPresContext
-
>
GetDynamicToolbarState
(
)
;
}
nsSize
GetVisualViewportSizeUpdatedByDynamicToolbar
(
)
const
;
void
SetAuthorStyleDisabled
(
bool
aDisabled
)
;
bool
GetAuthorStyleDisabled
(
)
const
;
void
UpdatePreferenceStyles
(
)
;
void
NotifyStyleSheetServiceSheetAdded
(
StyleSheet
*
aSheet
uint32_t
aSheetType
)
;
void
NotifyStyleSheetServiceSheetRemoved
(
StyleSheet
*
aSheet
uint32_t
aSheetType
)
;
bool
DoReflow
(
nsIFrame
*
aFrame
bool
aInterruptible
OverflowChangedTracker
*
aOverflowTracker
)
;
void
AddCanvasBackgroundColorItem
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
nsIFrame
*
aFrame
const
nsRect
&
aBounds
nscolor
aBackstopColor
=
NS_RGBA
(
0
0
0
0
)
AddCanvasBackgroundColorFlags
aFlags
=
AddCanvasBackgroundColorFlags
:
:
None
)
;
size_t
SizeOfTextRuns
(
MallocSizeOf
aMallocSizeOf
)
const
;
static
PresShell
*
GetShellForEventTarget
(
nsIFrame
*
aFrame
nsIContent
*
aContent
)
;
static
PresShell
*
GetShellForTouchEvent
(
WidgetGUIEvent
*
aEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
GoToAnchor
(
const
nsAString
&
aAnchorName
bool
aScroll
ScrollFlags
aAdditionalScrollFlags
=
ScrollFlags
:
:
None
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ScrollToAnchor
(
)
;
void
RootScrollFrameAdjusted
(
nscoord
aYAdjustment
)
{
if
(
mLastAnchorScrolledTo
)
{
mLastAnchorScrollPositionY
+
=
aYAdjustment
;
}
}
MOZ_CAN_RUN_SCRIPT
nsresult
ScrollContentIntoView
(
nsIContent
*
aContent
ScrollAxis
aVertical
ScrollAxis
aHorizontal
ScrollFlags
aScrollFlags
)
;
static
void
SetCapturingContent
(
nsIContent
*
aContent
CaptureFlags
aFlags
WidgetEvent
*
aEvent
=
nullptr
)
;
static
void
ReleaseCapturingContent
(
)
{
PresShell
:
:
SetCapturingContent
(
nullptr
CaptureFlags
:
:
None
)
;
}
static
void
ReleaseCapturingRemoteTarget
(
dom
:
:
BrowserParent
*
aBrowserParent
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
if
(
sCapturingContentInfo
.
mRemoteTarget
=
=
aBrowserParent
)
{
sCapturingContentInfo
.
mRemoteTarget
=
nullptr
;
}
}
void
EndPaint
(
)
;
void
FrameNeedsToContinueReflow
(
nsIFrame
*
aFrame
)
;
void
NotifyDestroyingFrame
(
nsIFrame
*
aFrame
)
;
bool
GetZoomableByAPZ
(
)
const
;
void
EnsureReflowIfFrameHasHiddenContent
(
nsIFrame
*
)
;
bool
IsForcingLayoutForHiddenContent
(
const
nsIFrame
*
)
const
;
void
RegisterContentVisibilityAutoFrame
(
nsIFrame
*
aFrame
)
{
mContentVisibilityAutoFrames
.
Insert
(
aFrame
)
;
}
void
UpdateRelevancyOfContentVisibilityAutoFrames
(
)
;
void
ScheduleContentRelevancyUpdate
(
ContentRelevancyReason
aReason
)
;
private
:
~
PresShell
(
)
;
void
SetIsActive
(
bool
aIsActive
bool
aIsInActiveTab
)
;
struct
Activeness
{
bool
mShouldBeActive
=
false
;
bool
mIsInActiveTab
=
false
;
}
;
Activeness
ComputeActiveness
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
PaintInternal
(
nsView
*
aViewToPaint
PaintInternalFlags
aFlags
)
;
void
DoObserveStyleFlushes
(
)
;
void
DoObserveLayoutFlushes
(
)
;
bool
DetermineFontSizeInflationState
(
)
;
void
RecordAlloc
(
void
*
aPtr
)
{
#
ifdef
DEBUG
if
(
!
mAllocatedPointers
)
{
return
;
}
MOZ_ASSERT
(
!
mAllocatedPointers
-
>
Contains
(
aPtr
)
)
;
if
(
!
mAllocatedPointers
-
>
Insert
(
aPtr
fallible
)
)
{
mAllocatedPointers
=
nullptr
;
}
#
endif
}
void
RecordFree
(
void
*
aPtr
)
{
#
ifdef
DEBUG
if
(
!
mAllocatedPointers
)
{
return
;
}
MOZ_ASSERT
(
mAllocatedPointers
-
>
Contains
(
aPtr
)
)
;
mAllocatedPointers
-
>
Remove
(
aPtr
)
;
#
endif
}
void
PushCurrentEventInfo
(
nsIFrame
*
aFrame
nsIContent
*
aContent
)
;
void
PopCurrentEventInfo
(
)
;
nsIContent
*
GetCurrentEventContent
(
)
;
friend
class
:
:
nsRefreshDriver
;
friend
class
:
:
nsAutoCauseReflowNotifier
;
void
WillCauseReflow
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DidCauseReflow
(
)
;
void
CancelPostedReflowCallbacks
(
)
;
void
FlushPendingScrollAnchorAdjustments
(
)
;
void
SetPendingVisualScrollUpdate
(
const
nsPoint
&
aVisualViewportOffset
FrameMetrics
:
:
ScrollOffsetUpdateType
aUpdateType
)
;
#
ifdef
MOZ_REFLOW_PERF
UniquePtr
<
ReflowCountMgr
>
mReflowCountMgr
;
#
endif
void
WillDoReflow
(
)
;
struct
ScrollIntoViewData
{
ScrollAxis
mContentScrollVAxis
;
ScrollAxis
mContentScrollHAxis
;
ScrollFlags
mContentToScrollToFlags
;
}
;
static
LazyLogModule
gLog
;
DOMHighResTimeStamp
GetPerformanceNowUnclamped
(
)
;
static
void
sReflowContinueCallback
(
nsITimer
*
aTimer
void
*
aPresShell
)
;
bool
ScheduleReflowOffTimer
(
)
;
void
MaybeScheduleReflow
(
)
;
void
ScheduleReflow
(
)
;
friend
class
:
:
AutoPointerEventTargetUpdater
;
MOZ_CAN_RUN_SCRIPT
bool
ProcessReflowCommands
(
bool
aInterruptible
)
;
MOZ_CAN_RUN_SCRIPT
void
DidDoReflow
(
bool
aInterruptible
)
;
MOZ_CAN_RUN_SCRIPT
void
HandlePostedReflowCallbacks
(
bool
aInterruptible
)
;
MOZ_CAN_RUN_SCRIPT
void
DoScrollContentIntoView
(
)
;
void
AddUserSheet
(
StyleSheet
*
)
;
void
AddAgentSheet
(
StyleSheet
*
)
;
void
AddAuthorSheet
(
StyleSheet
*
)
;
void
RemovePreferenceStyles
(
)
;
void
SetupFontInflation
(
)
;
MOZ_CAN_RUN_SCRIPT
void
DoFlushPendingNotifications
(
FlushType
aType
)
;
MOZ_CAN_RUN_SCRIPT
void
DoFlushPendingNotifications
(
ChangesToFlush
aType
)
;
struct
RenderingState
{
explicit
RenderingState
(
PresShell
*
aPresShell
)
:
mResolution
(
aPresShell
-
>
mResolution
)
mRenderingStateFlags
(
aPresShell
-
>
mRenderingStateFlags
)
{
}
Maybe
<
float
>
mResolution
;
RenderingStateFlags
mRenderingStateFlags
;
}
;
struct
AutoSaveRestoreRenderingState
{
explicit
AutoSaveRestoreRenderingState
(
PresShell
*
aPresShell
)
:
mPresShell
(
aPresShell
)
mOldState
(
aPresShell
)
{
}
~
AutoSaveRestoreRenderingState
(
)
{
mPresShell
-
>
mRenderingStateFlags
=
mOldState
.
mRenderingStateFlags
;
mPresShell
-
>
mResolution
=
mOldState
.
mResolution
;
#
ifdef
ACCESSIBILITY
if
(
nsAccessibilityService
*
accService
=
GetAccService
(
)
)
{
accService
-
>
NotifyOfResolutionChange
(
mPresShell
mPresShell
-
>
GetResolution
(
)
)
;
}
#
endif
}
PresShell
*
mPresShell
;
RenderingState
mOldState
;
}
;
void
SetRenderingState
(
const
RenderingState
&
aState
)
;
friend
class
:
:
nsPresShellEventCB
;
nsRect
ClipListToRange
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
nsRange
*
aRange
)
;
UniquePtr
<
RangePaintInfo
>
CreateRangePaintInfo
(
nsRange
*
aRange
nsRect
&
aSurfaceRect
bool
aForPrimarySelection
)
;
already_AddRefed
<
SourceSurface
>
PaintRangePaintInfo
(
const
nsTArray
<
UniquePtr
<
RangePaintInfo
>
>
&
aItems
dom
:
:
Selection
*
aSelection
const
Maybe
<
CSSIntRegion
>
&
aRegion
nsRect
aArea
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
RenderImageFlags
aFlags
)
;
void
HideViewIfPopup
(
nsView
*
aView
)
;
void
RestoreRootScrollPosition
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
MaybeReleaseCapturingContent
(
)
;
class
DelayedEvent
{
public
:
virtual
~
DelayedEvent
(
)
=
default
;
virtual
void
Dispatch
(
)
{
}
virtual
bool
IsKeyPressEvent
(
)
{
return
false
;
}
}
;
class
DelayedInputEvent
:
public
DelayedEvent
{
public
:
void
Dispatch
(
)
override
;
protected
:
DelayedInputEvent
(
)
;
~
DelayedInputEvent
(
)
override
;
WidgetInputEvent
*
mEvent
;
}
;
class
DelayedMouseEvent
:
public
DelayedInputEvent
{
public
:
explicit
DelayedMouseEvent
(
WidgetMouseEvent
*
aEvent
)
;
}
;
class
DelayedKeyEvent
:
public
DelayedInputEvent
{
public
:
explicit
DelayedKeyEvent
(
WidgetKeyboardEvent
*
aEvent
)
;
bool
IsKeyPressEvent
(
)
override
;
}
;
nsPoint
GetEventLocation
(
const
WidgetMouseEvent
&
aEvent
)
const
;
void
RecordPointerLocation
(
WidgetGUIEvent
*
aEvent
)
;
inline
bool
MouseLocationWasSetBySynthesizedMouseEventForTests
(
)
const
;
class
nsSynthMouseMoveEvent
final
:
public
nsARefreshObserver
{
public
:
nsSynthMouseMoveEvent
(
PresShell
*
aPresShell
bool
aFromScroll
)
:
mPresShell
(
aPresShell
)
mFromScroll
(
aFromScroll
)
{
NS_ASSERTION
(
mPresShell
"
null
parameter
"
)
;
}
private
:
~
nsSynthMouseMoveEvent
(
)
{
Revoke
(
)
;
}
public
:
NS_INLINE_DECL_REFCOUNTING
(
nsSynthMouseMoveEvent
override
)
void
Revoke
(
)
;
MOZ_CAN_RUN_SCRIPT
void
WillRefresh
(
TimeStamp
aTime
)
override
{
if
(
mPresShell
)
{
RefPtr
<
PresShell
>
shell
=
mPresShell
;
shell
-
>
ProcessSynthMouseMoveEvent
(
mFromScroll
)
;
}
}
private
:
PresShell
*
mPresShell
;
bool
mFromScroll
;
}
;
MOZ_CAN_RUN_SCRIPT
void
ProcessSynthMouseMoveEvent
(
bool
aFromScroll
)
;
void
UpdateImageLockingState
(
)
;
already_AddRefed
<
PresShell
>
GetParentPresShellForEventHandling
(
)
;
class
MOZ_STACK_CLASS
EventHandler
final
{
public
:
EventHandler
(
)
=
delete
;
EventHandler
(
const
EventHandler
&
aOther
)
=
delete
;
explicit
EventHandler
(
PresShell
&
aPresShell
)
:
mPresShell
(
aPresShell
)
mCurrentEventInfoSetter
(
nullptr
)
{
}
explicit
EventHandler
(
RefPtr
<
PresShell
>
&
&
aPresShell
)
:
mPresShell
(
std
:
:
move
(
aPresShell
)
)
mCurrentEventInfoSetter
(
nullptr
)
{
}
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEvent
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
bool
aDontRetargetEvents
nsEventStatus
*
aEventStatus
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventWithTarget
(
WidgetEvent
*
aEvent
nsIFrame
*
aNewEventFrame
nsIContent
*
aNewEventContent
nsEventStatus
*
aEventStatus
bool
aIsHandlingNativeEvent
nsIContent
*
*
aTargetContent
nsIContent
*
aOverrideClickTarget
)
;
static
inline
void
OnPresShellDestroy
(
Document
*
aDocument
)
;
private
:
static
bool
InZombieDocument
(
nsIContent
*
aContent
)
;
static
nsIFrame
*
GetNearestFrameContainingPresShell
(
PresShell
*
aPresShell
)
;
static
nsIPrincipal
*
GetDocumentPrincipalToCompareWithBlacklist
(
PresShell
&
aPresShell
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventUsingCoordinates
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
bool
aDontRetargetEvents
)
;
struct
MOZ_STACK_CLASS
EventTargetData
final
{
EventTargetData
(
)
=
delete
;
EventTargetData
(
const
EventTargetData
&
aOther
)
=
delete
;
explicit
EventTargetData
(
nsIFrame
*
aFrameToHandleEvent
)
{
SetFrameAndComputePresShell
(
aFrameToHandleEvent
)
;
}
void
SetFrameAndComputePresShell
(
nsIFrame
*
aFrameToHandleEvent
)
;
void
SetFrameAndComputePresShellAndContent
(
nsIFrame
*
aFrameToHandleEvent
WidgetGUIEvent
*
aGUIEvent
)
;
void
SetContentForEventFromFrame
(
WidgetGUIEvent
*
aGUIEvent
)
;
nsPresContext
*
GetPresContext
(
)
const
{
return
mPresShell
?
mPresShell
-
>
GetPresContext
(
)
:
nullptr
;
}
;
EventStateManager
*
GetEventStateManager
(
)
const
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
return
presContext
?
presContext
-
>
EventStateManager
(
)
:
nullptr
;
}
Document
*
GetDocument
(
)
const
{
return
mPresShell
?
mPresShell
-
>
GetDocument
(
)
:
nullptr
;
}
nsIContent
*
GetFrameContent
(
)
const
;
bool
MaybeRetargetToActiveDocument
(
WidgetGUIEvent
*
aGUIEvent
)
;
bool
ComputeElementFromFrame
(
WidgetGUIEvent
*
aGUIEvent
)
;
void
UpdateTouchEventTarget
(
WidgetGUIEvent
*
aGUIEvent
)
;
RefPtr
<
PresShell
>
mPresShell
;
nsIFrame
*
mFrame
=
nullptr
;
nsCOMPtr
<
nsIContent
>
mContent
;
nsCOMPtr
<
nsIContent
>
mOverrideClickTarget
;
}
;
MOZ_CAN_RUN_SCRIPT
bool
MaybeFlushPendingNotifications
(
WidgetGUIEvent
*
aGUIEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsIFrame
*
GetFrameToHandleNonTouchEvent
(
nsIFrame
*
aRootFrameToHandleEvent
WidgetGUIEvent
*
aGUIEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
ComputeEventTargetFrameAndPresShellAtEventPoint
(
nsIFrame
*
aRootFrameToHandleEvent
WidgetGUIEvent
*
aGUIEvent
EventTargetData
*
aEventTargetData
)
;
MOZ_CAN_RUN_SCRIPT
bool
DispatchPrecedingPointerEvent
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsIContent
*
aPointerCapturingContent
bool
aDontRetargetEvents
EventTargetData
*
aEventTargetData
nsEventStatus
*
aEventStatus
)
;
bool
MaybeDiscardEvent
(
WidgetGUIEvent
*
aGUIEvent
)
;
static
nsIContent
*
GetCapturingContentFor
(
WidgetGUIEvent
*
aGUIEvent
)
;
bool
GetRetargetEventDocument
(
WidgetGUIEvent
*
aGUIEvent
Document
*
*
aRetargetEventDocument
)
;
nsIFrame
*
GetFrameForHandlingEventWith
(
WidgetGUIEvent
*
aGUIEvent
Document
*
aRetargetDocument
nsIFrame
*
aFrameForPresShell
)
;
MOZ_CAN_RUN_SCRIPT
bool
MaybeHandleEventWithAnotherPresShell
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
nsresult
*
aRv
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
RetargetEventToParent
(
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
)
;
MOZ_CAN_RUN_SCRIPT
bool
MaybeHandleEventWithAccessibleCaret
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
)
;
bool
MaybeDiscardOrDelayKeyboardEvent
(
WidgetGUIEvent
*
aGUIEvent
)
;
bool
MaybeDiscardOrDelayMouseEvent
(
nsIFrame
*
aFrameToHandleEvent
WidgetGUIEvent
*
aGUIEvent
)
;
MOZ_CAN_RUN_SCRIPT
nsIFrame
*
MaybeFlushThrottledStyles
(
nsIFrame
*
aFrameForPresShell
)
;
nsIFrame
*
ComputeRootFrameToHandleEvent
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsIContent
*
aCapturingContent
bool
*
aIsCapturingContentIgnored
bool
*
aIsCaptureRetargeted
)
;
nsIFrame
*
ComputeRootFrameToHandleEventWithPopup
(
nsIFrame
*
aRootFrameToHandleEvent
WidgetGUIEvent
*
aGUIEvent
nsIContent
*
aCapturingContent
bool
*
aIsCapturingContentIgnored
)
;
nsIFrame
*
ComputeRootFrameToHandleEventWithCapturingContent
(
nsIFrame
*
aRootFrameToHandleEvent
nsIContent
*
aCapturingContent
bool
*
aIsCapturingContentIgnored
bool
*
aIsCaptureRetargeted
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventWithPointerCapturingContentWithoutItsFrame
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsIContent
*
aPointerCapturingContent
nsEventStatus
*
aEventStatus
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventAtFocusedContent
(
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
)
;
dom
:
:
Element
*
ComputeFocusedEventTargetElement
(
WidgetGUIEvent
*
aGUIEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
MaybeHandleEventWithAnotherPresShell
(
dom
:
:
Element
*
aEventTargetElement
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
nsresult
*
aRv
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleRetargetedEvent
(
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
nsIContent
*
aTarget
)
{
AutoCurrentEventInfoSetter
eventInfoSetter
(
*
this
nullptr
aTarget
)
;
if
(
!
mPresShell
-
>
GetCurrentEventFrame
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
overrideClickTarget
;
return
HandleEventWithCurrentEventInfo
(
aGUIEvent
aEventStatus
true
overrideClickTarget
)
;
}
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventWithFrameForPresShell
(
nsIFrame
*
aFrameForPresShell
WidgetGUIEvent
*
aGUIEvent
nsEventStatus
*
aEventStatus
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
HandleEventWithCurrentEventInfo
(
WidgetEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aIsHandlingNativeEvent
nsIContent
*
aOverrideClickTarget
)
;
class
MOZ_STACK_CLASS
HandlingTimeAccumulator
final
{
public
:
HandlingTimeAccumulator
(
)
=
delete
;
HandlingTimeAccumulator
(
const
HandlingTimeAccumulator
&
aOther
)
=
delete
;
HandlingTimeAccumulator
(
const
EventHandler
&
aEventHandler
const
WidgetEvent
*
aEvent
)
;
~
HandlingTimeAccumulator
(
)
;
private
:
const
EventHandler
&
mEventHandler
;
const
WidgetEvent
*
mEvent
;
TimeStamp
mHandlingStartTime
;
}
;
void
RecordEventPreparationPerformance
(
const
WidgetEvent
*
aEvent
)
;
void
RecordEventHandlingResponsePerformance
(
const
WidgetEvent
*
aEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
PrepareToDispatchEvent
(
WidgetEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
*
aTouchIsNew
)
;
MOZ_CAN_RUN_SCRIPT
void
MaybeHandleKeyboardEventBeforeDispatch
(
WidgetKeyboardEvent
*
aKeyboardEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
AdjustContextMenuKeyEvent
(
WidgetMouseEvent
*
aMouseEvent
)
;
MOZ_CAN_RUN_SCRIPT
bool
PrepareToUseCaretPosition
(
nsIWidget
*
aEventWidget
LayoutDeviceIntPoint
&
aTargetPt
)
;
MOZ_CAN_RUN_SCRIPT
void
GetCurrentItemAndPositionForElement
(
dom
:
:
Element
*
aFocusedElement
nsIContent
*
*
aTargetToUse
LayoutDeviceIntPoint
&
aTargetPt
nsIWidget
*
aRootWidget
)
;
nsIContent
*
GetOverrideClickTarget
(
WidgetGUIEvent
*
aGUIEvent
nsIFrame
*
aFrame
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DispatchEvent
(
EventStateManager
*
aEventStateManager
WidgetEvent
*
aEvent
bool
aTouchIsNew
nsEventStatus
*
aEventStatus
nsIContent
*
aOverrideClickTarget
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DispatchEventToDOM
(
WidgetEvent
*
aEvent
nsEventStatus
*
aEventStatus
nsPresShellEventCB
*
aEventCB
)
;
MOZ_CAN_RUN_SCRIPT
void
DispatchTouchEventToDOM
(
WidgetEvent
*
aEvent
nsEventStatus
*
aEventStatus
nsPresShellEventCB
*
aEventCB
bool
aTouchIsNew
)
;
void
FinalizeHandlingEvent
(
WidgetEvent
*
aEvent
)
;
struct
MOZ_STACK_CLASS
AutoCurrentEventInfoSetter
final
{
explicit
AutoCurrentEventInfoSetter
(
EventHandler
&
aEventHandler
)
:
mEventHandler
(
aEventHandler
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mEventHandler
.
mCurrentEventInfoSetter
)
;
mEventHandler
.
mCurrentEventInfoSetter
=
this
;
mEventHandler
.
mPresShell
-
>
PushCurrentEventInfo
(
nullptr
nullptr
)
;
}
AutoCurrentEventInfoSetter
(
EventHandler
&
aEventHandler
nsIFrame
*
aFrame
nsIContent
*
aContent
)
:
mEventHandler
(
aEventHandler
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mEventHandler
.
mCurrentEventInfoSetter
)
;
mEventHandler
.
mCurrentEventInfoSetter
=
this
;
mEventHandler
.
mPresShell
-
>
PushCurrentEventInfo
(
aFrame
aContent
)
;
}
AutoCurrentEventInfoSetter
(
EventHandler
&
aEventHandler
EventTargetData
&
aEventTargetData
)
:
mEventHandler
(
aEventHandler
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mEventHandler
.
mCurrentEventInfoSetter
)
;
mEventHandler
.
mCurrentEventInfoSetter
=
this
;
mEventHandler
.
mPresShell
-
>
PushCurrentEventInfo
(
aEventTargetData
.
mFrame
aEventTargetData
.
mContent
)
;
}
~
AutoCurrentEventInfoSetter
(
)
{
mEventHandler
.
mPresShell
-
>
PopCurrentEventInfo
(
)
;
mEventHandler
.
mCurrentEventInfoSetter
=
nullptr
;
}
private
:
EventHandler
&
mEventHandler
;
}
;
nsPresContext
*
GetPresContext
(
)
const
{
return
mPresShell
-
>
GetPresContext
(
)
;
}
Document
*
GetDocument
(
)
const
{
return
mPresShell
-
>
GetDocument
(
)
;
}
nsCSSFrameConstructor
*
FrameConstructor
(
)
const
{
return
mPresShell
-
>
FrameConstructor
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
GetFocusedDOMWindowInOurWindow
(
)
{
return
mPresShell
-
>
GetFocusedDOMWindowInOurWindow
(
)
;
}
already_AddRefed
<
PresShell
>
GetParentPresShellForEventHandling
(
)
{
return
mPresShell
-
>
GetParentPresShellForEventHandling
(
)
;
}
OwningNonNull
<
PresShell
>
mPresShell
;
AutoCurrentEventInfoSetter
*
mCurrentEventInfoSetter
;
static
TimeStamp
sLastInputCreated
;
static
TimeStamp
sLastInputProcessed
;
static
StaticRefPtr
<
dom
:
:
Element
>
sLastKeyDownEventTargetElement
;
}
;
PresShell
*
GetRootPresShell
(
)
const
;
bool
IsTransparentContainerElement
(
)
const
;
ColorScheme
DefaultBackgroundColorScheme
(
)
const
;
nscolor
GetDefaultBackgroundColorToDraw
(
)
const
;
void
UpdateApproximateFrameVisibility
(
)
;
void
DoUpdateApproximateFrameVisibility
(
bool
aRemoveOnly
)
;
void
ClearApproximatelyVisibleFramesList
(
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
=
Nothing
(
)
)
;
static
void
ClearApproximateFrameVisibilityVisited
(
nsView
*
aView
bool
aClear
)
;
static
void
MarkFramesInListApproximatelyVisible
(
const
nsDisplayList
&
aList
)
;
void
MarkFramesInSubtreeApproximatelyVisible
(
nsIFrame
*
aFrame
const
nsRect
&
aRect
bool
aRemoveOnly
=
false
)
;
void
DecApproximateVisibleCount
(
VisibleFrames
&
aFrames
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
=
Nothing
(
)
)
;
nsRevocableEventPtr
<
nsRunnableMethod
<
PresShell
>
>
mUpdateApproximateFrameVisibilityEvent
;
VisibleFrames
mApproximatelyVisibleFrames
;
#
ifdef
DEBUG
MOZ_CAN_RUN_SCRIPT_BOUNDARY
bool
VerifyIncrementalReflow
(
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
void
DoVerifyReflow
(
)
;
void
VerifyHasDirtyRootAncestor
(
nsIFrame
*
aFrame
)
;
bool
mInVerifyReflow
=
false
;
nsIFrame
*
mCurrentReflowRoot
=
nullptr
;
#
endif
void
PingPerTickTelemetry
(
FlushType
aFlushType
)
;
private
:
MOZ_KNOWN_LIVE
RefPtr
<
Document
>
const
mDocument
;
MOZ_KNOWN_LIVE
RefPtr
<
nsPresContext
>
const
mPresContext
;
RefPtr
<
StyleSheet
>
mPrefStyleSheet
;
UniquePtr
<
nsCSSFrameConstructor
>
mFrameConstructor
;
nsViewManager
*
mViewManager
;
RefPtr
<
nsFrameSelection
>
mSelection
;
RefPtr
<
nsFrameSelection
>
mFocusedFrameSelection
;
RefPtr
<
nsCaret
>
mCaret
;
RefPtr
<
nsCaret
>
mOriginalCaret
;
RefPtr
<
AccessibleCaretEventHub
>
mAccessibleCaretEventHub
;
nsFrameManager
*
mFrameManager
;
WeakPtr
<
nsDocShell
>
mForwardingContainer
;
DOMHighResTimeStamp
mLastReflowStart
{
0
.
0
}
;
nsCOMPtr
<
nsITimer
>
mReflowContinueTimer
;
#
ifdef
DEBUG
UniquePtr
<
nsTHashSet
<
void
*
>
>
mAllocatedPointers
{
MakeUnique
<
nsTHashSet
<
void
*
>
>
(
)
}
;
#
endif
AutoWeakFrame
*
mAutoWeakFrames
;
nsTHashSet
<
WeakFrame
*
>
mWeakFrames
;
DepthOrderedFrameList
mDirtyRoots
;
UniquePtr
<
ProfileChunkedBuffer
>
mStyleCause
;
UniquePtr
<
ProfileChunkedBuffer
>
mReflowCause
;
nsTArray
<
UniquePtr
<
DelayedEvent
>
>
mDelayedEvents
;
nsRevocableEventPtr
<
nsSynthMouseMoveEvent
>
mSynthMouseMoveEvent
;
TouchManager
mTouchManager
;
RefPtr
<
ZoomConstraintsClient
>
mZoomConstraintsClient
;
RefPtr
<
GeckoMVMContext
>
mMVMContext
;
RefPtr
<
MobileViewportManager
>
mMobileViewportManager
;
nsCOMPtr
<
nsITimer
>
mPaintSuppressionTimer
;
nsCOMPtr
<
nsIContent
>
mPointerEventTarget
;
nsCOMPtr
<
nsIContent
>
mLastAnchorScrolledTo
;
nsCOMPtr
<
nsIContent
>
mContentToScrollTo
;
#
ifdef
ACCESSIBILITY
a11y
:
:
DocAccessible
*
mDocAccessible
;
#
endif
nsIFrame
*
mCurrentEventFrame
;
nsCOMPtr
<
nsIContent
>
mCurrentEventContent
;
nsTArray
<
nsIFrame
*
>
mCurrentEventFrameStack
;
nsCOMArray
<
nsIContent
>
mCurrentEventContentStack
;
nsTHashSet
<
nsIFrame
*
>
mFramesToDirty
;
nsTHashSet
<
nsIScrollableFrame
*
>
mPendingScrollAnchorSelection
;
nsTHashSet
<
nsIScrollableFrame
*
>
mPendingScrollAnchorAdjustment
;
nsTHashSet
<
nsIScrollableFrame
*
>
mPendingScrollResnap
;
nsTHashSet
<
nsIContent
*
>
mHiddenContentInForcedLayout
;
nsTHashSet
<
nsIFrame
*
>
mContentVisibilityAutoFrames
;
ContentRelevancy
mContentVisibilityRelevancyToUpdate
;
nsCallbackEventRequest
*
mFirstCallbackEventRequest
=
nullptr
;
nsCallbackEventRequest
*
mLastCallbackEventRequest
=
nullptr
;
nsPoint
mMouseLocation
;
nsPoint
mLastOverWindowPointerLocation
;
layers
:
:
ScrollableLayerGuid
mMouseEventTargetGuid
;
nsSize
mVisualViewportSize
;
FocusTarget
mAPZFocusTarget
;
using
Arena
=
nsPresArena
<
8192
ArenaObjectID
eArenaObjectID_COUNT
>
;
Arena
mFrameArena
;
Maybe
<
nsPoint
>
mVisualViewportOffset
;
Maybe
<
VisualScrollUpdate
>
mPendingVisualScrollUpdate
;
Maybe
<
float
>
mResolution
;
ResolutionChangeOrigin
mLastResolutionChangeOrigin
;
TimeStamp
mLoadBegin
;
TimeStamp
mLastOSWake
;
uint64_t
mPaintCount
;
uint64_t
mAPZFocusSequenceNumber
;
nscoord
mLastAnchorScrollPositionY
=
0
;
nscolor
mCanvasBackgroundColor
;
int32_t
mActiveSuppressDisplayport
;
uint32_t
mPresShellId
;
uint32_t
mFontSizeInflationEmPerLine
;
uint32_t
mFontSizeInflationMinTwips
;
uint32_t
mFontSizeInflationLineThreshold
;
int16_t
mSelectionFlags
;
uint16_t
mChangeNestCount
;
RenderingStateFlags
mRenderingStateFlags
;
bool
mInFlush
;
bool
mCaretEnabled
:
1
;
bool
mNeedLayoutFlush
:
1
;
bool
mNeedStyleFlush
:
1
;
bool
mNeedThrottledAnimationFlush
:
1
;
bool
mVisualViewportSizeSet
:
1
;
bool
mDidInitialize
:
1
;
bool
mIsDestroying
:
1
;
bool
mIsReflowing
:
1
;
bool
mIsObservingDocument
:
1
;
bool
mForbiddenToFlush
:
1
;
bool
mIsDocumentGone
:
1
;
bool
mHaveShutDown
:
1
;
bool
mPaintingSuppressed
:
1
;
bool
mLastRootReflowHadUnconstrainedBSize
:
1
;
bool
mShouldUnsuppressPainting
:
1
;
bool
mIgnoreFrameDestruction
:
1
;
bool
mIsActive
:
1
;
bool
mIsInActiveTab
:
1
;
bool
mFrozen
:
1
;
bool
mIsFirstPaint
:
1
;
bool
mObservesMutationsForPrint
:
1
;
bool
mWasLastReflowInterrupted
:
1
;
bool
mObservingStyleFlushes
:
1
;
bool
mObservingLayoutFlushes
:
1
;
bool
mResizeEventPending
:
1
;
bool
mFontSizeInflationForceEnabled
:
1
;
bool
mFontSizeInflationDisabledInMasterProcess
:
1
;
bool
mFontSizeInflationEnabled
:
1
;
bool
mIsNeverPainting
:
1
;
bool
mResolutionUpdated
:
1
;
bool
mResolutionUpdatedByApz
:
1
;
bool
mUnderHiddenEmbedderElement
:
1
;
bool
mDocumentLoading
:
1
;
bool
mNoDelayedMouseEvents
:
1
;
bool
mNoDelayedKeyEvents
:
1
;
bool
mApproximateFrameVisibilityVisited
:
1
;
bool
mHasCSSBackgroundColor
:
1
;
bool
mIsLastChromeOnlyEscapeKeyConsumed
:
1
;
bool
mHasReceivedPaintMessage
:
1
;
bool
mIsLastKeyDownCanceled
:
1
;
bool
mHasHandledUserInput
:
1
;
bool
mForceDispatchKeyPressEventsForNonPrintableKeys
:
1
;
bool
mForceUseLegacyKeyCodeAndCharCodeValues
:
1
;
bool
mInitializedWithKeyPressEventDispatchingBlacklist
:
1
;
bool
mForceUseLegacyNonPrimaryDispatch
:
1
;
bool
mInitializedWithClickEventDispatchingBlacklist
:
1
;
bool
mMouseLocationWasSetBySynthesizedMouseEventForTests
:
1
;
bool
mHasTriedFastUnsuppress
:
1
;
bool
mProcessingReflowCommands
:
1
;
bool
mPendingDidDoReflow
:
1
;
struct
CapturingContentInfo
final
{
CapturingContentInfo
(
)
:
mRemoteTarget
(
nullptr
)
mAllowed
(
false
)
mPointerLock
(
false
)
mRetargetToElement
(
false
)
mPreventDrag
(
false
)
{
}
StaticRefPtr
<
nsIContent
>
mContent
;
dom
:
:
BrowserParent
*
mRemoteTarget
;
bool
mAllowed
;
bool
mPointerLock
;
bool
mRetargetToElement
;
bool
mPreventDrag
;
}
;
static
CapturingContentInfo
sCapturingContentInfo
;
static
bool
sDisableNonTestMouseEvents
;
static
bool
sProcessInteractable
;
layout_telemetry
:
:
Data
mLayoutTelemetry
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
PresShell
NS_PRESSHELL_IID
)
}
#
endif
