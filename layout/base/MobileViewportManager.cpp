#
include
"
MobileViewportManager
.
h
"
#
include
"
LayersLogging
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsViewportInfo
.
h
"
#
include
"
UnitTransforms
.
h
"
static
mozilla
:
:
LazyLogModule
sApzMvmLog
(
"
apz
.
mobileviewport
"
)
;
#
define
MVM_LOG
(
.
.
.
)
MOZ_LOG
(
sApzMvmLog
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
NS_IMPL_ISUPPORTS
(
MobileViewportManager
nsIDOMEventListener
nsIObserver
)
#
define
DOM_META_ADDED
NS_LITERAL_STRING
(
"
DOMMetaAdded
"
)
#
define
DOM_META_CHANGED
NS_LITERAL_STRING
(
"
DOMMetaChanged
"
)
#
define
LOAD
NS_LITERAL_STRING
(
"
load
"
)
#
define
BEFORE_FIRST_PAINT
NS_LITERAL_CSTRING
(
"
before
-
first
-
paint
"
)
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layers
;
MobileViewportManager
:
:
MobileViewportManager
(
MVMContext
*
aContext
ManagerType
aType
)
:
mContext
(
aContext
)
mManagerType
(
aType
)
mIsFirstPaint
(
false
)
mPainted
(
false
)
{
MOZ_ASSERT
(
mContext
)
;
MVM_LOG
(
"
%
p
:
creating
with
context
%
p
\
n
"
this
mContext
.
get
(
)
)
;
mContext
-
>
AddEventListener
(
DOM_META_ADDED
this
false
)
;
mContext
-
>
AddEventListener
(
DOM_META_CHANGED
this
false
)
;
mContext
-
>
AddEventListener
(
LOAD
this
true
)
;
mContext
-
>
AddObserver
(
this
BEFORE_FIRST_PAINT
.
Data
(
)
false
)
;
}
MobileViewportManager
:
:
~
MobileViewportManager
(
)
=
default
;
void
MobileViewportManager
:
:
Destroy
(
)
{
MVM_LOG
(
"
%
p
:
destroying
\
n
"
this
)
;
mContext
-
>
RemoveEventListener
(
DOM_META_ADDED
this
false
)
;
mContext
-
>
RemoveEventListener
(
DOM_META_CHANGED
this
false
)
;
mContext
-
>
RemoveEventListener
(
LOAD
this
true
)
;
mContext
-
>
RemoveObserver
(
this
BEFORE_FIRST_PAINT
.
Data
(
)
)
;
mContext
-
>
Destroy
(
)
;
mContext
=
nullptr
;
}
void
MobileViewportManager
:
:
SetRestoreResolution
(
float
aResolution
LayoutDeviceIntSize
aDisplaySize
)
{
SetRestoreResolution
(
aResolution
)
;
ScreenIntSize
restoreDisplaySize
=
ViewAs
<
ScreenPixel
>
(
aDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
mRestoreDisplaySize
=
Some
(
restoreDisplaySize
)
;
}
void
MobileViewportManager
:
:
SetRestoreResolution
(
float
aResolution
)
{
mRestoreResolution
=
Some
(
aResolution
)
;
}
float
MobileViewportManager
:
:
ComputeIntrinsicResolution
(
)
const
{
if
(
!
mContext
)
{
return
1
.
f
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
CSSToScreenScale
intrinsicScale
=
ComputeIntrinsicScale
(
mContext
-
>
GetViewportInfo
(
displaySize
)
displaySize
mMobileViewportSize
)
;
CSSToLayoutDeviceScale
cssToDev
=
mContext
-
>
CSSToDevPixelScale
(
)
;
return
(
intrinsicScale
/
cssToDev
)
.
scale
;
}
mozilla
:
:
CSSToScreenScale
MobileViewportManager
:
:
ComputeIntrinsicScale
(
const
nsViewportInfo
&
aViewportInfo
const
mozilla
:
:
ScreenIntSize
&
aDisplaySize
const
mozilla
:
:
CSSSize
&
aViewportOrContentSize
)
const
{
CSSToScreenScale
intrinsicScale
=
aViewportOrContentSize
.
IsEmpty
(
)
?
CSSToScreenScale
(
1
.
0
)
:
MaxScaleRatio
(
ScreenSize
(
aDisplaySize
)
aViewportOrContentSize
)
;
MVM_LOG
(
"
%
p
:
Intrinsic
computed
zoom
is
%
f
\
n
"
this
intrinsicScale
.
scale
)
;
return
ClampZoom
(
intrinsicScale
aViewportInfo
)
;
}
void
MobileViewportManager
:
:
RequestReflow
(
bool
aForceAdjustResolution
)
{
MVM_LOG
(
"
%
p
:
got
a
reflow
request
with
force
resolution
:
%
d
\
n
"
this
aForceAdjustResolution
)
;
RefreshViewportSize
(
aForceAdjustResolution
)
;
}
void
MobileViewportManager
:
:
ResolutionUpdated
(
mozilla
:
:
ResolutionChangeOrigin
aOrigin
)
{
MVM_LOG
(
"
%
p
:
resolution
updated
\
n
"
this
)
;
if
(
!
mContext
)
{
return
;
}
if
(
(
!
mPainted
&
&
aOrigin
=
=
mozilla
:
:
ResolutionChangeOrigin
:
:
MainThreadRestore
)
|
|
aOrigin
=
=
mozilla
:
:
ResolutionChangeOrigin
:
:
Test
)
{
SetRestoreResolution
(
mContext
-
>
GetResolution
(
)
)
;
}
RefreshVisualViewportSize
(
)
;
}
NS_IMETHODIMP
MobileViewportManager
:
:
HandleEvent
(
dom
:
:
Event
*
event
)
{
nsAutoString
type
;
event
-
>
GetType
(
type
)
;
if
(
type
.
Equals
(
DOM_META_ADDED
)
)
{
HandleDOMMetaAdded
(
)
;
}
else
if
(
type
.
Equals
(
DOM_META_CHANGED
)
)
{
MVM_LOG
(
"
%
p
:
got
a
dom
-
meta
-
changed
event
\
n
"
this
)
;
RefreshViewportSize
(
mPainted
)
;
}
else
if
(
type
.
Equals
(
LOAD
)
)
{
MVM_LOG
(
"
%
p
:
got
a
load
event
\
n
"
this
)
;
if
(
!
mPainted
)
{
SetInitialViewport
(
)
;
}
}
return
NS_OK
;
}
void
MobileViewportManager
:
:
HandleDOMMetaAdded
(
)
{
MVM_LOG
(
"
%
p
:
got
a
dom
-
meta
-
added
event
\
n
"
this
)
;
if
(
mPainted
&
&
mContext
-
>
IsDocumentLoading
(
)
)
{
SetInitialViewport
(
)
;
}
else
{
RefreshViewportSize
(
mPainted
)
;
}
}
NS_IMETHODIMP
MobileViewportManager
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
mContext
)
{
return
NS_OK
;
}
if
(
mContext
-
>
SubjectMatchesDocument
(
aSubject
)
&
&
BEFORE_FIRST_PAINT
.
EqualsASCII
(
aTopic
)
)
{
MVM_LOG
(
"
%
p
:
got
a
before
-
first
-
paint
event
\
n
"
this
)
;
if
(
!
mPainted
)
{
SetInitialViewport
(
)
;
}
}
return
NS_OK
;
}
void
MobileViewportManager
:
:
SetInitialViewport
(
)
{
MVM_LOG
(
"
%
p
:
setting
initial
viewport
\
n
"
this
)
;
mIsFirstPaint
=
true
;
mPainted
=
true
;
RefreshViewportSize
(
false
)
;
}
CSSToScreenScale
MobileViewportManager
:
:
ClampZoom
(
const
CSSToScreenScale
&
aZoom
const
nsViewportInfo
&
aViewportInfo
)
const
{
CSSToScreenScale
zoom
=
aZoom
;
if
(
IsNaN
(
zoom
.
scale
)
)
{
NS_ERROR
(
"
Don
'
t
pass
NaN
to
ClampZoom
;
check
caller
for
0
/
0
division
"
)
;
zoom
=
CSSToScreenScale
(
1
.
0
)
;
}
if
(
zoom
<
aViewportInfo
.
GetMinZoom
(
)
)
{
zoom
=
aViewportInfo
.
GetMinZoom
(
)
;
MVM_LOG
(
"
%
p
:
Clamped
to
%
f
\
n
"
this
zoom
.
scale
)
;
}
if
(
zoom
>
aViewportInfo
.
GetMaxZoom
(
)
)
{
zoom
=
aViewportInfo
.
GetMaxZoom
(
)
;
MVM_LOG
(
"
%
p
:
Clamped
to
%
f
\
n
"
this
zoom
.
scale
)
;
}
MOZ_ASSERT
(
aViewportInfo
.
GetMinZoom
(
)
>
CSSToScreenScale
(
0
.
0f
)
"
zoom
factor
must
be
positive
"
)
;
MOZ_ASSERT
(
aViewportInfo
.
GetMaxZoom
(
)
>
CSSToScreenScale
(
0
.
0f
)
"
zoom
factor
must
be
positive
"
)
;
MOZ_ASSERT
(
zoom
>
CSSToScreenScale
(
0
.
0f
)
"
zoom
factor
must
be
positive
"
)
;
return
zoom
;
}
CSSToScreenScale
MobileViewportManager
:
:
ScaleZoomWithDisplayWidth
(
const
CSSToScreenScale
&
aZoom
const
float
&
aDisplayWidthChangeRatio
const
CSSSize
&
aNewViewport
const
CSSSize
&
aOldViewport
)
{
float
inverseCssWidthChangeRatio
=
(
aNewViewport
.
width
=
=
0
)
?
1
.
0f
:
aOldViewport
.
width
/
aNewViewport
.
width
;
CSSToScreenScale
newZoom
(
aZoom
.
scale
*
aDisplayWidthChangeRatio
*
inverseCssWidthChangeRatio
)
;
MVM_LOG
(
"
%
p
:
Old
zoom
was
%
f
changed
by
%
f
*
%
f
to
%
f
\
n
"
this
aZoom
.
scale
aDisplayWidthChangeRatio
inverseCssWidthChangeRatio
newZoom
.
scale
)
;
return
newZoom
;
}
static
CSSToScreenScale
ResolutionToZoom
(
LayoutDeviceToLayerScale
aResolution
CSSToLayoutDeviceScale
aCssToDev
)
{
return
ViewTargetAs
<
ScreenPixel
>
(
aCssToDev
*
aResolution
/
ParentLayerToLayerScale
(
1
)
PixelCastJustification
:
:
ScreenIsParentLayerForRoot
)
;
}
static
LayoutDeviceToLayerScale
ZoomToResolution
(
CSSToScreenScale
aZoom
CSSToLayoutDeviceScale
aCssToDev
)
{
return
ViewTargetAs
<
ParentLayerPixel
>
(
aZoom
PixelCastJustification
:
:
ScreenIsParentLayerForRoot
)
/
aCssToDev
*
ParentLayerToLayerScale
(
1
)
;
}
void
MobileViewportManager
:
:
UpdateResolution
(
const
CSSSize
&
aViewportOrContentSize
const
Maybe
<
float
>
&
aDisplayWidthChangeRatio
UpdateType
aType
)
{
if
(
!
mContext
)
{
return
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
nsViewportInfo
viewportInfo
=
mContext
-
>
GetViewportInfo
(
displaySize
)
;
CSSToLayoutDeviceScale
cssToDev
=
mContext
-
>
CSSToDevPixelScale
(
)
;
LayoutDeviceToLayerScale
res
(
mContext
-
>
GetResolution
(
)
)
;
CSSToScreenScale
zoom
=
ResolutionToZoom
(
res
cssToDev
)
;
MOZ_ASSERT
(
zoom
>
CSSToScreenScale
(
0
.
0f
)
"
zoom
factor
must
be
positive
"
)
;
Maybe
<
CSSToScreenScale
>
newZoom
;
ScreenIntSize
compositionSize
=
GetCompositionSize
(
displaySize
)
;
CSSToScreenScale
intrinsicScale
=
ComputeIntrinsicScale
(
viewportInfo
compositionSize
aViewportOrContentSize
)
;
if
(
aType
=
=
UpdateType
:
:
ViewportSize
)
{
const
CSSSize
&
viewportSize
=
aViewportOrContentSize
;
if
(
mIsFirstPaint
)
{
CSSToScreenScale
defaultZoom
;
if
(
mRestoreResolution
)
{
LayoutDeviceToLayerScale
restoreResolution
(
mRestoreResolution
.
value
(
)
)
;
CSSToScreenScale
restoreZoom
=
ResolutionToZoom
(
restoreResolution
cssToDev
)
;
if
(
mRestoreDisplaySize
)
{
CSSSize
prevViewport
=
mContext
-
>
GetViewportInfo
(
mRestoreDisplaySize
.
value
(
)
)
.
GetSize
(
)
;
float
restoreDisplayWidthChangeRatio
=
(
mRestoreDisplaySize
.
value
(
)
.
width
>
0
)
?
(
float
)
compositionSize
.
width
/
(
float
)
mRestoreDisplaySize
.
value
(
)
.
width
:
1
.
0f
;
restoreZoom
=
ScaleZoomWithDisplayWidth
(
restoreZoom
restoreDisplayWidthChangeRatio
viewportSize
prevViewport
)
;
}
defaultZoom
=
restoreZoom
;
MVM_LOG
(
"
%
p
:
restored
zoom
is
%
f
\
n
"
this
defaultZoom
.
scale
)
;
defaultZoom
=
ClampZoom
(
defaultZoom
viewportInfo
)
;
}
else
{
defaultZoom
=
viewportInfo
.
GetDefaultZoom
(
)
;
MVM_LOG
(
"
%
p
:
default
zoom
from
viewport
is
%
f
\
n
"
this
defaultZoom
.
scale
)
;
if
(
!
viewportInfo
.
IsDefaultZoomValid
(
)
)
{
defaultZoom
=
intrinsicScale
;
}
}
MOZ_ASSERT
(
viewportInfo
.
GetMinZoom
(
)
<
=
defaultZoom
&
&
defaultZoom
<
=
viewportInfo
.
GetMaxZoom
(
)
)
;
newZoom
=
Some
(
defaultZoom
)
;
}
else
{
if
(
aDisplayWidthChangeRatio
)
{
CSSSize
contentSize
=
aViewportOrContentSize
;
if
(
Maybe
<
CSSRect
>
scrollableRect
=
mContext
-
>
CalculateScrollableRectForRSF
(
)
)
{
contentSize
=
scrollableRect
-
>
Size
(
)
;
}
ScreenSize
minZoomDisplaySize
=
contentSize
*
viewportInfo
.
GetMinZoom
(
)
;
ScreenSize
maxZoomDisplaySize
=
contentSize
*
viewportInfo
.
GetMaxZoom
(
)
;
float
ratio
=
aDisplayWidthChangeRatio
.
value
(
)
;
ScreenSize
newDisplaySize
(
displaySize
)
;
ScreenSize
oldDisplaySize
=
newDisplaySize
/
ratio
;
float
a
(
minZoomDisplaySize
.
width
)
;
float
b
(
maxZoomDisplaySize
.
width
)
;
float
c
(
oldDisplaySize
.
width
)
;
float
d
(
newDisplaySize
.
width
)
;
float
denominator
=
clamped
(
c
a
b
)
;
float
adjustedRatio
=
d
/
denominator
;
CSSToScreenScale
adjustedZoom
=
ScaleZoomWithDisplayWidth
(
zoom
adjustedRatio
viewportSize
mMobileViewportSize
)
;
newZoom
=
Some
(
ClampZoom
(
adjustedZoom
viewportInfo
)
)
;
}
}
}
else
{
MOZ_ASSERT
(
aType
=
=
UpdateType
:
:
ContentSize
)
;
MOZ_ASSERT
(
aDisplayWidthChangeRatio
.
isNothing
(
)
)
;
if
(
!
mRestoreResolution
&
&
!
mContext
-
>
IsResolutionUpdatedByApz
(
)
&
&
!
viewportInfo
.
IsDefaultZoomValid
(
)
)
{
if
(
zoom
!
=
intrinsicScale
)
{
newZoom
=
Some
(
intrinsicScale
)
;
}
}
else
{
CSSToScreenScale
clampedZoom
=
zoom
;
if
(
clampedZoom
<
intrinsicScale
)
{
clampedZoom
=
intrinsicScale
;
}
clampedZoom
=
ClampZoom
(
clampedZoom
viewportInfo
)
;
if
(
clampedZoom
!
=
zoom
)
{
newZoom
=
Some
(
clampedZoom
)
;
}
}
}
if
(
newZoom
)
{
MOZ_ASSERT
(
*
newZoom
>
CSSToScreenScale
(
0
.
0f
)
"
zoom
factor
must
be
positive
"
)
;
LayoutDeviceToLayerScale
resolution
=
ZoomToResolution
(
*
newZoom
cssToDev
)
;
MVM_LOG
(
"
%
p
:
setting
resolution
%
f
\
n
"
this
resolution
.
scale
)
;
mContext
-
>
SetResolutionAndScaleTo
(
resolution
.
scale
ResolutionChangeOrigin
:
:
MainThreadAdjustment
)
;
MVM_LOG
(
"
%
p
:
New
zoom
is
%
f
\
n
"
this
newZoom
-
>
scale
)
;
}
if
(
newZoom
|
|
aType
=
=
UpdateType
:
:
ViewportSize
)
{
UpdateVisualViewportSize
(
displaySize
newZoom
?
*
newZoom
:
zoom
)
;
}
}
ScreenIntSize
MobileViewportManager
:
:
GetCompositionSize
(
const
ScreenIntSize
&
aDisplaySize
)
const
{
if
(
!
mContext
)
{
return
ScreenIntSize
(
)
;
}
ScreenIntSize
compositionSize
(
aDisplaySize
)
;
ScreenMargin
scrollbars
=
mContext
-
>
ScrollbarAreaToExcludeFromCompositionBounds
(
)
*
LayoutDeviceToScreenScale
(
1
.
0f
)
;
compositionSize
.
width
=
std
:
:
max
(
0
.
0f
compositionSize
.
width
-
scrollbars
.
LeftRight
(
)
)
;
compositionSize
.
height
=
std
:
:
max
(
0
.
0f
compositionSize
.
height
-
scrollbars
.
TopBottom
(
)
)
;
return
compositionSize
;
}
void
MobileViewportManager
:
:
UpdateVisualViewportSize
(
const
ScreenIntSize
&
aDisplaySize
const
CSSToScreenScale
&
aZoom
)
{
if
(
!
mContext
)
{
return
;
}
ScreenSize
compositionSize
=
ScreenSize
(
GetCompositionSize
(
aDisplaySize
)
)
;
CSSSize
compSize
=
compositionSize
/
aZoom
;
MVM_LOG
(
"
%
p
:
Setting
VVPS
%
s
\
n
"
this
Stringify
(
compSize
)
.
c_str
(
)
)
;
mContext
-
>
SetVisualViewportSize
(
compSize
)
;
}
CSSToScreenScale
MobileViewportManager
:
:
GetZoom
(
)
const
{
CSSToLayoutDeviceScale
cssToDev
=
mContext
-
>
CSSToDevPixelScale
(
)
;
LayoutDeviceToLayerScale
res
(
mContext
-
>
GetResolution
(
)
)
;
return
ResolutionToZoom
(
res
cssToDev
)
;
}
void
MobileViewportManager
:
:
UpdateVisualViewportSizeByDynamicToolbar
(
ScreenIntCoord
aToolbarHeight
)
{
if
(
!
mContext
)
{
return
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
displaySize
.
height
+
=
aToolbarHeight
;
CSSSize
compSize
=
ScreenSize
(
GetCompositionSize
(
displaySize
)
)
/
GetZoom
(
)
;
mVisualViewportSizeUpdatedByDynamicToolbar
=
nsSize
(
nsPresContext
:
:
CSSPixelsToAppUnits
(
compSize
.
width
)
nsPresContext
:
:
CSSPixelsToAppUnits
(
compSize
.
height
)
)
;
mContext
-
>
PostVisualViewportResizeEventByDynamicToolbar
(
)
;
}
void
MobileViewportManager
:
:
UpdateVisualViewportSizeForPotentialScrollbarChange
(
)
{
RefreshVisualViewportSize
(
)
;
}
void
MobileViewportManager
:
:
UpdateDisplayPortMargins
(
)
{
if
(
!
mContext
)
{
return
;
}
mContext
-
>
UpdateDisplayPortMargins
(
)
;
}
void
MobileViewportManager
:
:
RefreshVisualViewportSize
(
)
{
if
(
!
mContext
)
{
return
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
if
(
displaySize
.
width
=
=
0
|
|
displaySize
.
height
=
=
0
)
{
return
;
}
UpdateVisualViewportSize
(
displaySize
GetZoom
(
)
)
;
}
void
MobileViewportManager
:
:
NotifyResizeReflow
(
)
{
if
(
Maybe
<
LayoutDeviceIntSize
>
newDisplaySize
=
mContext
-
>
GetContentViewerSize
(
)
)
{
mDisplaySize
=
*
newDisplaySize
;
MVM_LOG
(
"
%
p
:
Display
size
updated
to
%
s
\
n
"
this
Stringify
(
mDisplaySize
)
.
c_str
(
)
)
;
if
(
mDisplaySize
.
width
=
=
0
|
|
mDisplaySize
.
height
=
=
0
)
{
return
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
nsViewportInfo
viewportInfo
=
mContext
-
>
GetViewportInfo
(
displaySize
)
;
mMobileViewportSize
=
viewportInfo
.
GetSize
(
)
;
MVM_LOG
(
"
%
p
:
MVSize
updated
to
%
s
\
n
"
this
Stringify
(
mMobileViewportSize
)
.
c_str
(
)
)
;
RefreshVisualViewportSize
(
)
;
}
}
void
MobileViewportManager
:
:
RefreshViewportSize
(
bool
aForceAdjustResolution
)
{
if
(
!
mContext
)
{
return
;
}
Maybe
<
float
>
displayWidthChangeRatio
;
if
(
Maybe
<
LayoutDeviceIntSize
>
newDisplaySize
=
mContext
-
>
GetContentViewerSize
(
)
)
{
if
(
mDisplaySize
.
width
>
0
)
{
if
(
aForceAdjustResolution
|
|
mDisplaySize
.
width
!
=
newDisplaySize
-
>
width
)
{
displayWidthChangeRatio
=
Some
(
(
float
)
newDisplaySize
-
>
width
/
(
float
)
mDisplaySize
.
width
)
;
}
}
else
if
(
aForceAdjustResolution
)
{
displayWidthChangeRatio
=
Some
(
1
.
0f
)
;
}
MVM_LOG
(
"
%
p
:
Display
width
change
ratio
is
%
f
\
n
"
this
displayWidthChangeRatio
.
valueOr
(
0
.
0f
)
)
;
mDisplaySize
=
*
newDisplaySize
;
}
MVM_LOG
(
"
%
p
:
Computing
CSS
viewport
using
%
d
%
d
\
n
"
this
mDisplaySize
.
width
mDisplaySize
.
height
)
;
if
(
mDisplaySize
.
width
=
=
0
|
|
mDisplaySize
.
height
=
=
0
)
{
return
;
}
ScreenIntSize
displaySize
=
ViewAs
<
ScreenPixel
>
(
mDisplaySize
PixelCastJustification
:
:
LayoutDeviceIsScreenForBounds
)
;
nsViewportInfo
viewportInfo
=
mContext
-
>
GetViewportInfo
(
displaySize
)
;
MVM_LOG
(
"
%
p
:
viewport
info
has
zooms
min
=
%
f
max
=
%
f
default
=
%
f
valid
=
%
d
\
n
"
this
viewportInfo
.
GetMinZoom
(
)
.
scale
viewportInfo
.
GetMaxZoom
(
)
.
scale
viewportInfo
.
GetDefaultZoom
(
)
.
scale
viewportInfo
.
IsDefaultZoomValid
(
)
)
;
CSSSize
viewport
=
viewportInfo
.
GetSize
(
)
;
MVM_LOG
(
"
%
p
:
Computed
CSS
viewport
%
s
\
n
"
this
Stringify
(
viewport
)
.
c_str
(
)
)
;
if
(
!
mIsFirstPaint
&
&
mMobileViewportSize
=
=
viewport
)
{
return
;
}
MVM_LOG
(
"
%
p
:
Updating
properties
because
%
d
|
|
%
d
\
n
"
this
mIsFirstPaint
mMobileViewportSize
!
=
viewport
)
;
if
(
mManagerType
=
=
ManagerType
:
:
VisualAndMetaViewport
&
&
(
aForceAdjustResolution
|
|
mContext
-
>
AllowZoomingForDocument
(
)
)
)
{
MVM_LOG
(
"
%
p
:
Updating
resolution
because
%
d
|
|
%
d
\
n
"
this
aForceAdjustResolution
mContext
-
>
AllowZoomingForDocument
(
)
)
;
UpdateResolution
(
viewport
displayWidthChangeRatio
UpdateType
:
:
ViewportSize
)
;
}
else
{
MVM_LOG
(
"
%
p
:
Updating
VV
size
\
n
"
this
)
;
RefreshVisualViewportSize
(
)
;
}
if
(
gfxPlatform
:
:
AsyncPanZoomEnabled
(
)
)
{
UpdateDisplayPortMargins
(
)
;
}
mMobileViewportSize
=
viewport
;
if
(
mManagerType
=
=
ManagerType
:
:
VisualViewportOnly
)
{
MVM_LOG
(
"
%
p
:
Visual
-
only
so
aborting
before
reflow
\
n
"
this
)
;
return
;
}
RefPtr
<
MobileViewportManager
>
strongThis
(
this
)
;
MVM_LOG
(
"
%
p
:
Triggering
reflow
with
viewport
%
s
\
n
"
this
Stringify
(
viewport
)
.
c_str
(
)
)
;
mContext
-
>
Reflow
(
viewport
)
;
ShrinkToDisplaySizeIfNeeded
(
)
;
mIsFirstPaint
=
false
;
}
void
MobileViewportManager
:
:
ShrinkToDisplaySizeIfNeeded
(
)
{
if
(
!
mContext
)
{
return
;
}
if
(
mManagerType
=
=
ManagerType
:
:
VisualViewportOnly
)
{
MVM_LOG
(
"
%
p
:
Visual
-
only
so
aborting
ShrinkToDisplaySizeIfNeeded
\
n
"
this
)
;
return
;
}
if
(
!
mContext
-
>
AllowZoomingForDocument
(
)
|
|
mContext
-
>
IsInReaderMode
(
)
)
{
return
;
}
if
(
Maybe
<
CSSRect
>
scrollableRect
=
mContext
-
>
CalculateScrollableRectForRSF
(
)
)
{
MVM_LOG
(
"
%
p
:
ShrinkToDisplaySize
using
scrollableRect
%
s
\
n
"
this
Stringify
(
scrollableRect
-
>
Size
(
)
)
.
c_str
(
)
)
;
UpdateResolution
(
scrollableRect
-
>
Size
(
)
Nothing
(
)
UpdateType
:
:
ContentSize
)
;
}
}
