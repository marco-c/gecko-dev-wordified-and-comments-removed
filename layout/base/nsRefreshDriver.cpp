#
include
"
nsRefreshDriver
.
h
"
#
ifdef
XP_WIN
#
include
<
windows
.
h
>
#
include
<
mmsystem
.
h
>
#
include
"
WinUtils
.
h
"
#
endif
#
include
"
mozilla
/
AnimationEventDispatcher
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
DebugOnly
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
FontTableURIProtocolHandler
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
jsapi
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
PendingAnimationTracker
.
h
"
#
include
"
mozilla
/
PendingFullscreenEvent
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_apz
.
h
"
#
include
"
mozilla
/
StaticPrefs_gfx
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
StaticPrefs_page_load
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
nsNPAPIPluginInstance
.
h
"
#
include
"
mozilla
/
dom
/
CallbackDebuggerNotification
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
WindowBinding
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
Layers
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsISimpleEnumerator
.
h
"
#
include
"
nsJSEnvironment
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
BackgroundChild
.
h
"
#
include
"
mozilla
/
ipc
/
PBackgroundChild
.
h
"
#
include
"
mozilla
/
layout
/
VsyncChild
.
h
"
#
include
"
VsyncSource
.
h
"
#
include
"
mozilla
/
VsyncDispatcher
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
TimelineConsumers
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
if
defined
(
MOZ_WIDGET_ANDROID
)
#
include
"
VRManagerChild
.
h
"
#
endif
#
ifdef
MOZ_XUL
#
include
"
nsXULPopupManager
.
h
"
#
endif
#
include
<
numeric
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
widget
;
using
namespace
mozilla
:
:
ipc
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
layout
;
static
mozilla
:
:
LazyLogModule
sRefreshDriverLog
(
"
nsRefreshDriver
"
)
;
#
define
LOG
(
.
.
.
)
\
MOZ_LOG
(
sRefreshDriverLog
mozilla
:
:
LogLevel
:
:
Debug
(
__VA_ARGS__
)
)
#
define
DEFAULT_THROTTLED_FRAME_RATE
1
#
define
DEFAULT_RECOMPUTE_VISIBILITY_INTERVAL_MS
1000
#
define
DEFAULT_NOTIFY_INTERSECTION_OBSERVERS_INTERVAL_MS
100
#
define
DEFAULT_INACTIVE_TIMER_DISABLE_SECONDS
600
#
if
defined
(
MOZ_ASAN
)
#
define
REFRESH_WAIT_WARNING
5
#
elif
defined
(
DEBUG
)
&
&
!
defined
(
MOZ_VALGRIND
)
#
define
REFRESH_WAIT_WARNING
5
#
elif
defined
(
DEBUG
)
&
&
defined
(
MOZ_VALGRIND
)
#
define
REFRESH_WAIT_WARNING
(
RUNNING_ON_VALGRIND
?
20
:
5
)
#
elif
defined
(
MOZ_VALGRIND
)
#
define
REFRESH_WAIT_WARNING
(
RUNNING_ON_VALGRIND
?
10
:
1
)
#
else
#
define
REFRESH_WAIT_WARNING
1
#
endif
namespace
{
static
uint64_t
sActiveVsyncTimers
=
0
;
uint64_t
sJankLevels
[
12
]
;
static
uint32_t
sRefreshDriverCount
=
0
;
class
AutoRecordPhase
{
public
:
explicit
AutoRecordPhase
(
double
*
aResultMs
)
:
mTotalMs
(
aResultMs
)
mStartTime
(
TimeStamp
:
:
Now
(
)
)
{
MOZ_ASSERT
(
mTotalMs
)
;
}
~
AutoRecordPhase
(
)
{
*
mTotalMs
=
(
TimeStamp
:
:
Now
(
)
-
mStartTime
)
.
ToMilliseconds
(
)
;
}
private
:
double
*
mTotalMs
;
mozilla
:
:
TimeStamp
mStartTime
;
}
;
}
namespace
mozilla
{
class
RefreshDriverTimer
{
public
:
RefreshDriverTimer
(
)
=
default
;
NS_INLINE_DECL_REFCOUNTING
(
RefreshDriverTimer
)
virtual
void
AddRefreshDriver
(
nsRefreshDriver
*
aDriver
)
{
LOG
(
"
[
%
p
]
AddRefreshDriver
%
p
"
this
aDriver
)
;
bool
startTimer
=
mContentRefreshDrivers
.
IsEmpty
(
)
&
&
mRootRefreshDrivers
.
IsEmpty
(
)
;
if
(
IsRootRefreshDriver
(
aDriver
)
)
{
NS_ASSERTION
(
!
mRootRefreshDrivers
.
Contains
(
aDriver
)
"
Adding
a
duplicate
root
refresh
driver
!
"
)
;
mRootRefreshDrivers
.
AppendElement
(
aDriver
)
;
}
else
{
NS_ASSERTION
(
!
mContentRefreshDrivers
.
Contains
(
aDriver
)
"
Adding
a
duplicate
content
refresh
driver
!
"
)
;
mContentRefreshDrivers
.
AppendElement
(
aDriver
)
;
}
if
(
startTimer
)
{
StartTimer
(
)
;
}
}
void
RemoveRefreshDriver
(
nsRefreshDriver
*
aDriver
)
{
LOG
(
"
[
%
p
]
RemoveRefreshDriver
%
p
"
this
aDriver
)
;
if
(
IsRootRefreshDriver
(
aDriver
)
)
{
NS_ASSERTION
(
mRootRefreshDrivers
.
Contains
(
aDriver
)
"
RemoveRefreshDriver
for
a
refresh
driver
that
'
s
not
in
the
"
"
root
refresh
list
!
"
)
;
mRootRefreshDrivers
.
RemoveElement
(
aDriver
)
;
}
else
{
nsPresContext
*
pc
=
aDriver
-
>
GetPresContext
(
)
;
nsPresContext
*
rootContext
=
pc
?
pc
-
>
GetRootPresContext
(
)
:
nullptr
;
if
(
!
rootContext
)
{
if
(
mRootRefreshDrivers
.
Contains
(
aDriver
)
)
{
mRootRefreshDrivers
.
RemoveElement
(
aDriver
)
;
}
else
{
NS_ASSERTION
(
mContentRefreshDrivers
.
Contains
(
aDriver
)
"
RemoveRefreshDriver
without
a
display
root
for
a
"
"
driver
that
is
not
in
the
content
refresh
list
"
)
;
mContentRefreshDrivers
.
RemoveElement
(
aDriver
)
;
}
}
else
{
NS_ASSERTION
(
mContentRefreshDrivers
.
Contains
(
aDriver
)
"
RemoveRefreshDriver
for
a
driver
that
is
not
in
the
"
"
content
refresh
list
"
)
;
mContentRefreshDrivers
.
RemoveElement
(
aDriver
)
;
}
}
bool
stopTimer
=
mContentRefreshDrivers
.
IsEmpty
(
)
&
&
mRootRefreshDrivers
.
IsEmpty
(
)
;
if
(
stopTimer
)
{
StopTimer
(
)
;
}
}
TimeStamp
MostRecentRefresh
(
)
const
{
return
mLastFireTime
;
}
void
SwapRefreshDrivers
(
RefreshDriverTimer
*
aNewTimer
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
for
(
nsRefreshDriver
*
driver
:
mContentRefreshDrivers
)
{
aNewTimer
-
>
AddRefreshDriver
(
driver
)
;
driver
-
>
mActiveTimer
=
aNewTimer
;
}
mContentRefreshDrivers
.
Clear
(
)
;
for
(
nsRefreshDriver
*
driver
:
mRootRefreshDrivers
)
{
aNewTimer
-
>
AddRefreshDriver
(
driver
)
;
driver
-
>
mActiveTimer
=
aNewTimer
;
}
mRootRefreshDrivers
.
Clear
(
)
;
aNewTimer
-
>
mLastFireTime
=
mLastFireTime
;
StopTimer
(
)
;
}
virtual
TimeDuration
GetTimerRate
(
)
=
0
;
TimeStamp
GetIdleDeadlineHint
(
TimeStamp
aDefault
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
TimeStamp
mostRecentRefresh
=
MostRecentRefresh
(
)
;
TimeDuration
refreshRate
=
GetTimerRate
(
)
;
TimeStamp
idleEnd
=
mostRecentRefresh
+
refreshRate
;
if
(
idleEnd
+
refreshRate
*
StaticPrefs
:
:
layout_idle_period_required_quiescent_frames
(
)
<
TimeStamp
:
:
Now
(
)
)
{
return
aDefault
;
}
idleEnd
=
idleEnd
-
TimeDuration
:
:
FromMilliseconds
(
StaticPrefs
:
:
layout_idle_period_time_limit
(
)
)
;
return
idleEnd
<
aDefault
?
idleEnd
:
aDefault
;
}
Maybe
<
TimeStamp
>
GetNextTickHint
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
TimeStamp
nextTick
=
MostRecentRefresh
(
)
+
GetTimerRate
(
)
;
return
nextTick
<
TimeStamp
:
:
Now
(
)
?
Nothing
(
)
:
Some
(
nextTick
)
;
}
nsPresContext
*
GetPresContextForOnlyRefreshDriver
(
)
{
if
(
mRootRefreshDrivers
.
Length
(
)
=
=
1
&
&
mContentRefreshDrivers
.
IsEmpty
(
)
)
{
return
mRootRefreshDrivers
[
0
]
-
>
GetPresContext
(
)
;
}
if
(
mContentRefreshDrivers
.
Length
(
)
=
=
1
&
&
mRootRefreshDrivers
.
IsEmpty
(
)
)
{
return
mContentRefreshDrivers
[
0
]
-
>
GetPresContext
(
)
;
}
return
nullptr
;
}
protected
:
virtual
~
RefreshDriverTimer
(
)
{
MOZ_ASSERT
(
mContentRefreshDrivers
.
Length
(
)
=
=
0
"
Should
have
removed
all
content
refresh
drivers
from
here
by
now
!
"
)
;
MOZ_ASSERT
(
mRootRefreshDrivers
.
Length
(
)
=
=
0
"
Should
have
removed
all
root
refresh
drivers
from
here
by
now
!
"
)
;
}
virtual
void
StartTimer
(
)
=
0
;
virtual
void
StopTimer
(
)
=
0
;
virtual
void
ScheduleNextTick
(
TimeStamp
aNowTime
)
=
0
;
bool
IsRootRefreshDriver
(
nsRefreshDriver
*
aDriver
)
{
nsPresContext
*
pc
=
aDriver
-
>
GetPresContext
(
)
;
nsPresContext
*
rootContext
=
pc
?
pc
-
>
GetRootPresContext
(
)
:
nullptr
;
if
(
!
rootContext
)
{
return
false
;
}
return
aDriver
=
=
rootContext
-
>
RefreshDriver
(
)
;
}
void
Tick
(
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
Tick
(
VsyncId
(
)
now
)
;
}
void
TickRefreshDrivers
(
VsyncId
aId
TimeStamp
aNow
nsTArray
<
RefPtr
<
nsRefreshDriver
>
>
&
aDrivers
)
{
if
(
aDrivers
.
IsEmpty
(
)
)
{
return
;
}
for
(
nsRefreshDriver
*
driver
:
aDrivers
.
Clone
(
)
)
{
if
(
driver
-
>
IsTestControllingRefreshesEnabled
(
)
)
{
continue
;
}
TickDriver
(
driver
aId
aNow
)
;
}
}
void
Tick
(
VsyncId
aId
TimeStamp
now
)
{
ScheduleNextTick
(
now
)
;
mLastFireTime
=
now
;
LOG
(
"
[
%
p
]
ticking
drivers
.
.
.
"
this
)
;
AUTO_PROFILER_TRACING_MARKER
(
"
Paint
"
"
RefreshDriverTick
"
GRAPHICS
)
;
TickRefreshDrivers
(
aId
now
mContentRefreshDrivers
)
;
TickRefreshDrivers
(
aId
now
mRootRefreshDrivers
)
;
LOG
(
"
[
%
p
]
done
.
"
this
)
;
}
static
void
TickDriver
(
nsRefreshDriver
*
driver
VsyncId
aId
TimeStamp
now
)
{
driver
-
>
Tick
(
aId
now
)
;
}
TimeStamp
mLastFireTime
;
TimeStamp
mTargetTime
;
nsTArray
<
RefPtr
<
nsRefreshDriver
>
>
mContentRefreshDrivers
;
nsTArray
<
RefPtr
<
nsRefreshDriver
>
>
mRootRefreshDrivers
;
static
void
TimerTick
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
RefreshDriverTimer
>
timer
=
static_cast
<
RefreshDriverTimer
*
>
(
aClosure
)
;
timer
-
>
Tick
(
)
;
}
}
;
class
SimpleTimerBasedRefreshDriverTimer
:
public
RefreshDriverTimer
{
public
:
explicit
SimpleTimerBasedRefreshDriverTimer
(
double
aRate
)
{
SetRate
(
aRate
)
;
mTimer
=
NS_NewTimer
(
)
;
}
virtual
~
SimpleTimerBasedRefreshDriverTimer
(
)
override
{
StopTimer
(
)
;
}
virtual
void
SetRate
(
double
aNewRate
)
{
mRateMilliseconds
=
aNewRate
;
mRateDuration
=
TimeDuration
:
:
FromMilliseconds
(
mRateMilliseconds
)
;
}
double
GetRate
(
)
const
{
return
mRateMilliseconds
;
}
TimeDuration
GetTimerRate
(
)
override
{
return
mRateDuration
;
}
protected
:
void
StartTimer
(
)
override
{
mLastFireTime
=
TimeStamp
:
:
Now
(
)
;
mTargetTime
=
mLastFireTime
+
mRateDuration
;
uint32_t
delay
=
static_cast
<
uint32_t
>
(
mRateMilliseconds
)
;
mTimer
-
>
InitWithNamedFuncCallback
(
TimerTick
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
SimpleTimerBasedRefreshDriverTimer
:
:
StartTimer
"
)
;
}
void
StopTimer
(
)
override
{
mTimer
-
>
Cancel
(
)
;
}
double
mRateMilliseconds
;
TimeDuration
mRateDuration
;
RefPtr
<
nsITimer
>
mTimer
;
}
;
class
VsyncRefreshDriverTimer
:
public
RefreshDriverTimer
{
public
:
VsyncRefreshDriverTimer
(
)
:
mVsyncChild
(
nullptr
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mVsyncObserver
=
new
RefreshDriverVsyncObserver
(
this
)
;
RefPtr
<
mozilla
:
:
gfx
:
:
VsyncSource
>
vsyncSource
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
GetHardwareVsync
(
)
;
MOZ_ALWAYS_TRUE
(
mVsyncDispatcher
=
vsyncSource
-
>
GetRefreshTimerVsyncDispatcher
(
)
)
;
mVsyncDispatcher
-
>
AddChildRefreshTimer
(
mVsyncObserver
)
;
mVsyncRate
=
vsyncSource
-
>
GetGlobalDisplay
(
)
.
GetVsyncRate
(
)
;
}
explicit
VsyncRefreshDriverTimer
(
VsyncChild
*
aVsyncChild
)
:
mVsyncChild
(
aVsyncChild
)
{
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mVsyncChild
)
;
mVsyncObserver
=
new
RefreshDriverVsyncObserver
(
this
)
;
mVsyncChild
-
>
SetVsyncObserver
(
mVsyncObserver
)
;
mVsyncRate
=
mVsyncChild
-
>
GetVsyncRate
(
)
;
}
explicit
VsyncRefreshDriverTimer
(
const
RefPtr
<
gfx
:
:
VsyncSource
>
&
aVsyncSource
)
:
mVsyncChild
(
nullptr
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mVsyncSource
=
aVsyncSource
;
mVsyncObserver
=
new
RefreshDriverVsyncObserver
(
this
)
;
MOZ_ALWAYS_TRUE
(
mVsyncDispatcher
=
aVsyncSource
-
>
GetRefreshTimerVsyncDispatcher
(
)
)
;
mVsyncDispatcher
-
>
AddChildRefreshTimer
(
mVsyncObserver
)
;
mVsyncRate
=
aVsyncSource
-
>
GetGlobalDisplay
(
)
.
GetVsyncRate
(
)
;
}
TimeDuration
GetTimerRate
(
)
override
{
if
(
mVsyncRate
!
=
TimeDuration
:
:
Forever
(
)
)
{
return
mVsyncRate
;
}
if
(
mVsyncChild
)
{
mVsyncRate
=
mVsyncChild
-
>
VsyncRate
(
)
;
}
return
mVsyncRate
!
=
TimeDuration
:
:
Forever
(
)
?
mVsyncRate
:
TimeDuration
:
:
FromMilliseconds
(
1000
.
0
/
60
.
0
)
;
}
private
:
class
RefreshDriverVsyncObserver
final
:
public
VsyncObserver
{
public
:
explicit
RefreshDriverVsyncObserver
(
VsyncRefreshDriverTimer
*
aVsyncRefreshDriverTimer
)
:
mVsyncRefreshDriverTimer
(
aVsyncRefreshDriverTimer
)
mParentProcessRefreshTickLock
(
"
RefreshTickLock
"
)
mPendingParentProcessVsync
(
false
)
mRecentVsync
(
TimeStamp
:
:
Now
(
)
)
mLastTick
(
TimeStamp
:
:
Now
(
)
)
mVsyncRate
(
TimeDuration
:
:
Forever
(
)
)
mProcessedVsync
(
true
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
class
ParentProcessVsyncNotifier
final
:
public
Runnable
public
nsIRunnablePriority
{
public
:
explicit
ParentProcessVsyncNotifier
(
RefreshDriverVsyncObserver
*
aObserver
)
:
Runnable
(
"
VsyncRefreshDriverTimer
:
:
RefreshDriverVsyncObserver
:
:
"
"
ParentProcessVsyncNotifier
"
)
mObserver
(
aObserver
)
{
}
NS_DECL_ISUPPORTS_INHERITED
NS_IMETHOD
Run
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sHighPriorityEnabled
=
mozilla
:
:
BrowserTabsRemoteAutostart
(
)
;
mObserver
-
>
NotifyParentProcessVsync
(
)
;
return
NS_OK
;
}
NS_IMETHOD
GetPriority
(
uint32_t
*
aPriority
)
override
{
*
aPriority
=
sHighPriorityEnabled
?
nsIRunnablePriority
:
:
PRIORITY_HIGH
:
nsIRunnablePriority
:
:
PRIORITY_NORMAL
;
return
NS_OK
;
}
private
:
~
ParentProcessVsyncNotifier
(
)
=
default
;
RefPtr
<
RefreshDriverVsyncObserver
>
mObserver
;
static
mozilla
:
:
Atomic
<
bool
>
sHighPriorityEnabled
;
}
;
bool
NotifyVsync
(
const
VsyncEvent
&
aVsync
)
override
{
{
MonitorAutoLock
lock
(
mParentProcessRefreshTickLock
)
;
mRecentParentProcessVsync
=
aVsync
;
if
(
mPendingParentProcessVsync
)
{
return
true
;
}
mPendingParentProcessVsync
=
true
;
}
nsCOMPtr
<
nsIRunnable
>
vsyncEvent
=
new
ParentProcessVsyncNotifier
(
this
)
;
NS_DispatchToMainThread
(
vsyncEvent
)
;
return
true
;
}
void
NotifyParentProcessVsync
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
VsyncEvent
aVsync
;
{
MonitorAutoLock
lock
(
mParentProcessRefreshTickLock
)
;
aVsync
=
mRecentParentProcessVsync
;
mPendingParentProcessVsync
=
false
;
}
mRecentVsync
=
aVsync
.
mTime
;
mRecentVsyncId
=
aVsync
.
mId
;
if
(
!
mBlockUntil
.
IsNull
(
)
&
&
mBlockUntil
>
aVsync
.
mTime
)
{
if
(
mProcessedVsync
)
{
mProcessedVsync
=
false
;
nsCOMPtr
<
nsIRunnable
>
vsyncEvent
=
NewRunnableMethod
<
>
(
"
RefreshDriverVsyncObserver
:
:
NormalPriorityNotify
"
this
&
RefreshDriverVsyncObserver
:
:
NormalPriorityNotify
)
;
NS_DispatchToMainThread
(
vsyncEvent
)
;
}
return
;
}
if
(
StaticPrefs
:
:
layout_lower_priority_refresh_driver_during_load
(
)
&
&
mVsyncRefreshDriverTimer
)
{
nsPresContext
*
pctx
=
mVsyncRefreshDriverTimer
-
>
GetPresContextForOnlyRefreshDriver
(
)
;
if
(
pctx
&
&
pctx
-
>
HadContentfulPaint
(
)
&
&
pctx
-
>
Document
(
)
&
&
pctx
-
>
Document
(
)
-
>
GetReadyStateEnum
(
)
<
Document
:
:
READYSTATE_COMPLETE
)
{
nsPIDOMWindowInner
*
win
=
pctx
-
>
Document
(
)
-
>
GetInnerWindow
(
)
;
uint32_t
frameRateMultiplier
=
pctx
-
>
GetNextFrameRateMultiplier
(
)
;
if
(
!
frameRateMultiplier
)
{
pctx
-
>
DidUseFrameRateMultiplier
(
)
;
}
if
(
win
&
&
frameRateMultiplier
)
{
dom
:
:
Performance
*
perf
=
win
-
>
GetPerformance
(
)
;
if
(
perf
&
&
perf
-
>
Now
(
)
<
StaticPrefs
:
:
page_load_deprioritization_period
(
)
)
{
if
(
mProcessedVsync
)
{
mProcessedVsync
=
false
;
TimeDuration
rate
=
mVsyncRefreshDriverTimer
-
>
GetTimerRate
(
)
;
uint32_t
slowRate
=
static_cast
<
uint32_t
>
(
rate
.
ToMilliseconds
(
)
*
frameRateMultiplier
)
;
pctx
-
>
DidUseFrameRateMultiplier
(
)
;
nsCOMPtr
<
nsIRunnable
>
vsyncEvent
=
NewRunnableMethod
<
>
(
"
RefreshDriverVsyncObserver
:
:
NormalPriorityNotify
[
IDLE
]
"
this
&
RefreshDriverVsyncObserver
:
:
NormalPriorityNotify
)
;
NS_DispatchToCurrentThreadQueue
(
vsyncEvent
.
forget
(
)
slowRate
EventQueuePriority
:
:
Idle
)
;
}
return
;
}
}
}
}
RefPtr
<
RefreshDriverVsyncObserver
>
kungFuDeathGrip
(
this
)
;
TickRefreshDriver
(
aVsync
.
mId
aVsync
.
mTime
)
;
}
void
Shutdown
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mVsyncRefreshDriverTimer
=
nullptr
;
}
void
OnTimerStart
(
)
{
mLastTick
=
TimeStamp
:
:
Now
(
)
;
}
void
NormalPriorityNotify
(
)
{
if
(
mLastProcessedTick
.
IsNull
(
)
|
|
mRecentVsync
>
mLastProcessedTick
)
{
mBlockUntil
=
TimeStamp
(
)
;
TickRefreshDriver
(
mRecentVsyncId
mRecentVsync
)
;
}
mProcessedVsync
=
true
;
}
private
:
~
RefreshDriverVsyncObserver
(
)
=
default
;
void
RecordTelemetryProbes
(
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
ifndef
ANDROID
if
(
XRE_IsParentProcess
(
)
)
{
TimeDuration
vsyncLatency
=
TimeStamp
:
:
Now
(
)
-
aVsyncTimestamp
;
uint32_t
sample
=
(
uint32_t
)
vsyncLatency
.
ToMilliseconds
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FX_REFRESH_DRIVER_CHROME_FRAME_DELAY_MS
sample
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FX_REFRESH_DRIVER_SYNC_SCROLL_FRAME_DELAY_MS
sample
)
;
RecordJank
(
sample
)
;
}
else
if
(
mVsyncRate
!
=
TimeDuration
:
:
Forever
(
)
)
{
TimeDuration
contentDelay
=
(
TimeStamp
:
:
Now
(
)
-
mLastTick
)
-
mVsyncRate
;
if
(
contentDelay
.
ToMilliseconds
(
)
<
0
)
{
contentDelay
=
TimeDuration
:
:
FromMilliseconds
(
0
)
;
}
uint32_t
sample
=
(
uint32_t
)
contentDelay
.
ToMilliseconds
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FX_REFRESH_DRIVER_CONTENT_FRAME_DELAY_MS
sample
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
FX_REFRESH_DRIVER_SYNC_SCROLL_FRAME_DELAY_MS
sample
)
;
RecordJank
(
sample
)
;
}
else
{
if
(
mVsyncRefreshDriverTimer
)
{
mVsyncRate
=
mVsyncRefreshDriverTimer
-
>
mVsyncChild
-
>
GetVsyncRate
(
)
;
}
}
#
endif
}
void
RecordJank
(
uint32_t
aJankMS
)
{
uint32_t
duration
=
1
;
for
(
size_t
i
=
0
;
i
<
mozilla
:
:
ArrayLength
(
sJankLevels
)
&
&
duration
<
aJankMS
;
+
+
i
duration
*
=
2
)
{
sJankLevels
[
i
]
+
+
;
}
}
void
TickRefreshDriver
(
VsyncId
aId
TimeStamp
aVsyncTimestamp
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
RecordTelemetryProbes
(
aVsyncTimestamp
)
;
mLastTick
=
TimeStamp
:
:
Now
(
)
;
mLastProcessedTick
=
aVsyncTimestamp
;
#
if
!
defined
(
_WIN32
)
DebugOnly
<
TimeStamp
>
rightnow
=
TimeStamp
:
:
Now
(
)
;
MOZ_ASSERT_IF
(
(
*
&
rightnow
)
.
UsedCanonicalNow
(
)
=
=
aVsyncTimestamp
.
UsedCanonicalNow
(
)
aVsyncTimestamp
<
=
*
&
rightnow
)
;
#
endif
TimeDuration
timeForOutsideTick
=
TimeDuration
:
:
FromMilliseconds
(
0
.
0f
)
;
if
(
mVsyncRefreshDriverTimer
)
{
timeForOutsideTick
=
TimeDuration
:
:
FromMilliseconds
(
mVsyncRefreshDriverTimer
-
>
GetTimerRate
(
)
.
ToMilliseconds
(
)
/
100
.
0f
)
;
RefPtr
<
VsyncRefreshDriverTimer
>
timer
=
mVsyncRefreshDriverTimer
;
timer
-
>
RunRefreshDrivers
(
aId
aVsyncTimestamp
)
;
}
TimeDuration
tickDuration
=
TimeStamp
:
:
Now
(
)
-
mLastTick
;
mBlockUntil
=
aVsyncTimestamp
+
tickDuration
+
timeForOutsideTick
;
}
VsyncRefreshDriverTimer
*
mVsyncRefreshDriverTimer
;
Monitor
mParentProcessRefreshTickLock
;
VsyncEvent
mRecentParentProcessVsync
;
bool
mPendingParentProcessVsync
;
TimeStamp
mRecentVsync
;
VsyncId
mRecentVsyncId
;
TimeStamp
mLastTick
;
TimeStamp
mLastProcessedTick
;
TimeStamp
mBlockUntil
;
TimeDuration
mVsyncRate
;
bool
mProcessedVsync
;
}
;
~
VsyncRefreshDriverTimer
(
)
override
{
if
(
XRE_IsParentProcess
(
)
)
{
mVsyncDispatcher
-
>
RemoveChildRefreshTimer
(
mVsyncObserver
)
;
mVsyncDispatcher
=
nullptr
;
}
else
{
Unused
<
<
mVsyncChild
-
>
SendUnobserve
(
)
;
mVsyncChild
-
>
SetVsyncObserver
(
nullptr
)
;
mVsyncChild
=
nullptr
;
}
mVsyncObserver
-
>
Shutdown
(
)
;
mVsyncObserver
=
nullptr
;
}
void
StartTimer
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mLastFireTime
=
TimeStamp
:
:
Now
(
)
;
if
(
XRE_IsParentProcess
(
)
)
{
mVsyncDispatcher
-
>
AddChildRefreshTimer
(
mVsyncObserver
)
;
}
else
{
Unused
<
<
mVsyncChild
-
>
SendObserve
(
)
;
mVsyncObserver
-
>
OnTimerStart
(
)
;
}
+
+
sActiveVsyncTimers
;
}
void
StopTimer
(
)
override
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
XRE_IsParentProcess
(
)
)
{
mVsyncDispatcher
-
>
RemoveChildRefreshTimer
(
mVsyncObserver
)
;
}
else
{
Unused
<
<
mVsyncChild
-
>
SendUnobserve
(
)
;
}
MOZ_ASSERT
(
sActiveVsyncTimers
>
0
)
;
-
-
sActiveVsyncTimers
;
}
void
ScheduleNextTick
(
TimeStamp
aNowTime
)
override
{
}
void
RunRefreshDrivers
(
VsyncId
aId
TimeStamp
aTimeStamp
)
{
Tick
(
aId
aTimeStamp
)
;
}
RefPtr
<
gfx
:
:
VsyncSource
>
mVsyncSource
;
RefPtr
<
RefreshDriverVsyncObserver
>
mVsyncObserver
;
RefPtr
<
RefreshTimerVsyncDispatcher
>
mVsyncDispatcher
;
RefPtr
<
VsyncChild
>
mVsyncChild
;
TimeDuration
mVsyncRate
;
}
;
NS_IMPL_ISUPPORTS_INHERITED
(
VsyncRefreshDriverTimer
:
:
RefreshDriverVsyncObserver
:
:
ParentProcessVsyncNotifier
Runnable
nsIRunnablePriority
)
mozilla
:
:
Atomic
<
bool
>
VsyncRefreshDriverTimer
:
:
RefreshDriverVsyncObserver
:
:
ParentProcessVsyncNotifier
:
:
sHighPriorityEnabled
(
false
)
;
class
StartupRefreshDriverTimer
:
public
SimpleTimerBasedRefreshDriverTimer
{
public
:
explicit
StartupRefreshDriverTimer
(
double
aRate
)
:
SimpleTimerBasedRefreshDriverTimer
(
aRate
)
{
}
protected
:
void
ScheduleNextTick
(
TimeStamp
aNowTime
)
override
{
TimeStamp
newTarget
=
aNowTime
+
mRateDuration
;
uint32_t
delay
=
static_cast
<
uint32_t
>
(
(
newTarget
-
aNowTime
)
.
ToMilliseconds
(
)
)
;
mTimer
-
>
InitWithNamedFuncCallback
(
TimerTick
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
StartupRefreshDriverTimer
:
:
ScheduleNextTick
"
)
;
mTargetTime
=
newTarget
;
}
}
;
class
InactiveRefreshDriverTimer
final
:
public
SimpleTimerBasedRefreshDriverTimer
{
public
:
explicit
InactiveRefreshDriverTimer
(
double
aRate
)
:
SimpleTimerBasedRefreshDriverTimer
(
aRate
)
mNextTickDuration
(
aRate
)
mDisableAfterMilliseconds
(
-
1
.
0
)
mNextDriverIndex
(
0
)
{
}
InactiveRefreshDriverTimer
(
double
aRate
double
aDisableAfterMilliseconds
)
:
SimpleTimerBasedRefreshDriverTimer
(
aRate
)
mNextTickDuration
(
aRate
)
mDisableAfterMilliseconds
(
aDisableAfterMilliseconds
)
mNextDriverIndex
(
0
)
{
}
void
AddRefreshDriver
(
nsRefreshDriver
*
aDriver
)
override
{
RefreshDriverTimer
:
:
AddRefreshDriver
(
aDriver
)
;
LOG
(
"
[
%
p
]
inactive
timer
got
new
refresh
driver
%
p
resetting
rate
"
this
aDriver
)
;
mNextTickDuration
=
mRateMilliseconds
;
mNextDriverIndex
=
GetRefreshDriverCount
(
)
-
1
;
StopTimer
(
)
;
StartTimer
(
)
;
}
TimeDuration
GetTimerRate
(
)
override
{
return
TimeDuration
:
:
FromMilliseconds
(
mNextTickDuration
)
;
}
protected
:
uint32_t
GetRefreshDriverCount
(
)
{
return
mContentRefreshDrivers
.
Length
(
)
+
mRootRefreshDrivers
.
Length
(
)
;
}
void
StartTimer
(
)
override
{
mLastFireTime
=
TimeStamp
:
:
Now
(
)
;
mTargetTime
=
mLastFireTime
+
mRateDuration
;
uint32_t
delay
=
static_cast
<
uint32_t
>
(
mRateMilliseconds
)
;
mTimer
-
>
InitWithNamedFuncCallback
(
TimerTickOne
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
InactiveRefreshDriverTimer
:
:
StartTimer
"
)
;
}
void
StopTimer
(
)
override
{
mTimer
-
>
Cancel
(
)
;
}
void
ScheduleNextTick
(
TimeStamp
aNowTime
)
override
{
if
(
mDisableAfterMilliseconds
>
0
.
0
&
&
mNextTickDuration
>
mDisableAfterMilliseconds
)
{
return
;
}
if
(
mNextDriverIndex
>
=
GetRefreshDriverCount
(
)
)
{
mNextTickDuration
*
=
2
.
0
;
mNextDriverIndex
=
0
;
}
uint32_t
delay
=
static_cast
<
uint32_t
>
(
mNextTickDuration
)
;
mTimer
-
>
InitWithNamedFuncCallback
(
TimerTickOne
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
InactiveRefreshDriverTimer
:
:
ScheduleNextTick
"
)
;
LOG
(
"
[
%
p
]
inactive
timer
next
tick
in
%
f
ms
[
index
%
d
/
%
d
]
"
this
mNextTickDuration
mNextDriverIndex
GetRefreshDriverCount
(
)
)
;
}
void
TickOne
(
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
ScheduleNextTick
(
now
)
;
mLastFireTime
=
now
;
nsTArray
<
RefPtr
<
nsRefreshDriver
>
>
drivers
(
mContentRefreshDrivers
.
Clone
(
)
)
;
drivers
.
AppendElements
(
mRootRefreshDrivers
)
;
size_t
index
=
mNextDriverIndex
;
if
(
index
<
drivers
.
Length
(
)
&
&
!
drivers
[
index
]
-
>
IsTestControllingRefreshesEnabled
(
)
)
{
TickDriver
(
drivers
[
index
]
VsyncId
(
)
now
)
;
}
mNextDriverIndex
+
+
;
}
static
void
TimerTickOne
(
nsITimer
*
aTimer
void
*
aClosure
)
{
RefPtr
<
InactiveRefreshDriverTimer
>
timer
=
static_cast
<
InactiveRefreshDriverTimer
*
>
(
aClosure
)
;
timer
-
>
TickOne
(
)
;
}
double
mNextTickDuration
;
double
mDisableAfterMilliseconds
;
uint32_t
mNextDriverIndex
;
}
;
}
static
StaticRefPtr
<
RefreshDriverTimer
>
sRegularRateTimer
;
static
StaticRefPtr
<
InactiveRefreshDriverTimer
>
sThrottledRateTimer
;
static
void
CreateContentVsyncRefreshTimer
(
void
*
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
PBackgroundChild
*
actorChild
=
BackgroundChild
:
:
GetOrCreateForCurrentThread
(
)
;
if
(
NS_WARN_IF
(
!
actorChild
)
)
{
return
;
}
layout
:
:
PVsyncChild
*
actor
=
actorChild
-
>
SendPVsyncConstructor
(
)
;
if
(
NS_WARN_IF
(
!
actor
)
)
{
return
;
}
layout
:
:
VsyncChild
*
child
=
static_cast
<
layout
:
:
VsyncChild
*
>
(
actor
)
;
nsRefreshDriver
:
:
PVsyncActorCreated
(
child
)
;
}
void
nsRefreshDriver
:
:
CreateVsyncRefreshTimer
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
PodArrayZero
(
sJankLevels
)
;
if
(
gfxPlatform
:
:
IsInLayoutAsapMode
(
)
)
{
return
;
}
nsPresContext
*
pc
=
GetPresContext
(
)
;
nsIWidget
*
widget
=
pc
-
>
GetPresShell
(
)
?
pc
-
>
GetRootWidget
(
)
:
nullptr
;
if
(
widget
)
{
RefPtr
<
gfx
:
:
VsyncSource
>
localVsyncSource
=
widget
-
>
GetVsyncSource
(
)
;
if
(
localVsyncSource
)
{
mOwnTimer
=
new
VsyncRefreshDriverTimer
(
localVsyncSource
)
;
return
;
}
}
if
(
XRE_IsParentProcess
(
)
)
{
gfxPlatform
:
:
GetPlatform
(
)
;
sRegularRateTimer
=
new
VsyncRefreshDriverTimer
(
)
;
return
;
}
CreateContentVsyncRefreshTimer
(
nullptr
)
;
}
static
uint32_t
GetFirstFrameDelay
(
imgIRequest
*
req
)
{
nsCOMPtr
<
imgIContainer
>
container
;
if
(
NS_FAILED
(
req
-
>
GetImage
(
getter_AddRefs
(
container
)
)
)
|
|
!
container
)
{
return
0
;
}
int32_t
delay
=
container
-
>
GetFirstFrameDelay
(
)
;
if
(
delay
<
0
)
return
0
;
return
static_cast
<
uint32_t
>
(
delay
)
;
}
void
nsRefreshDriver
:
:
Shutdown
(
)
{
sRegularRateTimer
=
nullptr
;
sThrottledRateTimer
=
nullptr
;
}
int32_t
nsRefreshDriver
:
:
DefaultInterval
(
)
{
return
NSToIntRound
(
1000
.
0
/
gfxPlatform
:
:
GetDefaultFrameRate
(
)
)
;
}
double
nsRefreshDriver
:
:
GetRegularTimerInterval
(
)
const
{
int32_t
rate
=
Preferences
:
:
GetInt
(
"
layout
.
frame_rate
"
-
1
)
;
if
(
rate
<
0
)
{
rate
=
gfxPlatform
:
:
GetDefaultFrameRate
(
)
;
}
else
if
(
rate
=
=
0
)
{
rate
=
10000
;
}
return
1000
.
0
/
rate
;
}
double
nsRefreshDriver
:
:
GetThrottledTimerInterval
(
)
{
int32_t
rate
=
Preferences
:
:
GetInt
(
"
layout
.
throttled_frame_rate
"
-
1
)
;
if
(
rate
<
=
0
)
{
rate
=
DEFAULT_THROTTLED_FRAME_RATE
;
}
return
1000
.
0
/
rate
;
}
mozilla
:
:
TimeDuration
nsRefreshDriver
:
:
GetMinRecomputeVisibilityInterval
(
)
{
int32_t
interval
=
Preferences
:
:
GetInt
(
"
layout
.
visibility
.
min
-
recompute
-
interval
-
ms
"
-
1
)
;
if
(
interval
<
=
0
)
{
interval
=
DEFAULT_RECOMPUTE_VISIBILITY_INTERVAL_MS
;
}
return
TimeDuration
:
:
FromMilliseconds
(
interval
)
;
}
RefreshDriverTimer
*
nsRefreshDriver
:
:
ChooseTimer
(
)
{
if
(
mThrottled
)
{
if
(
!
sThrottledRateTimer
)
sThrottledRateTimer
=
new
InactiveRefreshDriverTimer
(
GetThrottledTimerInterval
(
)
DEFAULT_INACTIVE_TIMER_DISABLE_SECONDS
*
1000
.
0
)
;
return
sThrottledRateTimer
;
}
if
(
!
sRegularRateTimer
&
&
!
mOwnTimer
)
{
double
rate
=
GetRegularTimerInterval
(
)
;
CreateVsyncRefreshTimer
(
)
;
if
(
mOwnTimer
)
{
return
mOwnTimer
.
get
(
)
;
}
if
(
!
sRegularRateTimer
)
{
sRegularRateTimer
=
new
StartupRefreshDriverTimer
(
rate
)
;
}
}
if
(
mOwnTimer
)
{
return
mOwnTimer
.
get
(
)
;
}
return
sRegularRateTimer
;
}
nsRefreshDriver
:
:
nsRefreshDriver
(
nsPresContext
*
aPresContext
)
:
mActiveTimer
(
nullptr
)
mOwnTimer
(
nullptr
)
mPresContext
(
aPresContext
)
mRootRefresh
(
nullptr
)
mNextTransactionId
{
0
}
mOutstandingTransactionId
{
0
}
mCompletedTransaction
{
0
}
mFreezeCount
(
0
)
mThrottledFrameRequestInterval
(
TimeDuration
:
:
FromMilliseconds
(
GetThrottledTimerInterval
(
)
)
)
mMinRecomputeVisibilityInterval
(
GetMinRecomputeVisibilityInterval
(
)
)
mThrottled
(
false
)
mNeedToRecomputeVisibility
(
false
)
mTestControllingRefreshes
(
false
)
mViewManagerFlushIsPending
(
false
)
mHasScheduleFlush
(
false
)
mInRefresh
(
false
)
mWaitingForTransaction
(
false
)
mSkippedPaints
(
false
)
mResizeSuppressed
(
false
)
mNotifyDOMContentFlushed
(
false
)
mNeedToUpdateIntersectionObservations
(
false
)
mWarningThreshold
(
REFRESH_WAIT_WARNING
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
mPresContext
"
Need
a
pres
context
to
tell
us
to
call
Disconnect
(
)
later
"
"
and
decrement
sRefreshDriverCount
.
"
)
;
mMostRecentRefresh
=
TimeStamp
:
:
Now
(
)
;
mNextThrottledFrameRequestTick
=
mMostRecentRefresh
;
mNextRecomputeVisibilityTick
=
mMostRecentRefresh
;
+
+
sRefreshDriverCount
;
}
nsRefreshDriver
:
:
~
nsRefreshDriver
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
ObserverCount
(
)
=
=
mEarlyRunners
.
Length
(
)
"
observers
except
pending
selection
scrolls
"
"
should
have
been
unregistered
"
)
;
MOZ_ASSERT
(
!
mActiveTimer
"
timer
should
be
gone
"
)
;
MOZ_ASSERT
(
!
mPresContext
"
Should
have
called
Disconnect
(
)
and
decremented
"
"
sRefreshDriverCount
!
"
)
;
if
(
mRootRefresh
)
{
mRootRefresh
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Style
)
;
mRootRefresh
=
nullptr
;
}
}
void
nsRefreshDriver
:
:
AdvanceTimeAndRefresh
(
int64_t
aMilliseconds
)
{
StopTimer
(
)
;
if
(
!
mTestControllingRefreshes
)
{
mMostRecentRefresh
=
TimeStamp
:
:
Now
(
)
;
mTestControllingRefreshes
=
true
;
if
(
mWaitingForTransaction
)
{
mWaitingForTransaction
=
false
;
mSkippedPaints
=
false
;
mWarningThreshold
=
REFRESH_WAIT_WARNING
;
}
}
mMostRecentRefresh
+
=
TimeDuration
:
:
FromMilliseconds
(
(
double
)
aMilliseconds
)
;
mozilla
:
:
dom
:
:
AutoNoJSAPI
nojsapi
;
DoTick
(
)
;
}
void
nsRefreshDriver
:
:
RestoreNormalRefresh
(
)
{
mTestControllingRefreshes
=
false
;
EnsureTimerStarted
(
eAllowTimeToGoBackwards
)
;
mCompletedTransaction
=
mOutstandingTransactionId
=
mNextTransactionId
;
}
TimeStamp
nsRefreshDriver
:
:
MostRecentRefresh
(
)
const
{
if
(
!
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
{
const_cast
<
nsRefreshDriver
*
>
(
this
)
-
>
EnsureTimerStarted
(
)
;
}
return
mMostRecentRefresh
;
}
void
nsRefreshDriver
:
:
AddRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
{
ObserverArray
&
array
=
ArrayFor
(
aFlushType
)
;
array
.
AppendElement
(
aObserver
)
;
EnsureTimerStarted
(
)
;
}
bool
nsRefreshDriver
:
:
RemoveRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
{
ObserverArray
&
array
=
ArrayFor
(
aFlushType
)
;
return
array
.
RemoveElement
(
aObserver
)
;
}
void
nsRefreshDriver
:
:
AddTimerAdjustmentObserver
(
nsATimerAdjustmentObserver
*
aObserver
)
{
MOZ_ASSERT
(
!
mTimerAdjustmentObservers
.
Contains
(
aObserver
)
)
;
mTimerAdjustmentObservers
.
AppendElement
(
aObserver
)
;
}
void
nsRefreshDriver
:
:
RemoveTimerAdjustmentObserver
(
nsATimerAdjustmentObserver
*
aObserver
)
{
MOZ_ASSERT
(
mTimerAdjustmentObservers
.
Contains
(
aObserver
)
)
;
mTimerAdjustmentObservers
.
RemoveElement
(
aObserver
)
;
}
void
nsRefreshDriver
:
:
PostVisualViewportResizeEvent
(
VVPResizeEvent
*
aResizeEvent
)
{
mVisualViewportResizeEvents
.
AppendElement
(
aResizeEvent
)
;
EnsureTimerStarted
(
)
;
}
void
nsRefreshDriver
:
:
DispatchVisualViewportResizeEvents
(
)
{
VisualViewportResizeEventArray
events
;
events
.
SwapElements
(
mVisualViewportResizeEvents
)
;
for
(
auto
&
event
:
events
)
{
event
-
>
Run
(
)
;
}
}
void
nsRefreshDriver
:
:
PostScrollEvent
(
mozilla
:
:
Runnable
*
aScrollEvent
bool
aDelayed
)
{
if
(
aDelayed
)
{
mDelayedScrollEvents
.
AppendElement
(
aScrollEvent
)
;
}
else
{
mScrollEvents
.
AppendElement
(
aScrollEvent
)
;
EnsureTimerStarted
(
)
;
}
}
void
nsRefreshDriver
:
:
DispatchScrollEvents
(
)
{
ScrollEventArray
events
;
events
.
SwapElements
(
mScrollEvents
)
;
for
(
auto
&
event
:
events
)
{
event
-
>
Run
(
)
;
}
}
void
nsRefreshDriver
:
:
PostVisualViewportScrollEvent
(
VVPScrollEvent
*
aScrollEvent
)
{
mVisualViewportScrollEvents
.
AppendElement
(
aScrollEvent
)
;
EnsureTimerStarted
(
)
;
}
void
nsRefreshDriver
:
:
DispatchVisualViewportScrollEvents
(
)
{
VisualViewportScrollEventArray
events
;
events
.
SwapElements
(
mVisualViewportScrollEvents
)
;
for
(
auto
&
event
:
events
)
{
event
-
>
Run
(
)
;
}
}
void
nsRefreshDriver
:
:
AddPostRefreshObserver
(
nsAPostRefreshObserver
*
aObserver
)
{
mPostRefreshObservers
.
AppendElement
(
aObserver
)
;
}
void
nsRefreshDriver
:
:
RemovePostRefreshObserver
(
nsAPostRefreshObserver
*
aObserver
)
{
mPostRefreshObservers
.
RemoveElement
(
aObserver
)
;
}
bool
nsRefreshDriver
:
:
AddImageRequest
(
imgIRequest
*
aRequest
)
{
uint32_t
delay
=
GetFirstFrameDelay
(
aRequest
)
;
if
(
delay
=
=
0
)
{
mRequests
.
PutEntry
(
aRequest
)
;
}
else
{
const
auto
&
start
=
mStartTable
.
LookupForAdd
(
delay
)
.
OrInsert
(
[
]
(
)
{
return
new
ImageStartData
(
)
;
}
)
;
start
-
>
mEntries
.
PutEntry
(
aRequest
)
;
}
EnsureTimerStarted
(
)
;
return
true
;
}
void
nsRefreshDriver
:
:
RemoveImageRequest
(
imgIRequest
*
aRequest
)
{
mRequests
.
RemoveEntry
(
aRequest
)
;
uint32_t
delay
=
GetFirstFrameDelay
(
aRequest
)
;
if
(
delay
!
=
0
)
{
ImageStartData
*
start
=
mStartTable
.
Get
(
delay
)
;
if
(
start
)
{
start
-
>
mEntries
.
RemoveEntry
(
aRequest
)
;
}
}
}
void
nsRefreshDriver
:
:
NotifyDOMContentLoaded
(
)
{
if
(
!
HasObservers
(
)
)
{
GetPresContext
(
)
-
>
NotifyDOMContentFlushed
(
)
;
}
else
{
mNotifyDOMContentFlushed
=
true
;
}
}
void
nsRefreshDriver
:
:
RunDelayedEventsSoon
(
)
{
mScrollEvents
.
AppendElements
(
mDelayedScrollEvents
)
;
mDelayedScrollEvents
.
Clear
(
)
;
mResizeEventFlushObservers
.
AppendElements
(
mDelayedResizeEventFlushObservers
)
;
mDelayedResizeEventFlushObservers
.
Clear
(
)
;
EnsureTimerStarted
(
)
;
}
void
nsRefreshDriver
:
:
EnsureTimerStarted
(
EnsureTimerStartedFlags
aFlags
)
{
MOZ_ASSERT
(
!
ServoStyleSet
:
:
IsInServoTraversal
(
)
|
|
NS_IsMainThread
(
)
"
EnsureTimerStarted
should
be
called
only
when
we
are
not
"
"
in
servo
traversal
or
on
the
main
-
thread
"
)
;
if
(
mTestControllingRefreshes
)
return
;
if
(
mActiveTimer
&
&
!
(
aFlags
&
eForceAdjustTimer
)
)
return
;
if
(
IsFrozen
(
)
|
|
!
mPresContext
)
{
StopTimer
(
)
;
return
;
}
if
(
mPresContext
-
>
Document
(
)
-
>
IsBeingUsedAsImage
(
)
)
{
nsIURI
*
uri
=
mPresContext
-
>
Document
(
)
-
>
GetDocumentURI
(
)
;
if
(
!
uri
|
|
!
mozilla
:
:
dom
:
:
IsFontTableURI
(
uri
)
)
{
MOZ_ASSERT
(
!
mActiveTimer
"
image
doc
refresh
driver
should
never
have
its
own
timer
"
)
;
return
;
}
}
RefreshDriverTimer
*
newTimer
=
ChooseTimer
(
)
;
if
(
newTimer
!
=
mActiveTimer
)
{
if
(
mActiveTimer
)
mActiveTimer
-
>
RemoveRefreshDriver
(
this
)
;
mActiveTimer
=
newTimer
;
mActiveTimer
-
>
AddRefreshDriver
(
this
)
;
}
if
(
aFlags
&
eNeverAdjustTimer
)
{
return
;
}
TimeStamp
newMostRecentRefresh
=
aFlags
&
eAllowTimeToGoBackwards
?
mActiveTimer
-
>
MostRecentRefresh
(
)
:
std
:
:
max
(
mActiveTimer
-
>
MostRecentRefresh
(
)
mMostRecentRefresh
)
;
if
(
mMostRecentRefresh
!
=
newMostRecentRefresh
)
{
mMostRecentRefresh
=
newMostRecentRefresh
;
for
(
nsATimerAdjustmentObserver
*
obs
:
mTimerAdjustmentObservers
.
EndLimitedRange
(
)
)
{
obs
-
>
NotifyTimerAdjusted
(
mMostRecentRefresh
)
;
}
}
}
void
nsRefreshDriver
:
:
StopTimer
(
)
{
if
(
!
mActiveTimer
)
return
;
mActiveTimer
-
>
RemoveRefreshDriver
(
this
)
;
mActiveTimer
=
nullptr
;
}
uint32_t
nsRefreshDriver
:
:
ObserverCount
(
)
const
{
uint32_t
sum
=
0
;
for
(
const
ObserverArray
&
array
:
mObservers
)
{
sum
+
=
array
.
Length
(
)
;
}
sum
+
=
mAnimationEventFlushObservers
.
Length
(
)
;
sum
+
=
mResizeEventFlushObservers
.
Length
(
)
;
sum
+
=
mStyleFlushObservers
.
Length
(
)
;
sum
+
=
mLayoutFlushObservers
.
Length
(
)
;
sum
+
=
mPendingFullscreenEvents
.
Length
(
)
;
sum
+
=
mFrameRequestCallbackDocs
.
Length
(
)
;
sum
+
=
mThrottledFrameRequestCallbackDocs
.
Length
(
)
;
sum
+
=
mViewManagerFlushIsPending
;
sum
+
=
mEarlyRunners
.
Length
(
)
;
sum
+
=
mTimerAdjustmentObservers
.
Length
(
)
;
return
sum
;
}
bool
nsRefreshDriver
:
:
HasObservers
(
)
const
{
for
(
const
ObserverArray
&
array
:
mObservers
)
{
if
(
!
array
.
IsEmpty
(
)
)
{
return
true
;
}
}
return
mViewManagerFlushIsPending
|
|
!
mStyleFlushObservers
.
IsEmpty
(
)
|
|
!
mLayoutFlushObservers
.
IsEmpty
(
)
|
|
!
mAnimationEventFlushObservers
.
IsEmpty
(
)
|
|
!
mResizeEventFlushObservers
.
IsEmpty
(
)
|
|
!
mPendingFullscreenEvents
.
IsEmpty
(
)
|
|
!
mFrameRequestCallbackDocs
.
IsEmpty
(
)
|
|
!
mThrottledFrameRequestCallbackDocs
.
IsEmpty
(
)
|
|
!
mEarlyRunners
.
IsEmpty
(
)
;
}
bool
nsRefreshDriver
:
:
HasImageRequests
(
)
const
{
for
(
auto
iter
=
mStartTable
.
ConstIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
!
iter
.
UserData
(
)
-
>
mEntries
.
IsEmpty
(
)
)
{
return
true
;
}
}
return
!
mRequests
.
IsEmpty
(
)
;
}
nsRefreshDriver
:
:
ObserverArray
&
nsRefreshDriver
:
:
ArrayFor
(
FlushType
aFlushType
)
{
switch
(
aFlushType
)
{
case
FlushType
:
:
Event
:
return
mObservers
[
0
]
;
case
FlushType
:
:
Style
:
case
FlushType
:
:
Frames
:
return
mObservers
[
1
]
;
case
FlushType
:
:
Layout
:
return
mObservers
[
2
]
;
case
FlushType
:
:
Display
:
return
mObservers
[
3
]
;
default
:
MOZ_CRASH
(
"
We
don
'
t
track
refresh
observers
for
this
flush
type
"
)
;
}
}
void
nsRefreshDriver
:
:
DoTick
(
)
{
MOZ_ASSERT
(
!
IsFrozen
(
)
"
Why
are
we
notified
while
frozen
?
"
)
;
MOZ_ASSERT
(
mPresContext
"
Why
are
we
notified
after
disconnection
?
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
GetCurrentJSContext
(
)
"
Shouldn
'
t
have
a
JSContext
on
the
stack
"
)
;
if
(
mTestControllingRefreshes
)
{
Tick
(
VsyncId
(
)
mMostRecentRefresh
)
;
}
else
{
Tick
(
VsyncId
(
)
TimeStamp
:
:
Now
(
)
)
;
}
}
struct
DocumentFrameCallbacks
{
explicit
DocumentFrameCallbacks
(
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
}
RefPtr
<
Document
>
mDocument
;
nsTArray
<
Document
:
:
FrameRequest
>
mCallbacks
;
}
;
static
nsDocShell
*
GetDocShell
(
nsPresContext
*
aPresContext
)
{
return
static_cast
<
nsDocShell
*
>
(
aPresContext
-
>
GetDocShell
(
)
)
;
}
static
bool
HasPendingAnimations
(
PresShell
*
aPresShell
)
{
Document
*
doc
=
aPresShell
-
>
GetDocument
(
)
;
if
(
!
doc
)
{
return
false
;
}
PendingAnimationTracker
*
tracker
=
doc
-
>
GetPendingAnimationTracker
(
)
;
return
tracker
&
&
tracker
-
>
HasPendingAnimations
(
)
;
}
static
void
GetProfileTimelineSubDocShells
(
nsDocShell
*
aRootDocShell
nsTArray
<
nsDocShell
*
>
&
aShells
)
{
if
(
!
aRootDocShell
)
{
return
;
}
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
if
(
!
timelines
|
|
timelines
-
>
IsEmpty
(
)
)
{
return
;
}
RefPtr
<
BrowsingContext
>
bc
=
aRootDocShell
-
>
GetBrowsingContext
(
)
;
if
(
!
bc
)
{
return
;
}
bc
-
>
PostOrderWalk
(
[
&
]
(
BrowsingContext
*
aContext
)
{
nsDocShell
*
shell
=
nsDocShell
:
:
Cast
(
aContext
-
>
GetDocShell
(
)
)
;
if
(
!
shell
|
|
!
shell
-
>
GetRecordProfileTimelineMarkers
(
)
)
{
return
;
}
bool
isVisible
=
false
;
shell
-
>
GetVisibility
(
&
isVisible
)
;
if
(
!
isVisible
)
{
return
;
}
aShells
.
AppendElement
(
shell
)
;
}
)
;
}
static
void
TakeFrameRequestCallbacksFrom
(
Document
*
aDocument
nsTArray
<
DocumentFrameCallbacks
>
&
aTarget
)
{
aTarget
.
AppendElement
(
aDocument
)
;
aDocument
-
>
TakeFrameRequestCallbacks
(
aTarget
.
LastElement
(
)
.
mCallbacks
)
;
}
void
nsRefreshDriver
:
:
RunFullscreenSteps
(
)
{
nsTArray
<
UniquePtr
<
PendingFullscreenEvent
>
>
pendings
(
std
:
:
move
(
mPendingFullscreenEvents
)
)
;
for
(
UniquePtr
<
PendingFullscreenEvent
>
&
event
:
pendings
)
{
event
-
>
Dispatch
(
)
;
}
}
void
nsRefreshDriver
:
:
UpdateIntersectionObservations
(
)
{
AutoTArray
<
RefPtr
<
Document
>
32
>
documents
;
if
(
mPresContext
-
>
Document
(
)
-
>
HasIntersectionObservers
(
)
)
{
documents
.
AppendElement
(
mPresContext
-
>
Document
(
)
)
;
}
mPresContext
-
>
Document
(
)
-
>
CollectDescendantDocuments
(
documents
[
]
(
const
Document
*
document
)
-
>
bool
{
return
document
-
>
HasIntersectionObservers
(
)
;
}
)
;
for
(
uint32_t
i
=
0
;
i
<
documents
.
Length
(
)
;
+
+
i
)
{
Document
*
doc
=
documents
[
i
]
;
doc
-
>
UpdateIntersectionObservations
(
)
;
doc
-
>
ScheduleIntersectionObserverNotification
(
)
;
}
mNeedToUpdateIntersectionObservations
=
false
;
}
void
nsRefreshDriver
:
:
DispatchAnimationEvents
(
)
{
if
(
!
mPresContext
)
{
return
;
}
AutoTArray
<
RefPtr
<
AnimationEventDispatcher
>
16
>
dispatchers
;
dispatchers
.
AppendElements
(
mAnimationEventFlushObservers
)
;
mAnimationEventFlushObservers
.
Clear
(
)
;
for
(
auto
&
dispatcher
:
dispatchers
)
{
dispatcher
-
>
DispatchEvents
(
)
;
}
}
void
nsRefreshDriver
:
:
RunFrameRequestCallbacks
(
TimeStamp
aNowTime
)
{
nsTArray
<
DocumentFrameCallbacks
>
frameRequestCallbacks
(
mFrameRequestCallbackDocs
.
Length
(
)
+
mThrottledFrameRequestCallbackDocs
.
Length
(
)
)
;
{
nsTArray
<
Document
*
>
docsToRemove
;
bool
tickThrottledFrameRequests
=
mThrottled
;
if
(
!
tickThrottledFrameRequests
&
&
aNowTime
>
=
mNextThrottledFrameRequestTick
)
{
mNextThrottledFrameRequestTick
=
aNowTime
+
mThrottledFrameRequestInterval
;
tickThrottledFrameRequests
=
true
;
}
for
(
Document
*
doc
:
mThrottledFrameRequestCallbackDocs
)
{
if
(
tickThrottledFrameRequests
)
{
TakeFrameRequestCallbacksFrom
(
doc
frameRequestCallbacks
)
;
}
else
if
(
!
doc
-
>
ShouldThrottleFrameRequests
(
)
)
{
TakeFrameRequestCallbacksFrom
(
doc
frameRequestCallbacks
)
;
docsToRemove
.
AppendElement
(
doc
)
;
}
}
if
(
tickThrottledFrameRequests
)
{
mThrottledFrameRequestCallbackDocs
.
Clear
(
)
;
}
else
{
for
(
Document
*
doc
:
docsToRemove
)
{
mThrottledFrameRequestCallbackDocs
.
RemoveElement
(
doc
)
;
}
}
}
for
(
Document
*
doc
:
mFrameRequestCallbackDocs
)
{
TakeFrameRequestCallbacksFrom
(
doc
frameRequestCallbacks
)
;
}
mFrameRequestCallbackDocs
.
Clear
(
)
;
if
(
!
frameRequestCallbacks
.
IsEmpty
(
)
)
{
AUTO_PROFILER_TRACING_MARKER_DOCSHELL
(
"
Paint
"
"
requestAnimationFrame
callbacks
"
GRAPHICS
GetDocShell
(
mPresContext
)
)
;
for
(
const
DocumentFrameCallbacks
&
docCallbacks
:
frameRequestCallbacks
)
{
nsPIDOMWindowInner
*
innerWindow
=
docCallbacks
.
mDocument
-
>
GetInnerWindow
(
)
;
DOMHighResTimeStamp
timeStamp
=
0
;
if
(
innerWindow
)
{
mozilla
:
:
dom
:
:
Performance
*
perf
=
innerWindow
-
>
GetPerformance
(
)
;
if
(
perf
)
{
timeStamp
=
perf
-
>
GetDOMTiming
(
)
-
>
TimeStampToDOMHighRes
(
aNowTime
)
;
if
(
!
perf
-
>
IsSystemPrincipal
(
)
)
{
timeStamp
=
nsRFPService
:
:
ReduceTimePrecisionAsMSecsRFPOnly
(
timeStamp
0
)
;
}
}
}
for
(
auto
&
callback
:
docCallbacks
.
mCallbacks
)
{
if
(
docCallbacks
.
mDocument
-
>
IsCanceledFrameRequestCallback
(
callback
.
mHandle
)
)
{
continue
;
}
nsCOMPtr
<
nsIGlobalObject
>
global
(
innerWindow
?
innerWindow
-
>
AsGlobal
(
)
:
nullptr
)
;
CallbackDebuggerNotificationGuard
guard
(
global
DebuggerNotificationType
:
:
RequestAnimationFrameCallback
)
;
MOZ_KnownLive
(
callback
.
mCallback
)
-
>
Call
(
timeStamp
)
;
}
}
}
}
struct
RunnableWithDelay
{
nsCOMPtr
<
nsIRunnable
>
mRunnable
;
uint32_t
mDelay
;
}
;
static
AutoTArray
<
RunnableWithDelay
8
>
*
sPendingIdleRunnables
=
nullptr
;
void
nsRefreshDriver
:
:
DispatchIdleRunnableAfterTickUnlessExists
(
nsIRunnable
*
aRunnable
uint32_t
aDelay
)
{
if
(
!
sPendingIdleRunnables
)
{
sPendingIdleRunnables
=
new
AutoTArray
<
RunnableWithDelay
8
>
(
)
;
}
else
{
for
(
uint32_t
i
=
0
;
i
<
sPendingIdleRunnables
-
>
Length
(
)
;
+
+
i
)
{
if
(
(
*
sPendingIdleRunnables
)
[
i
]
.
mRunnable
=
=
aRunnable
)
{
return
;
}
}
}
RunnableWithDelay
rwd
=
{
aRunnable
aDelay
}
;
sPendingIdleRunnables
-
>
AppendElement
(
rwd
)
;
}
void
nsRefreshDriver
:
:
CancelIdleRunnable
(
nsIRunnable
*
aRunnable
)
{
if
(
!
sPendingIdleRunnables
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
sPendingIdleRunnables
-
>
Length
(
)
;
+
+
i
)
{
if
(
(
*
sPendingIdleRunnables
)
[
i
]
.
mRunnable
=
=
aRunnable
)
{
sPendingIdleRunnables
-
>
RemoveElementAt
(
i
)
;
break
;
}
}
if
(
sPendingIdleRunnables
-
>
IsEmpty
(
)
)
{
delete
sPendingIdleRunnables
;
sPendingIdleRunnables
=
nullptr
;
}
}
static
CallState
ReduceAnimations
(
Document
&
aDocument
)
{
if
(
nsPresContext
*
pc
=
aDocument
.
GetPresContext
(
)
)
{
if
(
pc
-
>
EffectCompositor
(
)
-
>
NeedsReducing
(
)
)
{
pc
-
>
EffectCompositor
(
)
-
>
ReduceAnimations
(
)
;
}
}
aDocument
.
EnumerateSubDocuments
(
ReduceAnimations
)
;
return
CallState
:
:
Continue
;
}
void
nsRefreshDriver
:
:
Tick
(
VsyncId
aId
TimeStamp
aNowTime
)
{
MOZ_ASSERT
(
!
nsContentUtils
:
:
GetCurrentJSContext
(
)
"
Shouldn
'
t
have
a
JSContext
on
the
stack
"
)
;
if
(
nsNPAPIPluginInstance
:
:
InPluginCallUnsafeForReentry
(
)
)
{
NS_ERROR
(
"
Refresh
driver
should
not
run
during
plugin
call
!
"
)
;
return
;
}
AUTO_PROFILER_LABEL
(
"
nsRefreshDriver
:
:
Tick
"
LAYOUT
)
;
if
(
IsFrozen
(
)
|
|
!
mPresContext
)
{
return
;
}
if
(
(
aNowTime
<
=
mMostRecentRefresh
)
&
&
!
mTestControllingRefreshes
)
{
return
;
}
bool
isPresentingInVR
=
false
;
#
if
defined
(
MOZ_WIDGET_ANDROID
)
isPresentingInVR
=
gfx
:
:
VRManagerChild
:
:
IsPresenting
(
)
;
#
endif
if
(
!
isPresentingInVR
&
&
IsWaitingForPaint
(
aNowTime
)
)
{
PROFILER_ADD_MARKER
(
"
nsRefreshDriver
:
:
Tick
waiting
for
paint
"
LAYOUT
)
;
return
;
}
TimeStamp
previousRefresh
=
mMostRecentRefresh
;
mMostRecentRefresh
=
aNowTime
;
if
(
mRootRefresh
)
{
mRootRefresh
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Style
)
;
mRootRefresh
=
nullptr
;
}
mSkippedPaints
=
false
;
mWarningThreshold
=
1
;
RefPtr
<
PresShell
>
presShell
=
mPresContext
-
>
GetPresShell
(
)
;
if
(
!
presShell
|
|
(
!
HasObservers
(
)
&
&
!
HasImageRequests
(
)
&
&
!
mNeedToUpdateIntersectionObservations
&
&
mVisualViewportResizeEvents
.
IsEmpty
(
)
&
&
mScrollEvents
.
IsEmpty
(
)
&
&
mVisualViewportScrollEvents
.
IsEmpty
(
)
)
)
{
if
(
presShell
&
&
!
mThrottled
&
&
!
mTestControllingRefreshes
&
&
XRE_IsContentProcess
(
)
&
&
mPresContext
-
>
Document
(
)
-
>
IsTopLevelContentDocument
(
)
&
&
!
gfxPlatform
:
:
IsInLayoutAsapMode
(
)
&
&
!
mPresContext
-
>
HadContentfulPaint
(
)
&
&
mPresContext
-
>
Document
(
)
-
>
GetReadyStateEnum
(
)
<
Document
:
:
READYSTATE_COMPLETE
)
{
if
(
mInitialTimerRunningLimit
.
IsNull
(
)
)
{
mInitialTimerRunningLimit
=
TimeStamp
:
:
Now
(
)
+
TimeDuration
:
:
FromSeconds
(
4
.
0f
)
;
}
else
if
(
mInitialTimerRunningLimit
<
TimeStamp
:
:
Now
(
)
)
{
StopTimer
(
)
;
}
}
else
{
StopTimer
(
)
;
}
return
;
}
mResizeSuppressed
=
false
;
bool
oldInRefresh
=
mInRefresh
;
auto
restoreInRefresh
=
MakeScopeExit
(
[
&
]
{
mInRefresh
=
oldInRefresh
;
}
)
;
mInRefresh
=
true
;
AutoRestore
<
TimeStamp
>
restoreTickStart
(
mTickStart
)
;
mTickStart
=
TimeStamp
:
:
Now
(
)
;
mTickVsyncId
=
aId
;
mTickVsyncTime
=
aNowTime
;
gfxPlatform
:
:
GetPlatform
(
)
-
>
SchedulePaintIfDeviceReset
(
)
;
if
(
StaticPrefs
:
:
apz_peek_messages_enabled
(
)
)
{
nsLayoutUtils
:
:
UpdateDisplayPortMarginsFromPendingMessages
(
)
;
}
AutoTArray
<
nsCOMPtr
<
nsIRunnable
>
16
>
earlyRunners
;
earlyRunners
.
SwapElements
(
mEarlyRunners
)
;
for
(
auto
&
runner
:
earlyRunners
)
{
runner
-
>
Run
(
)
;
}
AutoTArray
<
RefPtr
<
PresShell
>
16
>
observers
;
observers
.
AppendElements
(
mResizeEventFlushObservers
)
;
for
(
RefPtr
<
PresShell
>
&
presShell
:
Reversed
(
observers
)
)
{
if
(
!
mPresContext
|
|
!
mPresContext
-
>
GetPresShell
(
)
)
{
StopTimer
(
)
;
return
;
}
if
(
!
mResizeEventFlushObservers
.
RemoveElement
(
presShell
)
)
{
continue
;
}
MOZ_KnownLive
(
presShell
)
-
>
FireResizeEvent
(
)
;
}
DispatchVisualViewportResizeEvents
(
)
;
double
phaseMetrics
[
MOZ_ARRAY_LENGTH
(
mObservers
)
]
=
{
0
.
0
}
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
mObservers
)
;
+
+
i
)
{
AutoRecordPhase
phaseRecord
(
&
phaseMetrics
[
i
]
)
;
for
(
RefPtr
<
nsARefreshObserver
>
obs
:
mObservers
[
i
]
.
EndLimitedRange
(
)
)
{
obs
-
>
WillRefresh
(
aNowTime
)
;
if
(
!
mPresContext
|
|
!
mPresContext
-
>
GetPresShell
(
)
)
{
StopTimer
(
)
;
return
;
}
}
if
(
i
=
=
1
)
{
nsAutoMicroTask
mt
;
ReduceAnimations
(
*
mPresContext
-
>
Document
(
)
)
;
}
if
(
i
=
=
1
&
&
(
!
mPresContext
|
|
!
mPresContext
-
>
GetPresShell
(
)
)
)
{
StopTimer
(
)
;
return
;
}
if
(
i
=
=
1
)
{
DispatchScrollEvents
(
)
;
DispatchVisualViewportScrollEvents
(
)
;
DispatchAnimationEvents
(
)
;
RunFullscreenSteps
(
)
;
RunFrameRequestCallbacks
(
aNowTime
)
;
if
(
mPresContext
&
&
mPresContext
-
>
GetPresShell
(
)
)
{
AutoTArray
<
PresShell
*
16
>
observers
;
observers
.
AppendElements
(
mStyleFlushObservers
)
;
for
(
uint32_t
j
=
observers
.
Length
(
)
;
j
&
&
mPresContext
&
&
mPresContext
-
>
GetPresShell
(
)
;
-
-
j
)
{
PresShell
*
rawPresShell
=
observers
[
j
-
1
]
;
if
(
!
mStyleFlushObservers
.
RemoveElement
(
rawPresShell
)
)
{
continue
;
}
RefPtr
<
PresShell
>
presShell
=
rawPresShell
;
presShell
-
>
mObservingStyleFlushes
=
false
;
presShell
-
>
FlushPendingNotifications
(
ChangesToFlush
(
FlushType
:
:
Style
false
)
)
;
presShell
-
>
NotifyFontFaceSetOnRefresh
(
)
;
mNeedToRecomputeVisibility
=
true
;
presShell
-
>
PingPerTickTelemetry
(
FlushType
:
:
Style
)
;
}
}
}
else
if
(
i
=
=
2
)
{
AutoTArray
<
PresShell
*
16
>
observers
;
observers
.
AppendElements
(
mLayoutFlushObservers
)
;
for
(
uint32_t
j
=
observers
.
Length
(
)
;
j
&
&
mPresContext
&
&
mPresContext
-
>
GetPresShell
(
)
;
-
-
j
)
{
PresShell
*
rawPresShell
=
observers
[
j
-
1
]
;
if
(
!
mLayoutFlushObservers
.
RemoveElement
(
rawPresShell
)
)
{
continue
;
}
RefPtr
<
PresShell
>
presShell
=
rawPresShell
;
presShell
-
>
mObservingLayoutFlushes
=
false
;
presShell
-
>
mWasLastReflowInterrupted
=
false
;
FlushType
flushType
=
HasPendingAnimations
(
presShell
)
?
FlushType
:
:
Layout
:
FlushType
:
:
InterruptibleLayout
;
presShell
-
>
FlushPendingNotifications
(
ChangesToFlush
(
flushType
false
)
)
;
presShell
-
>
NotifyFontFaceSetOnRefresh
(
)
;
mNeedToRecomputeVisibility
=
true
;
presShell
-
>
PingPerTickTelemetry
(
FlushType
:
:
Layout
)
;
}
}
if
(
!
mPresContext
|
|
!
mPresContext
-
>
GetPresShell
(
)
)
{
StopTimer
(
)
;
return
;
}
}
if
(
mNeedToRecomputeVisibility
&
&
!
mThrottled
&
&
aNowTime
>
=
mNextRecomputeVisibilityTick
&
&
!
presShell
-
>
IsPaintingSuppressed
(
)
)
{
mNextRecomputeVisibilityTick
=
aNowTime
+
mMinRecomputeVisibilityInterval
;
mNeedToRecomputeVisibility
=
false
;
presShell
-
>
ScheduleApproximateFrameVisibilityUpdateNow
(
)
;
}
#
ifdef
MOZ_XUL
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
UpdatePopupPositions
(
this
)
;
}
#
endif
UpdateIntersectionObservations
(
)
;
for
(
auto
iter
=
mStartTable
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
uint32_t
&
delay
=
iter
.
Key
(
)
;
ImageStartData
*
data
=
iter
.
UserData
(
)
;
if
(
data
-
>
mStartTime
)
{
TimeStamp
&
start
=
*
data
-
>
mStartTime
;
TimeDuration
prev
=
previousRefresh
-
start
;
TimeDuration
curr
=
aNowTime
-
start
;
uint32_t
prevMultiple
=
uint32_t
(
prev
.
ToMilliseconds
(
)
)
/
delay
;
if
(
prevMultiple
!
=
uint32_t
(
curr
.
ToMilliseconds
(
)
)
/
delay
)
{
mozilla
:
:
TimeStamp
desired
=
start
+
TimeDuration
:
:
FromMilliseconds
(
prevMultiple
*
delay
)
;
BeginRefreshingImages
(
data
-
>
mEntries
desired
)
;
}
}
else
{
mozilla
:
:
TimeStamp
desired
=
aNowTime
;
BeginRefreshingImages
(
data
-
>
mEntries
desired
)
;
data
-
>
mStartTime
.
emplace
(
aNowTime
)
;
}
}
if
(
mRequests
.
Count
(
)
)
{
nsCOMArray
<
imgIContainer
>
imagesToRefresh
(
mRequests
.
Count
(
)
)
;
for
(
auto
iter
=
mRequests
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsISupportsHashKey
*
entry
=
iter
.
Get
(
)
;
auto
req
=
static_cast
<
imgIRequest
*
>
(
entry
-
>
GetKey
(
)
)
;
MOZ_ASSERT
(
req
"
Unable
to
retrieve
the
image
request
"
)
;
nsCOMPtr
<
imgIContainer
>
image
;
if
(
NS_SUCCEEDED
(
req
-
>
GetImage
(
getter_AddRefs
(
image
)
)
)
)
{
imagesToRefresh
.
AppendElement
(
image
.
forget
(
)
)
;
}
}
for
(
uint32_t
i
=
0
;
i
<
imagesToRefresh
.
Length
(
)
;
i
+
+
)
{
imagesToRefresh
[
i
]
-
>
RequestRefresh
(
aNowTime
)
;
}
}
double
phasePaint
=
0
.
0
;
bool
dispatchRunnablesAfterTick
=
false
;
if
(
mViewManagerFlushIsPending
)
{
AutoRecordPhase
paintRecord
(
&
phasePaint
)
;
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
nsTArray
<
nsDocShell
*
>
profilingDocShells
;
GetProfileTimelineSubDocShells
(
GetDocShell
(
mPresContext
)
profilingDocShells
)
;
for
(
nsDocShell
*
docShell
:
profilingDocShells
)
{
MOZ_ASSERT
(
timelines
)
;
MOZ_ASSERT
(
timelines
-
>
HasConsumer
(
docShell
)
)
;
timelines
-
>
AddMarkerForDocShell
(
docShell
"
Paint
"
MarkerTracingType
:
:
START
)
;
}
#
ifdef
MOZ_DUMP_PAINTING
if
(
nsLayoutUtils
:
:
InvalidationDebuggingIsEnabled
(
)
)
{
printf_stderr
(
"
Starting
ProcessPendingUpdates
\
n
"
)
;
}
#
endif
mViewManagerFlushIsPending
=
false
;
RefPtr
<
nsViewManager
>
vm
=
mPresContext
-
>
GetPresShell
(
)
-
>
GetViewManager
(
)
;
const
bool
skipPaint
=
isPresentingInVR
;
if
(
!
skipPaint
)
{
PaintTelemetry
:
:
AutoRecordPaint
record
;
vm
-
>
ProcessPendingUpdates
(
)
;
}
#
ifdef
MOZ_DUMP_PAINTING
if
(
nsLayoutUtils
:
:
InvalidationDebuggingIsEnabled
(
)
)
{
printf_stderr
(
"
Ending
ProcessPendingUpdates
\
n
"
)
;
}
#
endif
for
(
nsDocShell
*
docShell
:
profilingDocShells
)
{
MOZ_ASSERT
(
timelines
)
;
MOZ_ASSERT
(
timelines
-
>
HasConsumer
(
docShell
)
)
;
timelines
-
>
AddMarkerForDocShell
(
docShell
"
Paint
"
MarkerTracingType
:
:
END
)
;
}
dispatchRunnablesAfterTick
=
true
;
mHasScheduleFlush
=
false
;
}
double
totalMs
=
(
TimeStamp
:
:
Now
(
)
-
mTickStart
)
.
ToMilliseconds
(
)
;
#
ifndef
ANDROID
mozilla
:
:
Telemetry
:
:
Accumulate
(
mozilla
:
:
Telemetry
:
:
REFRESH_DRIVER_TICK
static_cast
<
uint32_t
>
(
totalMs
)
)
;
#
endif
if
(
totalMs
>
1000
.
0
/
60
.
0
)
{
auto
record
=
[
=
]
(
const
nsCString
&
aKey
double
aDurationMs
)
-
>
void
{
MOZ_ASSERT
(
aDurationMs
<
=
totalMs
)
;
auto
phasePercent
=
static_cast
<
uint32_t
>
(
aDurationMs
*
100
.
0
/
totalMs
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
REFRESH_DRIVER_TICK_PHASE_WEIGHT
aKey
phasePercent
)
;
}
;
record
(
"
Event
"
_ns
phaseMetrics
[
0
]
)
;
record
(
"
Style
"
_ns
phaseMetrics
[
1
]
)
;
record
(
"
Reflow
"
_ns
phaseMetrics
[
2
]
)
;
record
(
"
Display
"
_ns
phaseMetrics
[
3
]
)
;
record
(
"
Paint
"
_ns
phasePaint
)
;
double
other
=
totalMs
-
std
:
:
accumulate
(
phaseMetrics
ArrayEnd
(
phaseMetrics
)
0
.
0
)
-
phasePaint
;
record
(
"
Other
"
_ns
other
)
;
}
if
(
mNotifyDOMContentFlushed
)
{
mNotifyDOMContentFlushed
=
false
;
mPresContext
-
>
NotifyDOMContentFlushed
(
)
;
}
for
(
nsAPostRefreshObserver
*
observer
:
mPostRefreshObservers
.
ForwardRange
(
)
)
{
observer
-
>
DidRefresh
(
)
;
}
NS_ASSERTION
(
mInRefresh
"
Still
in
refresh
"
)
;
if
(
mPresContext
-
>
IsRoot
(
)
&
&
XRE_IsContentProcess
(
)
&
&
StaticPrefs
:
:
gfx_content_always_paint
(
)
)
{
ScheduleViewManagerFlush
(
)
;
}
if
(
dispatchRunnablesAfterTick
&
&
sPendingIdleRunnables
)
{
AutoTArray
<
RunnableWithDelay
8
>
*
runnables
=
sPendingIdleRunnables
;
sPendingIdleRunnables
=
nullptr
;
for
(
RunnableWithDelay
&
runnableWithDelay
:
*
runnables
)
{
NS_DispatchToCurrentThreadQueue
(
runnableWithDelay
.
mRunnable
.
forget
(
)
runnableWithDelay
.
mDelay
EventQueuePriority
:
:
Idle
)
;
}
delete
runnables
;
}
}
void
nsRefreshDriver
:
:
BeginRefreshingImages
(
RequestTable
&
aEntries
mozilla
:
:
TimeStamp
aDesired
)
{
for
(
auto
iter
=
aEntries
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
auto
req
=
static_cast
<
imgIRequest
*
>
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
MOZ_ASSERT
(
req
"
Unable
to
retrieve
the
image
request
"
)
;
mRequests
.
PutEntry
(
req
)
;
nsCOMPtr
<
imgIContainer
>
image
;
if
(
NS_SUCCEEDED
(
req
-
>
GetImage
(
getter_AddRefs
(
image
)
)
)
)
{
image
-
>
SetAnimationStartTime
(
aDesired
)
;
}
}
aEntries
.
Clear
(
)
;
}
void
nsRefreshDriver
:
:
Freeze
(
)
{
StopTimer
(
)
;
mFreezeCount
+
+
;
}
void
nsRefreshDriver
:
:
Thaw
(
)
{
NS_ASSERTION
(
mFreezeCount
>
0
"
Thaw
(
)
called
on
an
unfrozen
refresh
driver
"
)
;
if
(
mFreezeCount
>
0
)
{
mFreezeCount
-
-
;
}
if
(
mFreezeCount
=
=
0
)
{
if
(
HasObservers
(
)
|
|
HasImageRequests
(
)
)
{
RefPtr
<
nsRunnableMethod
<
nsRefreshDriver
>
>
event
=
NewRunnableMethod
(
"
nsRefreshDriver
:
:
DoRefresh
"
this
&
nsRefreshDriver
:
:
DoRefresh
)
;
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
pc
)
{
pc
-
>
Document
(
)
-
>
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
EnsureTimerStarted
(
)
;
}
else
{
NS_ERROR
(
"
Thawing
while
document
is
being
destroyed
"
)
;
}
}
}
}
void
nsRefreshDriver
:
:
FinishedWaitingForTransaction
(
)
{
mWaitingForTransaction
=
false
;
mSkippedPaints
=
false
;
mWarningThreshold
=
1
;
}
mozilla
:
:
layers
:
:
TransactionId
nsRefreshDriver
:
:
GetTransactionId
(
bool
aThrottle
)
{
mOutstandingTransactionId
=
mOutstandingTransactionId
.
Next
(
)
;
mNextTransactionId
=
mNextTransactionId
.
Next
(
)
;
if
(
aThrottle
&
&
mOutstandingTransactionId
-
mCompletedTransaction
>
=
2
&
&
!
mWaitingForTransaction
&
&
!
mTestControllingRefreshes
)
{
mWaitingForTransaction
=
true
;
mSkippedPaints
=
false
;
mWarningThreshold
=
1
;
}
return
mNextTransactionId
;
}
mozilla
:
:
layers
:
:
TransactionId
nsRefreshDriver
:
:
LastTransactionId
(
)
const
{
return
mNextTransactionId
;
}
void
nsRefreshDriver
:
:
RevokeTransactionId
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
)
{
MOZ_ASSERT
(
aTransactionId
=
=
mNextTransactionId
)
;
if
(
mOutstandingTransactionId
-
mCompletedTransaction
=
=
2
&
&
mWaitingForTransaction
)
{
MOZ_ASSERT
(
!
mSkippedPaints
"
How
did
we
skip
a
paint
when
we
'
re
in
the
middle
of
one
?
"
)
;
FinishedWaitingForTransaction
(
)
;
}
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
pc
)
{
pc
-
>
NotifyRevokingDidPaint
(
aTransactionId
)
;
}
mOutstandingTransactionId
=
mOutstandingTransactionId
.
Prev
(
)
;
}
void
nsRefreshDriver
:
:
ClearPendingTransactions
(
)
{
mCompletedTransaction
=
mOutstandingTransactionId
=
mNextTransactionId
;
mWaitingForTransaction
=
false
;
}
void
nsRefreshDriver
:
:
ResetInitialTransactionId
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
)
{
mCompletedTransaction
=
mOutstandingTransactionId
=
mNextTransactionId
=
aTransactionId
;
}
mozilla
:
:
TimeStamp
nsRefreshDriver
:
:
GetTransactionStart
(
)
{
return
mTickStart
;
}
VsyncId
nsRefreshDriver
:
:
GetVsyncId
(
)
{
return
mTickVsyncId
;
}
mozilla
:
:
TimeStamp
nsRefreshDriver
:
:
GetVsyncStart
(
)
{
return
mTickVsyncTime
;
}
void
nsRefreshDriver
:
:
NotifyTransactionCompleted
(
mozilla
:
:
layers
:
:
TransactionId
aTransactionId
)
{
if
(
aTransactionId
>
mCompletedTransaction
)
{
if
(
mOutstandingTransactionId
-
mCompletedTransaction
>
1
&
&
mWaitingForTransaction
)
{
mCompletedTransaction
=
aTransactionId
;
FinishedWaitingForTransaction
(
)
;
}
else
{
mCompletedTransaction
=
aTransactionId
;
}
}
if
(
mCompletedTransaction
>
mOutstandingTransactionId
)
{
mOutstandingTransactionId
=
mCompletedTransaction
;
}
}
void
nsRefreshDriver
:
:
WillRefresh
(
mozilla
:
:
TimeStamp
aTime
)
{
mRootRefresh
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Style
)
;
mRootRefresh
=
nullptr
;
if
(
mSkippedPaints
)
{
DoRefresh
(
)
;
}
}
bool
nsRefreshDriver
:
:
IsWaitingForPaint
(
mozilla
:
:
TimeStamp
aTime
)
{
if
(
mTestControllingRefreshes
)
{
return
false
;
}
if
(
mWaitingForTransaction
)
{
if
(
mSkippedPaints
&
&
aTime
>
(
mMostRecentRefresh
+
TimeDuration
:
:
FromMilliseconds
(
mWarningThreshold
*
1000
)
)
)
{
mWarningThreshold
*
=
2
;
}
mSkippedPaints
=
true
;
return
true
;
}
nsPresContext
*
pc
=
GetPresContext
(
)
;
nsPresContext
*
rootContext
=
pc
?
pc
-
>
GetRootPresContext
(
)
:
nullptr
;
if
(
rootContext
)
{
nsRefreshDriver
*
rootRefresh
=
rootContext
-
>
RefreshDriver
(
)
;
if
(
rootRefresh
&
&
rootRefresh
!
=
this
)
{
if
(
rootRefresh
-
>
IsWaitingForPaint
(
aTime
)
)
{
if
(
mRootRefresh
!
=
rootRefresh
)
{
if
(
mRootRefresh
)
{
mRootRefresh
-
>
RemoveRefreshObserver
(
this
FlushType
:
:
Style
)
;
}
rootRefresh
-
>
AddRefreshObserver
(
this
FlushType
:
:
Style
)
;
mRootRefresh
=
rootRefresh
;
}
mSkippedPaints
=
true
;
return
true
;
}
}
}
return
false
;
}
void
nsRefreshDriver
:
:
SetThrottled
(
bool
aThrottled
)
{
if
(
aThrottled
!
=
mThrottled
)
{
mThrottled
=
aThrottled
;
if
(
mActiveTimer
)
{
EnsureTimerStarted
(
eForceAdjustTimer
)
;
}
}
}
nsPresContext
*
nsRefreshDriver
:
:
GetPresContext
(
)
const
{
return
mPresContext
;
}
void
nsRefreshDriver
:
:
PVsyncActorCreated
(
VsyncChild
*
aVsyncChild
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
RefPtr
<
RefreshDriverTimer
>
vsyncRefreshDriverTimer
=
new
VsyncRefreshDriverTimer
(
aVsyncChild
)
;
if
(
sRegularRateTimer
)
{
sRegularRateTimer
-
>
SwapRefreshDrivers
(
vsyncRefreshDriverTimer
)
;
}
sRegularRateTimer
=
std
:
:
move
(
vsyncRefreshDriverTimer
)
;
}
void
nsRefreshDriver
:
:
DoRefresh
(
)
{
if
(
!
IsFrozen
(
)
&
&
mPresContext
&
&
mActiveTimer
)
{
DoTick
(
)
;
}
}
#
ifdef
DEBUG
bool
nsRefreshDriver
:
:
IsRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
{
ObserverArray
&
array
=
ArrayFor
(
aFlushType
)
;
return
array
.
Contains
(
aObserver
)
;
}
#
endif
void
nsRefreshDriver
:
:
ScheduleViewManagerFlush
(
)
{
NS_ASSERTION
(
mPresContext
-
>
IsRoot
(
)
"
Should
only
schedule
view
manager
flush
on
root
prescontexts
"
)
;
mViewManagerFlushIsPending
=
true
;
mHasScheduleFlush
=
true
;
EnsureTimerStarted
(
eNeverAdjustTimer
)
;
}
void
nsRefreshDriver
:
:
ScheduleFrameRequestCallbacks
(
Document
*
aDocument
)
{
NS_ASSERTION
(
mFrameRequestCallbackDocs
.
IndexOf
(
aDocument
)
=
=
mFrameRequestCallbackDocs
.
NoIndex
&
&
mThrottledFrameRequestCallbackDocs
.
IndexOf
(
aDocument
)
=
=
mThrottledFrameRequestCallbackDocs
.
NoIndex
"
Don
'
t
schedule
the
same
document
multiple
times
"
)
;
if
(
aDocument
-
>
ShouldThrottleFrameRequests
(
)
)
{
mThrottledFrameRequestCallbackDocs
.
AppendElement
(
aDocument
)
;
}
else
{
mFrameRequestCallbackDocs
.
AppendElement
(
aDocument
)
;
}
EnsureTimerStarted
(
)
;
}
void
nsRefreshDriver
:
:
RevokeFrameRequestCallbacks
(
Document
*
aDocument
)
{
mFrameRequestCallbackDocs
.
RemoveElement
(
aDocument
)
;
mThrottledFrameRequestCallbackDocs
.
RemoveElement
(
aDocument
)
;
}
void
nsRefreshDriver
:
:
ScheduleFullscreenEvent
(
UniquePtr
<
PendingFullscreenEvent
>
aEvent
)
{
mPendingFullscreenEvents
.
AppendElement
(
std
:
:
move
(
aEvent
)
)
;
EnsureTimerStarted
(
)
;
}
void
nsRefreshDriver
:
:
CancelPendingFullscreenEvents
(
Document
*
aDocument
)
{
for
(
auto
i
:
Reversed
(
IntegerRange
(
mPendingFullscreenEvents
.
Length
(
)
)
)
)
{
if
(
mPendingFullscreenEvents
[
i
]
-
>
Document
(
)
=
=
aDocument
)
{
mPendingFullscreenEvents
.
RemoveElementAt
(
i
)
;
}
}
}
void
nsRefreshDriver
:
:
CancelPendingAnimationEvents
(
AnimationEventDispatcher
*
aDispatcher
)
{
MOZ_ASSERT
(
aDispatcher
)
;
aDispatcher
-
>
ClearEventQueue
(
)
;
mAnimationEventFlushObservers
.
RemoveElement
(
aDispatcher
)
;
}
TimeStamp
nsRefreshDriver
:
:
GetIdleDeadlineHint
(
TimeStamp
aDefault
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
aDefault
.
IsNull
(
)
)
;
if
(
!
sRegularRateTimer
)
{
return
aDefault
;
}
return
sRegularRateTimer
-
>
GetIdleDeadlineHint
(
aDefault
)
;
}
Maybe
<
TimeStamp
>
nsRefreshDriver
:
:
GetNextTickHint
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
sRegularRateTimer
)
{
return
Nothing
(
)
;
}
return
sRegularRateTimer
-
>
GetNextTickHint
(
)
;
}
void
nsRefreshDriver
:
:
Disconnect
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
StopTimer
(
)
;
if
(
mPresContext
)
{
mPresContext
=
nullptr
;
if
(
-
-
sRefreshDriverCount
=
=
0
)
{
Shutdown
(
)
;
}
}
}
bool
nsRefreshDriver
:
:
IsJankCritical
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
return
sActiveVsyncTimers
>
0
;
}
bool
nsRefreshDriver
:
:
GetJankLevels
(
Vector
<
uint64_t
>
&
aJank
)
{
aJank
.
clear
(
)
;
return
aJank
.
append
(
sJankLevels
ArrayLength
(
sJankLevels
)
)
;
}
#
undef
LOG
