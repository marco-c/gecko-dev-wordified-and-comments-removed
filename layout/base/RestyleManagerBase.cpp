#
include
"
mozilla
/
RestyleManagerBase
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
nsIFrame
.
h
"
namespace
mozilla
{
RestyleManagerBase
:
:
RestyleManagerBase
(
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
mRestyleGeneration
(
1
)
mHoverGeneration
(
0
)
mObservingRefreshDriver
(
false
)
{
MOZ_ASSERT
(
mPresContext
)
;
}
void
RestyleManagerBase
:
:
ContentStateChangedInternal
(
Element
*
aElement
EventStates
aStateMask
nsChangeHint
*
aOutChangeHint
nsRestyleHint
*
aOutRestyleHint
)
{
MOZ_ASSERT
(
aOutChangeHint
)
;
MOZ_ASSERT
(
aOutRestyleHint
)
;
StyleSetHandle
styleSet
=
PresContext
(
)
-
>
StyleSet
(
)
;
NS_ASSERTION
(
styleSet
"
couldn
'
t
get
style
set
"
)
;
*
aOutChangeHint
=
nsChangeHint
(
0
)
;
nsIFrame
*
primaryFrame
=
aElement
-
>
GetPrimaryFrame
(
)
;
CSSPseudoElementType
pseudoType
=
CSSPseudoElementType
:
:
NotPseudo
;
if
(
primaryFrame
)
{
if
(
!
primaryFrame
-
>
IsGeneratedContentFrame
(
)
&
&
aStateMask
.
HasAtLeastOneOfStates
(
NS_EVENT_STATE_BROKEN
|
NS_EVENT_STATE_USERDISABLED
|
NS_EVENT_STATE_SUPPRESSED
|
NS_EVENT_STATE_LOADING
)
)
{
*
aOutChangeHint
=
nsChangeHint_ReconstructFrame
;
}
else
{
uint8_t
app
=
primaryFrame
-
>
StyleDisplay
(
)
-
>
mAppearance
;
if
(
app
)
{
nsITheme
*
theme
=
PresContext
(
)
-
>
GetTheme
(
)
;
if
(
theme
&
&
theme
-
>
ThemeSupportsWidget
(
PresContext
(
)
primaryFrame
app
)
)
{
bool
repaint
=
false
;
theme
-
>
WidgetStateChanged
(
primaryFrame
app
nullptr
&
repaint
nullptr
)
;
if
(
repaint
)
{
*
aOutChangeHint
|
=
nsChangeHint_RepaintFrame
;
}
}
}
}
pseudoType
=
primaryFrame
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
;
primaryFrame
-
>
ContentStatesChanged
(
aStateMask
)
;
}
if
(
pseudoType
>
=
CSSPseudoElementType
:
:
Count
)
{
*
aOutRestyleHint
=
styleSet
-
>
HasStateDependentStyle
(
aElement
aStateMask
)
;
}
else
if
(
nsCSSPseudoElements
:
:
PseudoElementSupportsUserActionState
(
pseudoType
)
)
{
Element
*
ancestor
=
ElementForStyleContext
(
nullptr
primaryFrame
pseudoType
)
;
*
aOutRestyleHint
=
styleSet
-
>
HasStateDependentStyle
(
ancestor
pseudoType
aElement
aStateMask
)
;
}
else
{
*
aOutRestyleHint
=
nsRestyleHint
(
0
)
;
}
if
(
aStateMask
.
HasState
(
NS_EVENT_STATE_HOVER
)
&
&
*
aOutRestyleHint
!
=
0
)
{
IncrementHoverGeneration
(
)
;
}
if
(
aStateMask
.
HasState
(
NS_EVENT_STATE_VISITED
)
)
{
*
aOutChangeHint
|
=
nsChangeHint_RepaintFrame
;
}
}
}
