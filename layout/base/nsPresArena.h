#
ifndef
nsPresArena_h___
#
define
nsPresArena_h___
#
include
"
mozilla
/
ArenaAllocator
.
h
"
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stdint
.
h
>
#
include
"
nscore
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsWindowSizes
;
template
<
size_t
ArenaSize
typename
ObjectId
size_t
ObjectIdCount
>
class
nsPresArena
{
public
:
nsPresArena
(
)
=
default
;
~
nsPresArena
(
)
;
void
*
Allocate
(
ObjectId
aCode
size_t
aSize
)
;
void
Free
(
ObjectId
aCode
void
*
aPtr
)
;
enum
class
ArenaKind
{
PresShell
DisplayList
}
;
void
AddSizeOfExcludingThis
(
nsWindowSizes
&
ArenaKind
)
const
;
void
Check
(
)
{
mPool
.
Check
(
)
;
}
private
:
class
FreeList
{
public
:
nsTArray
<
void
*
>
mEntries
;
size_t
mEntrySize
;
size_t
mEntriesEverAllocated
;
FreeList
(
)
:
mEntrySize
(
0
)
mEntriesEverAllocated
(
0
)
{
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mEntries
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
}
;
FreeList
mFreeLists
[
ObjectIdCount
]
;
mozilla
:
:
ArenaAllocator
<
ArenaSize
8
>
mPool
;
}
;
#
endif
