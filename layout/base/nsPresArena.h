#
ifndef
nsPresArena_h___
#
define
nsPresArena_h___
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stdint
.
h
>
#
include
"
nscore
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
plarena
.
h
"
struct
nsArenaMemoryStats
;
class
nsPresArena
{
public
:
nsPresArena
(
)
;
~
nsPresArena
(
)
;
void
*
AllocateBySize
(
size_t
aSize
)
{
return
Allocate
(
uint32_t
(
aSize
)
|
uint32_t
(
mozilla
:
:
eArenaObjectID_NON_OBJECT_MARKER
)
aSize
)
;
}
void
FreeBySize
(
size_t
aSize
void
*
aPtr
)
{
Free
(
uint32_t
(
aSize
)
|
uint32_t
(
mozilla
:
:
eArenaObjectID_NON_OBJECT_MARKER
)
aPtr
)
;
}
void
*
AllocateByFrameID
(
nsQueryFrame
:
:
FrameIID
aID
size_t
aSize
)
{
return
Allocate
(
aID
aSize
)
;
}
void
FreeByFrameID
(
nsQueryFrame
:
:
FrameIID
aID
void
*
aPtr
)
{
Free
(
aID
aPtr
)
;
}
void
*
AllocateByObjectID
(
mozilla
:
:
ArenaObjectID
aID
size_t
aSize
)
{
return
Allocate
(
aID
aSize
)
;
}
void
FreeByObjectID
(
mozilla
:
:
ArenaObjectID
aID
void
*
aPtr
)
{
Free
(
aID
aPtr
)
;
}
void
AddSizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
nsArenaMemoryStats
*
aArenaStats
)
;
private
:
void
*
Allocate
(
uint32_t
aCode
size_t
aSize
)
;
void
Free
(
uint32_t
aCode
void
*
aPtr
)
;
class
FreeList
:
public
PLDHashEntryHdr
{
public
:
typedef
uint32_t
KeyType
;
nsTArray
<
void
*
>
mEntries
;
size_t
mEntrySize
;
size_t
mEntriesEverAllocated
;
typedef
const
void
*
KeyTypePointer
;
KeyTypePointer
mKey
;
explicit
FreeList
(
KeyTypePointer
aKey
)
:
mEntrySize
(
0
)
mEntriesEverAllocated
(
0
)
mKey
(
aKey
)
{
}
bool
KeyEquals
(
KeyTypePointer
const
aKey
)
const
{
return
mKey
=
=
aKey
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
NS_INT32_TO_PTR
(
aKey
)
;
}
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
{
return
NS_PTR_TO_INT32
(
aKey
)
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mEntries
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
enum
{
ALLOW_MEMMOVE
=
false
}
;
}
;
nsTHashtable
<
FreeList
>
mFreeLists
;
PLArenaPool
mPool
;
}
;
#
endif
