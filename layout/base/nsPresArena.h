#
ifndef
nsPresArena_h___
#
define
nsPresArena_h___
#
include
"
mozilla
/
ArenaAllocator
.
h
"
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
ArenaRefPtr
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
MemoryChecking
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
<
stdint
.
h
>
#
include
"
nscore
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
class
nsWindowSizes
;
class
nsPresArena
{
public
:
nsPresArena
(
)
;
~
nsPresArena
(
)
;
void
*
AllocateByFrameID
(
nsQueryFrame
:
:
FrameIID
aID
size_t
aSize
)
{
return
Allocate
(
aID
aSize
)
;
}
void
FreeByFrameID
(
nsQueryFrame
:
:
FrameIID
aID
void
*
aPtr
)
{
Free
(
aID
aPtr
)
;
}
void
*
AllocateByObjectID
(
mozilla
:
:
ArenaObjectID
aID
size_t
aSize
)
{
return
Allocate
(
aID
aSize
)
;
}
void
FreeByObjectID
(
mozilla
:
:
ArenaObjectID
aID
void
*
aPtr
)
{
Free
(
aID
aPtr
)
;
}
void
*
AllocateByCustomID
(
uint32_t
aID
size_t
aSize
)
{
return
Allocate
(
aID
aSize
)
;
}
void
FreeByCustomID
(
uint32_t
aID
void
*
ptr
)
{
Free
(
aID
ptr
)
;
}
template
<
typename
T
>
void
RegisterArenaRefPtr
(
mozilla
:
:
ArenaRefPtr
<
T
>
*
aPtr
)
;
template
<
typename
T
>
void
DeregisterArenaRefPtr
(
mozilla
:
:
ArenaRefPtr
<
T
>
*
aPtr
)
{
MOZ_ASSERT
(
mArenaRefPtrs
.
Contains
(
aPtr
)
)
;
mArenaRefPtrs
.
Remove
(
aPtr
)
;
}
void
ClearArenaRefPtrs
(
)
;
void
ClearArenaRefPtrs
(
mozilla
:
:
ArenaObjectID
aObjectID
)
;
void
AddSizeOfExcludingThis
(
nsWindowSizes
&
aWindowSizes
)
const
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
void
Check
(
)
{
mPool
.
Check
(
)
;
}
#
endif
private
:
void
*
Allocate
(
uint32_t
aCode
size_t
aSize
)
;
void
Free
(
uint32_t
aCode
void
*
aPtr
)
;
inline
void
ClearArenaRefPtrWithoutDeregistering
(
void
*
aPtr
mozilla
:
:
ArenaObjectID
aObjectID
)
;
class
FreeList
{
public
:
nsTArray
<
void
*
>
mEntries
;
size_t
mEntrySize
;
size_t
mEntriesEverAllocated
;
FreeList
(
)
:
mEntrySize
(
0
)
mEntriesEverAllocated
(
0
)
{
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
mEntries
.
ShallowSizeOfExcludingThis
(
aMallocSizeOf
)
;
}
}
;
FreeList
mFreeLists
[
mozilla
:
:
eArenaObjectID_COUNT
]
;
mozilla
:
:
ArenaAllocator
<
8192
8
>
mPool
;
nsDataHashtable
<
nsPtrHashKey
<
void
>
mozilla
:
:
ArenaObjectID
>
mArenaRefPtrs
;
}
;
#
endif
