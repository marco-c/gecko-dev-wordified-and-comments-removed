#
ifndef
ContainStyleScopeManager_h_
#
define
ContainStyleScopeManager_h_
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsTHashSet
.
h
"
#
include
"
nsQuoteList
.
h
"
#
include
"
nsCounterManager
.
h
"
#
include
<
memory
>
class
nsIContent
;
class
nsAtom
;
namespace
mozilla
{
class
ContainStyleScopeManager
;
class
ContainStyleScope
final
{
public
:
ContainStyleScope
(
ContainStyleScopeManager
*
aManager
ContainStyleScope
*
aParent
nsIContent
*
aContent
)
:
mQuoteList
(
this
)
mCounterManager
(
this
)
mScopeManager
(
aManager
)
mParent
(
aParent
)
mContent
(
aContent
)
{
MOZ_ASSERT
(
aManager
)
;
if
(
mParent
)
{
mParent
-
>
AddChild
(
this
)
;
}
}
~
ContainStyleScope
(
)
{
if
(
mParent
)
{
mParent
-
>
RemoveChild
(
this
)
;
}
}
nsQuoteList
&
GetQuoteList
(
)
{
return
mQuoteList
;
}
nsCounterManager
&
GetCounterManager
(
)
{
return
mCounterManager
;
}
ContainStyleScopeManager
&
GetScopeManager
(
)
{
return
*
mScopeManager
;
}
ContainStyleScope
*
GetParent
(
)
{
return
mParent
;
}
nsIContent
*
GetContent
(
)
{
return
mContent
;
}
void
AddChild
(
ContainStyleScope
*
aScope
)
{
mChildren
.
AppendElement
(
aScope
)
;
}
void
RemoveChild
(
ContainStyleScope
*
aScope
)
{
mChildren
.
RemoveElement
(
aScope
)
;
}
const
nsTArray
<
ContainStyleScope
*
>
&
GetChildren
(
)
const
{
return
mChildren
;
}
void
RecalcAllCounters
(
)
;
void
RecalcAllQuotes
(
)
;
nsGenConNode
*
GetPrecedingElementInGenConList
(
nsGenConList
*
)
;
private
:
nsQuoteList
mQuoteList
;
nsCounterManager
mCounterManager
;
ContainStyleScopeManager
*
mScopeManager
;
ContainStyleScope
*
mParent
;
nsTArray
<
ContainStyleScope
*
>
mChildren
;
nsIContent
*
mContent
;
}
;
class
ContainStyleScopeManager
{
public
:
ContainStyleScopeManager
(
)
:
mRootScope
(
this
nullptr
nullptr
)
{
}
ContainStyleScope
&
GetRootScope
(
)
{
return
mRootScope
;
}
ContainStyleScope
&
GetOrCreateScopeForContent
(
nsIContent
*
)
;
ContainStyleScope
&
GetScopeForContent
(
nsIContent
*
)
;
void
Clear
(
)
;
void
DestroyScopesFor
(
nsIFrame
*
)
;
void
DestroyScope
(
ContainStyleScope
*
)
;
bool
DestroyCounterNodesFor
(
nsIFrame
*
)
;
bool
AddCounterChanges
(
nsIFrame
*
aNewFrame
)
;
nsCounterList
*
GetOrCreateCounterList
(
dom
:
:
Element
&
nsAtom
*
aCounterName
)
;
bool
CounterDirty
(
nsAtom
*
aCounterName
)
;
void
SetCounterDirty
(
nsAtom
*
aCounterName
)
;
void
RecalcAllCounters
(
)
;
void
SetAllCountersDirty
(
)
;
bool
DestroyQuoteNodesFor
(
nsIFrame
*
)
;
nsQuoteList
*
QuoteListFor
(
dom
:
:
Element
&
)
;
void
RecalcAllQuotes
(
)
;
#
if
defined
(
DEBUG
)
|
|
defined
(
MOZ_LAYOUT_DEBUGGER
)
void
DumpCounters
(
)
;
#
endif
#
ifdef
ACCESSIBILITY
void
GetSpokenCounterText
(
nsIFrame
*
aFrame
nsAString
&
aText
)
;
#
endif
private
:
ContainStyleScope
mRootScope
;
nsClassHashtable
<
nsPtrHashKey
<
nsIContent
>
ContainStyleScope
>
mScopes
;
nsTHashSet
<
nsRefPtrHashKey
<
nsAtom
>
>
mDirtyCounters
;
}
;
}
#
endif
