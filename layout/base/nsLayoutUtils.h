#
ifndef
nsLayoutUtils_h__
#
define
nsLayoutUtils_h__
#
include
"
LayoutConstants
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
RelativeTo
.
h
"
#
include
"
mozilla
/
StaticPrefs_nglayout
.
h
"
#
include
"
mozilla
/
SurfaceFromElementResult
.
h
"
#
include
"
mozilla
/
SVGImageContext
.
h
"
#
include
"
mozilla
/
ToString
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
mozilla
/
layout
/
FrameChildList
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
nsBoundingMetrics
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
Units
.
h
"
#
include
"
mozilla
/
layers
/
LayersTypes
.
h
"
#
include
<
limits
>
#
include
<
algorithm
>
class
gfxContext
;
class
gfxFontEntry
;
class
imgIContainer
;
class
nsFrameList
;
class
nsPresContext
;
class
nsIContent
;
class
nsIPrincipal
;
class
nsIWidget
;
class
nsAtom
;
class
nsIScrollableFrame
;
class
nsRegion
;
enum
nsChangeHint
:
uint32_t
;
class
nsFontMetrics
;
class
nsFontFaceList
;
class
nsIImageLoadingContent
;
class
nsBlockFrame
;
class
nsContainerFrame
;
class
nsView
;
class
nsIFrame
;
class
nsPIDOMWindowOuter
;
class
imgIRequest
;
struct
nsStyleFont
;
namespace
mozilla
{
class
nsDisplayItem
;
class
nsDisplayList
;
class
nsDisplayListBuilder
;
enum
class
nsDisplayListBuilderMode
:
uint8_t
;
struct
AspectRatio
;
class
ComputedStyle
;
class
DisplayPortUtils
;
class
PresShell
;
enum
class
PseudoStyleType
:
uint8_t
;
class
EventListenerManager
;
enum
class
LayoutFrameType
:
uint8_t
;
struct
IntrinsicSize
;
class
ReflowOutput
;
class
WritingMode
;
class
DisplayItemClip
;
class
EffectSet
;
struct
ActiveScrolledRoot
;
enum
class
ScrollOrigin
:
uint8_t
;
enum
class
StyleImageOrientation
:
uint8_t
;
enum
class
StyleSystemFont
:
uint8_t
;
enum
class
StyleScrollbarWidth
:
uint8_t
;
struct
OverflowAreas
;
namespace
dom
{
class
CanvasRenderingContext2D
;
class
DOMRectList
;
class
Document
;
class
Element
;
class
Event
;
class
HTMLImageElement
;
class
HTMLCanvasElement
;
class
HTMLVideoElement
;
class
InspectorFontFace
;
class
OffscreenCanvas
;
class
Selection
;
}
namespace
gfx
{
struct
RectCornerRadii
;
enum
class
ShapedTextFlags
:
uint16_t
;
}
namespace
image
{
class
ImageIntRegion
;
struct
Resolution
;
}
namespace
layers
{
struct
FrameMetrics
;
struct
ScrollMetadata
;
class
Image
;
class
StackingContextHelper
;
class
Layer
;
class
WebRenderLayerManager
;
}
}
enum
class
DrawStringFlags
{
Default
=
0x0
ForceHorizontal
=
0x1
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
DrawStringFlags
)
namespace
mozilla
{
class
RectCallback
{
public
:
virtual
void
AddRect
(
const
nsRect
&
aRect
)
=
0
;
}
;
}
class
nsLayoutUtils
{
typedef
mozilla
:
:
AspectRatio
AspectRatio
;
typedef
mozilla
:
:
ComputedStyle
ComputedStyle
;
typedef
mozilla
:
:
LengthPercentage
LengthPercentage
;
typedef
mozilla
:
:
LengthPercentageOrAuto
LengthPercentageOrAuto
;
typedef
mozilla
:
:
dom
:
:
DOMRectList
DOMRectList
;
typedef
mozilla
:
:
layers
:
:
Layer
Layer
;
typedef
mozilla
:
:
layers
:
:
StackingContextHelper
StackingContextHelper
;
typedef
mozilla
:
:
IntrinsicSize
IntrinsicSize
;
typedef
mozilla
:
:
RelativeTo
RelativeTo
;
typedef
mozilla
:
:
ScrollOrigin
ScrollOrigin
;
typedef
mozilla
:
:
ViewportType
ViewportType
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
typedef
mozilla
:
:
gfx
:
:
sRGBColor
sRGBColor
;
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
typedef
mozilla
:
:
gfx
:
:
ExtendMode
ExtendMode
;
typedef
mozilla
:
:
gfx
:
:
SamplingFilter
SamplingFilter
;
typedef
mozilla
:
:
gfx
:
:
Float
Float
;
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Rect
Rect
;
typedef
mozilla
:
:
gfx
:
:
RectDouble
RectDouble
;
typedef
mozilla
:
:
gfx
:
:
Size
Size
;
typedef
mozilla
:
:
gfx
:
:
Matrix4x4
Matrix4x4
;
typedef
mozilla
:
:
gfx
:
:
Matrix4x4Flagged
Matrix4x4Flagged
;
typedef
mozilla
:
:
gfx
:
:
RectCornerRadii
RectCornerRadii
;
typedef
mozilla
:
:
gfx
:
:
StrokeOptions
StrokeOptions
;
typedef
mozilla
:
:
image
:
:
ImgDrawResult
ImgDrawResult
;
using
nsDisplayItem
=
mozilla
:
:
nsDisplayItem
;
using
nsDisplayList
=
mozilla
:
:
nsDisplayList
;
using
nsDisplayListBuilder
=
mozilla
:
:
nsDisplayListBuilder
;
using
nsDisplayListBuilderMode
=
mozilla
:
:
nsDisplayListBuilderMode
;
public
:
typedef
mozilla
:
:
layers
:
:
FrameMetrics
FrameMetrics
;
typedef
mozilla
:
:
layers
:
:
ScrollMetadata
ScrollMetadata
;
typedef
mozilla
:
:
layers
:
:
ScrollableLayerGuid
:
:
ViewID
ViewID
;
typedef
mozilla
:
:
CSSPoint
CSSPoint
;
typedef
mozilla
:
:
CSSSize
CSSSize
;
typedef
mozilla
:
:
CSSIntSize
CSSIntSize
;
typedef
mozilla
:
:
CSSRect
CSSRect
;
typedef
mozilla
:
:
ScreenMargin
ScreenMargin
;
typedef
mozilla
:
:
LayoutDeviceIntSize
LayoutDeviceIntSize
;
typedef
mozilla
:
:
LayoutDeviceRect
LayoutDeviceRect
;
typedef
mozilla
:
:
PresShell
PresShell
;
typedef
mozilla
:
:
StyleGeometryBox
StyleGeometryBox
;
typedef
mozilla
:
:
SVGImageContext
SVGImageContext
;
typedef
mozilla
:
:
LogicalSize
LogicalSize
;
static
bool
FindIDFor
(
const
nsIContent
*
aContent
ViewID
*
aOutViewId
)
;
static
ViewID
FindOrCreateIDFor
(
nsIContent
*
aContent
)
;
static
nsIContent
*
FindContentFor
(
ViewID
aId
)
;
static
nsIScrollableFrame
*
FindScrollableFrameFor
(
nsIContent
*
aContent
)
;
static
nsIScrollableFrame
*
FindScrollableFrameFor
(
ViewID
aId
)
;
static
nsIFrame
*
GetScrollFrameFromContent
(
nsIContent
*
aContent
)
;
static
ViewID
FindIDForScrollableFrame
(
nsIScrollableFrame
*
aScrollable
)
;
static
void
NotifyPaintSkipTransaction
(
ViewID
aScrollId
)
;
static
mozilla
:
:
layout
:
:
FrameChildListID
GetChildListNameFor
(
nsIFrame
*
aChildFrame
)
;
static
mozilla
:
:
dom
:
:
Element
*
GetBeforePseudo
(
const
nsIContent
*
aContent
)
;
static
nsIFrame
*
GetBeforeFrame
(
const
nsIContent
*
aContent
)
;
static
mozilla
:
:
dom
:
:
Element
*
GetAfterPseudo
(
const
nsIContent
*
aContent
)
;
static
nsIFrame
*
GetAfterFrame
(
const
nsIContent
*
aContent
)
;
static
mozilla
:
:
dom
:
:
Element
*
GetMarkerPseudo
(
const
nsIContent
*
aContent
)
;
static
nsIFrame
*
GetMarkerFrame
(
const
nsIContent
*
aContent
)
;
#
ifdef
ACCESSIBILITY
static
void
GetMarkerSpokenText
(
const
nsIContent
*
aContent
nsAString
&
aText
)
;
#
endif
static
nsIFrame
*
GetClosestFrameOfType
(
nsIFrame
*
aFrame
mozilla
:
:
LayoutFrameType
aFrameType
nsIFrame
*
aStopAt
=
nullptr
)
;
static
nsIFrame
*
GetPageFrame
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetStyleFrame
(
nsIFrame
*
aPrimaryFrame
)
;
static
const
nsIFrame
*
GetStyleFrame
(
const
nsIFrame
*
aPrimaryFrame
)
;
static
nsIFrame
*
GetStyleFrame
(
const
nsIContent
*
aContent
)
;
static
mozilla
:
:
CSSIntCoord
UnthemedScrollbarSize
(
mozilla
:
:
StyleScrollbarWidth
)
;
static
nsIFrame
*
GetPrimaryFrameFromStyleFrame
(
nsIFrame
*
aStyleFrame
)
;
static
const
nsIFrame
*
GetPrimaryFrameFromStyleFrame
(
const
nsIFrame
*
aStyleFrame
)
;
static
bool
IsPrimaryStyleFrame
(
const
nsIFrame
*
aFrame
)
;
#
ifdef
DEBUG
static
bool
gPreventAssertInCompareTreePosition
;
#
endif
static
int32_t
CompareTreePosition
(
nsIContent
*
aContent1
nsIContent
*
aContent2
const
nsIContent
*
aCommonAncestor
=
nullptr
)
{
return
DoCompareTreePosition
(
aContent1
aContent2
-
1
1
aCommonAncestor
)
;
}
static
int32_t
DoCompareTreePosition
(
nsIContent
*
aContent1
nsIContent
*
aContent2
int32_t
aIf1Ancestor
int32_t
aIf2Ancestor
const
nsIContent
*
aCommonAncestor
=
nullptr
)
;
static
int32_t
CompareTreePosition
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
nsIFrame
*
aCommonAncestor
=
nullptr
)
{
return
DoCompareTreePosition
(
aFrame1
aFrame2
-
1
1
aCommonAncestor
)
;
}
static
int32_t
CompareTreePosition
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
nsTArray
<
nsIFrame
*
>
&
aFrame2Ancestors
nsIFrame
*
aCommonAncestor
=
nullptr
)
{
return
DoCompareTreePosition
(
aFrame1
aFrame2
aFrame2Ancestors
-
1
1
aCommonAncestor
)
;
}
static
int32_t
DoCompareTreePosition
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
int32_t
aIf1Ancestor
int32_t
aIf2Ancestor
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
nsIFrame
*
FillAncestors
(
nsIFrame
*
aFrame
nsIFrame
*
aStopAtAncestor
nsTArray
<
nsIFrame
*
>
*
aAncestors
)
;
static
int32_t
DoCompareTreePosition
(
nsIFrame
*
aFrame1
nsIFrame
*
aFrame2
nsTArray
<
nsIFrame
*
>
&
aFrame2Ancestors
int32_t
aIf1Ancestor
int32_t
aIf2Ancestor
nsIFrame
*
aCommonAncestor
)
;
static
nsContainerFrame
*
LastContinuationWithChild
(
nsContainerFrame
*
aFrame
)
;
static
nsIFrame
*
GetLastSibling
(
nsIFrame
*
aFrame
)
;
static
nsView
*
FindSiblingViewFor
(
nsView
*
aParentView
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetCrossDocParentFrameInProcess
(
const
nsIFrame
*
aFrame
nsPoint
*
aCrossDocOffset
=
nullptr
)
;
static
nsIFrame
*
GetCrossDocParentFrame
(
const
nsIFrame
*
aFrame
nsPoint
*
aCrossDocOffset
=
nullptr
)
;
static
bool
IsProperAncestorFrame
(
const
nsIFrame
*
aAncestorFrame
const
nsIFrame
*
aFrame
const
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
bool
IsProperAncestorFrameCrossDoc
(
const
nsIFrame
*
aAncestorFrame
const
nsIFrame
*
aFrame
const
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
bool
IsProperAncestorFrameCrossDocInProcess
(
const
nsIFrame
*
aAncestorFrame
const
nsIFrame
*
aFrame
const
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
bool
IsAncestorFrameCrossDoc
(
const
nsIFrame
*
aAncestorFrame
const
nsIFrame
*
aFrame
const
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
bool
IsAncestorFrameCrossDocInProcess
(
const
nsIFrame
*
aAncestorFrame
const
nsIFrame
*
aFrame
const
nsIFrame
*
aCommonAncestor
=
nullptr
)
;
static
mozilla
:
:
SideBits
GetSideBitsForFixedPositionContent
(
const
nsIFrame
*
aFixedPosFrame
)
;
static
ViewID
ScrollIdForRootScrollFrame
(
nsPresContext
*
aPresContext
)
;
static
nsIScrollableFrame
*
GetScrollableFrameFor
(
const
nsIFrame
*
aScrolledFrame
)
;
static
nsIScrollableFrame
*
GetNearestScrollableFrameForDirection
(
nsIFrame
*
aFrame
mozilla
:
:
layers
:
:
ScrollDirections
aDirections
)
;
enum
{
SCROLLABLE_SAME_DOC
=
0x01
SCROLLABLE_INCLUDE_HIDDEN
=
0x02
SCROLLABLE_ONLY_ASYNC_SCROLLABLE
=
0x04
SCROLLABLE_ALWAYS_MATCH_ROOT
=
0x08
SCROLLABLE_FIXEDPOS_FINDS_ROOT
=
0x10
SCROLLABLE_STOP_AT_PAGE
=
0x20
SCROLLABLE_FOLLOW_OOF_TO_PLACEHOLDER
=
0x40
}
;
static
nsIScrollableFrame
*
GetNearestScrollableFrame
(
nsIFrame
*
aFrame
uint32_t
aFlags
=
0
)
;
static
nsRect
GetScrolledRect
(
nsIFrame
*
aScrolledFrame
const
nsRect
&
aScrolledFrameOverflowArea
const
nsSize
&
aScrollPortSize
mozilla
:
:
StyleDirection
)
;
static
bool
HasPseudoStyle
(
nsIContent
*
aContent
ComputedStyle
*
aComputedStyle
mozilla
:
:
PseudoStyleType
aPseudoElement
nsPresContext
*
aPresContext
)
;
static
nsIFrame
*
GetFloatFromPlaceholder
(
nsIFrame
*
aPlaceholder
)
;
static
mozilla
:
:
StyleClear
CombineBreakType
(
mozilla
:
:
StyleClear
aOrigBreakType
mozilla
:
:
StyleClear
aNewBreakType
)
;
static
nsPoint
GetDOMEventCoordinatesRelativeTo
(
mozilla
:
:
dom
:
:
Event
*
aDOMEvent
nsIFrame
*
aFrame
)
;
static
nsPoint
GetEventCoordinatesRelativeTo
(
const
mozilla
:
:
WidgetEvent
*
aEvent
RelativeTo
aFrame
)
;
static
nsPoint
GetEventCoordinatesRelativeTo
(
const
mozilla
:
:
WidgetEvent
*
aEvent
const
mozilla
:
:
LayoutDeviceIntPoint
&
aPoint
RelativeTo
aFrame
)
;
static
nsPoint
GetEventCoordinatesRelativeTo
(
nsIWidget
*
aWidget
const
mozilla
:
:
LayoutDeviceIntPoint
&
aPoint
RelativeTo
aFrame
)
;
static
nsIFrame
*
GetPopupFrameForEventCoordinates
(
nsPresContext
*
aPresContext
const
mozilla
:
:
WidgetEvent
*
aEvent
)
;
MOZ_CAN_RUN_SCRIPT
static
void
GetContainerAndOffsetAtEvent
(
PresShell
*
aPresShell
const
mozilla
:
:
WidgetEvent
*
aEvent
nsIContent
*
*
aContainer
int32_t
*
aOffset
)
;
static
nsPoint
TranslateWidgetToView
(
nsPresContext
*
aPresContext
nsIWidget
*
aWidget
const
mozilla
:
:
LayoutDeviceIntPoint
&
aPt
nsView
*
aView
)
;
static
mozilla
:
:
LayoutDeviceIntPoint
TranslateViewToWidget
(
nsPresContext
*
aPresContext
nsView
*
aView
nsPoint
aPt
ViewportType
aViewportType
nsIWidget
*
aWidget
)
;
static
mozilla
:
:
LayoutDeviceIntPoint
WidgetToWidgetOffset
(
nsIWidget
*
aFromWidget
nsIWidget
*
aToWidget
)
;
enum
class
FrameForPointOption
{
IgnorePaintSuppression
=
1
IgnoreRootScrollFrame
IgnoreCrossDoc
OnlyVisible
}
;
struct
FrameForPointOptions
{
using
Bits
=
mozilla
:
:
EnumSet
<
FrameForPointOption
>
;
Bits
mBits
;
float
mVisibleThreshold
;
FrameForPointOptions
(
Bits
aBits
float
aVisibleThreshold
)
:
mBits
(
aBits
)
mVisibleThreshold
(
aVisibleThreshold
)
{
}
;
MOZ_IMPLICIT
FrameForPointOptions
(
Bits
aBits
)
:
FrameForPointOptions
(
aBits
1
.
0f
)
{
}
FrameForPointOptions
(
)
:
FrameForPointOptions
(
Bits
(
)
)
{
}
;
}
;
static
nsIFrame
*
GetFrameForPoint
(
RelativeTo
aRelativeTo
nsPoint
aPt
const
FrameForPointOptions
&
=
{
}
)
;
static
nsresult
GetFramesForArea
(
RelativeTo
aRelativeTo
const
nsRect
&
aRect
nsTArray
<
nsIFrame
*
>
&
aOutFrames
const
FrameForPointOptions
&
=
{
}
)
;
static
nsRect
TransformFrameRectToAncestor
(
const
nsIFrame
*
aFrame
const
nsRect
&
aRect
const
nsIFrame
*
aAncestor
bool
*
aPreservesAxisAlignedRectangles
=
nullptr
mozilla
:
:
Maybe
<
Matrix4x4Flagged
>
*
aMatrixCache
=
nullptr
bool
aStopAtStackingContextAndDisplayPortAndOOFFrame
=
false
nsIFrame
*
*
aOutAncestor
=
nullptr
)
{
return
TransformFrameRectToAncestor
(
aFrame
aRect
RelativeTo
{
aAncestor
}
aPreservesAxisAlignedRectangles
aMatrixCache
aStopAtStackingContextAndDisplayPortAndOOFFrame
aOutAncestor
)
;
}
static
nsRect
TransformFrameRectToAncestor
(
const
nsIFrame
*
aFrame
const
nsRect
&
aRect
RelativeTo
aAncestor
bool
*
aPreservesAxisAlignedRectangles
=
nullptr
mozilla
:
:
Maybe
<
Matrix4x4Flagged
>
*
aMatrixCache
=
nullptr
bool
aStopAtStackingContextAndDisplayPortAndOOFFrame
=
false
nsIFrame
*
*
aOutAncestor
=
nullptr
)
;
static
Matrix4x4Flagged
GetTransformToAncestor
(
RelativeTo
aFrame
RelativeTo
aAncestor
uint32_t
aFlags
=
0
nsIFrame
*
*
aOutAncestor
=
nullptr
)
;
static
gfxSize
GetTransformToAncestorScale
(
const
nsIFrame
*
aFrame
)
;
static
gfxSize
GetTransformToAncestorScaleExcludingAnimated
(
nsIFrame
*
aFrame
)
;
static
mozilla
:
:
ParentLayerToScreenScale2D
GetTransformToAncestorScaleCrossProcessForFrameMetrics
(
const
nsIFrame
*
aFrame
)
;
static
const
nsIFrame
*
FindNearestCommonAncestorFrame
(
const
nsIFrame
*
aFrame1
const
nsIFrame
*
aFrame2
)
;
static
const
nsIFrame
*
FindNearestCommonAncestorFrameWithinBlock
(
const
nsTextFrame
*
aFrame1
const
nsTextFrame
*
aFrame2
)
;
static
bool
AuthorSpecifiedBorderBackgroundDisablesTheming
(
mozilla
:
:
StyleAppearance
)
;
enum
TransformResult
{
TRANSFORM_SUCCEEDED
NO_COMMON_ANCESTOR
NONINVERTIBLE_TRANSFORM
}
;
static
TransformResult
TransformPoints
(
nsIFrame
*
aFromFrame
nsIFrame
*
aToFrame
uint32_t
aPointCount
CSSPoint
*
aPoints
)
;
static
TransformResult
TransformPoint
(
RelativeTo
aFromFrame
RelativeTo
aToFrame
nsPoint
&
aPoint
)
;
static
TransformResult
TransformRect
(
const
nsIFrame
*
aFromFrame
const
nsIFrame
*
aToFrame
nsRect
&
aRect
)
;
static
void
PostTranslate
(
Matrix4x4
&
aTransform
const
nsPoint
&
aOrigin
float
aAppUnitsPerPixel
bool
aRounded
)
;
static
bool
ShouldSnapToGrid
(
const
nsIFrame
*
aFrame
)
;
static
nsRect
GetRectRelativeToFrame
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsIFrame
*
aFrame
)
;
static
bool
ContainsPoint
(
const
nsRect
&
aRect
const
nsPoint
&
aPoint
nscoord
aInflateSize
)
;
static
nsRect
ClampRectToScrollFrames
(
nsIFrame
*
aFrame
const
nsRect
&
aRect
)
;
static
bool
GetLayerTransformForFrame
(
nsIFrame
*
aFrame
Matrix4x4Flagged
*
aTransform
)
;
static
nsPoint
TransformRootPointToFrame
(
ViewportType
aFromType
RelativeTo
aFrame
const
nsPoint
&
aPoint
)
{
return
TransformAncestorPointToFrame
(
aFrame
aPoint
RelativeTo
{
nullptr
aFromType
}
)
;
}
static
nsPoint
TransformAncestorPointToFrame
(
RelativeTo
aFrame
const
nsPoint
&
aPoint
RelativeTo
aAncestor
)
;
static
nsRect
MatrixTransformRect
(
const
nsRect
&
aBounds
const
Matrix4x4
&
aMatrix
float
aFactor
)
;
static
nsRect
MatrixTransformRect
(
const
nsRect
&
aBounds
const
Matrix4x4Flagged
&
aMatrix
float
aFactor
)
;
static
nsPoint
MatrixTransformPoint
(
const
nsPoint
&
aPoint
const
Matrix4x4
&
aMatrix
float
aFactor
)
;
template
<
typename
T
>
static
nsRect
RoundGfxRectToAppRect
(
const
T
&
aRect
const
float
aFactor
)
;
static
nsRegion
RoundedRectIntersectRect
(
const
nsRect
&
aRoundedRect
const
nscoord
aRadii
[
8
]
const
nsRect
&
aContainedRect
)
;
static
nsIntRegion
RoundedRectIntersectIntRect
(
const
nsIntRect
&
aRoundedRect
const
RectCornerRadii
&
aCornerRadii
const
nsIntRect
&
aContainedRect
)
;
static
bool
RoundedRectIntersectsRect
(
const
nsRect
&
aRoundedRect
const
nscoord
aRadii
[
8
]
const
nsRect
&
aTestRect
)
;
enum
class
PaintFrameFlags
:
uint32_t
{
InTransform
=
0x01
SyncDecodeImages
=
0x02
WidgetLayers
=
0x04
IgnoreSuppression
=
0x08
DocumentRelative
=
0x10
HideCaret
=
0x20
ToWindow
=
0x40
ExistingTransaction
=
0x80
ForWebRender
=
0x100
UseHighQualityScaling
=
0x200
ResetViewportScrolling
=
0x400
}
;
static
void
PaintFrame
(
gfxContext
*
aRenderingContext
nsIFrame
*
aFrame
const
nsRegion
&
aDirtyRegion
nscolor
aBackstop
nsDisplayListBuilderMode
aBuilderMode
PaintFrameFlags
aFlags
=
PaintFrameFlags
(
0
)
)
;
static
bool
BinarySearchForPosition
(
DrawTarget
*
aDrawTarget
nsFontMetrics
&
aFontMetrics
const
char16_t
*
aText
int32_t
aBaseWidth
int32_t
aBaseInx
int32_t
aStartInx
int32_t
aEndInx
int32_t
aCursorPos
int32_t
&
aIndex
int32_t
&
aTextWidth
)
;
class
BoxCallback
{
public
:
BoxCallback
(
)
=
default
;
virtual
void
AddBox
(
nsIFrame
*
aFrame
)
=
0
;
bool
mIncludeCaptionBoxForTable
=
true
;
bool
mInTargetContinuation
=
false
;
}
;
static
void
GetAllInFlowBoxes
(
nsIFrame
*
aFrame
BoxCallback
*
aCallback
)
;
static
void
AddBoxesForFrame
(
nsIFrame
*
aFrame
BoxCallback
*
aCallback
)
;
static
nsIFrame
*
GetFirstNonAnonymousFrame
(
nsIFrame
*
aFrame
)
;
struct
RectAccumulator
:
public
mozilla
:
:
RectCallback
{
nsRect
mResultRect
;
nsRect
mFirstRect
;
bool
mSeenFirstRect
;
RectAccumulator
(
)
;
virtual
void
AddRect
(
const
nsRect
&
aRect
)
override
;
}
;
struct
RectListBuilder
:
public
mozilla
:
:
RectCallback
{
DOMRectList
*
mRectList
;
explicit
RectListBuilder
(
DOMRectList
*
aList
)
;
virtual
void
AddRect
(
const
nsRect
&
aRect
)
override
;
}
;
static
nsIFrame
*
GetContainingBlockForClientRect
(
nsIFrame
*
aFrame
)
;
enum
{
RECTS_ACCOUNT_FOR_TRANSFORMS
=
0x01
RECTS_USE_CONTENT_BOX
=
0x02
RECTS_USE_PADDING_BOX
=
0x04
RECTS_USE_MARGIN_BOX
=
0x06
RECTS_WHICH_BOX_MASK
=
0x06
}
;
static
void
GetAllInFlowRects
(
nsIFrame
*
aFrame
const
nsIFrame
*
aRelativeTo
mozilla
:
:
RectCallback
*
aCallback
uint32_t
aFlags
=
0
)
;
static
void
GetAllInFlowRectsAndTexts
(
nsIFrame
*
aFrame
const
nsIFrame
*
aRelativeTo
mozilla
:
:
RectCallback
*
aCallback
mozilla
:
:
dom
:
:
Sequence
<
nsString
>
*
aTextList
uint32_t
aFlags
=
0
)
;
static
nsRect
GetAllInFlowRectsUnion
(
nsIFrame
*
aFrame
const
nsIFrame
*
aRelativeTo
uint32_t
aFlags
=
0
)
;
enum
{
EXCLUDE_BLUR_SHADOWS
=
0x01
}
;
static
nsRect
GetTextShadowRectsUnion
(
const
nsRect
&
aTextAndDecorationsRect
nsIFrame
*
aFrame
uint32_t
aFlags
=
0
)
;
static
nsRect
ComputeObjectDestRect
(
const
nsRect
&
aConstraintRect
const
IntrinsicSize
&
aIntrinsicSize
const
AspectRatio
&
aIntrinsicRatio
const
nsStylePosition
*
aStylePos
nsPoint
*
aAnchorPoint
=
nullptr
)
;
static
already_AddRefed
<
nsFontMetrics
>
GetFontMetricsForFrame
(
const
nsIFrame
*
aFrame
float
aSizeInflation
)
;
static
already_AddRefed
<
nsFontMetrics
>
GetInflatedFontMetricsForFrame
(
const
nsIFrame
*
aFrame
)
{
return
GetFontMetricsForFrame
(
aFrame
FontSizeInflationFor
(
aFrame
)
)
;
}
static
already_AddRefed
<
nsFontMetrics
>
GetFontMetricsForComputedStyle
(
ComputedStyle
*
aComputedStyle
nsPresContext
*
aPresContext
float
aSizeInflation
=
1
.
0f
uint8_t
aVariantWidth
=
NS_FONT_VARIANT_WIDTH_NORMAL
)
;
static
already_AddRefed
<
nsFontMetrics
>
GetFontMetricsOfEmphasisMarks
(
ComputedStyle
*
aComputedStyle
nsPresContext
*
aPresContext
float
aInflation
)
{
return
GetFontMetricsForComputedStyle
(
aComputedStyle
aPresContext
aInflation
*
0
.
5f
)
;
}
static
nsIFrame
*
FindChildContainingDescendant
(
nsIFrame
*
aParent
nsIFrame
*
aDescendantFrame
)
;
static
nsBlockFrame
*
FindNearestBlockAncestor
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetNonGeneratedAncestor
(
nsIFrame
*
aFrame
)
;
static
bool
IsNonWrapperBlock
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetParentOrPlaceholderFor
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetParentOrPlaceholderForCrossDoc
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetDisplayListParent
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetPrevContinuationOrIBSplitSibling
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetNextContinuationOrIBSplitSibling
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
FirstContinuationOrIBSplitSibling
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
LastContinuationOrIBSplitSibling
(
const
nsIFrame
*
aFrame
)
;
static
bool
IsFirstContinuationOrIBSplitSibling
(
const
nsIFrame
*
aFrame
)
;
static
bool
IsViewportScrollbarFrame
(
nsIFrame
*
aFrame
)
;
enum
{
IGNORE_PADDING
=
0x01
BAIL_IF_REFLOW_NEEDED
=
0x02
MIN_INTRINSIC_ISIZE
=
0x04
}
;
static
nscoord
IntrinsicForAxis
(
mozilla
:
:
PhysicalAxis
aAxis
gfxContext
*
aRenderingContext
nsIFrame
*
aFrame
mozilla
:
:
IntrinsicISizeType
aType
const
mozilla
:
:
Maybe
<
LogicalSize
>
&
aPercentageBasis
=
mozilla
:
:
Nothing
(
)
uint32_t
aFlags
=
0
nscoord
aMarginBoxMinSizeClamp
=
NS_MAXSIZE
)
;
static
nscoord
IntrinsicForContainer
(
gfxContext
*
aRenderingContext
nsIFrame
*
aFrame
mozilla
:
:
IntrinsicISizeType
aType
uint32_t
aFlags
=
0
)
;
static
nscoord
MinSizeContributionForAxis
(
mozilla
:
:
PhysicalAxis
aAxis
gfxContext
*
aRC
nsIFrame
*
aFrame
mozilla
:
:
IntrinsicISizeType
aType
const
LogicalSize
&
aPercentageBasis
uint32_t
aFlags
=
0
)
;
static
nscoord
ComputeCBDependentValue
(
nscoord
aPercentBasis
const
LengthPercentage
&
aCoord
)
{
NS_WARNING_ASSERTION
(
aPercentBasis
!
=
NS_UNCONSTRAINEDSIZE
"
have
unconstrained
width
or
height
;
this
should
only
result
from
very
"
"
large
sizes
not
attempts
at
intrinsic
size
calculation
"
)
;
return
aCoord
.
Resolve
(
aPercentBasis
)
;
}
static
nscoord
ComputeCBDependentValue
(
nscoord
aPercentBasis
const
LengthPercentageOrAuto
&
aCoord
)
{
if
(
aCoord
.
IsAuto
(
)
)
{
return
0
;
}
return
ComputeCBDependentValue
(
aPercentBasis
aCoord
.
AsLengthPercentage
(
)
)
;
}
static
nscoord
ComputeBSizeDependentValue
(
nscoord
aContainingBlockBSize
const
LengthPercentageOrAuto
&
)
;
static
nscoord
ComputeBSizeValue
(
nscoord
aContainingBlockBSize
nscoord
aContentEdgeToBoxSizingBoxEdge
const
LengthPercentage
&
aCoord
)
{
MOZ_ASSERT
(
aContainingBlockBSize
!
=
nscoord_MAX
|
|
!
aCoord
.
HasPercent
(
)
"
caller
must
deal
with
%
%
of
unconstrained
block
-
size
"
)
;
nscoord
result
=
aCoord
.
Resolve
(
aContainingBlockBSize
)
;
return
std
:
:
max
(
0
result
-
aContentEdgeToBoxSizingBoxEdge
)
;
}
template
<
typename
SizeOrMaxSize
>
static
bool
IsAutoBSize
(
const
SizeOrMaxSize
&
aCoord
nscoord
aCBBSize
)
{
return
aCoord
.
BehavesLikeInitialValueOnBlockAxis
(
)
|
|
(
aCBBSize
=
=
nscoord_MAX
&
&
aCoord
.
HasPercent
(
)
)
;
}
static
bool
IsPaddingZero
(
const
LengthPercentage
&
aLength
)
{
return
aLength
.
Resolve
(
nscoord_MAX
)
<
=
0
&
&
aLength
.
Resolve
(
0
)
<
=
0
;
}
static
bool
IsMarginZero
(
const
LengthPercentage
&
aLength
)
{
return
aLength
.
Resolve
(
nscoord_MAX
)
=
=
0
&
&
aLength
.
Resolve
(
0
)
=
=
0
;
}
static
void
MarkDescendantsDirty
(
nsIFrame
*
aSubtreeRoot
)
;
static
void
MarkIntrinsicISizesDirtyIfDependentOnBSize
(
nsIFrame
*
aFrame
)
;
static
nsSize
ComputeAutoSizeWithIntrinsicDimensions
(
nscoord
minWidth
nscoord
minHeight
nscoord
maxWidth
nscoord
maxHeight
nscoord
tentWidth
nscoord
tentHeight
)
;
static
nscoord
PrefISizeFromInline
(
nsIFrame
*
aFrame
gfxContext
*
aRenderingContext
)
;
static
nscoord
MinISizeFromInline
(
nsIFrame
*
aFrame
gfxContext
*
aRenderingContext
)
;
static
nscolor
DarkenColorIfNeeded
(
nsIFrame
*
aFrame
nscolor
aColor
)
;
template
<
typename
Frame
typename
T
typename
S
>
static
nscolor
GetColor
(
Frame
*
aFrame
T
S
:
:
*
aField
)
{
nscolor
color
=
aFrame
-
>
GetVisitedDependentColor
(
aField
)
;
return
DarkenColorIfNeeded
(
aFrame
color
)
;
}
static
gfxFloat
GetSnappedBaselineY
(
nsIFrame
*
aFrame
gfxContext
*
aContext
nscoord
aY
nscoord
aAscent
)
;
static
gfxFloat
GetSnappedBaselineX
(
nsIFrame
*
aFrame
gfxContext
*
aContext
nscoord
aX
nscoord
aAscent
)
;
static
nscoord
AppUnitWidthOfString
(
char16_t
aC
nsFontMetrics
&
aFontMetrics
DrawTarget
*
aDrawTarget
)
{
return
AppUnitWidthOfString
(
&
aC
1
aFontMetrics
aDrawTarget
)
;
}
static
nscoord
AppUnitWidthOfString
(
const
nsString
&
aString
nsFontMetrics
&
aFontMetrics
DrawTarget
*
aDrawTarget
)
{
return
nsLayoutUtils
:
:
AppUnitWidthOfString
(
aString
.
get
(
)
aString
.
Length
(
)
aFontMetrics
aDrawTarget
)
;
}
static
nscoord
AppUnitWidthOfString
(
const
char16_t
*
aString
uint32_t
aLength
nsFontMetrics
&
aFontMetrics
DrawTarget
*
aDrawTarget
)
;
static
nscoord
AppUnitWidthOfStringBidi
(
const
nsString
&
aString
const
nsIFrame
*
aFrame
nsFontMetrics
&
aFontMetrics
gfxContext
&
aContext
)
{
return
nsLayoutUtils
:
:
AppUnitWidthOfStringBidi
(
aString
.
get
(
)
aString
.
Length
(
)
aFrame
aFontMetrics
aContext
)
;
}
static
nscoord
AppUnitWidthOfStringBidi
(
const
char16_t
*
aString
uint32_t
aLength
const
nsIFrame
*
aFrame
nsFontMetrics
&
aFontMetrics
gfxContext
&
aContext
)
;
static
bool
StringWidthIsGreaterThan
(
const
nsString
&
aString
nsFontMetrics
&
aFontMetrics
DrawTarget
*
aDrawTarget
nscoord
aWidth
)
;
static
nsBoundingMetrics
AppUnitBoundsOfString
(
const
char16_t
*
aString
uint32_t
aLength
nsFontMetrics
&
aFontMetrics
DrawTarget
*
aDrawTarget
)
;
static
void
DrawString
(
const
nsIFrame
*
aFrame
nsFontMetrics
&
aFontMetrics
gfxContext
*
aContext
const
char16_t
*
aString
int32_t
aLength
nsPoint
aPoint
ComputedStyle
*
aComputedStyle
=
nullptr
DrawStringFlags
aFlags
=
DrawStringFlags
:
:
Default
)
;
static
nsPoint
GetBackgroundFirstTilePos
(
const
nsPoint
&
aDest
const
nsPoint
&
aFill
const
nsSize
&
aRepeatSize
)
;
static
void
DrawUniDirString
(
const
char16_t
*
aString
uint32_t
aLength
const
nsPoint
&
aPoint
nsFontMetrics
&
aFontMetrics
gfxContext
&
aContext
)
;
typedef
void
(
*
TextShadowCallback
)
(
gfxContext
*
aCtx
nsPoint
aShadowOffset
const
nscolor
&
aShadowColor
void
*
aData
)
;
static
void
PaintTextShadow
(
const
nsIFrame
*
aFrame
gfxContext
*
aContext
const
nsRect
&
aTextRect
const
nsRect
&
aDirtyRect
const
nscolor
&
aForegroundColor
TextShadowCallback
aCallback
void
*
aCallbackData
)
;
static
nscoord
GetCenteredFontBaseline
(
nsFontMetrics
*
aFontMetrics
nscoord
aLineHeight
bool
aIsInverted
)
;
static
bool
GetFirstLineBaseline
(
mozilla
:
:
WritingMode
aWritingMode
const
nsIFrame
*
aFrame
nscoord
*
aResult
)
;
struct
LinePosition
{
nscoord
mBStart
mBaseline
mBEnd
;
LinePosition
operator
+
(
nscoord
aOffset
)
const
{
LinePosition
result
;
result
.
mBStart
=
mBStart
+
aOffset
;
result
.
mBaseline
=
mBaseline
+
aOffset
;
result
.
mBEnd
=
mBEnd
+
aOffset
;
return
result
;
}
}
;
static
bool
GetFirstLinePosition
(
mozilla
:
:
WritingMode
aWritingMode
const
nsIFrame
*
aFrame
LinePosition
*
aResult
)
;
static
bool
GetLastLineBaseline
(
mozilla
:
:
WritingMode
aWritingMode
const
nsIFrame
*
aFrame
nscoord
*
aResult
)
;
static
nscoord
CalculateContentBEnd
(
mozilla
:
:
WritingMode
aWritingMode
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetClosestLayer
(
nsIFrame
*
aFrame
)
;
static
SamplingFilter
GetSamplingFilterForFrame
(
nsIFrame
*
aFrame
)
;
static
inline
void
InitDashPattern
(
StrokeOptions
&
aStrokeOptions
mozilla
:
:
StyleBorderStyle
aBorderStyle
)
{
if
(
aBorderStyle
=
=
mozilla
:
:
StyleBorderStyle
:
:
Dotted
)
{
static
Float
dot
[
]
=
{
1
.
f
1
.
f
}
;
aStrokeOptions
.
mDashLength
=
MOZ_ARRAY_LENGTH
(
dot
)
;
aStrokeOptions
.
mDashPattern
=
dot
;
}
else
if
(
aBorderStyle
=
=
mozilla
:
:
StyleBorderStyle
:
:
Dashed
)
{
static
Float
dash
[
]
=
{
5
.
f
5
.
f
}
;
aStrokeOptions
.
mDashLength
=
MOZ_ARRAY_LENGTH
(
dash
)
;
aStrokeOptions
.
mDashPattern
=
dash
;
}
else
{
aStrokeOptions
.
mDashLength
=
0
;
aStrokeOptions
.
mDashPattern
=
nullptr
;
}
}
static
gfxRect
RectToGfxRect
(
const
nsRect
&
aRect
int32_t
aAppUnitsPerDevPixel
)
;
static
gfxPoint
PointToGfxPoint
(
const
nsPoint
&
aPoint
int32_t
aAppUnitsPerPixel
)
{
return
gfxPoint
(
gfxFloat
(
aPoint
.
x
)
/
aAppUnitsPerPixel
gfxFloat
(
aPoint
.
y
)
/
aAppUnitsPerPixel
)
;
}
static
ImgDrawResult
DrawBackgroundImage
(
gfxContext
&
aContext
nsIFrame
*
aForFrame
nsPresContext
*
aPresContext
imgIContainer
*
aImage
SamplingFilter
aSamplingFilter
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsSize
&
aRepeatSize
const
nsPoint
&
aAnchor
const
nsRect
&
aDirty
uint32_t
aImageFlags
ExtendMode
aExtendMode
float
aOpacity
)
;
static
ImgDrawResult
DrawImage
(
gfxContext
&
aContext
ComputedStyle
*
aComputedStyle
nsPresContext
*
aPresContext
imgIContainer
*
aImage
const
SamplingFilter
aSamplingFilter
const
nsRect
&
aDest
const
nsRect
&
aFill
const
nsPoint
&
aAnchor
const
nsRect
&
aDirty
uint32_t
aImageFlags
float
aOpacity
=
1
.
0
)
;
static
ImgDrawResult
DrawSingleUnscaledImage
(
gfxContext
&
aContext
nsPresContext
*
aPresContext
imgIContainer
*
aImage
const
SamplingFilter
aSamplingFilter
const
nsPoint
&
aDest
const
nsRect
*
aDirty
const
mozilla
:
:
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aImageFlags
const
nsRect
*
aSourceArea
=
nullptr
)
;
static
ImgDrawResult
DrawSingleImage
(
gfxContext
&
aContext
nsPresContext
*
aPresContext
imgIContainer
*
aImage
SamplingFilter
aSamplingFilter
const
nsRect
&
aDest
const
nsRect
&
aDirty
const
mozilla
:
:
Maybe
<
SVGImageContext
>
&
aSVGContext
uint32_t
aImageFlags
const
nsPoint
*
aAnchorPoint
=
nullptr
const
nsRect
*
aSourceArea
=
nullptr
)
;
static
void
ComputeSizeForDrawing
(
imgIContainer
*
aImage
const
mozilla
:
:
image
:
:
Resolution
&
CSSIntSize
&
aImageSize
AspectRatio
&
aIntrinsicRatio
bool
&
aGotWidth
bool
&
aGotHeight
)
;
static
CSSIntSize
ComputeSizeForDrawingWithFallback
(
imgIContainer
*
aImage
const
mozilla
:
:
image
:
:
Resolution
&
const
nsSize
&
aFallbackSize
)
;
static
mozilla
:
:
gfx
:
:
IntSize
ComputeImageContainerDrawingParameters
(
imgIContainer
*
aImage
nsIFrame
*
aForFrame
const
LayoutDeviceRect
&
aDestRect
const
LayoutDeviceRect
&
aFillRect
const
StackingContextHelper
&
aSc
uint32_t
aFlags
mozilla
:
:
Maybe
<
SVGImageContext
>
&
aSVGContext
mozilla
:
:
Maybe
<
mozilla
:
:
image
:
:
ImageIntRegion
>
&
aRegion
)
;
static
nsRect
GetWholeImageDestination
(
const
nsSize
&
aWholeImageSize
const
nsRect
&
aImageSourceArea
const
nsRect
&
aDestArea
)
;
static
already_AddRefed
<
imgIContainer
>
OrientImage
(
imgIContainer
*
aContainer
const
mozilla
:
:
StyleImageOrientation
&
aOrientation
)
;
static
bool
HasNonZeroCorner
(
const
mozilla
:
:
BorderRadius
&
aCorners
)
;
static
bool
HasNonZeroCornerOnSide
(
const
mozilla
:
:
BorderRadius
&
aCorners
mozilla
:
:
Side
aSide
)
;
static
LayoutDeviceIntSize
GetBorderRadiusForMenuDropShadow
(
const
nsIFrame
*
aFrame
)
;
static
nsTransparencyMode
GetFrameTransparency
(
nsIFrame
*
aBackgroundFrame
nsIFrame
*
aCSSRootFrame
)
;
static
bool
IsPopup
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetDisplayRootFrame
(
nsIFrame
*
aFrame
)
;
static
const
nsIFrame
*
GetDisplayRootFrame
(
const
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetReferenceFrame
(
nsIFrame
*
aFrame
)
;
static
mozilla
:
:
gfx
:
:
ShapedTextFlags
GetTextRunFlagsForStyle
(
ComputedStyle
*
aComputedStyle
nsPresContext
*
aPresContext
const
nsStyleFont
*
aStyleFont
const
nsStyleText
*
aStyleText
nscoord
aLetterSpacing
)
;
static
mozilla
:
:
gfx
:
:
ShapedTextFlags
GetTextRunOrientFlagsForStyle
(
ComputedStyle
*
aComputedStyle
)
;
static
void
GetRectDifferenceStrips
(
const
nsRect
&
aR1
const
nsRect
&
aR2
nsRect
*
aHStrip
nsRect
*
aVStrip
)
;
static
nsDeviceContext
*
GetDeviceContextForScreenInfo
(
nsPIDOMWindowOuter
*
aWindow
)
;
static
bool
IsReallyFixedPos
(
const
nsIFrame
*
aFrame
)
;
static
bool
MayBeReallyFixedPos
(
const
nsIFrame
*
aFrame
)
;
static
bool
IsInPositionFixedSubtree
(
const
nsIFrame
*
aFrame
)
;
enum
{
SFE_WANT_FIRST_FRAME_IF_IMAGE
=
1
<
<
0
SFE_NO_COLORSPACE_CONVERSION
=
1
<
<
1
SFE_ALLOW_NON_PREMULT
=
1
<
<
2
SFE_NO_RASTERIZING_VECTORS
=
1
<
<
3
SFE_USE_ELEMENT_SIZE_IF_VECTOR
=
1
<
<
4
SFE_EXACT_SIZE_SURFACE
=
1
<
<
6
}
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromOffscreenCanvas
(
mozilla
:
:
dom
:
:
OffscreenCanvas
*
aOffscreenCanvas
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromOffscreenCanvas
(
mozilla
:
:
dom
:
:
OffscreenCanvas
*
aOffscreenCanvas
uint32_t
aSurfaceFlags
=
0
)
{
RefPtr
<
DrawTarget
>
target
=
nullptr
;
return
SurfaceFromOffscreenCanvas
(
aOffscreenCanvas
aSurfaceFlags
target
)
;
}
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
uint32_t
aSurfaceFlags
=
0
)
{
RefPtr
<
DrawTarget
>
target
=
nullptr
;
return
SurfaceFromElement
(
aElement
aSurfaceFlags
target
)
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
nsIImageLoadingContent
*
aElement
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
mozilla
:
:
dom
:
:
HTMLImageElement
*
aElement
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
mozilla
:
:
dom
:
:
HTMLCanvasElement
*
aElement
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
SurfaceFromElementResult
SurfaceFromElement
(
mozilla
:
:
dom
:
:
HTMLVideoElement
*
aElement
uint32_t
aSurfaceFlags
RefPtr
<
DrawTarget
>
&
aTarget
)
;
static
mozilla
:
:
dom
:
:
Element
*
GetEditableRootContentByContentEditable
(
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
static
void
AddExtraBackgroundItems
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
nsIFrame
*
aFrame
const
nsRect
&
aCanvasArea
const
nsRegion
&
aVisibleRegion
nscolor
aBackstop
)
;
static
bool
NeedsPrintPreviewBackground
(
nsPresContext
*
aPresContext
)
;
typedef
nsTArray
<
mozilla
:
:
UniquePtr
<
mozilla
:
:
dom
:
:
InspectorFontFace
>
>
UsedFontFaceList
;
typedef
nsTHashMap
<
nsPtrHashKey
<
gfxFontEntry
>
mozilla
:
:
dom
:
:
InspectorFontFace
*
>
UsedFontFaceTable
;
static
nsresult
GetFontFacesForFrames
(
nsIFrame
*
aFrame
UsedFontFaceList
&
aResult
UsedFontFaceTable
&
aFontFaces
uint32_t
aMaxRanges
bool
aSkipCollapsedWhitespace
)
;
static
void
GetFontFacesForText
(
nsIFrame
*
aFrame
int32_t
aStartOffset
int32_t
aEndOffset
bool
aFollowContinuations
UsedFontFaceList
&
aResult
UsedFontFaceTable
&
aFontFaces
uint32_t
aMaxRanges
bool
aSkipCollapsedWhitespace
)
;
static
size_t
SizeOfTextRunsForFrames
(
nsIFrame
*
aFrame
mozilla
:
:
MallocSizeOf
aMallocSizeOf
bool
clear
)
;
static
bool
HasAnimationOfPropertySet
(
const
nsIFrame
*
aFrame
const
nsCSSPropertyIDSet
&
aPropertySet
)
;
static
bool
HasAnimationOfPropertySet
(
const
nsIFrame
*
aFrame
const
nsCSSPropertyIDSet
&
aPropertySet
mozilla
:
:
EffectSet
*
aEffectSet
)
;
static
bool
HasAnimationOfTransformAndMotionPath
(
const
nsIFrame
*
aFrame
)
;
static
bool
HasEffectiveAnimation
(
const
nsIFrame
*
aFrame
nsCSSPropertyID
aProperty
)
;
static
bool
HasEffectiveAnimation
(
const
nsIFrame
*
aFrame
const
nsCSSPropertyIDSet
&
aPropertySet
)
;
static
nsCSSPropertyIDSet
GetAnimationPropertiesForCompositor
(
const
nsIFrame
*
aStyleFrame
)
;
static
bool
AreAsyncAnimationsEnabled
(
)
;
static
bool
AreRetainedDisplayListsEnabled
(
)
;
static
bool
DisplayRootHasRetainedDisplayListBuilder
(
nsIFrame
*
aFrame
)
;
static
Size
ComputeSuitableScaleForAnimation
(
const
nsIFrame
*
aFrame
const
nsSize
&
aVisibleSize
const
nsSize
&
aDisplaySize
)
;
static
bool
GPUImageScalingEnabled
(
)
;
static
void
UnionChildOverflow
(
nsIFrame
*
aFrame
mozilla
:
:
OverflowAreas
&
aOverflowAreas
mozilla
:
:
layout
:
:
FrameChildListIDs
aSkipChildLists
=
mozilla
:
:
layout
:
:
FrameChildListIDs
(
)
)
;
static
float
FontSizeInflationFor
(
const
nsIFrame
*
aFrame
)
;
static
nscoord
InflationMinFontSizeFor
(
const
nsIFrame
*
aFrame
)
;
static
float
FontSizeInflationInner
(
const
nsIFrame
*
aFrame
nscoord
aMinFontSize
)
;
static
bool
FontSizeInflationEnabled
(
nsPresContext
*
aPresContext
)
;
static
bool
InvalidationDebuggingIsEnabled
(
)
{
return
mozilla
:
:
StaticPrefs
:
:
nglayout_debug_invalidation
(
)
|
|
getenv
(
"
MOZ_DUMP_INVALIDATION
"
)
!
=
0
;
}
static
void
Initialize
(
)
;
static
void
Shutdown
(
)
;
static
void
RegisterImageRequest
(
nsPresContext
*
aPresContext
imgIRequest
*
aRequest
bool
*
aRequestRegistered
)
;
static
void
RegisterImageRequestIfAnimated
(
nsPresContext
*
aPresContext
imgIRequest
*
aRequest
bool
*
aRequestRegistered
)
;
static
void
DeregisterImageRequest
(
nsPresContext
*
aPresContext
imgIRequest
*
aRequest
bool
*
aRequestRegistered
)
;
static
void
PostRestyleEvent
(
mozilla
:
:
dom
:
:
Element
*
mozilla
:
:
RestyleHint
nsChangeHint
aMinChangeHint
)
;
template
<
typename
PointType
typename
RectType
typename
CoordType
>
static
bool
PointIsCloserToRect
(
PointType
aPoint
const
RectType
&
aRect
CoordType
&
aClosestXDistance
CoordType
&
aClosestYDistance
)
;
static
nsRect
GetBoxShadowRectForFrame
(
nsIFrame
*
aFrame
const
nsSize
&
aFrameSize
)
;
#
ifdef
DEBUG
static
void
AssertNoDuplicateContinuations
(
nsIFrame
*
aContainer
const
nsFrameList
&
aFrameList
)
;
static
void
AssertTreeOnlyEmptyNextInFlows
(
nsIFrame
*
aSubtreeRoot
)
;
#
endif
static
mozilla
:
:
StyleTouchAction
GetTouchActionFromFrame
(
nsIFrame
*
aFrame
)
;
static
void
TransformToAncestorAndCombineRegions
(
const
nsRegion
&
aRegion
nsIFrame
*
aFrame
const
nsIFrame
*
aAncestorFrame
nsRegion
*
aPreciseTargetDest
nsRegion
*
aImpreciseTargetDest
mozilla
:
:
Maybe
<
Matrix4x4Flagged
>
*
aMatrixCache
const
mozilla
:
:
DisplayItemClip
*
aClip
)
;
enum
class
SubtractDynamicToolbar
{
No
Yes
}
;
static
bool
GetContentViewerSize
(
const
nsPresContext
*
aPresContext
LayoutDeviceIntSize
&
aOutSize
SubtractDynamicToolbar
=
SubtractDynamicToolbar
:
:
Yes
)
;
private
:
static
bool
UpdateCompositionBoundsForRCDRSF
(
mozilla
:
:
ParentLayerRect
&
aCompBounds
const
nsPresContext
*
aPresContext
)
;
public
:
static
nsSize
CalculateCompositionSizeForFrame
(
nsIFrame
*
aFrame
bool
aSubtractScrollbars
=
true
const
nsSize
*
aOverrideScrollPortSize
=
nullptr
)
;
static
CSSSize
CalculateBoundingCompositionSize
(
const
nsIFrame
*
aFrame
bool
aIsRootContentDocRootScrollFrame
const
FrameMetrics
&
aMetrics
)
;
static
nsRect
CalculateScrollableRectForFrame
(
const
nsIScrollableFrame
*
aScrollableFrame
const
nsIFrame
*
aRootFrame
)
;
static
nsRect
CalculateExpandedScrollableRect
(
nsIFrame
*
aFrame
)
;
static
bool
UsesAsyncScrolling
(
nsIFrame
*
aFrame
)
;
static
bool
AsyncPanZoomEnabled
(
const
nsIFrame
*
aFrame
)
;
static
bool
AllowZoomingForDocument
(
const
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
static
bool
ShouldDisableApzForElement
(
nsIContent
*
aContent
)
;
static
void
LogAdditionalTestData
(
nsDisplayListBuilder
*
aBuilder
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
;
static
void
LogTestDataForPaint
(
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
{
DoLogTestDataForPaint
(
aManager
aScrollId
aKey
aValue
)
;
}
template
<
typename
Value
>
static
void
LogTestDataForPaint
(
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
Value
&
aValue
)
{
DoLogTestDataForPaint
(
aManager
aScrollId
aKey
mozilla
:
:
ToString
(
aValue
)
)
;
}
static
FrameMetrics
CalculateBasicFrameMetrics
(
nsIScrollableFrame
*
aScrollFrame
)
;
static
nsIScrollableFrame
*
GetAsyncScrollableAncestorFrame
(
nsIFrame
*
aTarget
)
;
static
void
SetBSizeFromFontMetrics
(
const
nsIFrame
*
aFrame
mozilla
:
:
ReflowOutput
&
aMetrics
const
mozilla
:
:
LogicalMargin
&
aFramePadding
mozilla
:
:
WritingMode
aLineWM
mozilla
:
:
WritingMode
aFrameWM
)
;
static
bool
HasDocumentLevelListenersForApzAwareEvents
(
PresShell
*
aPresShell
)
;
static
bool
CanScrollOriginClobberApz
(
ScrollOrigin
aScrollOrigin
)
;
static
ScrollMetadata
ComputeScrollMetadata
(
const
nsIFrame
*
aForFrame
const
nsIFrame
*
aScrollFrame
nsIContent
*
aContent
const
nsIFrame
*
aItemFrame
const
nsPoint
&
aOffsetToReferenceFrame
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aLayerManager
ViewID
aScrollParentId
const
nsSize
&
aScrollPortSize
bool
aIsRoot
)
;
static
mozilla
:
:
Maybe
<
ScrollMetadata
>
GetRootMetadata
(
nsDisplayListBuilder
*
aBuilder
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aLayerManager
const
std
:
:
function
<
bool
(
ViewID
&
aScrollId
)
>
&
aCallback
)
;
static
nsMargin
ScrollbarAreaToExcludeFromCompositionBoundsFor
(
const
nsIFrame
*
aScrollFrame
)
;
static
bool
ShouldUseNoScriptSheet
(
mozilla
:
:
dom
:
:
Document
*
)
;
static
bool
ShouldUseNoFramesSheet
(
mozilla
:
:
dom
:
:
Document
*
)
;
static
void
GetFrameTextContent
(
nsIFrame
*
aFrame
nsAString
&
aResult
)
;
static
void
AppendFrameTextContent
(
nsIFrame
*
aFrame
nsAString
&
aResult
)
;
static
nsRect
GetSelectionBoundingRect
(
const
mozilla
:
:
dom
:
:
Selection
*
aSel
)
;
static
CSSRect
GetBoundingContentRect
(
const
nsIContent
*
aContent
const
nsIScrollableFrame
*
aRootScrollFrame
mozilla
:
:
Maybe
<
CSSRect
>
*
aOutNearestScrollClip
=
nullptr
)
;
static
CSSRect
GetBoundingFrameRect
(
nsIFrame
*
aFrame
const
nsIScrollableFrame
*
aRootScrollFrame
mozilla
:
:
Maybe
<
CSSRect
>
*
aOutNearestScrollClip
=
nullptr
)
;
static
nsBlockFrame
*
GetFloatContainingBlock
(
nsIFrame
*
aFrame
)
;
static
bool
IsTransformed
(
nsIFrame
*
aForFrame
nsIFrame
*
aTopFrame
=
nullptr
)
;
static
CSSPoint
GetCumulativeApzCallbackTransform
(
nsIFrame
*
aFrame
)
;
static
nsRect
ComputePartialPrerenderArea
(
nsIFrame
*
aFrame
const
nsRect
&
aDirtyRect
const
nsRect
&
aOverflow
const
nsSize
&
aPrerenderSize
)
;
static
bool
IsInvisibleBreak
(
nsINode
*
aNode
nsIFrame
*
*
aNextLineFrame
=
nullptr
)
;
static
nsRect
ComputeGeometryBox
(
nsIFrame
*
StyleGeometryBox
)
;
static
nsRect
ComputeGeometryBox
(
nsIFrame
*
const
mozilla
:
:
StyleShapeGeometryBox
&
)
;
static
nsRect
ComputeGeometryBox
(
nsIFrame
*
const
mozilla
:
:
StyleShapeBox
&
)
;
static
nsPoint
ComputeOffsetToUserSpace
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aFrame
)
;
static
already_AddRefed
<
nsFontMetrics
>
GetMetricsFor
(
nsPresContext
*
aPresContext
bool
aIsVertical
const
nsStyleFont
*
aStyleFont
mozilla
:
:
Length
aFontSize
bool
aUseUserFontSet
)
;
static
void
ComputeSystemFont
(
nsFont
*
aSystemFont
mozilla
:
:
StyleSystemFont
aFontID
const
nsFont
*
aDefaultVariableFont
const
mozilla
:
:
dom
:
:
Document
*
aDocument
)
;
static
uint32_t
ParseFontLanguageOverride
(
const
nsAString
&
aLangTag
)
;
static
bool
ShouldHandleMetaViewport
(
const
mozilla
:
:
dom
:
:
Document
*
)
;
template
<
bool
clampNegativeResultToZero
>
static
nscoord
ResolveToLength
(
const
LengthPercentage
&
aLengthPercentage
nscoord
aPercentageBasis
)
{
nscoord
value
=
(
aPercentageBasis
=
=
NS_UNCONSTRAINEDSIZE
)
?
aLengthPercentage
.
Resolve
(
0
)
:
aLengthPercentage
.
Resolve
(
aPercentageBasis
)
;
return
clampNegativeResultToZero
?
std
:
:
max
(
0
value
)
:
value
;
}
static
nscoord
ResolveGapToLength
(
const
mozilla
:
:
NonNegativeLengthPercentageOrNormal
&
aGap
nscoord
aPercentageBasis
)
{
if
(
aGap
.
IsNormal
(
)
)
{
return
nscoord
(
0
)
;
}
return
ResolveToLength
<
true
>
(
aGap
.
AsLengthPercentage
(
)
aPercentageBasis
)
;
}
static
ComputedStyle
*
StyleForScrollbar
(
nsIFrame
*
aScrollbarPart
)
;
static
bool
FrameIsScrolledOutOfViewInCrossProcess
(
const
nsIFrame
*
aFrame
)
;
static
bool
FrameIsMostlyScrolledOutOfViewInCrossProcess
(
const
nsIFrame
*
aFrame
nscoord
aMargin
)
;
static
nsSize
ExpandHeightForViewportUnits
(
nsPresContext
*
aPresContext
const
nsSize
&
aSize
)
;
static
CSSSize
ExpandHeightForDynamicToolbar
(
const
nsPresContext
*
aPresContext
const
CSSSize
&
aSize
)
;
static
nsSize
ExpandHeightForDynamicToolbar
(
const
nsPresContext
*
aPresContext
const
nsSize
&
aSize
)
;
static
nsIFrame
*
GetNearestOverflowClipFrame
(
nsIFrame
*
aFrame
)
;
private
:
static
void
DoLogTestDataForPaint
(
mozilla
:
:
layers
:
:
WebRenderLayerManager
*
aManager
ViewID
aScrollId
const
std
:
:
string
&
aKey
const
std
:
:
string
&
aValue
)
;
static
bool
IsAPZTestLoggingEnabled
(
)
;
static
void
ConstrainToCoordValues
(
gfxFloat
&
aStart
gfxFloat
&
aSize
)
;
static
void
ConstrainToCoordValues
(
float
&
aStart
float
&
aSize
)
;
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
nsLayoutUtils
:
:
PaintFrameFlags
)
template
<
typename
PointType
typename
RectType
typename
CoordType
>
bool
nsLayoutUtils
:
:
PointIsCloserToRect
(
PointType
aPoint
const
RectType
&
aRect
CoordType
&
aClosestXDistance
CoordType
&
aClosestYDistance
)
{
CoordType
fromLeft
=
aPoint
.
x
-
aRect
.
x
;
CoordType
fromRight
=
aPoint
.
x
-
aRect
.
XMost
(
)
;
CoordType
xDistance
;
if
(
fromLeft
>
=
0
&
&
fromRight
<
=
0
)
{
xDistance
=
0
;
}
else
{
xDistance
=
std
:
:
min
(
abs
(
fromLeft
)
abs
(
fromRight
)
)
;
}
if
(
xDistance
<
=
aClosestXDistance
)
{
if
(
xDistance
<
aClosestXDistance
)
{
aClosestYDistance
=
std
:
:
numeric_limits
<
CoordType
>
:
:
max
(
)
;
}
CoordType
fromTop
=
aPoint
.
y
-
aRect
.
y
;
CoordType
fromBottom
=
aPoint
.
y
-
aRect
.
YMost
(
)
;
CoordType
yDistance
;
if
(
fromTop
>
=
0
&
&
fromBottom
<
=
0
)
{
yDistance
=
0
;
}
else
{
yDistance
=
std
:
:
min
(
abs
(
fromTop
)
abs
(
fromBottom
)
)
;
}
if
(
yDistance
<
aClosestYDistance
)
{
aClosestXDistance
=
xDistance
;
aClosestYDistance
=
yDistance
;
return
true
;
}
}
return
false
;
}
template
<
typename
T
>
nsRect
nsLayoutUtils
:
:
RoundGfxRectToAppRect
(
const
T
&
aRect
const
float
aFactor
)
{
T
scaledRect
=
aRect
;
scaledRect
.
ScaleRoundOut
(
aFactor
)
;
ConstrainToCoordValues
(
scaledRect
.
x
scaledRect
.
width
)
;
ConstrainToCoordValues
(
scaledRect
.
y
scaledRect
.
height
)
;
if
(
!
aRect
.
Width
(
)
)
{
scaledRect
.
SetWidth
(
0
)
;
}
if
(
!
aRect
.
Height
(
)
)
{
scaledRect
.
SetHeight
(
0
)
;
}
return
nsRect
(
nscoord
(
scaledRect
.
X
(
)
)
nscoord
(
scaledRect
.
Y
(
)
)
nscoord
(
scaledRect
.
Width
(
)
)
nscoord
(
scaledRect
.
Height
(
)
)
)
;
}
namespace
mozilla
{
inline
gfx
:
:
Point
NSPointToPoint
(
const
nsPoint
&
aPoint
int32_t
aAppUnitsPerPixel
)
{
return
gfx
:
:
Point
(
gfx
:
:
Float
(
aPoint
.
x
)
/
aAppUnitsPerPixel
gfx
:
:
Float
(
aPoint
.
y
)
/
aAppUnitsPerPixel
)
;
}
gfx
:
:
Rect
NSRectToRect
(
const
nsRect
&
aRect
double
aAppUnitsPerPixel
)
;
gfx
:
:
Rect
NSRectToSnappedRect
(
const
nsRect
&
aRect
double
aAppUnitsPerPixel
const
gfx
:
:
DrawTarget
&
aSnapDT
)
;
gfx
:
:
Rect
NSRectToNonEmptySnappedRect
(
const
nsRect
&
aRect
double
aAppUnitsPerPixel
const
gfx
:
:
DrawTarget
&
aSnapDT
)
;
void
StrokeLineWithSnapping
(
const
nsPoint
&
aP1
const
nsPoint
&
aP2
int32_t
aAppUnitsPerDevPixel
gfx
:
:
DrawTarget
&
aDrawTarget
const
gfx
:
:
Pattern
&
aPattern
const
gfx
:
:
StrokeOptions
&
aStrokeOptions
=
gfx
:
:
StrokeOptions
(
)
const
gfx
:
:
DrawOptions
&
aDrawOptions
=
gfx
:
:
DrawOptions
(
)
)
;
namespace
layout
{
class
AutoMaybeDisableFontInflation
{
public
:
explicit
AutoMaybeDisableFontInflation
(
nsIFrame
*
aFrame
)
;
~
AutoMaybeDisableFontInflation
(
)
;
private
:
nsPresContext
*
mPresContext
;
bool
mOldValue
;
}
;
}
}
class
nsSetAttrRunnable
:
public
mozilla
:
:
Runnable
{
public
:
nsSetAttrRunnable
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttrName
const
nsAString
&
aValue
)
;
nsSetAttrRunnable
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttrName
int32_t
aValue
)
;
NS_DECL_NSIRUNNABLE
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mElement
;
RefPtr
<
nsAtom
>
mAttrName
;
nsAutoString
mValue
;
}
;
class
nsUnsetAttrRunnable
:
public
mozilla
:
:
Runnable
{
public
:
nsUnsetAttrRunnable
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsAtom
*
aAttrName
)
;
NS_DECL_NSIRUNNABLE
RefPtr
<
mozilla
:
:
dom
:
:
Element
>
mElement
;
RefPtr
<
nsAtom
>
mAttrName
;
}
;
template
<
typename
T
>
class
MOZ_RAII
SetAndNullOnExit
{
public
:
SetAndNullOnExit
(
T
*
&
aVariable
T
*
aValue
)
{
aVariable
=
aValue
;
mVariable
=
&
aVariable
;
}
~
SetAndNullOnExit
(
)
{
*
mVariable
=
nullptr
;
}
private
:
T
*
*
mVariable
;
}
;
#
endif
