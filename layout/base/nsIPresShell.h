#
ifndef
nsIPresShell_h___
#
define
nsIPresShell_h___
#
include
"
mozilla
/
PresShellForwards
.
h
"
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
mozilla
/
FlushType
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ScrollTypes
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
FrameMetrics
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
gfxPoint
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsQueryFrame
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
nsRect
.
h
"
#
include
"
nsRegionFwd
.
h
"
#
include
<
stdio
.
h
>
#
include
"
nsChangeHint
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsPresArena
.
h
"
#
include
"
nsIImageLoadingContent
.
h
"
#
include
"
nsMargin
.
h
"
#
include
"
nsFrameState
.
h
"
#
include
"
nsStubDocumentObserver
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
Units
.
h
"
#
ifdef
MOZ_REFLOW_PERF
class
ReflowCountMgr
;
#
endif
class
gfxContext
;
struct
nsCallbackEventRequest
;
class
nsDocShell
;
class
nsIFrame
;
class
nsPresContext
;
class
nsWindowSizes
;
class
nsViewManager
;
class
nsView
;
class
nsIPageSequenceFrame
;
class
nsCanvasFrame
;
class
nsCaret
;
namespace
mozilla
{
class
AccessibleCaretEventHub
;
class
OverflowChangedTracker
;
class
StyleSheet
;
}
class
nsFrameSelection
;
class
nsFrameManager
;
class
nsILayoutHistoryState
;
class
nsIReflowCallback
;
class
nsCSSFrameConstructor
;
template
<
class
E
>
class
nsCOMArray
;
class
AutoWeakFrame
;
class
MobileViewportManager
;
class
WeakFrame
;
class
nsIScrollableFrame
;
class
nsDisplayList
;
class
nsDisplayListBuilder
;
class
nsPIDOMWindowOuter
;
struct
nsPoint
;
class
nsINode
;
struct
nsRect
;
class
nsRegion
;
class
nsRefreshDriver
;
class
nsAutoCauseReflowNotifier
;
class
nsARefreshObserver
;
class
nsAPostRefreshObserver
;
#
ifdef
ACCESSIBILITY
class
nsAccessibilityService
;
namespace
mozilla
{
namespace
a11y
{
class
DocAccessible
;
}
}
#
endif
class
nsITimer
;
namespace
mozilla
{
class
EventStates
;
namespace
dom
{
class
Element
;
class
Event
;
class
Document
;
class
HTMLSlotElement
;
class
Touch
;
class
Selection
;
class
ShadowRoot
;
}
namespace
layout
{
class
ScrollAnchorContainer
;
}
namespace
layers
{
class
LayerManager
;
}
namespace
gfx
{
class
SourceSurface
;
}
}
#
define
NS_IPRESSHELL_IID
\
{
\
0xb7b89561
0x4f03
0x44b3
{
\
0x9a
0xfa
0xb4
0x7e
0x7f
0x31
0x3f
0xfb
\
}
\
}
#
undef
NOISY_INTERRUPTIBLE_REFLOW
class
nsIPresShell
:
public
nsStubDocumentObserver
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_IPRESSHELL_IID
)
protected
:
typedef
mozilla
:
:
dom
:
:
Document
Document
;
typedef
mozilla
:
:
layers
:
:
FrameMetrics
FrameMetrics
;
typedef
mozilla
:
:
layers
:
:
LayerManager
LayerManager
;
typedef
mozilla
:
:
gfx
:
:
SourceSurface
SourceSurface
;
enum
eRenderFlag
{
STATE_IGNORING_VIEWPORT_SCROLLING
=
0x1
STATE_DRAWWINDOW_NOT_FLUSHING
=
0x2
}
;
typedef
uint8_t
RenderFlags
;
public
:
nsIPresShell
(
)
;
protected
:
RefPtr
<
Document
>
mDocument
;
RefPtr
<
nsPresContext
>
mPresContext
;
RefPtr
<
mozilla
:
:
StyleSheet
>
mPrefStyleSheet
;
mozilla
:
:
UniquePtr
<
nsCSSFrameConstructor
>
mFrameConstructor
;
nsViewManager
*
mViewManager
;
nsPresArena
<
8192
>
mFrameArena
;
RefPtr
<
nsFrameSelection
>
mSelection
;
RefPtr
<
nsCaret
>
mCaret
;
RefPtr
<
nsCaret
>
mOriginalCaret
;
RefPtr
<
mozilla
:
:
AccessibleCaretEventHub
>
mAccessibleCaretEventHub
;
nsFrameManager
*
mFrameManager
;
mozilla
:
:
WeakPtr
<
nsDocShell
>
mForwardingContainer
;
DOMHighResTimeStamp
mLastReflowStart
{
0
.
0
}
;
nsCOMPtr
<
nsITimer
>
mReflowContinueTimer
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
nsTHashtable
<
nsPtrHashKey
<
void
>
>
mAllocatedPointers
;
#
endif
uint64_t
mPaintCount
;
AutoWeakFrame
*
mAutoWeakFrames
;
nsTHashtable
<
nsPtrHashKey
<
WeakFrame
>
>
mWeakFrames
;
class
DirtyRootsList
{
public
:
void
Add
(
nsIFrame
*
aFrame
)
;
void
Remove
(
nsIFrame
*
aFrame
)
;
nsIFrame
*
PopShallowestRoot
(
)
;
void
Clear
(
)
;
bool
Contains
(
nsIFrame
*
aFrame
)
const
;
bool
IsEmpty
(
)
const
;
bool
FrameIsAncestorOfDirtyRoot
(
nsIFrame
*
aFrame
)
const
;
private
:
struct
FrameAndDepth
{
nsIFrame
*
mFrame
;
const
uint32_t
mDepth
;
operator
nsIFrame
*
(
)
const
{
return
mFrame
;
}
class
CompareByReverseDepth
{
public
:
bool
Equals
(
const
FrameAndDepth
&
aA
const
FrameAndDepth
&
aB
)
const
{
return
aA
.
mDepth
=
=
aB
.
mDepth
;
}
bool
LessThan
(
const
FrameAndDepth
&
aA
const
FrameAndDepth
&
aB
)
const
{
return
aA
.
mDepth
>
aB
.
mDepth
;
}
}
;
}
;
nsTArray
<
FrameAndDepth
>
mList
;
}
;
DirtyRootsList
mDirtyRoots
;
#
ifdef
MOZ_GECKO_PROFILER
UniqueProfilerBacktrace
mStyleCause
;
UniqueProfilerBacktrace
mReflowCause
;
#
endif
nscolor
mCanvasBackgroundColor
;
mozilla
:
:
Maybe
<
float
>
mResolution
;
int16_t
mSelectionFlags
;
uint16_t
mChangeNestCount
;
RenderFlags
mRenderFlags
;
bool
mDidInitialize
:
1
;
bool
mIsDestroying
:
1
;
bool
mIsReflowing
:
1
;
bool
mIsObservingDocument
:
1
;
bool
mForbiddenToFlush
:
1
;
bool
mIsDocumentGone
:
1
;
bool
mHaveShutDown
:
1
;
bool
mPaintingSuppressed
:
1
;
bool
mLastRootReflowHadUnconstrainedBSize
:
1
;
bool
mShouldUnsuppressPainting
:
1
;
bool
mIgnoreFrameDestruction
:
1
;
bool
mIsActive
:
1
;
bool
mFrozen
:
1
;
bool
mIsFirstPaint
:
1
;
bool
mObservesMutationsForPrint
:
1
;
bool
mWasLastReflowInterrupted
:
1
;
bool
mObservingStyleFlushes
:
1
;
bool
mObservingLayoutFlushes
:
1
;
bool
mResizeEventPending
:
1
;
bool
mFontSizeInflationForceEnabled
:
1
;
bool
mFontSizeInflationDisabledInMasterProcess
:
1
;
bool
mFontSizeInflationEnabled
:
1
;
bool
mPaintingIsFrozen
:
1
;
bool
mIsNeverPainting
:
1
;
bool
mResolutionUpdated
:
1
;
bool
mResolutionUpdatedByApz
:
1
;
uint32_t
mPresShellId
;
uint32_t
mFontSizeInflationEmPerLine
;
uint32_t
mFontSizeInflationMinTwips
;
uint32_t
mFontSizeInflationLineThreshold
;
bool
mInFlush
;
nsIFrame
*
mCurrentEventFrame
;
nsCOMPtr
<
nsIContent
>
mCurrentEventContent
;
nsTArray
<
nsIFrame
*
>
mCurrentEventFrameStack
;
nsCOMArray
<
nsIContent
>
mCurrentEventContentStack
;
nsTHashtable
<
nsPtrHashKey
<
nsIFrame
>
>
mFramesToDirty
;
nsTHashtable
<
nsPtrHashKey
<
nsIScrollableFrame
>
>
mPendingScrollAnchorSelection
;
nsTHashtable
<
nsPtrHashKey
<
nsIScrollableFrame
>
>
mPendingScrollAnchorAdjustment
;
nsCallbackEventRequest
*
mFirstCallbackEventRequest
=
nullptr
;
nsCallbackEventRequest
*
mLastCallbackEventRequest
=
nullptr
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsIPresShell
NS_IPRESSHELL_IID
)
#
endif
