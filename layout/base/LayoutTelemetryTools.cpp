#
include
"
mozilla
/
layout
/
LayoutTelemetryTools
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
EnumeratedRange
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
namespace
mozilla
:
:
layout_telemetry
{
using
LayoutSubsystemDurations
=
EnumeratedArray
<
LayoutSubsystem
double
size_t
(
LayoutSubsystem
:
:
Count
)
>
;
struct
PerTickData
{
constexpr
PerTickData
(
)
=
default
;
LayoutSubsystemDurations
mLayoutSubsystemDurationMs
{
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
0
.
0
}
;
}
;
static
PerTickData
sData
;
static
AutoRecord
*
sCurrentRecord
;
static
nsLiteralCString
SubsystemTelemetryKey
(
LayoutSubsystem
aSubsystem
)
{
switch
(
aSubsystem
)
{
default
:
MOZ_CRASH
(
"
Unexpected
LayoutSubsystem
value
"
)
;
case
LayoutSubsystem
:
:
Restyle
:
return
"
Restyle
"
_ns
;
case
LayoutSubsystem
:
:
Reflow
:
return
"
ReflowOther
"
_ns
;
case
LayoutSubsystem
:
:
ReflowFlex
:
return
"
ReflowFlex
"
_ns
;
case
LayoutSubsystem
:
:
ReflowGrid
:
return
"
ReflowGrid
"
_ns
;
case
LayoutSubsystem
:
:
ReflowTable
:
return
"
ReflowTable
"
_ns
;
case
LayoutSubsystem
:
:
ReflowText
:
return
"
ReflowText
"
_ns
;
}
}
void
PingPerTickTelemetry
(
)
{
auto
range
=
MakeEnumeratedRange
(
LayoutSubsystem
:
:
Restyle
LayoutSubsystem
:
:
Count
)
;
for
(
auto
subsystem
:
range
)
{
auto
key
=
SubsystemTelemetryKey
(
subsystem
)
;
double
&
duration
=
sData
.
mLayoutSubsystemDurationMs
[
subsystem
]
;
if
(
duration
>
0
.
0
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
PRESSHELL_LAYOUT_TOTAL_MS_PER_TICK
key
static_cast
<
uint32_t
>
(
duration
)
)
;
duration
=
0
.
0
;
}
}
}
AutoRecord
:
:
AutoRecord
(
LayoutSubsystem
aSubsystem
)
:
mParentRecord
(
sCurrentRecord
)
mSubsystem
(
aSubsystem
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
mParentRecord
&
&
mParentRecord
-
>
mSubsystem
=
=
mSubsystem
)
{
return
;
}
mStartTime
=
TimeStamp
:
:
Now
(
)
;
if
(
mParentRecord
)
{
mParentRecord
-
>
mDurationMs
+
=
(
mStartTime
-
mParentRecord
-
>
mStartTime
)
.
ToMilliseconds
(
)
;
}
sCurrentRecord
=
this
;
}
AutoRecord
:
:
~
AutoRecord
(
)
{
if
(
sCurrentRecord
!
=
this
)
{
return
;
}
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
mDurationMs
+
=
(
now
-
mStartTime
)
.
ToMilliseconds
(
)
;
sData
.
mLayoutSubsystemDurationMs
[
mSubsystem
]
+
=
mDurationMs
;
if
(
mParentRecord
)
{
mParentRecord
-
>
mStartTime
=
now
;
}
sCurrentRecord
=
mParentRecord
;
}
}
