#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsPresState
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsLayoutHistoryState
final
:
public
nsILayoutHistoryState
public
nsSupportsWeakReference
{
public
:
nsLayoutHistoryState
(
)
:
mScrollPositionOnly
(
false
)
{
}
NS_DECL_ISUPPORTS
NS_DECL_NSILAYOUTHISTORYSTATE
private
:
~
nsLayoutHistoryState
(
)
{
}
bool
mScrollPositionOnly
;
nsClassHashtable
<
nsCStringHashKey
nsPresState
>
mStates
;
}
;
already_AddRefed
<
nsILayoutHistoryState
>
NS_NewLayoutHistoryState
(
)
{
RefPtr
<
nsLayoutHistoryState
>
state
=
new
nsLayoutHistoryState
(
)
;
return
state
.
forget
(
)
;
}
NS_IMPL_ISUPPORTS
(
nsLayoutHistoryState
nsILayoutHistoryState
nsISupportsWeakReference
)
void
nsLayoutHistoryState
:
:
AddState
(
const
nsCString
&
aStateKey
nsPresState
*
aState
)
{
mStates
.
Put
(
aStateKey
aState
)
;
}
nsPresState
*
nsLayoutHistoryState
:
:
GetState
(
const
nsCString
&
aKey
)
{
nsPresState
*
state
=
nullptr
;
bool
entryExists
=
mStates
.
Get
(
aKey
&
state
)
;
if
(
entryExists
&
&
mScrollPositionOnly
)
{
state
-
>
ClearNonScrollState
(
)
;
}
return
state
;
}
void
nsLayoutHistoryState
:
:
RemoveState
(
const
nsCString
&
aKey
)
{
mStates
.
Remove
(
aKey
)
;
}
bool
nsLayoutHistoryState
:
:
HasStates
(
)
{
return
mStates
.
Count
(
)
!
=
0
;
}
void
nsLayoutHistoryState
:
:
SetScrollPositionOnly
(
const
bool
aFlag
)
{
mScrollPositionOnly
=
aFlag
;
}
void
nsLayoutHistoryState
:
:
ResetScrollState
(
)
{
for
(
auto
iter
=
mStates
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsPresState
*
state
=
iter
.
UserData
(
)
;
if
(
state
)
{
state
-
>
SetScrollState
(
nsPoint
(
0
0
)
)
;
}
}
}
