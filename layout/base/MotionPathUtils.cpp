#
include
"
mozilla
/
MotionPathUtils
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
dom
/
SVGPathData
.
h
"
#
include
"
mozilla
/
dom
/
SVGViewportElement
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
layers
/
LayersMessages
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ShapeUtils
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsStyleTransformMatrix
.
h
"
#
include
<
math
.
h
>
namespace
mozilla
{
using
nsStyleTransformMatrix
:
:
TransformReferenceBox
;
static
const
nsIFrame
*
GetOffsetPathReferenceBox
(
const
nsIFrame
*
aFrame
nsRect
&
aOutputRect
)
{
if
(
aFrame
-
>
HasAnyStateBits
(
NS_FRAME_SVG_LAYOUT
)
)
{
MOZ_ASSERT
(
aFrame
-
>
GetContent
(
)
-
>
IsSVGElement
(
)
)
;
auto
*
viewportElement
=
dom
:
:
SVGElement
:
:
FromNode
(
aFrame
-
>
GetContent
(
)
)
-
>
GetCtx
(
)
;
aOutputRect
=
nsLayoutUtils
:
:
ComputeSVGViewBox
(
viewportElement
)
;
return
viewportElement
?
viewportElement
-
>
GetPrimaryFrame
(
)
:
nullptr
;
}
const
nsIFrame
*
containingBlock
=
aFrame
-
>
GetContainingBlock
(
)
;
constexpr
StyleGeometryBox
styleCoordBox
=
StyleGeometryBox
:
:
BorderBox
;
aOutputRect
=
nsLayoutUtils
:
:
ComputeHTMLReferenceRect
(
containingBlock
styleCoordBox
)
;
return
containingBlock
;
}
RayReferenceData
:
:
RayReferenceData
(
const
nsIFrame
*
aFrame
)
{
nsRect
coordBox
;
const
nsIFrame
*
containingBlock
=
GetOffsetPathReferenceBox
(
aFrame
coordBox
)
;
if
(
!
containingBlock
)
{
return
;
}
mContainingBlockRect
=
CSSRect
:
:
FromAppUnits
(
coordBox
)
;
mInitialPosition
=
CSSPoint
:
:
FromAppUnits
(
aFrame
-
>
GetOffsetTo
(
containingBlock
)
)
;
mBorderBoxSize
=
CSSSize
:
:
FromAppUnits
(
nsLayoutUtils
:
:
ComputeGeometryBox
(
const_cast
<
nsIFrame
*
>
(
aFrame
)
StyleGeometryBox
:
:
StrokeBox
)
.
Size
(
)
)
;
}
static
CSSCoord
ComputeSides
(
const
CSSPoint
&
aInitialPosition
const
CSSSize
&
aContainerSize
const
StyleAngle
&
aAngle
)
{
double
theta
=
aAngle
.
ToRadians
(
)
;
double
sint
=
std
:
:
sin
(
theta
)
;
double
cost
=
std
:
:
cos
(
theta
)
;
double
b
=
cost
>
=
0
?
aInitialPosition
.
y
.
value
:
aContainerSize
.
height
-
aInitialPosition
.
y
.
value
;
double
bPrime
=
sint
>
=
0
?
aContainerSize
.
width
-
aInitialPosition
.
x
.
value
:
aInitialPosition
.
x
.
value
;
sint
=
std
:
:
fabs
(
sint
)
;
cost
=
std
:
:
fabs
(
cost
)
;
if
(
b
*
sint
>
bPrime
*
cost
)
{
return
bPrime
/
sint
;
}
return
b
/
cost
;
}
static
CSSPoint
ComputeRayOrigin
(
const
StylePositionOrAuto
&
aAtPosition
const
StyleOffsetPosition
&
aOffsetPosition
const
RayReferenceData
&
aData
)
{
const
nsRect
&
coordBox
=
CSSPixel
:
:
ToAppUnits
(
aData
.
mContainingBlockRect
)
;
if
(
aAtPosition
.
IsPosition
(
)
)
{
return
CSSPoint
:
:
FromAppUnits
(
ShapeUtils
:
:
ComputePosition
(
aAtPosition
.
AsPosition
(
)
coordBox
)
)
;
}
MOZ_ASSERT
(
aAtPosition
.
IsAuto
(
)
"
\
"
at
<
position
>
\
"
should
be
omitted
"
)
;
if
(
aOffsetPosition
.
IsPosition
(
)
)
{
return
CSSPoint
:
:
FromAppUnits
(
ShapeUtils
:
:
ComputePosition
(
aOffsetPosition
.
AsPosition
(
)
coordBox
)
)
;
}
if
(
aOffsetPosition
.
IsNormal
(
)
)
{
static
const
StylePosition
center
=
StylePosition
:
:
FromPercentage
(
0
.
5
)
;
return
CSSPoint
:
:
FromAppUnits
(
ShapeUtils
:
:
ComputePosition
(
center
coordBox
)
)
;
}
MOZ_ASSERT
(
aOffsetPosition
.
IsAuto
(
)
)
;
return
aData
.
mInitialPosition
;
}
static
CSSCoord
ComputeRayPathLength
(
const
StyleRaySize
aRaySizeType
const
StyleAngle
&
aAngle
const
CSSPoint
&
aOrigin
const
CSSRect
&
aContainingBlock
)
{
if
(
aRaySizeType
=
=
StyleRaySize
:
:
Sides
)
{
if
(
!
aContainingBlock
.
Contains
(
aOrigin
)
)
{
return
0
.
0
;
}
return
ComputeSides
(
aOrigin
aContainingBlock
.
Size
(
)
aAngle
)
;
}
CSSCoord
left
=
std
:
:
abs
(
aOrigin
.
x
)
;
CSSCoord
right
=
std
:
:
abs
(
aContainingBlock
.
width
-
aOrigin
.
x
)
;
CSSCoord
top
=
std
:
:
abs
(
aOrigin
.
y
)
;
CSSCoord
bottom
=
std
:
:
abs
(
aContainingBlock
.
height
-
aOrigin
.
y
)
;
switch
(
aRaySizeType
)
{
case
StyleRaySize
:
:
ClosestSide
:
return
std
:
:
min
(
{
left
right
top
bottom
}
)
;
case
StyleRaySize
:
:
FarthestSide
:
return
std
:
:
max
(
{
left
right
top
bottom
}
)
;
case
StyleRaySize
:
:
ClosestCorner
:
case
StyleRaySize
:
:
FarthestCorner
:
{
CSSCoord
h
=
0
;
CSSCoord
v
=
0
;
if
(
aRaySizeType
=
=
StyleRaySize
:
:
ClosestCorner
)
{
h
=
std
:
:
min
(
left
right
)
;
v
=
std
:
:
min
(
top
bottom
)
;
}
else
{
h
=
std
:
:
max
(
left
right
)
;
v
=
std
:
:
max
(
top
bottom
)
;
}
return
sqrt
(
h
.
value
*
h
.
value
+
v
.
value
*
v
.
value
)
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
ray
size
"
)
;
}
return
0
.
0
;
}
static
CSSCoord
ComputeRayUsedDistance
(
const
StyleRayFunction
&
aRay
const
LengthPercentage
&
aDistance
const
CSSCoord
&
aPathLength
const
CSSSize
&
aBorderBoxSize
)
{
CSSCoord
usedDistance
=
aDistance
.
ResolveToCSSPixels
(
aPathLength
)
;
if
(
!
aRay
.
contain
)
{
return
usedDistance
;
}
return
std
:
:
max
(
usedDistance
-
std
:
:
max
(
aBorderBoxSize
.
width
aBorderBoxSize
.
height
)
/
2
.
0f
0
.
0f
)
;
}
CSSPoint
MotionPathUtils
:
:
ComputeAnchorPointAdjustment
(
const
nsIFrame
&
aFrame
)
{
if
(
!
aFrame
.
HasAnyStateBits
(
NS_FRAME_SVG_LAYOUT
)
)
{
return
{
}
;
}
auto
transformBox
=
aFrame
.
StyleDisplay
(
)
-
>
mTransformBox
;
if
(
transformBox
=
=
StyleGeometryBox
:
:
ViewBox
|
|
transformBox
=
=
StyleGeometryBox
:
:
BorderBox
)
{
return
{
}
;
}
if
(
aFrame
.
IsFrameOfType
(
nsIFrame
:
:
eSVGContainer
)
)
{
nsRect
boxRect
=
nsLayoutUtils
:
:
ComputeGeometryBox
(
const_cast
<
nsIFrame
*
>
(
&
aFrame
)
StyleGeometryBox
:
:
FillBox
)
;
return
CSSPoint
:
:
FromAppUnits
(
boxRect
.
TopLeft
(
)
)
;
}
return
CSSPoint
:
:
FromAppUnits
(
aFrame
.
GetPosition
(
)
)
;
}
Maybe
<
ResolvedMotionPathData
>
MotionPathUtils
:
:
ResolveMotionPath
(
const
OffsetPathData
&
aPath
const
LengthPercentage
&
aDistance
const
StyleOffsetRotate
&
aRotate
const
StylePositionOrAuto
&
aAnchor
const
StyleOffsetPosition
&
aPosition
const
CSSPoint
&
aTransformOrigin
TransformReferenceBox
&
aRefBox
const
CSSPoint
&
aAnchorPointAdjustment
)
{
if
(
aPath
.
IsNone
(
)
)
{
return
Nothing
(
)
;
}
double
directionAngle
=
0
.
0
;
gfx
:
:
Point
point
;
if
(
aPath
.
IsPath
(
)
)
{
const
auto
&
path
=
aPath
.
AsPath
(
)
;
if
(
!
path
.
mGfxPath
)
{
return
Nothing
(
)
;
}
gfx
:
:
Float
pathLength
=
path
.
mGfxPath
-
>
ComputeLength
(
)
;
gfx
:
:
Float
usedDistance
=
aDistance
.
ResolveToCSSPixels
(
CSSCoord
(
pathLength
)
)
;
if
(
path
.
mIsClosedIntervals
)
{
usedDistance
=
pathLength
>
0
.
0
?
fmod
(
usedDistance
pathLength
)
:
0
.
0
;
if
(
usedDistance
<
0
.
0
)
{
usedDistance
+
=
pathLength
;
}
}
else
{
usedDistance
=
clamped
(
usedDistance
0
.
0f
pathLength
)
;
}
gfx
:
:
Point
tangent
;
point
=
path
.
mGfxPath
-
>
ComputePointAtLength
(
usedDistance
&
tangent
)
;
directionAngle
=
(
double
)
atan2
(
tangent
.
y
tangent
.
x
)
;
}
else
if
(
aPath
.
IsRay
(
)
)
{
const
auto
&
ray
=
aPath
.
AsRay
(
)
;
MOZ_ASSERT
(
ray
.
mRay
)
;
const
CSSPoint
origin
=
ComputeRayOrigin
(
ray
.
mRay
-
>
position
aPosition
ray
.
mData
)
;
const
CSSCoord
pathLength
=
ComputeRayPathLength
(
ray
.
mRay
-
>
size
ray
.
mRay
-
>
angle
origin
ray
.
mData
.
mContainingBlockRect
)
;
const
CSSCoord
usedDistance
=
ComputeRayUsedDistance
(
*
ray
.
mRay
aDistance
pathLength
ray
.
mData
.
mBorderBoxSize
)
;
directionAngle
=
StyleAngle
{
ray
.
mRay
-
>
angle
.
ToDegrees
(
)
-
90
.
0f
}
.
ToRadians
(
)
;
const
gfx
:
:
Point
vectorToOrigin
=
(
origin
-
ray
.
mData
.
mInitialPosition
)
.
ToUnknownPoint
(
)
;
point
=
vectorToOrigin
+
gfx
:
:
Point
(
usedDistance
*
static_cast
<
gfx
:
:
Float
>
(
cos
(
directionAngle
)
)
usedDistance
*
static_cast
<
gfx
:
:
Float
>
(
sin
(
directionAngle
)
)
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
offset
-
path
value
"
)
;
return
Nothing
(
)
;
}
gfx
:
:
Float
angle
=
static_cast
<
gfx
:
:
Float
>
(
(
aRotate
.
auto_
?
directionAngle
:
0
.
0
)
+
aRotate
.
angle
.
ToRadians
(
)
)
;
CSSPoint
anchorPoint
(
aTransformOrigin
)
;
gfx
:
:
Point
shift
;
if
(
!
aAnchor
.
IsAuto
(
)
)
{
const
auto
&
pos
=
aAnchor
.
AsPosition
(
)
;
anchorPoint
=
nsStyleTransformMatrix
:
:
Convert2DPosition
(
pos
.
horizontal
pos
.
vertical
aRefBox
)
;
shift
=
(
anchorPoint
-
aTransformOrigin
)
.
ToUnknownPoint
(
)
;
}
anchorPoint
+
=
aAnchorPointAdjustment
;
return
Some
(
ResolvedMotionPathData
{
point
-
anchorPoint
.
ToUnknownPoint
(
)
angle
shift
}
)
;
}
static
OffsetPathData
GenerateOffsetPathData
(
const
nsIFrame
*
aFrame
)
{
const
StyleOffsetPath
&
offsetPath
=
aFrame
-
>
StyleDisplay
(
)
-
>
mOffsetPath
;
if
(
offsetPath
.
IsNone
(
)
)
{
return
OffsetPathData
:
:
None
(
)
;
}
if
(
offsetPath
.
IsCoordBox
(
)
)
{
return
OffsetPathData
:
:
None
(
)
;
}
const
auto
&
function
=
offsetPath
.
AsOffsetPath
(
)
.
path
;
if
(
function
-
>
IsRay
(
)
)
{
return
OffsetPathData
:
:
Ray
(
function
-
>
AsRay
(
)
RayReferenceData
(
aFrame
)
)
;
}
MOZ_ASSERT
(
function
-
>
IsShape
(
)
)
;
const
StyleBasicShape
&
shape
=
function
-
>
AsShape
(
)
;
if
(
shape
.
IsPath
(
)
)
{
const
StyleSVGPathData
&
pathData
=
shape
.
AsPath
(
)
.
path
;
RefPtr
<
gfx
:
:
Path
>
gfxPath
=
aFrame
-
>
GetProperty
(
nsIFrame
:
:
OffsetPathCache
(
)
)
;
MOZ_ASSERT
(
gfxPath
|
|
pathData
.
_0
.
IsEmpty
(
)
"
Should
have
a
valid
cached
gfx
:
:
Path
or
an
empty
path
string
"
)
;
return
OffsetPathData
:
:
Path
(
pathData
gfxPath
.
forget
(
)
)
;
}
return
OffsetPathData
:
:
None
(
)
;
}
Maybe
<
ResolvedMotionPathData
>
MotionPathUtils
:
:
ResolveMotionPath
(
const
nsIFrame
*
aFrame
TransformReferenceBox
&
aRefBox
)
{
MOZ_ASSERT
(
aFrame
)
;
const
nsStyleDisplay
*
display
=
aFrame
-
>
StyleDisplay
(
)
;
CSSPoint
transformOrigin
=
nsStyleTransformMatrix
:
:
Convert2DPosition
(
display
-
>
mTransformOrigin
.
horizontal
display
-
>
mTransformOrigin
.
vertical
aRefBox
)
;
return
ResolveMotionPath
(
GenerateOffsetPathData
(
aFrame
)
display
-
>
mOffsetDistance
display
-
>
mOffsetRotate
display
-
>
mOffsetAnchor
display
-
>
mOffsetPosition
transformOrigin
aRefBox
ComputeAnchorPointAdjustment
(
*
aFrame
)
)
;
}
static
OffsetPathData
GenerateOffsetPathData
(
const
StyleOffsetPath
&
aOffsetPath
const
RayReferenceData
&
aRayReferenceData
gfx
:
:
Path
*
aCachedMotionPath
)
{
if
(
aOffsetPath
.
IsNone
(
)
)
{
return
OffsetPathData
:
:
None
(
)
;
}
if
(
aOffsetPath
.
IsCoordBox
(
)
)
{
return
OffsetPathData
:
:
None
(
)
;
}
const
auto
&
function
=
aOffsetPath
.
AsOffsetPath
(
)
.
path
;
if
(
function
-
>
IsRay
(
)
)
{
return
OffsetPathData
:
:
Ray
(
function
-
>
AsRay
(
)
aRayReferenceData
)
;
}
MOZ_ASSERT
(
function
-
>
IsShape
(
)
)
;
const
StyleBasicShape
&
shape
=
function
-
>
AsShape
(
)
;
if
(
shape
.
IsPath
(
)
)
{
const
StyleSVGPathData
&
pathData
=
shape
.
AsPath
(
)
.
path
;
RefPtr
<
gfx
:
:
Path
>
path
=
aCachedMotionPath
;
if
(
!
path
)
{
RefPtr
<
gfx
:
:
PathBuilder
>
builder
=
MotionPathUtils
:
:
GetCompositorPathBuilder
(
)
;
path
=
MotionPathUtils
:
:
BuildPath
(
pathData
builder
)
;
}
return
OffsetPathData
:
:
Path
(
pathData
path
.
forget
(
)
)
;
}
return
OffsetPathData
:
:
None
(
)
;
}
Maybe
<
ResolvedMotionPathData
>
MotionPathUtils
:
:
ResolveMotionPath
(
const
StyleOffsetPath
*
aPath
const
StyleLengthPercentage
*
aDistance
const
StyleOffsetRotate
*
aRotate
const
StylePositionOrAuto
*
aAnchor
const
StyleOffsetPosition
*
aPosition
const
Maybe
<
layers
:
:
MotionPathData
>
&
aMotionPathData
TransformReferenceBox
&
aRefBox
gfx
:
:
Path
*
aCachedMotionPath
)
{
if
(
!
aPath
)
{
return
Nothing
(
)
;
}
MOZ_ASSERT
(
aMotionPathData
)
;
auto
zeroOffsetDistance
=
LengthPercentage
:
:
Zero
(
)
;
auto
autoOffsetRotate
=
StyleOffsetRotate
{
true
StyleAngle
:
:
Zero
(
)
}
;
auto
autoOffsetAnchor
=
StylePositionOrAuto
:
:
Auto
(
)
;
auto
autoOffsetPosition
=
StyleOffsetPosition
:
:
Auto
(
)
;
return
ResolveMotionPath
(
GenerateOffsetPathData
(
*
aPath
aMotionPathData
-
>
rayReferenceData
(
)
aCachedMotionPath
)
aDistance
?
*
aDistance
:
zeroOffsetDistance
aRotate
?
*
aRotate
:
autoOffsetRotate
aAnchor
?
*
aAnchor
:
autoOffsetAnchor
aPosition
?
*
aPosition
:
autoOffsetPosition
aMotionPathData
-
>
origin
(
)
aRefBox
aMotionPathData
-
>
anchorAdjustment
(
)
)
;
}
already_AddRefed
<
gfx
:
:
Path
>
MotionPathUtils
:
:
BuildPath
(
const
StyleSVGPathData
&
aPath
gfx
:
:
PathBuilder
*
aPathBuilder
)
{
if
(
!
aPathBuilder
)
{
return
nullptr
;
}
const
Span
<
const
StylePathCommand
>
&
path
=
aPath
.
_0
.
AsSpan
(
)
;
return
SVGPathData
:
:
BuildPath
(
path
aPathBuilder
StyleStrokeLinecap
:
:
Butt
0
.
0
)
;
}
already_AddRefed
<
gfx
:
:
PathBuilder
>
MotionPathUtils
:
:
GetCompositorPathBuilder
(
)
{
RefPtr
<
gfx
:
:
PathBuilder
>
builder
=
gfxPlatform
:
:
Initialized
(
)
?
gfxPlatform
:
:
GetPlatform
(
)
-
>
ScreenReferenceDrawTarget
(
)
-
>
CreatePathBuilder
(
gfx
:
:
FillRule
:
:
FILL_WINDING
)
:
gfx
:
:
Factory
:
:
CreateSimplePathBuilder
(
)
;
return
builder
.
forget
(
)
;
}
}
