#
include
"
mozilla
/
MotionPathUtils
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
mozilla
/
dom
/
SVGPathData
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
Matrix
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsStyleTransformMatrix
.
h
"
#
include
"
Units
.
h
"
#
include
<
math
.
h
>
namespace
mozilla
{
static
CSSCoord
ComputeSides
(
const
CSSPoint
&
aInitialPosition
const
CSSSize
&
aContainerSize
const
StyleAngle
&
aAngle
)
{
double
theta
=
aAngle
.
ToRadians
(
)
;
double
sint
=
std
:
:
sin
(
theta
)
;
double
cost
=
std
:
:
cos
(
theta
)
;
double
b
=
cost
>
=
0
?
aInitialPosition
.
y
:
aContainerSize
.
height
-
aInitialPosition
.
y
;
double
bPrime
=
sint
>
=
0
?
aContainerSize
.
width
-
aInitialPosition
.
x
:
aInitialPosition
.
x
;
sint
=
std
:
:
fabs
(
sint
)
;
cost
=
std
:
:
fabs
(
cost
)
;
if
(
b
*
sint
>
bPrime
*
cost
)
{
return
bPrime
/
sint
;
}
return
b
/
cost
;
}
static
CSSCoord
ComputeRayPathLength
(
const
nsIFrame
*
aFrame
const
StyleRaySize
aRaySizeType
const
StyleAngle
&
aAngle
)
{
const
nsIFrame
*
container
=
aFrame
-
>
GetContainingBlock
(
)
;
if
(
!
container
)
{
return
0
.
0
;
}
const
CSSPoint
initialPos
=
CSSPixel
:
:
FromAppUnits
(
aFrame
-
>
GetOffsetTo
(
container
)
)
;
const
CSSRect
containerRect
=
CSSPixel
:
:
FromAppUnits
(
container
-
>
GetRectRelativeToSelf
(
)
)
;
if
(
aRaySizeType
=
=
StyleRaySize
:
:
Sides
)
{
if
(
!
containerRect
.
Contains
(
initialPos
)
)
{
return
0
.
0
;
}
return
ComputeSides
(
initialPos
containerRect
.
Size
(
)
aAngle
)
;
}
CSSCoord
left
=
std
:
:
abs
(
initialPos
.
x
)
;
CSSCoord
right
=
std
:
:
abs
(
containerRect
.
width
-
initialPos
.
x
)
;
CSSCoord
top
=
std
:
:
abs
(
initialPos
.
y
)
;
CSSCoord
bottom
=
std
:
:
abs
(
containerRect
.
height
-
initialPos
.
y
)
;
switch
(
aRaySizeType
)
{
case
StyleRaySize
:
:
ClosestSide
:
return
std
:
:
min
(
{
left
right
top
bottom
}
)
;
case
StyleRaySize
:
:
FarthestSide
:
return
std
:
:
max
(
{
left
right
top
bottom
}
)
;
case
StyleRaySize
:
:
ClosestCorner
:
case
StyleRaySize
:
:
FarthestCorner
:
{
CSSCoord
h
=
0
;
CSSCoord
v
=
0
;
if
(
aRaySizeType
=
=
StyleRaySize
:
:
ClosestCorner
)
{
h
=
std
:
:
min
(
left
right
)
;
v
=
std
:
:
min
(
top
bottom
)
;
}
else
{
h
=
std
:
:
max
(
left
right
)
;
v
=
std
:
:
max
(
top
bottom
)
;
}
return
sqrt
(
h
.
value
*
h
.
value
+
v
.
value
*
v
.
value
)
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
ray
size
"
)
;
}
return
0
.
0
;
}
static
void
ApplyRotationAndMoveRayToXAxis
(
const
StyleOffsetRotate
&
aOffsetRotate
const
StyleAngle
&
aRayAngle
AutoTArray
<
gfx
:
:
Point
4
>
&
aVertices
)
{
const
StyleAngle
directionAngle
=
aRayAngle
-
StyleAngle
{
90
.
0f
}
;
const
StyleAngle
rotateAngle
=
(
aOffsetRotate
.
auto_
?
directionAngle
:
StyleAngle
{
0
.
0f
}
)
+
aOffsetRotate
.
angle
;
const
StyleAngle
rayToXAxis
=
StyleAngle
{
90
.
0
}
-
aRayAngle
;
gfx
:
:
Matrix
m
;
m
.
PreRotate
(
(
rotateAngle
+
rayToXAxis
)
.
ToRadians
(
)
)
;
for
(
gfx
:
:
Point
&
p
:
aVertices
)
{
p
=
m
.
TransformPoint
(
p
)
;
}
}
class
RayPointComparator
{
public
:
bool
Equals
(
const
gfx
:
:
Point
&
a
const
gfx
:
:
Point
&
b
)
const
{
return
std
:
:
fabs
(
a
.
y
)
=
=
std
:
:
fabs
(
b
.
y
)
;
}
bool
LessThan
(
const
gfx
:
:
Point
&
a
const
gfx
:
:
Point
&
b
)
const
{
return
std
:
:
fabs
(
a
.
y
)
>
std
:
:
fabs
(
b
.
y
)
;
}
}
;
static
CSSCoord
ComputeRayUsedDistance
(
const
nsStyleDisplay
*
aDisplay
const
nsSize
&
aSize
const
CSSCoord
&
aPathLength
)
{
MOZ_ASSERT
(
aDisplay
-
>
mOffsetPath
.
IsRay
(
)
)
;
CSSCoord
usedDistance
=
aDisplay
-
>
mOffsetDistance
.
ResolveToCSSPixels
(
aPathLength
)
;
if
(
!
aDisplay
-
>
mOffsetPath
.
AsRay
(
)
.
contain
)
{
return
usedDistance
;
}
const
StylePositionOrAuto
&
anchor
=
aDisplay
-
>
mOffsetAnchor
;
const
StyleTransformOrigin
&
origin
=
aDisplay
-
>
mTransformOrigin
;
const
StyleLengthPercentage
&
anchorX
=
anchor
.
IsAuto
(
)
?
origin
.
horizontal
:
anchor
.
AsPosition
(
)
.
horizontal
;
const
StyleLengthPercentage
&
anchorY
=
anchor
.
IsAuto
(
)
?
origin
.
vertical
:
anchor
.
AsPosition
(
)
.
vertical
;
const
CSSCoord
width
=
CSSPixel
:
:
FromAppUnits
(
aSize
.
width
)
;
const
CSSCoord
height
=
CSSPixel
:
:
FromAppUnits
(
aSize
.
height
)
;
const
CSSPoint
usedAnchor
=
{
anchorX
.
ResolveToCSSPixels
(
width
)
anchorY
.
ResolveToCSSPixels
(
height
)
}
;
AutoTArray
<
gfx
:
:
Point
4
>
vertices
=
{
{
-
usedAnchor
.
x
-
usedAnchor
.
y
}
{
width
-
usedAnchor
.
x
-
usedAnchor
.
y
}
{
width
-
usedAnchor
.
x
height
-
usedAnchor
.
y
}
{
-
usedAnchor
.
x
height
-
usedAnchor
.
y
}
}
;
ApplyRotationAndMoveRayToXAxis
(
aDisplay
-
>
mOffsetRotate
aDisplay
-
>
mOffsetPath
.
AsRay
(
)
.
angle
vertices
)
;
float
upperMin
=
std
:
:
numeric_limits
<
float
>
:
:
max
(
)
;
float
lowerMax
=
std
:
:
numeric_limits
<
float
>
:
:
min
(
)
;
bool
shouldIncreasePathLength
=
false
;
for
(
const
gfx
:
:
Point
&
p
:
vertices
)
{
float
d
=
aPathLength
.
value
*
aPathLength
.
value
-
p
.
y
*
p
.
y
;
if
(
d
<
0
)
{
shouldIncreasePathLength
=
true
;
break
;
}
float
sqrtD
=
sqrt
(
d
)
;
upperMin
=
std
:
:
min
(
upperMin
-
p
.
x
+
sqrtD
)
;
lowerMax
=
std
:
:
max
(
lowerMax
-
p
.
x
-
sqrtD
)
;
}
if
(
!
shouldIncreasePathLength
)
{
return
std
:
:
max
(
lowerMax
std
:
:
min
(
upperMin
(
float
)
usedDistance
)
)
;
}
vertices
.
Sort
(
RayPointComparator
(
)
)
;
double
radius
=
std
:
:
fabs
(
vertices
[
0
]
.
y
)
;
usedDistance
=
-
vertices
[
0
]
.
x
;
const
double
epsilon
=
1e
-
5
;
for
(
size_t
i
=
0
;
i
<
3
;
+
+
i
)
{
for
(
size_t
j
=
i
+
1
;
j
<
4
;
+
+
j
)
{
double
xi
=
vertices
[
i
]
.
x
;
double
yi
=
vertices
[
i
]
.
y
;
double
xj
=
vertices
[
j
]
.
x
;
double
yj
=
vertices
[
j
]
.
y
;
double
dx
=
xi
-
xj
;
if
(
dx
*
dx
+
yj
*
yj
<
=
yi
*
yi
+
epsilon
)
{
continue
;
}
double
newUsedDistance
=
(
xj
*
xj
+
yj
*
yj
-
xi
*
xi
-
yi
*
yi
)
/
dx
/
2
.
0
;
xi
+
=
newUsedDistance
;
double
newRadius
=
sqrt
(
xi
*
xi
+
yi
*
yi
)
;
if
(
newRadius
>
radius
)
{
radius
=
newRadius
;
usedDistance
=
(
float
)
newUsedDistance
;
}
}
}
return
usedDistance
;
}
Maybe
<
MotionPathData
>
MotionPathUtils
:
:
ResolveMotionPath
(
const
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
aFrame
)
;
const
nsStyleDisplay
*
display
=
aFrame
-
>
StyleDisplay
(
)
;
if
(
display
-
>
mOffsetPath
.
IsNone
(
)
)
{
return
Nothing
(
)
;
}
double
directionAngle
=
0
.
0
;
gfx
:
:
Point
point
;
if
(
display
-
>
mOffsetPath
.
IsPath
(
)
)
{
const
Span
<
const
StylePathCommand
>
&
path
=
display
-
>
mOffsetPath
.
AsPath
(
)
.
_0
.
AsSpan
(
)
;
RefPtr
<
gfx
:
:
DrawTarget
>
drawTarget
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
ScreenReferenceDrawTarget
(
)
;
RefPtr
<
gfx
:
:
PathBuilder
>
builder
=
drawTarget
-
>
CreatePathBuilder
(
gfx
:
:
FillRule
:
:
FILL_WINDING
)
;
RefPtr
<
gfx
:
:
Path
>
gfxPath
=
SVGPathData
:
:
BuildPath
(
path
builder
NS_STYLE_STROKE_LINECAP_BUTT
0
.
0
)
;
if
(
!
gfxPath
)
{
return
Nothing
(
)
;
}
gfx
:
:
Float
pathLength
=
gfxPath
-
>
ComputeLength
(
)
;
gfx
:
:
Float
usedDistance
=
display
-
>
mOffsetDistance
.
ResolveToCSSPixels
(
CSSCoord
(
pathLength
)
)
;
if
(
!
path
.
empty
(
)
&
&
path
.
rbegin
(
)
-
>
IsClosePath
(
)
)
{
usedDistance
=
pathLength
>
0
.
0
?
fmod
(
usedDistance
pathLength
)
:
0
.
0
;
if
(
usedDistance
<
0
.
0
)
{
usedDistance
+
=
pathLength
;
}
}
else
{
usedDistance
=
clamped
(
usedDistance
0
.
0f
pathLength
)
;
}
gfx
:
:
Point
tangent
;
point
=
gfxPath
-
>
ComputePointAtLength
(
usedDistance
&
tangent
)
;
directionAngle
=
(
double
)
atan2
(
tangent
.
y
tangent
.
x
)
;
}
else
if
(
display
-
>
mOffsetPath
.
IsRay
(
)
)
{
const
auto
&
ray
=
display
-
>
mOffsetPath
.
AsRay
(
)
;
CSSCoord
pathLength
=
ComputeRayPathLength
(
aFrame
ray
.
size
ray
.
angle
)
;
CSSCoord
usedDistance
=
ComputeRayUsedDistance
(
display
aFrame
-
>
GetSize
(
)
pathLength
)
;
directionAngle
=
StyleAngle
{
ray
.
angle
.
ToDegrees
(
)
-
90
.
0f
}
.
ToRadians
(
)
;
point
.
x
=
usedDistance
*
cos
(
directionAngle
)
;
point
.
y
=
usedDistance
*
sin
(
directionAngle
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unsupported
offset
-
path
value
"
)
;
return
Nothing
(
)
;
}
const
StyleOffsetRotate
&
rotate
=
display
-
>
mOffsetRotate
;
gfx
:
:
Float
angle
=
static_cast
<
gfx
:
:
Float
>
(
(
rotate
.
auto_
?
directionAngle
:
0
.
0
)
+
rotate
.
angle
.
ToRadians
(
)
)
;
nsStyleTransformMatrix
:
:
TransformReferenceBox
refBox
(
aFrame
)
;
const
auto
&
transformOrigin
=
display
-
>
mTransformOrigin
;
const
CSSPoint
origin
=
nsStyleTransformMatrix
:
:
Convert2DPosition
(
transformOrigin
.
horizontal
transformOrigin
.
vertical
refBox
)
;
CSSPoint
anchorPoint
(
origin
)
;
gfx
:
:
Point
shift
;
if
(
!
display
-
>
mOffsetAnchor
.
IsAuto
(
)
)
{
const
auto
&
pos
=
display
-
>
mOffsetAnchor
.
AsPosition
(
)
;
anchorPoint
=
nsStyleTransformMatrix
:
:
Convert2DPosition
(
pos
.
horizontal
pos
.
vertical
refBox
)
;
shift
=
(
anchorPoint
-
origin
)
.
ToUnknownPoint
(
)
;
}
if
(
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_SVG_LAYOUT
)
&
&
display
-
>
mTransformBox
!
=
StyleGeometryBox
:
:
ViewBox
&
&
display
-
>
mTransformBox
!
=
StyleGeometryBox
:
:
BorderBox
)
{
anchorPoint
.
x
+
=
CSSPixel
:
:
FromAppUnits
(
aFrame
-
>
GetPosition
(
)
.
x
)
;
anchorPoint
.
y
+
=
CSSPixel
:
:
FromAppUnits
(
aFrame
-
>
GetPosition
(
)
.
y
)
;
}
return
Some
(
MotionPathData
{
point
-
anchorPoint
.
ToUnknownPoint
(
)
angle
shift
}
)
;
}
}
