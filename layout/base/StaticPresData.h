#
ifndef
mozilla_StaticPresData_h
#
define
mozilla_StaticPresData_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFont
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsLanguageAtomService
.
h
"
namespace
mozilla
{
struct
LangGroupFontPrefs
{
LangGroupFontPrefs
(
)
:
mLangGroup
(
nullptr
)
mMinimumFontSize
(
0
)
mDefaultVariableFont
(
)
mDefaultFixedFont
(
mozilla
:
:
eFamily_monospace
0
)
mDefaultSerifFont
(
mozilla
:
:
eFamily_serif
0
)
mDefaultSansSerifFont
(
mozilla
:
:
eFamily_sans_serif
0
)
mDefaultMonospaceFont
(
mozilla
:
:
eFamily_monospace
0
)
mDefaultCursiveFont
(
mozilla
:
:
eFamily_cursive
0
)
mDefaultFantasyFont
(
mozilla
:
:
eFamily_fantasy
0
)
{
mDefaultVariableFont
.
fontlist
.
SetDefaultFontType
(
mozilla
:
:
eFamily_serif
)
;
}
void
Reset
(
)
{
mNext
=
nullptr
;
mLangGroup
=
nullptr
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
LangGroupFontPrefs
*
curr
=
mNext
.
get
(
)
;
while
(
curr
)
{
n
+
=
aMallocSizeOf
(
curr
)
;
curr
=
curr
-
>
mNext
.
get
(
)
;
}
return
n
;
}
void
Initialize
(
nsStaticAtom
*
aLangGroupAtom
)
;
const
nsFont
*
GetDefaultFont
(
uint8_t
aFontID
)
const
{
switch
(
aFontID
)
{
case
kGenericFont_moz_variable
:
return
&
mDefaultVariableFont
;
case
kGenericFont_moz_fixed
:
return
&
mDefaultFixedFont
;
case
kGenericFont_serif
:
return
&
mDefaultSerifFont
;
case
kGenericFont_sans_serif
:
return
&
mDefaultSansSerifFont
;
case
kGenericFont_monospace
:
return
&
mDefaultMonospaceFont
;
case
kGenericFont_cursive
:
return
&
mDefaultCursiveFont
;
case
kGenericFont_fantasy
:
return
&
mDefaultFantasyFont
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
invalid
font
id
"
)
;
return
nullptr
;
}
}
nsStaticAtom
*
mLangGroup
;
nscoord
mMinimumFontSize
;
nsFont
mDefaultVariableFont
;
nsFont
mDefaultFixedFont
;
nsFont
mDefaultSerifFont
;
nsFont
mDefaultSansSerifFont
;
nsFont
mDefaultMonospaceFont
;
nsFont
mDefaultCursiveFont
;
nsFont
mDefaultFantasyFont
;
mozilla
:
:
UniquePtr
<
LangGroupFontPrefs
>
mNext
;
}
;
class
StaticPresData
{
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
StaticPresData
*
Get
(
)
;
nsStaticAtom
*
GetLangGroup
(
nsAtom
*
aLanguage
bool
*
aNeedsToCache
=
nullptr
)
const
;
nsStaticAtom
*
GetUncachedLangGroup
(
nsAtom
*
aLanguage
)
const
;
const
LangGroupFontPrefs
*
GetFontPrefsForLang
(
nsAtom
*
aLanguage
bool
*
aNeedsToCache
=
nullptr
)
;
const
nsFont
*
GetDefaultFont
(
uint8_t
aFontID
nsAtom
*
aLanguage
const
LangGroupFontPrefs
*
aPrefs
)
const
;
void
InvalidateFontPrefs
(
)
{
mLangGroupFontPrefs
.
Reset
(
)
;
}
private
:
StaticPresData
(
)
;
~
StaticPresData
(
)
=
default
;
nsLanguageAtomService
*
mLangService
;
LangGroupFontPrefs
mLangGroupFontPrefs
;
}
;
}
#
endif
