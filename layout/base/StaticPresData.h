#
ifndef
mozilla_StaticPresData_h
#
define
mozilla_StaticPresData_h
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFont
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsLanguageAtomService
.
h
"
namespace
mozilla
{
struct
LangGroupFontPrefs
{
LangGroupFontPrefs
(
)
:
mLangGroup
(
nullptr
)
mMinimumFontSize
(
0
)
mDefaultVariableFont
(
)
mDefaultFixedFont
(
mozilla
:
:
eFamily_monospace
0
)
mDefaultSerifFont
(
mozilla
:
:
eFamily_serif
0
)
mDefaultSansSerifFont
(
mozilla
:
:
eFamily_sans_serif
0
)
mDefaultMonospaceFont
(
mozilla
:
:
eFamily_monospace
0
)
mDefaultCursiveFont
(
mozilla
:
:
eFamily_cursive
0
)
mDefaultFantasyFont
(
mozilla
:
:
eFamily_fantasy
0
)
{
mDefaultVariableFont
.
fontlist
.
SetDefaultFontType
(
mozilla
:
:
eFamily_serif
)
;
}
void
Reset
(
)
{
mNext
=
nullptr
;
mLangGroup
=
nullptr
;
}
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
LangGroupFontPrefs
*
curr
=
mNext
.
get
(
)
;
while
(
curr
)
{
n
+
=
aMallocSizeOf
(
curr
)
;
curr
=
curr
-
>
mNext
.
get
(
)
;
}
return
n
;
}
void
Initialize
(
nsAtom
*
aLangGroupAtom
)
;
RefPtr
<
nsAtom
>
mLangGroup
;
nscoord
mMinimumFontSize
;
nsFont
mDefaultVariableFont
;
nsFont
mDefaultFixedFont
;
nsFont
mDefaultSerifFont
;
nsFont
mDefaultSansSerifFont
;
nsFont
mDefaultMonospaceFont
;
nsFont
mDefaultCursiveFont
;
nsFont
mDefaultFantasyFont
;
mozilla
:
:
UniquePtr
<
LangGroupFontPrefs
>
mNext
;
}
;
class
StaticPresData
{
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
StaticPresData
*
Get
(
)
;
nsAtom
*
GetLangGroup
(
nsAtom
*
aLanguage
bool
*
aNeedsToCache
=
nullptr
)
const
;
already_AddRefed
<
nsAtom
>
GetUncachedLangGroup
(
nsAtom
*
aLanguage
)
const
;
const
LangGroupFontPrefs
*
GetFontPrefsForLangHelper
(
nsAtom
*
aLanguage
const
LangGroupFontPrefs
*
aPrefs
bool
*
aNeedsToCache
=
nullptr
)
const
;
const
nsFont
*
GetDefaultFontHelper
(
uint8_t
aFontID
nsAtom
*
aLanguage
const
LangGroupFontPrefs
*
aPrefs
)
const
;
const
nsFont
*
GetDefaultFont
(
uint8_t
aFontID
nsAtom
*
aLanguage
)
const
{
MOZ_ASSERT
(
aLanguage
)
;
return
GetDefaultFontHelper
(
aFontID
aLanguage
GetFontPrefsForLang
(
aLanguage
)
)
;
}
const
LangGroupFontPrefs
*
GetFontPrefsForLang
(
nsAtom
*
aLanguage
bool
*
aNeedsToCache
=
nullptr
)
const
{
MOZ_ASSERT
(
aLanguage
)
;
return
GetFontPrefsForLangHelper
(
aLanguage
&
mStaticLangGroupFontPrefs
aNeedsToCache
)
;
}
void
ResetCachedFontPrefs
(
)
{
mStaticLangGroupFontPrefs
.
Reset
(
)
;
}
private
:
StaticPresData
(
)
;
~
StaticPresData
(
)
{
}
nsLanguageAtomService
*
mLangService
;
LangGroupFontPrefs
mStaticLangGroupFontPrefs
;
}
;
}
#
endif
