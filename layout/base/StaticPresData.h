#
ifndef
mozilla_StaticPresData_h
#
define
mozilla_StaticPresData_h
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsFont
.
h
"
#
include
"
nsLanguageAtomService
.
h
"
namespace
mozilla
{
struct
LangGroupFontPrefs
{
LangGroupFontPrefs
(
)
:
mLangGroup
(
nullptr
)
mMinimumFontSize
(
{
0
}
)
mDefaultVariableFont
(
StyleGenericFontFamily
:
:
Serif
{
0
}
)
mDefaultSerifFont
(
StyleGenericFontFamily
:
:
Serif
{
0
}
)
mDefaultSansSerifFont
(
StyleGenericFontFamily
:
:
SansSerif
{
0
}
)
mDefaultMonospaceFont
(
StyleGenericFontFamily
:
:
Monospace
{
0
}
)
mDefaultCursiveFont
(
StyleGenericFontFamily
:
:
Cursive
{
0
}
)
mDefaultFantasyFont
(
StyleGenericFontFamily
:
:
Fantasy
{
0
}
)
mDefaultSystemUiFont
(
StyleGenericFontFamily
:
:
SystemUi
{
0
}
)
{
}
StyleGenericFontFamily
GetDefaultGeneric
(
)
const
{
return
mDefaultVariableFont
.
family
.
families
.
list
.
AsSpan
(
)
[
0
]
.
AsGeneric
(
)
;
}
void
Reset
(
)
{
mNext
=
nullptr
;
mLangGroup
=
nullptr
;
}
void
Initialize
(
nsStaticAtom
*
aLangGroupAtom
)
;
const
nsFont
*
GetDefaultFont
(
StyleGenericFontFamily
aFamily
)
const
{
switch
(
aFamily
)
{
case
StyleGenericFontFamily
:
:
None
:
return
&
mDefaultVariableFont
;
case
StyleGenericFontFamily
:
:
Serif
:
return
&
mDefaultSerifFont
;
case
StyleGenericFontFamily
:
:
SansSerif
:
return
&
mDefaultSansSerifFont
;
case
StyleGenericFontFamily
:
:
Monospace
:
return
&
mDefaultMonospaceFont
;
case
StyleGenericFontFamily
:
:
Cursive
:
return
&
mDefaultCursiveFont
;
case
StyleGenericFontFamily
:
:
Fantasy
:
return
&
mDefaultFantasyFont
;
case
StyleGenericFontFamily
:
:
SystemUi
:
return
&
mDefaultSystemUiFont
;
case
StyleGenericFontFamily
:
:
MozEmoji
:
break
;
}
MOZ_ASSERT_UNREACHABLE
(
"
invalid
font
id
"
)
;
return
nullptr
;
}
nsStaticAtom
*
mLangGroup
;
Length
mMinimumFontSize
;
nsFont
mDefaultVariableFont
;
nsFont
mDefaultSerifFont
;
nsFont
mDefaultSansSerifFont
;
nsFont
mDefaultMonospaceFont
;
nsFont
mDefaultCursiveFont
;
nsFont
mDefaultFantasyFont
;
nsFont
mDefaultSystemUiFont
;
UniquePtr
<
LangGroupFontPrefs
>
mNext
;
}
;
class
StaticPresData
{
public
:
static
void
Init
(
)
;
static
void
Shutdown
(
)
;
static
StaticPresData
*
Get
(
)
;
nsStaticAtom
*
GetLangGroup
(
nsAtom
*
aLanguage
)
const
;
const
LangGroupFontPrefs
*
GetFontPrefsForLang
(
nsAtom
*
aLanguage
bool
*
aNeedsToCache
=
nullptr
)
;
const
nsFont
*
GetDefaultFont
(
uint8_t
aFontID
nsAtom
*
aLanguage
const
LangGroupFontPrefs
*
aPrefs
)
const
;
void
InvalidateFontPrefs
(
)
{
mLangGroupFontPrefs
.
Reset
(
)
;
}
private
:
StaticPresData
(
)
;
~
StaticPresData
(
)
=
default
;
friend
class
StaticAutoPtr
<
StaticPresData
>
;
nsLanguageAtomService
*
mLangService
;
LangGroupFontPrefs
mLangGroupFontPrefs
;
}
;
}
#
endif
