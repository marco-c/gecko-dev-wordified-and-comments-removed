#
ifndef
mozilla_ArenaRefPtrInlines_h
#
define
mozilla_ArenaRefPtrInlines_h
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
template
<
typename
T
>
void
ArenaRefPtr
<
T
>
:
:
AssertValidType
(
)
{
#
ifdef
DEBUG
bool
ok
=
#
define
PRES_ARENA_OBJECT_WITH_ARENAREFPTR_SUPPORT
(
name_
)
\
T
:
:
ArenaObjectID
(
)
=
=
eArenaObjectID_
#
#
name_
|
|
#
include
"
nsPresArenaObjectList
.
h
"
#
undef
PRES_ARENA_OBJECT_WITH_ARENAREFPTR_SUPPORT
false
;
MOZ_ASSERT
(
ok
"
ArenaRefPtr
<
T
>
template
parameter
T
must
be
declared
in
"
"
nsPresArenaObjectList
with
"
"
PRES_ARENA_OBJECT_WITH_ARENAREFPTR_SUPPORT
"
)
;
#
endif
}
template
<
>
struct
ArenaRefPtrTraits
<
nsStyleContext
>
{
static
bool
UsesArena
(
nsStyleContext
*
aPtr
)
{
MOZ_ASSERT
(
aPtr
)
;
return
aPtr
-
>
IsGecko
(
)
;
}
}
;
}
template
<
typename
T
>
void
nsPresArena
:
:
RegisterArenaRefPtr
(
mozilla
:
:
ArenaRefPtr
<
T
>
*
aPtr
)
{
MOZ_ASSERT
(
!
mArenaRefPtrs
.
Contains
(
aPtr
)
)
;
mArenaRefPtrs
.
Put
(
aPtr
T
:
:
ArenaObjectID
(
)
)
;
}
#
endif
