#
include
"
nsQuoteList
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
Text
.
h
"
using
namespace
mozilla
;
bool
nsQuoteNode
:
:
InitTextFrame
(
nsGenConList
*
aList
nsIFrame
*
aPseudoFrame
nsIFrame
*
aTextFrame
)
{
nsGenConNode
:
:
InitTextFrame
(
aList
aPseudoFrame
aTextFrame
)
;
nsQuoteList
*
quoteList
=
static_cast
<
nsQuoteList
*
>
(
aList
)
;
bool
dirty
=
false
;
quoteList
-
>
Insert
(
this
)
;
if
(
quoteList
-
>
IsLast
(
this
)
)
quoteList
-
>
Calc
(
this
)
;
else
dirty
=
true
;
if
(
IsRealQuote
(
)
)
{
aTextFrame
-
>
GetContent
(
)
-
>
AsText
(
)
-
>
SetText
(
Text
(
)
false
)
;
}
return
dirty
;
}
nsString
nsQuoteNode
:
:
Text
(
)
{
NS_ASSERTION
(
mType
=
=
StyleContentType
:
:
OpenQuote
|
|
mType
=
=
StyleContentType
:
:
CloseQuote
"
should
only
be
called
when
mText
should
be
non
-
null
"
)
;
nsString
result
;
int32_t
depth
=
Depth
(
)
;
MOZ_ASSERT
(
depth
>
=
-
1
)
;
Span
<
const
StyleQuotePair
>
quotes
=
mPseudoFrame
-
>
StyleList
(
)
-
>
mQuotes
.
_0
.
AsSpan
(
)
;
if
(
depth
>
=
static_cast
<
int32_t
>
(
quotes
.
Length
(
)
)
)
{
depth
=
static_cast
<
int32_t
>
(
quotes
.
Length
(
)
)
-
1
;
}
if
(
depth
=
=
-
1
)
{
return
result
;
}
const
StyleQuotePair
&
pair
=
quotes
[
depth
]
;
const
StyleOwnedStr
&
quote
=
mType
=
=
StyleContentType
:
:
OpenQuote
?
pair
.
opening
:
pair
.
closing
;
result
.
Assign
(
NS_ConvertUTF8toUTF16
(
quote
.
AsString
(
)
)
)
;
return
result
;
}
void
nsQuoteList
:
:
Calc
(
nsQuoteNode
*
aNode
)
{
if
(
aNode
=
=
FirstNode
(
)
)
{
aNode
-
>
mDepthBefore
=
0
;
}
else
{
aNode
-
>
mDepthBefore
=
Prev
(
aNode
)
-
>
DepthAfter
(
)
;
}
}
void
nsQuoteList
:
:
RecalcAll
(
)
{
for
(
nsQuoteNode
*
node
=
FirstNode
(
)
;
node
;
node
=
Next
(
node
)
)
{
int32_t
oldDepth
=
node
-
>
mDepthBefore
;
Calc
(
node
)
;
if
(
node
-
>
mDepthBefore
!
=
oldDepth
&
&
node
-
>
mText
&
&
node
-
>
IsRealQuote
(
)
)
node
-
>
mText
-
>
SetData
(
node
-
>
Text
(
)
IgnoreErrors
(
)
)
;
}
}
#
ifdef
DEBUG
void
nsQuoteList
:
:
PrintChain
(
)
{
printf
(
"
Chain
:
\
n
"
)
;
for
(
nsQuoteNode
*
node
=
FirstNode
(
)
;
node
;
node
=
Next
(
node
)
)
{
printf
(
"
%
p
%
d
-
"
static_cast
<
void
*
>
(
node
)
node
-
>
mDepthBefore
)
;
switch
(
node
-
>
mType
)
{
case
StyleContentType
:
:
OpenQuote
:
printf
(
"
open
"
)
;
break
;
case
StyleContentType
:
:
NoOpenQuote
:
printf
(
"
noOpen
"
)
;
break
;
case
StyleContentType
:
:
CloseQuote
:
printf
(
"
close
"
)
;
break
;
case
StyleContentType
:
:
NoCloseQuote
:
printf
(
"
noClose
"
)
;
break
;
default
:
printf
(
"
unknown
!
!
!
"
)
;
}
printf
(
"
%
d
-
%
d
"
node
-
>
Depth
(
)
node
-
>
DepthAfter
(
)
)
;
if
(
node
-
>
mText
)
{
nsAutoString
data
;
node
-
>
mText
-
>
GetData
(
data
)
;
printf
(
"
\
"
%
s
\
"
"
NS_ConvertUTF16toUTF8
(
data
)
.
get
(
)
)
;
}
printf
(
"
\
n
"
)
;
}
}
#
endif
