#
ifndef
mozilla_RestyleTracker_h
#
define
mozilla_RestyleTracker_h
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
OverflowChangedTracker
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
mozilla
/
SplayTree
.
h
"
#
include
"
mozilla
/
RestyleLogging
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
namespace
mozilla
{
class
ElementRestyler
;
class
GeckoRestyleManager
;
class
RestyleTracker
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
friend
class
ElementRestyler
;
explicit
RestyleTracker
(
Element
:
:
FlagsType
aRestyleBits
)
:
mRestyleBits
(
aRestyleBits
)
mHaveLaterSiblingRestyles
(
false
)
mHaveSelectors
(
false
)
{
NS_PRECONDITION
(
(
mRestyleBits
&
~
ELEMENT_ALL_RESTYLE_FLAGS
)
=
=
0
"
Why
do
we
have
these
bits
set
?
"
)
;
NS_PRECONDITION
(
(
mRestyleBits
&
ELEMENT_PENDING_RESTYLE_FLAGS
)
!
=
0
"
Must
have
a
restyle
flag
"
)
;
NS_PRECONDITION
(
(
mRestyleBits
&
ELEMENT_PENDING_RESTYLE_FLAGS
)
!
=
ELEMENT_PENDING_RESTYLE_FLAGS
"
Shouldn
'
t
have
both
restyle
flags
set
"
)
;
NS_PRECONDITION
(
(
mRestyleBits
&
ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS
)
!
=
0
"
Must
have
root
flag
"
)
;
NS_PRECONDITION
(
(
mRestyleBits
&
ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS
)
!
=
ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS
"
Shouldn
'
t
have
both
root
flags
"
)
;
}
void
Init
(
GeckoRestyleManager
*
aRestyleManager
)
{
mRestyleManager
=
aRestyleManager
;
}
uint32_t
Count
(
)
const
{
return
mPendingRestyles
.
Count
(
)
;
}
bool
AddPendingRestyle
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
const
RestyleHintData
*
aRestyleHintData
=
nullptr
const
mozilla
:
:
Maybe
<
Element
*
>
&
aRestyleRoot
=
mozilla
:
:
Nothing
(
)
)
;
Element
*
FindClosestRestyleRoot
(
Element
*
aElement
)
;
void
DoProcessRestyles
(
)
;
uint32_t
RestyleBit
(
)
const
{
return
mRestyleBits
&
ELEMENT_PENDING_RESTYLE_FLAGS
;
}
Element
:
:
FlagsType
RootBit
(
)
const
{
return
mRestyleBits
&
ELEMENT_POTENTIAL_RESTYLE_ROOT_FLAGS
;
}
Element
:
:
FlagsType
ConditionalDescendantsBit
(
)
const
{
return
mRestyleBits
&
ELEMENT_IS_CONDITIONAL_RESTYLE_ANCESTOR
;
}
struct
Hints
{
nsRestyleHint
mRestyleHint
;
nsChangeHint
mChangeHint
;
RestyleHintData
mRestyleHintData
;
}
;
struct
RestyleData
:
Hints
{
RestyleData
(
)
{
mRestyleHint
=
nsRestyleHint
(
0
)
;
mChangeHint
=
nsChangeHint
(
0
)
;
}
RestyleData
(
nsRestyleHint
aRestyleHint
nsChangeHint
aChangeHint
const
RestyleHintData
*
aRestyleHintData
)
{
mRestyleHint
=
aRestyleHint
;
mChangeHint
=
aChangeHint
;
if
(
aRestyleHintData
)
{
mRestyleHintData
=
*
aRestyleHintData
;
}
}
nsTArray
<
RefPtr
<
Element
>
>
mDescendants
;
UniqueProfilerBacktrace
mBacktrace
;
}
;
bool
GetRestyleData
(
Element
*
aElement
nsAutoPtr
<
RestyleData
>
&
aData
)
;
bool
HasRestyleData
(
Element
*
aElement
)
{
return
mPendingRestyles
.
Contains
(
aElement
)
;
}
void
AddRestyleRootsIfAwaitingRestyle
(
const
nsTArray
<
RefPtr
<
Element
>
>
&
aElements
)
;
void
ClearSelectors
(
)
;
inline
nsIDocument
*
Document
(
)
const
;
#
ifdef
RESTYLE_LOGGING
inline
bool
ShouldLogRestyle
(
)
;
inline
int32_t
&
LoggingDepth
(
)
;
#
endif
private
:
bool
AddPendingRestyleToTable
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
const
RestyleHintData
*
aRestyleHintData
=
nullptr
)
;
inline
void
ProcessOneRestyle
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aChangeHint
const
RestyleHintData
&
aRestyleHintData
)
;
typedef
nsClassHashtable
<
nsISupportsHashKey
RestyleData
>
PendingRestyleTable
;
typedef
AutoTArray
<
RefPtr
<
Element
>
32
>
RestyleRootArray
;
Element
:
:
FlagsType
mRestyleBits
;
GeckoRestyleManager
*
mRestyleManager
;
PendingRestyleTable
mPendingRestyles
;
RestyleRootArray
mRestyleRoots
;
bool
mHaveLaterSiblingRestyles
;
bool
mHaveSelectors
;
}
;
inline
bool
RestyleTracker
:
:
AddPendingRestyleToTable
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
const
RestyleHintData
*
aRestyleHintData
)
{
RestyleData
*
existingData
;
if
(
aRestyleHintData
&
&
!
aRestyleHintData
-
>
mSelectorsForDescendants
.
IsEmpty
(
)
)
{
mHaveSelectors
=
true
;
}
if
(
aElement
-
>
HasFlag
(
RestyleBit
(
)
)
)
{
mPendingRestyles
.
Get
(
aElement
&
existingData
)
;
}
else
{
aElement
-
>
SetFlags
(
RestyleBit
(
)
)
;
existingData
=
nullptr
;
}
if
(
aRestyleHint
&
eRestyle_SomeDescendants
)
{
NS_ASSERTION
(
ConditionalDescendantsBit
(
)
"
why
are
we
getting
eRestyle_SomeDescendants
in
an
"
"
animation
-
only
restyle
?
"
)
;
aElement
-
>
SetFlags
(
ConditionalDescendantsBit
(
)
)
;
}
if
(
!
existingData
)
{
RestyleData
*
rd
=
new
RestyleData
(
aRestyleHint
aMinChangeHint
aRestyleHintData
)
;
if
(
profiler_feature_active
(
ProfilerFeature
:
:
Restyle
)
)
{
rd
-
>
mBacktrace
=
profiler_get_backtrace
(
)
;
}
mPendingRestyles
.
Put
(
aElement
rd
)
;
return
false
;
}
bool
hadRestyleLaterSiblings
=
(
existingData
-
>
mRestyleHint
&
eRestyle_LaterSiblings
)
!
=
0
;
existingData
-
>
mRestyleHint
=
nsRestyleHint
(
existingData
-
>
mRestyleHint
|
aRestyleHint
)
;
existingData
-
>
mChangeHint
|
=
aMinChangeHint
;
if
(
aRestyleHintData
)
{
existingData
-
>
mRestyleHintData
.
mSelectorsForDescendants
.
AppendElements
(
aRestyleHintData
-
>
mSelectorsForDescendants
)
;
}
return
hadRestyleLaterSiblings
;
}
inline
mozilla
:
:
dom
:
:
Element
*
RestyleTracker
:
:
FindClosestRestyleRoot
(
Element
*
aElement
)
{
Element
*
cur
=
aElement
;
while
(
!
cur
-
>
HasFlag
(
RootBit
(
)
)
)
{
nsIContent
*
parent
=
cur
-
>
GetFlattenedTreeParent
(
)
;
if
(
!
parent
|
|
!
parent
-
>
IsElement
(
)
|
|
(
cur
-
>
IsInNativeAnonymousSubtree
(
)
&
&
!
parent
-
>
GetParent
(
)
&
&
cur
-
>
GetPrimaryFrame
(
)
&
&
cur
-
>
GetPrimaryFrame
(
)
-
>
GetParent
(
)
!
=
parent
-
>
GetPrimaryFrame
(
)
)
)
{
return
nullptr
;
}
cur
=
parent
-
>
AsElement
(
)
;
}
return
cur
;
}
inline
bool
RestyleTracker
:
:
AddPendingRestyle
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
const
RestyleHintData
*
aRestyleHintData
const
mozilla
:
:
Maybe
<
Element
*
>
&
aRestyleRoot
)
{
bool
hadRestyleLaterSiblings
=
AddPendingRestyleToTable
(
aElement
aRestyleHint
aMinChangeHint
aRestyleHintData
)
;
if
(
(
aRestyleHint
&
~
eRestyle_LaterSiblings
)
|
|
(
aMinChangeHint
&
nsChangeHint_ReconstructFrame
)
)
{
Element
*
cur
=
aRestyleRoot
?
*
aRestyleRoot
:
FindClosestRestyleRoot
(
aElement
)
;
if
(
!
cur
)
{
mRestyleRoots
.
AppendElement
(
aElement
)
;
cur
=
aElement
;
}
aElement
-
>
SetFlags
(
RootBit
(
)
)
;
if
(
cur
!
=
aElement
)
{
RestyleData
*
curData
;
mPendingRestyles
.
Get
(
cur
&
curData
)
;
MOZ_ASSERT
(
curData
"
expected
to
find
a
RestyleData
for
cur
"
)
;
if
(
curData
)
{
curData
-
>
mDescendants
.
AppendElement
(
aElement
)
;
}
}
}
if
(
aRestyleHint
&
eRestyle_LaterSiblings
)
{
nsIContent
*
parent
=
aElement
-
>
GetFlattenedTreeParent
(
)
;
if
(
parent
&
&
parent
-
>
IsElement
(
)
)
{
parent
-
>
SetFlags
(
ELEMENT_HAS_CHILD_WITH_LATER_SIBLINGS_HINT
)
;
}
}
mHaveLaterSiblingRestyles
=
mHaveLaterSiblingRestyles
|
|
(
aRestyleHint
&
eRestyle_LaterSiblings
)
!
=
0
;
return
hadRestyleLaterSiblings
;
}
}
#
endif
