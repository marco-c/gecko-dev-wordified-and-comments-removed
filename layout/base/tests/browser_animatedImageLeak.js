"
use
strict
"
;
requestLongerTimeout
(
3
)
;
async
function
pushPrefs1
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
image
.
animated
.
decode
-
on
-
demand
.
threshold
-
kb
"
1
]
[
"
image
.
animated
.
decode
-
on
-
demand
.
batch
-
size
"
2
]
]
}
)
;
}
async
function
openWindowsAndMinimize
(
taskToPerformBeforeMinimize
)
{
let
wins
=
[
null
null
null
null
]
;
for
(
let
i
=
0
;
i
<
wins
.
length
;
i
+
+
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
win
.
delayedStartupPromise
;
await
taskToPerformBeforeMinimize
(
win
)
;
if
(
i
<
wins
.
length
-
1
)
{
let
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
win
"
sizemodechange
"
)
;
win
.
minimize
(
)
;
await
promiseSizeModeChange
;
}
wins
[
i
]
=
win
;
}
return
wins
;
}
async
function
pushPrefs2
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
gfx
.
testing
.
assert
-
render
-
textures
-
increase
"
75
]
]
}
)
;
}
async
function
waitForEnoughFrames
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
10000
)
)
;
}
async
function
closeWindows
(
wins
)
{
for
(
let
i
=
0
;
i
<
wins
.
length
;
i
+
+
)
{
await
BrowserTestUtils
.
closeWindow
(
wins
[
i
]
)
;
}
}
async
function
popPrefs
(
)
{
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
async
(
)
=
>
{
async
function
runTest
(
theTestPath
)
{
await
pushPrefs1
(
)
;
let
wins
=
await
openWindowsAndMinimize
(
async
function
(
win
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
theTestPath
)
;
}
)
;
await
pushPrefs2
(
)
;
await
waitForEnoughFrames
(
)
;
await
closeWindows
(
wins
)
;
await
popPrefs
(
)
;
ok
(
true
"
got
here
without
assserting
"
)
;
}
function
fileURL
(
filename
)
{
let
ifile
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
ifile
.
append
(
filename
)
;
return
Services
.
io
.
newFileURI
(
ifile
)
.
spec
;
}
await
runTest
(
fileURL
(
"
helper_animatedImageLeak
.
html
"
)
)
;
await
runTest
(
getRootDirectory
(
gTestPath
)
+
"
helper_animatedImageLeak
.
html
"
)
;
}
)
;
let
extData
=
{
manifest
:
{
sidebar_action
:
{
default_panel
:
"
sidebar
.
html
"
}
}
useAddonManager
:
"
temporary
"
files
:
{
"
sidebar
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
UTF
-
8
"
>
<
script
src
=
"
sidebar
.
js
"
>
<
/
script
>
<
/
head
>
<
body
>
<
p
>
Sidebar
<
/
p
>
<
img
src
=
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAC7gAAADICAMAAABP7lxwAAAACGFjVEwAAAAWAAAAAGbtojIAAAAJUExURQAAAAAAAP8AAD373S0AAAABdFJOUwBA5thmAAAAGmZjVEwAAAAAAAALuAAAAMgAAAAAAAAAAAAhA
+
gAAJKFu7YAAAJgSURBVHja7dABCQAAAAKg
+
n
+
6HYFOMAEAAA5UAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArwZGYwACQRkAGQAAABpmY1RMAAAAAQAAAAEAAAABAAAAAQAAAAEAIQPoAADf54pUAAAADmZkQVQAAAACeNpjYAIAAAQAAzBzKbkAAAAaZmNUTAAAAAMAAAABAAAAAQAAAAEAAAABACED6AAAMnFZvQAAAA5mZEFUAAAABHjaY2AEAAADAAJ81yb0AAAAGmZjVEwAAAAFAAAAAQAAAAEAAAABAAAAAQAhA
+
gAAN
+
7K8cAAAAOZmRBVAAAAAZ42mNgAgAABAADgKpaOwAAABpmY1RMAAAABwAAAAEAAAABAAAAAQAAAAEAIQPoAAAyLfguAAAADmZkQVQAAAAIeNpjYAQAAAMAAnbNtDMAAAAaZmNUTAAAAAkAAAABAAAAAQAAAAEAAAABACED6AAA317JcgAAAA5mZEFUAAAACnjaY2ACAAAEAAOKsMj8AAAAGmZjVEwAAAALAAAAAQAAAAEAAAABAAAAAQAhA
+
gAADLIGpsAAAAOZmRBVAAAAAx42mNgBAAAAwACxhTHsQAAABpmY1RMAAAADQAAAAEAAAABAAAAAQAAAAEAIQPoAADfAmjhAAAADmZkQVQAAAAOeNpjYAIAAAQAAzppu34AAAAaZmNUTAAAAA8AAAABAAAAAQAAAAEAAAABACED6AAAMpS7CAAAAA5mZEFUAAAAEHjaY2AEAAADAAJi
+
JG9AAAAGmZjVEwAAAARAAAAAQAAAAEAAAABAAAAAQAhA
+
gAAN6VDBgAAAAOZmRBVAAAABJ42mNgAgAABAADnoXtcgAAABpmY1RMAAAAEwAAAAEAAAABAAAAAQAAAAEAIQPoAAAzA9
/
xAAAADmZkQVQAAAAUeNpjYAQAAAMAAtIh4j8AAAAaZmNUTAAAABUAAAABAAAAAQAAAAEAAAABACED6AAA3smtiwAAAA5mZEFUAAAAFnjaY2ACAAAEAAMuXJ7wAAAAGmZjVEwAAAAXAAAAAQAAAAEAAAABAAAAAQAhA
+
gAADNffmIAAAAOZmRBVAAAABh42mNgBAAAAwAC2Dtw
+
AAAABpmY1RMAAAAGQAAAAEAAAABAAAAAQAAAAEAIQPoAADeLE8
+
AAAADmZkQVQAAAAaeNpjYAIAAAQAAyRGDDcAAAAaZmNUTAAAABsAAAABAAAAAQAAAAEAAAABACED6AAAM7qc1wAAAA5mZEFUAAAAHHjaY2AEAAADAAJo4gN6AAAAGmZjVEwAAAAdAAAAAQAAAAEAAAABAAAAAQAhA
+
gAAN5w7q0AAAAOZmRBVAAAAB542mNgAgAABAADlJ9
/
tQAAABpmY1RMAAAAHwAAAAEAAAABAAAAAQAAAAEAIQPoAAAz5j1EAAAADmZkQVQAAAAgeNpjYAQAAAMAAkqS2qEAAAAaZmNUTAAAACEAAAABAAAAAQAAAAEAAAABACED6AAA3QKGzAAAAA5mZEFUAAAAInjaY2ACAAAEAAO276ZuAAAAGmZjVEwAAAAjAAAAAQAAAAEAAAABAAAAAQAhA
+
gAADCUVSUAAAAOZmRBVAAAACR42mNgBAAAAwAC
+
kupIwAAABpmY1RMAAAAJQAAAAEAAAABAAAAAQAAAAEAIQPoAADdXidfAAAADmZkQVQAAAAmeNpjYAIAAAQAAwY21ewAAAAaZmNUTAAAACcAAAABAAAAAQAAAAEAAAABACED6AAAMMj0tgAAAA5mZEFUAAAAKHjaY2AEAAADAALwUTvkAAAAGmZjVEwAAAApAAAAAQAAAAEAAAABAAAAAQAhA
+
gAAN27xeoAAAAOZmRBVAAAACp42mNgAgAABAADDCxHKwAAABt0RVh0U29mdHdhcmUAQVBORyBBc3NlbWJsZXIgMy4wXkUsHAAAAABJRU5ErkJggg
=
=
"
/
>
<
/
body
>
<
/
html
>
"
sidebar
.
js
"
:
function
(
)
{
window
.
onload
=
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
sidebar
"
)
;
}
;
}
}
}
;
function
getExtData
(
manifestUpdates
=
{
}
)
{
return
{
.
.
.
extData
manifest
:
{
.
.
.
extData
.
manifest
.
.
.
manifestUpdates
}
}
;
}
async
function
sendMessage
(
ext
msg
data
=
undefined
)
{
ext
.
sendMessage
(
{
msg
data
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
}
add_task
(
async
function
sidebar_initial_install
(
)
{
await
pushPrefs1
(
)
;
ok
(
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
not
visible
"
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
getExtData
(
)
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
sidebar
"
)
;
ok
(
!
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
visible
"
)
;
let
wins
=
await
openWindowsAndMinimize
(
async
function
(
win
)
{
await
extension
.
awaitMessage
(
"
sidebar
"
)
;
}
)
;
await
pushPrefs2
(
)
;
await
waitForEnoughFrames
(
)
;
await
extension
.
unload
(
)
;
ok
(
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
not
visible
"
)
;
await
closeWindows
(
wins
)
;
await
popPrefs
(
)
;
ok
(
true
"
got
here
without
assserting
"
)
;
}
)
;
