"
use
strict
"
;
requestLongerTimeout
(
4
)
;
async
function
pushPrefs1
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
image
.
animated
.
decode
-
on
-
demand
.
threshold
-
kb
"
1
]
[
"
image
.
animated
.
decode
-
on
-
demand
.
batch
-
size
"
2
]
]
}
)
;
}
async
function
openWindows
(
maximize
taskToPerformBeforeSizeChange
)
{
let
wins
=
[
null
null
null
null
]
;
for
(
let
i
=
0
;
i
<
wins
.
length
;
i
+
+
)
{
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
await
win
.
delayedStartupPromise
;
await
taskToPerformBeforeSizeChange
(
win
)
;
if
(
(
!
maximize
&
&
i
<
wins
.
length
-
1
)
|
|
(
maximize
&
&
i
=
=
wins
.
length
-
1
)
)
{
if
(
!
maximize
|
|
(
maximize
&
&
win
.
windowState
!
=
win
.
STATE_MAXIMIZED
)
)
{
let
promiseSizeModeChange
=
BrowserTestUtils
.
waitForEvent
(
win
"
sizemodechange
"
)
;
if
(
maximize
)
{
win
.
maximize
(
)
;
}
else
{
win
.
minimize
(
)
;
}
await
promiseSizeModeChange
;
}
}
wins
[
i
]
=
win
;
}
return
wins
;
}
async
function
pushPrefs2
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
500
)
)
;
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
gfx
.
testing
.
assert
-
render
-
textures
-
increase
"
75
]
]
}
)
;
}
async
function
waitForEnoughFrames
(
)
{
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
20000
)
)
;
}
async
function
closeWindows
(
wins
)
{
for
(
let
i
=
0
;
i
<
wins
.
length
;
i
+
+
)
{
await
BrowserTestUtils
.
closeWindow
(
wins
[
i
]
)
;
}
}
async
function
popPrefs
(
)
{
await
SpecialPowers
.
popPrefEnv
(
)
;
await
SpecialPowers
.
popPrefEnv
(
)
;
}
add_task
(
async
(
)
=
>
{
async
function
runTest
(
theTestPath
maximize
)
{
await
pushPrefs1
(
)
;
let
wins
=
await
openWindows
(
maximize
async
function
(
win
)
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
theTestPath
)
;
}
)
;
await
pushPrefs2
(
)
;
await
waitForEnoughFrames
(
)
;
await
closeWindows
(
wins
)
;
await
popPrefs
(
)
;
ok
(
true
"
got
here
without
assserting
"
)
;
}
function
fileURL
(
filename
)
{
let
ifile
=
getChromeDir
(
getResolvedURI
(
gTestPath
)
)
;
ifile
.
append
(
filename
)
;
return
Services
.
io
.
newFileURI
(
ifile
)
.
spec
;
}
let
contentURL
=
fileURL
(
"
helper_animatedImageLeak
.
html
"
)
;
await
runTest
(
contentURL
true
)
;
await
runTest
(
contentURL
false
)
;
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
"
helper_animatedImageLeak
.
html
"
;
await
runTest
(
chromeURL
true
)
;
await
runTest
(
chromeURL
false
)
;
}
)
;
let
extData
=
{
manifest
:
{
sidebar_action
:
{
default_panel
:
"
sidebar
.
html
"
}
}
useAddonManager
:
"
temporary
"
files
:
{
"
sidebar
.
html
"
:
<
!
DOCTYPE
html
>
<
html
>
<
head
>
<
meta
charset
=
"
UTF
-
8
"
>
<
script
src
=
"
sidebar
.
js
"
>
<
/
script
>
<
/
head
>
<
body
>
<
p
>
Sidebar
<
/
p
>
<
img
src
=
"
data
:
image
/
png
;
base64
iVBORw0KGgoAAAANSUhEUgAAC7gAAADICAMAAABP7lxwAAAACGFjVEwAAAAWAAAAAGbtojIAAAAJUExURQAAAAAAAP8AAD373S0AAAABdFJOUwBA5thmAAAAGmZjVEwAAAAAAAALuAAAAMgAAAAAAAAAAADIA
+
gAALdBHhgAAAJgSURBVHja7dABCQAAAAKg
+
n
+
rwZGYwACQRkAGQAAABpmY1RMAAAAAQAAAAEAAAABAAAAAQAAAAEAyAPoAAD6Iy
/
6AAAADmZkQVQAAAACeNpjYAIAAAQAAzBzKbkAAAAaZmNUTAAAAAMAAAABAAAAAQAAAAEAAAABAMgD6AAAF7X8EwAAAA5mZEFUAAAABHjaY2AEAAADAAJ81yb0AAAAGmZjVEwAAAAFAAAAAQAAAAEAAAABAAAAAQDIA
+
gAAPp
/
jmkAAAAOZmRBVAAAAAZ42mNgAgAABAADgKpaOwAAABpmY1RMAAAABwAAAAEAAAABAAAAAQAAAAEAyAPoAAAX6V2AAAAADmZkQVQAAAAIeNpjYAQAAAMAAnbNtDMAAAAaZmNUTAAAAAkAAAABAAAAAQAAAAEAAAABAMgD6AAA
+
pps3AAAAA5mZEFUAAAACnjaY2ACAAAEAAOKsMj8AAAAGmZjVEwAAAALAAAAAQAAAAEAAAABAAAAAQDIA
+
gAABcMvzUAAAAOZmRBVAAAAAx42mNgBAAAAwACxhTHsQAAABpmY1RMAAAADQAAAAEAAAABAAAAAQAAAAEAyAPoAAD6xs1PAAAADmZkQVQAAAAOeNpjYAIAAAQAAzppu34AAAAaZmNUTAAAAA8AAAABAAAAAQAAAAEAAAABAMgD6AAAF1AepgAAAA5mZEFUAAAAEHjaY2AEAAADAAJi
+
JG9AAAAGmZjVEwAAAARAAAAAQAAAAEAAAABAAAAAQDIA
+
gAAPtRqbYAAAAOZmRBVAAAABJ42mNgAgAABAADnoXtcgAAABpmY1RMAAAAEwAAAAEAAAABAAAAAQAAAAEAyAPoAAAWx3pfAAAADmZkQVQAAAAUeNpjYAQAAAMAAtIh4j8AAAAaZmNUTAAAABUAAAABAAAAAQAAAAEAAAABAMgD6AAA
+
w0IJQAAAA5mZEFUAAAAFnjaY2ACAAAEAAMuXJ7wAAAAGmZjVEwAAAAXAAAAAQAAAAEAAAABAAAAAQDIA
+
gAABab28wAAAAOZmRBVAAAABh42mNgBAAAAwAC2Dtw
+
AAAABpmY1RMAAAAGQAAAAEAAAABAAAAAQAAAAEAyAPoAAD76OqQAAAADmZkQVQAAAAaeNpjYAIAAAQAAyRGDDcAAAAaZmNUTAAAABsAAAABAAAAAQAAAAEAAAABAMgD6AAAFn45eQAAAA5mZEFUAAAAHHjaY2AEAAADAAJo4gN6AAAAGmZjVEwAAAAdAAAAAQAAAAEAAAABAAAAAQDIA
+
gAAPu0SwMAAAAOZmRBVAAAAB542mNgAgAABAADlJ9
/
tQAAABpmY1RMAAAAHwAAAAEAAAABAAAAAQAAAAEAyAPoAAAWIpjqAAAADmZkQVQAAAAgeNpjYAQAAAMAAkqS2qEAAAAaZmNUTAAAACEAAAABAAAAAQAAAAEAAAABAMgD6AAA
+
MYjYgAAAA5mZEFUAAAAInjaY2ACAAAEAAO276ZuAAAAGmZjVEwAAAAjAAAAAQAAAAEAAAABAAAAAQDIA
+
gAABVQ8IsAAAAOZmRBVAAAACR42mNgBAAAAwAC
+
kupIwAAABpmY1RMAAAAJQAAAAEAAAABAAAAAQAAAAEAyAPoAAD4moLxAAAADmZkQVQAAAAmeNpjYAIAAAQAAwY21ewAAAAaZmNUTAAAACcAAAABAAAAAQAAAAEAAAABAMgD6AAAFQxRGAAAAA5mZEFUAAAAKHjaY2AEAAADAALwUTvkAAAAGmZjVEwAAAApAAAAAQAAAAEAAAABAAAAAQDIA
+
gAAPh
/
YEQAAAAOZmRBVAAAACp42mNgAgAABAADDCxHKwAAABt0RVh0U29mdHdhcmUAQVBORyBBc3NlbWJsZXIgMy4wXkUsHAAAAABJRU5ErkJggg
=
=
"
/
>
<
/
body
>
<
/
html
>
"
sidebar
.
js
"
:
function
(
)
{
window
.
onload
=
(
)
=
>
{
browser
.
test
.
sendMessage
(
"
sidebar
"
)
;
}
;
}
}
}
;
function
getExtData
(
manifestUpdates
=
{
}
)
{
return
{
.
.
.
extData
manifest
:
{
.
.
.
extData
.
manifest
.
.
.
manifestUpdates
}
}
;
}
async
function
sendMessage
(
ext
msg
data
=
undefined
)
{
ext
.
sendMessage
(
{
msg
data
}
)
;
await
ext
.
awaitMessage
(
"
done
"
)
;
}
add_task
(
async
function
sidebar_initial_install
(
)
{
async
function
runTest
(
maximize
)
{
await
pushPrefs1
(
)
;
ok
(
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
not
visible
"
)
;
let
extension
=
ExtensionTestUtils
.
loadExtension
(
getExtData
(
)
)
;
await
extension
.
startup
(
)
;
await
extension
.
awaitMessage
(
"
sidebar
"
)
;
ok
(
!
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
visible
"
)
;
let
wins
=
await
openWindows
(
maximize
async
function
(
win
)
{
await
extension
.
awaitMessage
(
"
sidebar
"
)
;
}
)
;
await
pushPrefs2
(
)
;
await
waitForEnoughFrames
(
)
;
await
extension
.
unload
(
)
;
ok
(
document
.
getElementById
(
"
sidebar
-
box
"
)
.
hidden
"
sidebar
box
is
not
visible
"
)
;
await
closeWindows
(
wins
)
;
await
popPrefs
(
)
;
ok
(
true
"
got
here
without
assserting
"
)
;
}
await
runTest
(
true
)
;
await
runTest
(
false
)
;
}
)
;
