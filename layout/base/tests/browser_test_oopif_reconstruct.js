"
use
strict
"
;
requestLongerTimeout
(
2
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_utils
.
js
"
this
)
;
Services
.
scriptloader
.
loadSubScript
(
"
chrome
:
/
/
mochitests
/
content
/
browser
/
gfx
/
layers
/
apz
/
test
/
mochitest
/
apz_test_native_event_utils
.
js
"
this
)
;
async
function
runOneTest
(
filename
)
{
function
httpURL
(
sfilename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
sfilename
;
return
chromeURL
.
replace
(
"
chrome
:
/
/
mochitests
/
content
/
"
"
http
:
/
/
mochi
.
test
:
8888
/
"
)
;
}
const
url
=
httpURL
(
filename
)
;
const
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
url
)
;
const
{
rect
}
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
const
container
=
content
.
document
.
getElementById
(
"
container
"
)
;
let
containerRect
=
container
.
getBoundingClientRect
(
)
;
containerRect
.
x
+
=
content
.
window
.
mozInnerScreenX
;
containerRect
.
y
+
=
content
.
window
.
mozInnerScreenY
;
await
content
.
wrappedJSObject
.
promiseApzFlushedRepaints
(
)
;
await
content
.
wrappedJSObject
.
waitUntilApzStable
(
)
;
let
w
=
{
}
h
=
{
}
;
SpecialPowers
.
DOMWindowUtils
.
getScrollbarSizes
(
content
.
document
.
documentElement
w
h
)
;
containerRect
.
width
-
=
w
.
value
;
return
{
rect
:
containerRect
}
;
}
)
;
const
reference
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
content
.
wrappedJSObject
.
doTest
(
)
;
}
)
;
for
(
let
i
=
0
;
i
<
100
;
i
+
+
)
{
let
snapshot
=
await
getSnapshot
(
{
x
:
rect
.
x
y
:
rect
.
y
width
:
rect
.
width
height
:
rect
.
height
}
)
;
is
(
snapshot
reference
"
should
be
same
"
+
filename
)
;
}
BrowserTestUtils
.
removeTab
(
tab
)
;
}
add_task
(
async
(
)
=
>
{
await
runOneTest
(
"
helper_oopif_reconstruct
.
html
"
)
;
await
runOneTest
(
"
helper_oopif_reconstruct_nested
.
html
"
)
;
}
)
;
