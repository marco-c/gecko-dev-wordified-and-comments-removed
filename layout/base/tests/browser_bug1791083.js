const
URL
=
"
data
:
text
/
html
"
+
"
<
style
>
a
:
hover
{
background
-
color
:
black
}
<
/
style
>
"
+
"
<
body
style
=
'
width
:
100px
;
height
:
100px
'
>
"
+
"
<
a
href
=
'
http
:
/
/
www
.
example
.
com
'
>
Click
Me
<
/
a
>
"
+
"
<
/
body
>
"
;
function
isAnchorHovered
(
win
)
{
return
SpecialPowers
.
spawn
(
win
.
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
a
=
content
.
document
.
querySelector
(
"
a
"
)
;
return
a
.
matches
(
"
:
hover
"
)
;
}
)
;
}
add_task
(
async
function
test
(
)
{
let
newWin
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
)
;
newWin
.
resizeTo
(
50
50
)
;
BrowserTestUtils
.
loadURI
(
newWin
.
gBrowser
.
selectedBrowser
URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
newWin
.
gBrowser
.
selectedBrowser
)
;
await
SpecialPowers
.
spawn
(
newWin
.
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
a
=
content
.
document
.
querySelector
(
"
a
"
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
a
{
type
:
"
mousemove
"
}
content
)
;
}
)
;
let
anchorHovered
=
await
isAnchorHovered
(
newWin
)
;
ok
(
anchorHovered
"
Anchor
should
be
hovered
"
)
;
let
locationChange
=
BrowserTestUtils
.
waitForLocationChange
(
newWin
.
gBrowser
)
;
await
SpecialPowers
.
spawn
(
newWin
.
gBrowser
.
selectedBrowser
[
]
async
function
(
)
{
const
a
=
content
.
document
.
querySelector
(
"
a
"
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
a
{
type
:
"
mousedown
"
}
content
)
;
await
EventUtils
.
synthesizeMouseAtCenter
(
a
{
type
:
"
mouseup
"
}
content
)
;
}
)
;
await
locationChange
;
locationChange
=
BrowserTestUtils
.
waitForLocationChange
(
newWin
.
gBrowser
)
;
newWin
.
gBrowser
.
selectedBrowser
.
goBack
(
)
;
await
locationChange
;
anchorHovered
=
await
isAnchorHovered
(
newWin
)
;
ok
(
!
anchorHovered
"
Anchor
should
not
be
hovered
"
)
;
BrowserTestUtils
.
closeWindow
(
newWin
)
;
}
)
;
