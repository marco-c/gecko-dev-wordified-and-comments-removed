add_task
(
async
function
(
)
{
function
getChromeURL
(
filename
)
{
let
chromeURL
=
getRootDirectory
(
gTestPath
)
+
filename
;
return
chromeURL
;
}
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
ui
.
prefersReducedMotion
"
1
]
]
}
)
;
const
pageUrl
=
getChromeURL
(
"
helper_bug1701027
-
2
.
html
"
)
;
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
gBrowser
pageUrl
)
;
const
[
theX
theY
]
=
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
content
.
document
.
body
.
offsetWidth
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
const
rect
=
content
.
document
.
getElementById
(
"
fd
"
)
.
getBoundingClientRect
(
)
;
const
x
=
content
.
window
.
mozInnerScreenX
+
rect
.
left
+
rect
.
width
/
2
;
const
y
=
content
.
window
.
mozInnerScreenY
+
rect
.
top
+
rect
.
height
/
2
;
let
doc
=
SpecialPowers
.
wrap
(
content
.
document
)
;
var
bq
=
doc
.
createElement
(
"
blockquote
"
)
;
bq
.
textContent
=
"
This
blockquote
text
.
"
;
var
div
=
doc
.
createElement
(
"
div
"
)
;
div
.
textContent
=
"
This
div
text
.
"
;
bq
.
appendChild
(
div
)
;
var
ac
=
doc
.
insertAnonymousContent
(
bq
)
;
content
.
document
.
body
.
offsetWidth
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
content
.
window
.
windowUtils
.
setDisplayPortMarginsForElement
(
0
0
0
0
doc
.
documentElement
1
)
;
content
.
window
.
windowUtils
.
setDisplayPortBaseForElement
(
0
0
100
100
doc
.
documentElement
)
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
return
[
x
y
]
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
fd
"
)
.
style
.
backgroundColor
=
"
blue
"
;
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
}
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
content
.
document
.
getElementById
(
"
fd
"
)
.
style
.
backgroundColor
=
"
red
"
;
}
)
;
await
new
Promise
(
resolve
=
>
setTimeout
(
resolve
0
)
)
;
await
SpecialPowers
.
spawn
(
tab
.
linkedBrowser
[
]
async
(
)
=
>
{
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
await
new
Promise
(
r
=
>
content
.
window
.
requestAnimationFrame
(
r
)
)
;
}
)
;
BrowserTestUtils
.
removeTab
(
tab
)
;
ok
(
true
"
didn
'
t
crash
"
)
;
}
)
;
