#
include
"
gtest
/
gtest
.
h
"
#
include
"
gmock
/
gmock
.
h
"
#
include
<
string
>
#
include
"
AccessibleCaret
.
h
"
#
include
"
AccessibleCaretManager
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
using
:
:
testing
:
:
DefaultValue
;
using
:
:
testing
:
:
Eq
;
using
:
:
testing
:
:
InSequence
;
using
:
:
testing
:
:
MockFunction
;
using
:
:
testing
:
:
Return
;
using
:
:
testing
:
:
_
;
namespace
mozilla
{
using
dom
:
:
CaretChangedReason
;
class
AccessibleCaretManagerTester
:
public
:
:
testing
:
:
Test
{
public
:
class
MockAccessibleCaret
:
public
AccessibleCaret
{
public
:
MockAccessibleCaret
(
)
:
AccessibleCaret
(
nullptr
)
{
}
virtual
void
SetAppearance
(
Appearance
aAppearance
)
override
{
mAppearance
=
aAppearance
;
}
virtual
void
SetSelectionBarEnabled
(
bool
aEnabled
)
override
{
mSelectionBarEnabled
=
aEnabled
;
}
MOCK_METHOD2
(
SetPosition
PositionChangedResult
(
nsIFrame
*
aFrame
int32_t
aOffset
)
)
;
}
;
class
MockAccessibleCaretManager
:
public
AccessibleCaretManager
{
public
:
using
CaretMode
=
AccessibleCaretManager
:
:
CaretMode
;
using
AccessibleCaretManager
:
:
UpdateCarets
;
using
AccessibleCaretManager
:
:
HideCarets
;
using
AccessibleCaretManager
:
:
sCaretShownWhenLongTappingOnEmptyContent
;
using
AccessibleCaretManager
:
:
sCaretsExtendedVisibility
;
using
AccessibleCaretManager
:
:
sCaretsAlwaysTilt
;
MockAccessibleCaretManager
(
)
:
AccessibleCaretManager
(
nullptr
)
{
mFirstCaret
=
MakeUnique
<
MockAccessibleCaret
>
(
)
;
mSecondCaret
=
MakeUnique
<
MockAccessibleCaret
>
(
)
;
}
MockAccessibleCaret
&
FirstCaret
(
)
{
return
static_cast
<
MockAccessibleCaret
&
>
(
*
mFirstCaret
)
;
}
MockAccessibleCaret
&
SecondCaret
(
)
{
return
static_cast
<
MockAccessibleCaret
&
>
(
*
mSecondCaret
)
;
}
virtual
bool
CompareTreePosition
(
nsIFrame
*
aStartFrame
nsIFrame
*
aEndFrame
)
const
override
{
return
true
;
}
virtual
bool
IsCaretDisplayableInCursorMode
(
nsIFrame
*
*
aOutFrame
=
nullptr
int32_t
*
aOutOffset
=
nullptr
)
const
override
{
return
true
;
}
virtual
void
UpdateCaretsForOverlappingTilt
(
)
override
{
}
virtual
void
UpdateCaretsForAlwaysTilt
(
nsIFrame
*
aStartFrame
nsIFrame
*
aEndFrame
)
{
if
(
mFirstCaret
-
>
IsVisuallyVisible
(
)
)
{
mFirstCaret
-
>
SetAppearance
(
Appearance
:
:
Left
)
;
}
if
(
mSecondCaret
-
>
IsVisuallyVisible
(
)
)
{
mSecondCaret
-
>
SetAppearance
(
Appearance
:
:
Right
)
;
}
}
virtual
bool
IsTerminated
(
)
const
override
{
return
false
;
}
MOCK_CONST_METHOD0
(
GetCaretMode
CaretMode
(
)
)
;
MOCK_CONST_METHOD1
(
DispatchCaretStateChangedEvent
void
(
CaretChangedReason
aReason
)
)
;
MOCK_CONST_METHOD1
(
HasNonEmptyTextContent
bool
(
nsINode
*
aNode
)
)
;
}
;
using
Appearance
=
AccessibleCaret
:
:
Appearance
;
using
PositionChangedResult
=
AccessibleCaret
:
:
PositionChangedResult
;
using
CaretMode
=
MockAccessibleCaretManager
:
:
CaretMode
;
AccessibleCaretManagerTester
(
)
{
DefaultValue
<
CaretMode
>
:
:
Set
(
CaretMode
:
:
None
)
;
DefaultValue
<
PositionChangedResult
>
:
:
Set
(
PositionChangedResult
:
:
NotChanged
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Changed
)
)
;
EXPECT_CALL
(
mManager
.
SecondCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Changed
)
)
;
}
AccessibleCaret
:
:
Appearance
FirstCaretAppearance
(
)
{
return
mManager
.
FirstCaret
(
)
.
GetAppearance
(
)
;
}
AccessibleCaret
:
:
Appearance
SecondCaretAppearance
(
)
{
return
mManager
.
SecondCaret
(
)
.
GetAppearance
(
)
;
}
MockAccessibleCaretManager
mManager
;
}
;
TEST_F
(
AccessibleCaretManagerTester
TestUpdatesInSelectionMode
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Selection
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
3
)
;
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Normal
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Normal
)
;
mManager
.
OnScrollPositionChanged
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Normal
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestSingleTapOnNonEmptyInput
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
true
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
update
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
mouse
down
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
check
Call
(
"
reflow
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
check
Call
(
"
blur
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
mouse
up
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
reflow2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
update
"
)
;
mManager
.
OnSelectionChanged
(
nullptr
nullptr
nsISelectionListener
:
:
DRAG_REASON
|
nsISelectionListener
:
:
MOUSEDOWN_REASON
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
mouse
down
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
reflow
"
)
;
mManager
.
OnBlur
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
blur
"
)
;
mManager
.
OnSelectionChanged
(
nullptr
nullptr
nsISelectionListener
:
:
MOUSEUP_REASON
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
mouse
up
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
reflow2
"
)
;
mManager
.
OnScrollPositionChanged
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestSingleTapOnEmptyInput
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
false
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
update
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
mouse
down
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
check
Call
(
"
reflow
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
_
)
)
.
Times
(
0
)
;
EXPECT_CALL
(
check
Call
(
"
blur
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
mouse
up
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
reflow2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
update
"
)
;
mManager
.
OnSelectionChanged
(
nullptr
nullptr
nsISelectionListener
:
:
DRAG_REASON
|
nsISelectionListener
:
:
MOUSEDOWN_REASON
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
mouse
down
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
reflow
"
)
;
mManager
.
OnBlur
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
blur
"
)
;
mManager
.
OnSelectionChanged
(
nullptr
nullptr
nsISelectionListener
:
:
MOUSEUP_REASON
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
mouse
up
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
reflow2
"
)
;
mManager
.
OnScrollPositionChanged
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestTypingAtEndOfInput
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
true
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
update
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
keyboard
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
_
)
)
.
Times
(
0
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
update
"
)
;
mManager
.
OnKeyboardEvent
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
keyboard
"
)
;
mManager
.
OnSelectionChanged
(
nullptr
nullptr
nsISelectionListener
:
:
NO_REASON
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
OnScrollPositionChanged
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInSelectionMode
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Selection
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart1
"
)
)
;
EXPECT_CALL
(
mManager
.
SecondCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend2
"
)
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollstart1
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollstart2
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
scrollend2
"
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInSelectionModeWithExtendedVisibilityAndAlwaysTilt
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Selection
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
reflow1
"
)
)
;
EXPECT_CALL
(
mManager
.
SecondCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
reflow2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend2
"
)
)
;
}
AutoRestore
<
bool
>
saveCaretsExtendedVisibility
(
MockAccessibleCaretManager
:
:
sCaretsExtendedVisibility
)
;
MockAccessibleCaretManager
:
:
sCaretsExtendedVisibility
=
true
;
AutoRestore
<
bool
>
saveCaretsAlwaysTilt
(
MockAccessibleCaretManager
:
:
sCaretsAlwaysTilt
)
;
MockAccessibleCaretManager
:
:
sCaretsAlwaysTilt
=
true
;
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Right
)
;
check
.
Call
(
"
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollstart1
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
reflow1
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Left
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollstart2
"
)
;
mManager
.
OnReflow
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
reflow2
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Left
)
;
EXPECT_EQ
(
SecondCaretAppearance
(
)
Appearance
:
:
Right
)
;
check
.
Call
(
"
scrollend2
"
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInCursorModeWhenLogicallyVisible
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
true
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart1
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart2
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Changed
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend2
"
)
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollstart1
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollstart2
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
scrollend2
"
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInCursorModeWhenHidden
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
true
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
.
Times
(
1
)
;
EXPECT_CALL
(
check
Call
(
"
hidecarets
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillRepeatedly
(
Return
(
PositionChangedResult
:
:
Changed
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend2
"
)
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
updatecarets
"
)
;
mManager
.
HideCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
hidecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
scrollend2
"
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInCursorModeOnEmptyContent
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
false
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart1
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollstart3
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
scrollend3
"
)
)
;
}
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
scrollstart1
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
scrollstart2
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend2
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
scrollstart3
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
scrollend3
"
)
;
}
TEST_F
(
AccessibleCaretManagerTester
TestScrollInCursorModeOnEmptyContentWithSpecialPreference
)
{
EXPECT_CALL
(
mManager
GetCaretMode
(
)
)
.
WillRepeatedly
(
Return
(
CaretMode
:
:
Cursor
)
)
;
EXPECT_CALL
(
mManager
HasNonEmptyTextContent
(
_
)
)
.
WillRepeatedly
(
Return
(
false
)
)
;
MockFunction
<
void
(
std
:
:
string
aCheckPointName
)
>
check
;
{
InSequence
dummy
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
singletap
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
updatecarets
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollstart1
"
)
)
;
EXPECT_CALL
(
mManager
.
FirstCaret
(
)
SetPosition
(
_
_
)
)
.
WillOnce
(
Return
(
PositionChangedResult
:
:
Invisible
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollend1
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollstart2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollend2
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Visibilitychange
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollstart3
"
)
)
;
EXPECT_CALL
(
mManager
DispatchCaretStateChangedEvent
(
CaretChangedReason
:
:
Updateposition
)
)
;
EXPECT_CALL
(
check
Call
(
"
longtap
scrollend3
"
)
)
;
}
AutoRestore
<
bool
>
savePref
(
MockAccessibleCaretManager
:
:
sCaretShownWhenLongTappingOnEmptyContent
)
;
MockAccessibleCaretManager
:
:
sCaretShownWhenLongTappingOnEmptyContent
=
true
;
mManager
.
FirstCaret
(
)
.
SetAppearance
(
Appearance
:
:
None
)
;
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
check
.
Call
(
"
singletap
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
None
)
;
mManager
.
FirstCaret
(
)
.
SetAppearance
(
Appearance
:
:
Normal
)
;
mManager
.
UpdateCarets
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
longtap
updatecarets
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
longtap
scrollstart1
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
NormalNotShown
)
;
check
.
Call
(
"
longtap
scrollend1
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
longtap
scrollstart2
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
longtap
scrollend2
"
)
;
mManager
.
OnScrollStart
(
)
;
check
.
Call
(
"
longtap
scrollstart3
"
)
;
mManager
.
OnScrollEnd
(
)
;
EXPECT_EQ
(
FirstCaretAppearance
(
)
Appearance
:
:
Normal
)
;
check
.
Call
(
"
longtap
scrollend3
"
)
;
}
}
