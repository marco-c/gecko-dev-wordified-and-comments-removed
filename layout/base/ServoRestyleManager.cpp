#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManagerBase
(
aPresContext
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
&
&
!
HasPendingRestyles
(
)
)
{
return
;
}
if
(
aRestyleHint
|
|
aMinChangeHint
)
{
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddExplicitRestyleHint
(
aRestyleHint
)
;
snapshot
-
>
AddExplicitChangeHint
(
aMinChangeHint
)
;
}
PostRestyleEventInternal
(
false
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForLazyConstruction
(
)
{
PostRestyleEventInternal
(
true
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
RebuildAllStyleData
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
RecreateStyleContexts
(
nsIContent
*
aContent
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
nsStyleChangeList
&
aChangeListToProcess
)
{
nsIFrame
*
primaryFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
primaryFrame
&
&
!
aContent
-
>
IsDirtyForServo
(
)
)
{
return
;
}
if
(
aContent
-
>
IsDirtyForServo
(
)
)
{
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ComputedValues_Get
(
aContent
)
.
Consume
(
)
;
MOZ_ASSERT
(
computedValues
)
;
nsChangeHint
changeHint
=
nsChangeHint
(
0
)
;
if
(
aContent
-
>
IsElement
(
)
)
{
Element
*
element
=
aContent
-
>
AsElement
(
)
;
ServoElementSnapshot
*
snapshot
;
if
(
mModifiedElements
.
Get
(
element
&
snapshot
)
)
{
changeHint
|
=
snapshot
-
>
ExplicitChangeHint
(
)
;
}
if
(
primaryFrame
)
{
changeHint
|
=
primaryFrame
-
>
StyleContext
(
)
-
>
ConsumeStoredChangeHint
(
)
;
}
else
{
const
nsStyleDisplay
*
currentDisplay
=
Servo_GetStyleDisplay
(
computedValues
)
;
if
(
currentDisplay
-
>
mDisplay
!
=
NS_STYLE_DISPLAY_NONE
)
{
changeHint
|
=
nsChangeHint_ReconstructFrame
;
}
}
if
(
changeHint
)
{
aChangeListToProcess
.
AppendChange
(
primaryFrame
element
changeHint
)
;
}
}
if
(
!
primaryFrame
)
{
aContent
-
>
UnsetFlags
(
NODE_IS_DIRTY_FOR_SERVO
)
;
return
;
}
RefPtr
<
nsStyleContext
>
oldStyleContext
=
primaryFrame
-
>
StyleContext
(
)
;
MOZ_ASSERT
(
oldStyleContext
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
-
>
GetContext
(
computedValues
.
forget
(
)
aParentContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
if
(
aContent
-
>
IsElement
(
)
)
{
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
const
static
CSSPseudoElementType
pseudosToRestyle
[
]
=
{
CSSPseudoElementType
:
:
before
CSSPseudoElementType
:
:
after
}
;
for
(
CSSPseudoElementType
pseudoType
:
pseudosToRestyle
)
{
nsIAtom
*
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
pseudoType
)
;
if
(
nsIFrame
*
pseudoFrame
=
FrameForPseudoElement
(
aElement
pseudoTag
)
)
{
RefPtr
<
nsStyleContext
>
pseudoContext
=
aStyleSet
-
>
ProbePseudoElementStyle
(
aElement
pseudoType
newContext
)
;
MOZ_ASSERT_IF
(
!
pseudoContext
changeHint
&
nsChangeHint_ReconstructFrame
)
;
if
(
pseudoContext
)
{
pseudoFrame
-
>
SetStyleContext
(
pseudoContext
)
;
}
}
}
}
aContent
-
>
UnsetFlags
(
NODE_IS_DIRTY_FOR_SERVO
)
;
}
if
(
aContent
-
>
HasDirtyDescendantsForServo
(
)
)
{
MOZ_ASSERT
(
primaryFrame
"
Frame
construction
should
be
scheduled
and
it
takes
the
"
"
correct
style
for
the
children
so
no
need
to
be
here
.
"
)
;
FlattenedChildIterator
it
(
aContent
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
RecreateStyleContexts
(
n
primaryFrame
-
>
StyleContext
(
)
aStyleSet
aChangeListToProcess
)
;
}
aContent
-
>
UnsetFlags
(
NODE_HAS_DIRTY_DESCENDANTS_FOR_SERVO
)
;
}
}
static
void
MarkChildrenAsDirtyForServo
(
nsIContent
*
aContent
)
{
FlattenedChildIterator
it
(
aContent
)
;
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
bool
hadChildren
=
bool
(
n
)
;
for
(
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
n
-
>
SetIsDirtyForServo
(
)
;
}
if
(
hadChildren
)
{
aContent
-
>
SetHasDirtyDescendantsForServo
(
)
;
}
}
nsIFrame
*
ServoRestyleManager
:
:
FrameForPseudoElement
(
nsIContent
*
aContent
nsIAtom
*
aPseudoTagOrNull
)
{
MOZ_ASSERT_IF
(
aPseudoTagOrNull
aContent
-
>
IsElement
(
)
)
;
nsIFrame
*
primaryFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
aPseudoTagOrNull
)
{
return
primaryFrame
;
}
if
(
!
primaryFrame
)
{
return
nullptr
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
before
)
{
return
nsLayoutUtils
:
:
GetBeforeFrameForContent
(
primaryFrame
aContent
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
after
)
{
return
nsLayoutUtils
:
:
GetAfterFrameForContent
(
primaryFrame
aContent
)
;
}
MOZ_CRASH
(
"
Unkown
pseudo
-
element
given
to
"
"
ServoRestyleManager
:
:
FrameForPseudoElement
"
)
;
return
nullptr
;
}
void
ServoRestyleManager
:
:
NoteRestyleHint
(
Element
*
aElement
nsRestyleHint
aHint
)
{
const
nsRestyleHint
HANDLED_RESTYLE_HINTS
=
eRestyle_Self
|
eRestyle_Subtree
|
eRestyle_LaterSiblings
|
eRestyle_SomeDescendants
;
if
(
aHint
&
(
eRestyle_Self
|
eRestyle_Subtree
)
)
{
aElement
-
>
SetIsDirtyForServo
(
)
;
aElement
-
>
MarkAncestorsAsHavingDirtyDescendantsForServo
(
)
;
}
else
if
(
aHint
&
eRestyle_SomeDescendants
)
{
MarkChildrenAsDirtyForServo
(
aElement
)
;
aElement
-
>
MarkAncestorsAsHavingDirtyDescendantsForServo
(
)
;
}
if
(
aHint
&
eRestyle_LaterSiblings
)
{
aElement
-
>
MarkAncestorsAsHavingDirtyDescendantsForServo
(
)
;
for
(
nsIContent
*
cur
=
aElement
-
>
GetNextSibling
(
)
;
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
)
{
cur
-
>
SetIsDirtyForServo
(
)
;
}
}
if
(
aHint
&
~
HANDLED_RESTYLE_HINTS
)
{
NS_WARNING
(
nsPrintfCString
(
"
stylo
:
Unhandled
restyle
hint
%
s
"
RestyleManagerBase
:
:
RestyleHintToString
(
aHint
)
.
get
(
)
)
.
get
(
)
)
;
}
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
MOZ_ASSERT
(
PresContext
(
)
-
>
Document
(
)
"
No
document
?
Pshaw
!
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Missing
a
script
blocker
!
"
)
;
if
(
!
HasPendingRestyles
(
)
)
{
return
;
}
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
if
(
!
styleSet
-
>
StylingStarted
(
)
)
{
return
;
}
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
Element
*
root
=
doc
-
>
GetRootElement
(
)
;
if
(
root
)
{
for
(
auto
iter
=
mModifiedElements
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
ServoElementSnapshot
*
snapshot
=
iter
.
UserData
(
)
;
Element
*
element
=
iter
.
Key
(
)
;
nsRestyleHint
hint
=
styleSet
-
>
ComputeRestyleHint
(
element
snapshot
)
;
hint
|
=
snapshot
-
>
ExplicitRestyleHint
(
)
;
if
(
hint
)
{
NoteRestyleHint
(
element
hint
)
;
}
}
if
(
root
-
>
IsDirtyForServo
(
)
|
|
root
-
>
HasDirtyDescendantsForServo
(
)
)
{
mInStyleRefresh
=
true
;
styleSet
-
>
RestyleSubtree
(
root
)
;
PresContext
(
)
-
>
FrameConstructor
(
)
-
>
CreateNeededFrames
(
)
;
nsStyleChangeList
changeList
;
RecreateStyleContexts
(
root
nullptr
styleSet
changeList
)
;
ProcessRestyledFrames
(
changeList
)
;
mInStyleRefresh
=
false
;
}
}
mModifiedElements
.
Clear
(
)
;
MOZ_ASSERT
(
!
doc
-
>
IsDirtyForServo
(
)
)
;
doc
-
>
UnsetFlags
(
NODE_HAS_DIRTY_DESCENDANTS_FOR_SERVO
)
;
IncrementRestyleGeneration
(
)
;
}
void
ServoRestyleManager
:
:
RestyleForInsertOrChange
(
Element
*
aContainer
nsIContent
*
aChild
)
{
PostRestyleEvent
(
aContainer
eRestyle_Subtree
nsChangeHint
(
0
)
)
;
}
void
ServoRestyleManager
:
:
RestyleForAppend
(
Element
*
aContainer
nsIContent
*
aFirstNewContent
)
{
PostRestyleEvent
(
aContainer
eRestyle_Subtree
nsChangeHint
(
0
)
)
;
}
void
ServoRestyleManager
:
:
RestyleForRemove
(
Element
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
RestyleForRemove
not
implemented
"
)
;
}
nsresult
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
NS_OK
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddState
(
previousState
)
;
PostRestyleEvent
(
aElement
restyleHint
changeHint
)
;
return
NS_OK
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddAttrs
(
aElement
)
;
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
ServoElementSnapshot
*
ServoRestyleManager
:
:
SnapshotForElement
(
Element
*
aElement
)
{
return
mModifiedElements
.
LookupOrAdd
(
aElement
aElement
)
;
}
}
