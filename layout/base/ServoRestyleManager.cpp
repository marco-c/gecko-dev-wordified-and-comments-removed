#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManagerBase
(
aPresContext
)
mReentrantChanges
(
nullptr
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
&
&
!
HasPendingRestyles
(
)
)
{
return
;
}
MOZ_ASSERT_IF
(
mInStyleRefresh
aRestyleHint
=
=
0
)
;
if
(
mReentrantChanges
)
{
MOZ_ASSERT
(
aRestyleHint
=
=
0
)
;
mReentrantChanges
-
>
AppendElement
(
ReentrantChange
{
aElement
aMinChangeHint
}
)
;
return
;
}
if
(
aRestyleHint
&
eRestyle_StyleAttribute
)
{
aRestyleHint
&
=
~
eRestyle_StyleAttribute
;
aRestyleHint
|
=
eRestyle_Self
|
eRestyle_Subtree
;
}
if
(
aRestyleHint
|
|
aMinChangeHint
)
{
Servo_NoteExplicitHints
(
aElement
aRestyleHint
aMinChangeHint
)
;
}
PostRestyleEventInternal
(
false
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForLazyConstruction
(
)
{
PostRestyleEventInternal
(
true
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
RebuildAllStyleData
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
ClearServoDataFromSubtree
(
Element
*
aElement
)
{
aElement
-
>
ClearServoData
(
)
;
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearServoDataFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
}
void
ServoRestyleManager
:
:
ClearDirtyDescendantsFromSubtree
(
Element
*
aElement
)
{
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearDirtyDescendantsFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
}
void
ServoRestyleManager
:
:
RecreateStyleContexts
(
Element
*
aElement
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
nsStyleChangeList
&
aChangeListToProcess
)
{
nsIFrame
*
primaryFrame
=
aElement
-
>
GetPrimaryFrame
(
)
;
nsChangeHint
changeHint
=
Servo_CheckChangeHint
(
aElement
)
;
if
(
changeHint
)
{
aChangeListToProcess
.
AppendChange
(
primaryFrame
aElement
changeHint
)
;
}
if
(
changeHint
&
nsChangeHint_ReconstructFrame
)
{
ClearDirtyDescendantsFromSubtree
(
aElement
)
;
return
;
}
bool
recreateContext
=
primaryFrame
&
&
changeHint
;
if
(
recreateContext
)
{
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ResolveStyle
(
aElement
aStyleSet
-
>
mRawSet
.
get
(
)
ConsumeStyleBehavior
:
:
Consume
LazyComputeBehavior
:
:
Assert
)
.
Consume
(
)
;
RefPtr
<
nsStyleContext
>
oldStyleContext
=
primaryFrame
-
>
StyleContext
(
)
;
MOZ_ASSERT
(
oldStyleContext
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
-
>
GetContext
(
computedValues
.
forget
(
)
aParentContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
const
static
CSSPseudoElementType
pseudosToRestyle
[
]
=
{
CSSPseudoElementType
:
:
before
CSSPseudoElementType
:
:
after
}
;
for
(
CSSPseudoElementType
pseudoType
:
pseudosToRestyle
)
{
nsIAtom
*
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
pseudoType
)
;
if
(
nsIFrame
*
pseudoFrame
=
FrameForPseudoElement
(
aElement
pseudoTag
)
)
{
RefPtr
<
nsStyleContext
>
pseudoContext
=
aStyleSet
-
>
ProbePseudoElementStyle
(
aElement
pseudoType
newContext
)
;
MOZ_ASSERT
(
pseudoContext
"
should
have
taken
the
ReconstructFrame
path
above
"
)
;
pseudoFrame
-
>
SetStyleContext
(
pseudoContext
)
;
StyleChildrenIterator
it
(
pseudoFrame
-
>
GetContent
(
)
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
RefPtr
<
nsStyleContext
>
childContext
=
aStyleSet
-
>
ResolveStyleForText
(
n
pseudoContext
)
;
MOZ_ASSERT
(
n
-
>
GetPrimaryFrame
(
)
"
How
?
This
node
is
created
at
FC
time
!
"
)
;
n
-
>
GetPrimaryFrame
(
)
-
>
SetStyleContext
(
childContext
)
;
}
}
}
}
}
bool
traverseElementChildren
=
aElement
-
>
HasDirtyDescendantsForServo
(
)
;
bool
traverseTextChildren
=
recreateContext
;
if
(
traverseElementChildren
|
|
traverseTextChildren
)
{
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
traverseElementChildren
&
&
n
-
>
IsElement
(
)
)
{
MOZ_ASSERT
(
primaryFrame
"
Frame
construction
should
be
scheduled
and
it
takes
the
"
"
correct
style
for
the
children
so
no
need
to
be
here
.
"
)
;
RecreateStyleContexts
(
n
-
>
AsElement
(
)
primaryFrame
-
>
StyleContext
(
)
aStyleSet
aChangeListToProcess
)
;
}
else
if
(
traverseTextChildren
&
&
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
RecreateStyleContextsForText
(
n
primaryFrame
-
>
StyleContext
(
)
aStyleSet
)
;
}
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
}
void
ServoRestyleManager
:
:
RecreateStyleContextsForText
(
nsIContent
*
aTextNode
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
)
{
nsIFrame
*
primaryFrame
=
aTextNode
-
>
GetPrimaryFrame
(
)
;
if
(
primaryFrame
)
{
RefPtr
<
nsStyleContext
>
oldStyleContext
=
primaryFrame
-
>
StyleContext
(
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
-
>
ResolveStyleForText
(
aTextNode
aParentContext
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
}
}
nsIFrame
*
ServoRestyleManager
:
:
FrameForPseudoElement
(
const
nsIContent
*
aContent
nsIAtom
*
aPseudoTagOrNull
)
{
MOZ_ASSERT_IF
(
aPseudoTagOrNull
aContent
-
>
IsElement
(
)
)
;
nsIFrame
*
primaryFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
aPseudoTagOrNull
)
{
return
primaryFrame
;
}
if
(
!
primaryFrame
)
{
return
nullptr
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
before
)
{
return
nsLayoutUtils
:
:
GetBeforeFrameForContent
(
primaryFrame
aContent
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
after
)
{
return
nsLayoutUtils
:
:
GetAfterFrameForContent
(
primaryFrame
aContent
)
;
}
MOZ_CRASH
(
"
Unkown
pseudo
-
element
given
to
"
"
ServoRestyleManager
:
:
FrameForPseudoElement
"
)
;
return
nullptr
;
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
MOZ_ASSERT
(
PresContext
(
)
-
>
Document
(
)
"
No
document
?
Pshaw
!
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Missing
a
script
blocker
!
"
)
;
if
(
MOZ_UNLIKELY
(
!
PresContext
(
)
-
>
PresShell
(
)
-
>
DidInitialize
(
)
)
)
{
return
;
}
if
(
!
HasPendingRestyles
(
)
)
{
return
;
}
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
Element
*
root
=
doc
-
>
GetRootElement
(
)
;
if
(
HasPendingRestyles
(
)
)
{
MOZ_ASSERT
(
root
)
;
mInStyleRefresh
=
true
;
styleSet
-
>
StyleDocument
(
)
;
PresContext
(
)
-
>
FrameConstructor
(
)
-
>
CreateNeededFrames
(
)
;
nsStyleChangeList
currentChanges
;
RecreateStyleContexts
(
root
nullptr
styleSet
currentChanges
)
;
ReentrantChangeList
newChanges
;
mReentrantChanges
=
&
newChanges
;
while
(
!
currentChanges
.
IsEmpty
(
)
)
{
ProcessRestyledFrames
(
currentChanges
)
;
MOZ_ASSERT
(
currentChanges
.
IsEmpty
(
)
)
;
for
(
ReentrantChange
&
change
:
newChanges
)
{
currentChanges
.
AppendChange
(
change
.
mContent
-
>
GetPrimaryFrame
(
)
change
.
mContent
change
.
mHint
)
;
}
newChanges
.
Clear
(
)
;
}
mReentrantChanges
=
nullptr
;
styleSet
-
>
AssertTreeIsClean
(
)
;
mInStyleRefresh
=
false
;
}
IncrementRestyleGeneration
(
)
;
}
void
ServoRestyleManager
:
:
RestyleForInsertOrChange
(
nsINode
*
aContainer
nsIContent
*
aChild
)
{
}
void
ServoRestyleManager
:
:
ContentInserted
(
nsINode
*
aContainer
nsIContent
*
aChild
)
{
RestyleForInsertOrChange
(
aContainer
aChild
)
;
}
void
ServoRestyleManager
:
:
RestyleForAppend
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
{
}
void
ServoRestyleManager
:
:
ContentAppended
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
{
RestyleForAppend
(
aContainer
aFirstNewContent
)
;
}
void
ServoRestyleManager
:
:
ContentRemoved
(
nsINode
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ContentRemoved
not
implemented
"
)
;
}
nsresult
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
NS_OK
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
if
(
snapshot
)
{
snapshot
-
>
AddState
(
previousState
)
;
PostRestyleEvent
(
aElement
restyleHint
changeHint
)
;
}
return
NS_OK
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
if
(
snapshot
)
{
snapshot
-
>
AddAttrs
(
aElement
)
;
}
}
void
ServoRestyleManager
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
#
ifdef
DEBUG
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
MOZ_ASSERT_IF
(
snapshot
snapshot
-
>
HasAttrs
(
)
)
;
#
endif
if
(
aAttribute
=
=
nsGkAtoms
:
:
style
)
{
PostRestyleEvent
(
aElement
eRestyle_StyleAttribute
nsChangeHint
(
0
)
)
;
}
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
}
