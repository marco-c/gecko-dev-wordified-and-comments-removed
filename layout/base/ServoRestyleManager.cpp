#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
DocumentStyleRootIterator
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManager
(
StyleBackendType
:
:
Servo
aPresContext
)
mReentrantChanges
(
nullptr
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
MOZ_ASSERT
(
!
(
aMinChangeHint
&
nsChangeHint_NeutralChange
)
"
Didn
'
t
expect
explicit
change
hints
to
be
neutral
!
"
)
;
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
MOZ_ASSERT
(
!
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
;
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
)
{
return
;
}
if
(
mReentrantChanges
&
&
!
aRestyleHint
)
{
mReentrantChanges
-
>
AppendElement
(
ReentrantChange
{
aElement
aMinChangeHint
}
)
;
return
;
}
if
(
aRestyleHint
&
eRestyle_StyleAttribute
)
{
aRestyleHint
&
=
~
eRestyle_StyleAttribute
;
aRestyleHint
|
=
eRestyle_Self
|
eRestyle_Subtree
;
}
if
(
aRestyleHint
|
|
aMinChangeHint
)
{
Servo_NoteExplicitHints
(
aElement
aRestyleHint
aMinChangeHint
)
;
}
PostRestyleEventInternal
(
false
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForAnimations
(
Element
*
aElement
nsRestyleHint
aRestyleHint
)
{
Servo_NoteExplicitHints
(
aElement
aRestyleHint
nsChangeHint
(
0
)
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
StyleSet
(
)
-
>
RebuildData
(
)
;
if
(
Element
*
root
=
mPresContext
-
>
Document
(
)
-
>
GetRootElement
(
)
)
{
PostRestyleEvent
(
root
aRestyleHint
aExtraHint
)
;
}
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
ClearServoDataFromSubtree
(
Element
*
aElement
)
{
aElement
-
>
ClearServoData
(
)
;
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearServoDataFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
}
static
void
ClearRestyleStateFromSubtree
(
Element
*
aElement
)
{
if
(
aElement
-
>
HasDirtyDescendantsForServo
(
)
)
{
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearRestyleStateFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
}
Unused
<
<
Servo_TakeChangeHint
(
aElement
)
;
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
}
void
ServoRestyleManager
:
:
ProcessPostTraversal
(
Element
*
aElement
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
nsIFrame
*
styleFrame
=
nsLayoutUtils
:
:
GetStyleFrame
(
aElement
)
;
nsChangeHint
changeHint
=
Servo_TakeChangeHint
(
aElement
)
;
if
(
aElement
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
changeHint
|
=
nsChangeHint_ReconstructFrame
;
MOZ_ASSERT_IF
(
styleFrame
styleFrame
-
>
GetType
(
)
=
=
nsGkAtoms
:
:
imageFrame
)
;
styleFrame
=
nullptr
;
}
if
(
(
styleFrame
|
|
(
changeHint
&
nsChangeHint_ReconstructFrame
)
)
&
&
changeHint
)
{
aChangeList
.
AppendChange
(
styleFrame
aElement
changeHint
)
;
}
if
(
changeHint
&
nsChangeHint_ReconstructFrame
)
{
ClearRestyleStateFromSubtree
(
aElement
)
;
return
;
}
RefPtr
<
nsStyleContext
>
oldStyleContext
=
styleFrame
?
styleFrame
-
>
StyleContext
(
)
:
nullptr
;
UndisplayedNode
*
displayContentsNode
=
nullptr
;
if
(
!
oldStyleContext
)
{
displayContentsNode
=
PresContext
(
)
-
>
FrameConstructor
(
)
-
>
GetDisplayContentsNodeFor
(
aElement
)
;
if
(
displayContentsNode
)
{
oldStyleContext
=
displayContentsNode
-
>
mStyle
;
}
}
RefPtr
<
ServoComputedValues
>
computedValues
=
aStyleSet
-
>
ResolveServoStyle
(
aElement
)
;
const
bool
recreateContext
=
oldStyleContext
&
&
oldStyleContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
!
=
computedValues
;
RefPtr
<
nsStyleContext
>
newContext
=
nullptr
;
if
(
recreateContext
)
{
MOZ_ASSERT
(
styleFrame
|
|
displayContentsNode
)
;
newContext
=
aStyleSet
-
>
GetContext
(
computedValues
.
forget
(
)
aParentContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
aElement
)
;
newContext
-
>
EnsureStructsForServo
(
oldStyleContext
)
;
for
(
nsIFrame
*
f
=
styleFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
if
(
MOZ_UNLIKELY
(
displayContentsNode
)
)
{
MOZ_ASSERT
(
!
styleFrame
)
;
displayContentsNode
-
>
mStyle
=
newContext
;
}
if
(
styleFrame
)
{
styleFrame
-
>
UpdateStyleOfOwnedAnonBoxes
(
*
aStyleSet
aChangeList
changeHint
)
;
}
const
static
CSSPseudoElementType
pseudosToRestyle
[
]
=
{
CSSPseudoElementType
:
:
before
CSSPseudoElementType
:
:
after
}
;
for
(
CSSPseudoElementType
pseudoType
:
pseudosToRestyle
)
{
nsIAtom
*
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
pseudoType
)
;
if
(
nsIFrame
*
pseudoFrame
=
FrameForPseudoElement
(
aElement
pseudoTag
)
)
{
RefPtr
<
nsStyleContext
>
pseudoContext
=
aStyleSet
-
>
ProbePseudoElementStyle
(
aElement
pseudoType
newContext
)
;
MOZ_ASSERT
(
pseudoContext
"
should
have
taken
the
ReconstructFrame
path
above
"
)
;
pseudoFrame
-
>
SetStyleContext
(
pseudoContext
)
;
StyleChildrenIterator
it
(
pseudoFrame
-
>
GetContent
(
)
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
RefPtr
<
nsStyleContext
>
childContext
=
aStyleSet
-
>
ResolveStyleForText
(
n
pseudoContext
)
;
MOZ_ASSERT
(
n
-
>
GetPrimaryFrame
(
)
"
How
?
This
node
is
created
at
FC
time
!
"
)
;
n
-
>
GetPrimaryFrame
(
)
-
>
SetStyleContext
(
childContext
)
;
}
}
}
}
}
bool
descendantsNeedFrames
=
aElement
-
>
HasFlag
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
bool
traverseElementChildren
=
aElement
-
>
HasDirtyDescendantsForServo
(
)
|
|
descendantsNeedFrames
;
bool
traverseTextChildren
=
recreateContext
|
|
descendantsNeedFrames
;
if
(
traverseElementChildren
|
|
traverseTextChildren
)
{
nsStyleContext
*
upToDateContext
=
recreateContext
?
newContext
:
oldStyleContext
;
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
traverseElementChildren
&
&
n
-
>
IsElement
(
)
)
{
ProcessPostTraversal
(
n
-
>
AsElement
(
)
upToDateContext
aStyleSet
aChangeList
)
;
}
else
if
(
traverseTextChildren
&
&
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
ProcessPostTraversalForText
(
n
upToDateContext
aStyleSet
aChangeList
)
;
}
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
}
void
ServoRestyleManager
:
:
ProcessPostTraversalForText
(
nsIContent
*
aTextNode
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
if
(
aTextNode
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
aChangeList
.
AppendChange
(
nullptr
aTextNode
nsChangeHint_ReconstructFrame
)
;
return
;
}
nsIFrame
*
primaryFrame
=
aTextNode
-
>
GetPrimaryFrame
(
)
;
if
(
primaryFrame
)
{
RefPtr
<
nsStyleContext
>
oldStyleContext
=
primaryFrame
-
>
StyleContext
(
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
-
>
ResolveStyleForText
(
aTextNode
aParentContext
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
}
}
nsIFrame
*
ServoRestyleManager
:
:
FrameForPseudoElement
(
const
nsIContent
*
aContent
nsIAtom
*
aPseudoTagOrNull
)
{
MOZ_ASSERT_IF
(
aPseudoTagOrNull
aContent
-
>
IsElement
(
)
)
;
nsIFrame
*
primaryFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
aPseudoTagOrNull
)
{
return
primaryFrame
;
}
if
(
!
primaryFrame
)
{
return
nullptr
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
before
)
{
return
nsLayoutUtils
:
:
GetBeforeFrameForContent
(
primaryFrame
aContent
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
after
)
{
return
nsLayoutUtils
:
:
GetAfterFrameForContent
(
primaryFrame
aContent
)
;
}
MOZ_CRASH
(
"
Unkown
pseudo
-
element
given
to
"
"
ServoRestyleManager
:
:
FrameForPseudoElement
"
)
;
return
nullptr
;
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
MOZ_ASSERT
(
PresContext
(
)
-
>
Document
(
)
"
No
document
?
Pshaw
!
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Missing
a
script
blocker
!
"
)
;
if
(
MOZ_UNLIKELY
(
!
PresContext
(
)
-
>
PresShell
(
)
-
>
DidInitialize
(
)
)
)
{
return
;
}
AnimationsWithDestroyedFrame
animationsWithDestroyedFrame
(
this
)
;
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
PresContext
(
)
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
mInStyleRefresh
=
true
;
while
(
styleSet
-
>
StyleDocument
(
)
)
{
nsStyleChangeList
currentChanges
(
StyleBackendType
:
:
Servo
)
;
DocumentStyleRootIterator
iter
(
doc
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
ProcessPostTraversal
(
root
nullptr
styleSet
currentChanges
)
;
}
ReentrantChangeList
newChanges
;
mReentrantChanges
=
&
newChanges
;
while
(
!
currentChanges
.
IsEmpty
(
)
)
{
ProcessRestyledFrames
(
currentChanges
)
;
MOZ_ASSERT
(
currentChanges
.
IsEmpty
(
)
)
;
for
(
ReentrantChange
&
change
:
newChanges
)
{
currentChanges
.
AppendChange
(
change
.
mContent
-
>
GetPrimaryFrame
(
)
change
.
mContent
change
.
mHint
)
;
}
newChanges
.
Clear
(
)
;
}
mReentrantChanges
=
nullptr
;
IncrementRestyleGeneration
(
)
;
}
mInStyleRefresh
=
false
;
styleSet
-
>
AssertTreeIsClean
(
)
;
MOZ_ASSERT
(
mAnimationsWithDestroyedFrame
)
;
mAnimationsWithDestroyedFrame
-
>
StopAnimationsForElementsWithoutFrames
(
)
;
}
void
ServoRestyleManager
:
:
RestyleForInsertOrChange
(
nsINode
*
aContainer
nsIContent
*
aChild
)
{
}
void
ServoRestyleManager
:
:
RestyleForAppend
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
{
}
void
ServoRestyleManager
:
:
ContentRemoved
(
nsINode
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ContentRemoved
not
implemented
"
)
;
}
nsresult
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
NS_OK
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
if
(
snapshot
)
{
snapshot
-
>
AddState
(
previousState
)
;
PostRestyleEvent
(
aElement
restyleHint
changeHint
)
;
}
return
NS_OK
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
if
(
snapshot
)
{
snapshot
-
>
AddAttrs
(
aElement
)
;
}
}
void
ServoRestyleManager
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
#
ifdef
DEBUG
ServoElementSnapshot
*
snapshot
=
Servo_Element_GetSnapshot
(
aElement
)
;
MOZ_ASSERT_IF
(
snapshot
snapshot
-
>
HasAttrs
(
)
)
;
#
endif
if
(
aAttribute
=
=
nsGkAtoms
:
:
style
)
{
PostRestyleEvent
(
aElement
eRestyle_StyleAttribute
nsChangeHint
(
0
)
)
;
}
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
}
