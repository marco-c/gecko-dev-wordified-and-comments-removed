#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManagerBase
(
aPresContext
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
&
&
!
HasPendingRestyles
(
)
)
{
return
;
}
if
(
aRestyleHint
|
|
aMinChangeHint
)
{
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddExplicitRestyleHint
(
aRestyleHint
)
;
snapshot
-
>
AddExplicitChangeHint
(
aMinChangeHint
)
;
}
nsIPresShell
*
presShell
=
PresContext
(
)
-
>
PresShell
(
)
;
if
(
!
ObservingRefreshDriver
(
)
)
{
SetObservingRefreshDriver
(
PresContext
(
)
-
>
RefreshDriver
(
)
-
>
AddStyleFlushObserver
(
presShell
)
)
;
}
presShell
-
>
GetDocument
(
)
-
>
SetNeedStyleFlush
(
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForLazyConstruction
(
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
PostRestyleEventForLazyConstruction
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
RebuildAllStyleData
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
MOZ_CRASH
(
"
stylo
:
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
RecreateStyleContexts
(
nsIContent
*
aContent
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
)
{
nsIFrame
*
primaryFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
primaryFrame
)
{
aContent
-
>
UnsetFlags
(
NODE_IS_DIRTY_FOR_SERVO
|
NODE_HAS_DIRTY_DESCENDANTS_FOR_SERVO
)
;
return
;
}
if
(
aContent
-
>
IsDirtyForServo
(
)
)
{
RefPtr
<
ServoComputedValues
>
computedValues
=
dont_AddRef
(
Servo_GetComputedValues
(
aContent
)
)
;
RefPtr
<
nsStyleContext
>
context
=
aStyleSet
-
>
GetContext
(
computedValues
.
forget
(
)
aParentContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
)
;
primaryFrame
-
>
SetStyleContext
(
context
.
get
(
)
)
;
aContent
-
>
UnsetFlags
(
NODE_IS_DIRTY_FOR_SERVO
)
;
}
if
(
aContent
-
>
HasDirtyDescendantsForServo
(
)
)
{
FlattenedChildIterator
it
(
aContent
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
RecreateStyleContexts
(
n
primaryFrame
-
>
StyleContext
(
)
aStyleSet
)
;
}
aContent
-
>
UnsetFlags
(
NODE_HAS_DIRTY_DESCENDANTS_FOR_SERVO
)
;
}
}
static
void
MarkParentsAsHavingDirtyDescendants
(
Element
*
aElement
)
{
nsINode
*
cur
=
aElement
;
while
(
(
cur
=
cur
-
>
GetParentNode
(
)
)
)
{
if
(
cur
-
>
HasDirtyDescendantsForServo
(
)
)
{
break
;
}
cur
-
>
SetHasDirtyDescendantsForServo
(
)
;
}
}
static
void
MarkChildrenAsDirtyForServo
(
nsIContent
*
aContent
)
{
FlattenedChildIterator
it
(
aContent
)
;
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
bool
hadChildren
=
bool
(
n
)
;
for
(
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
n
-
>
SetIsDirtyForServo
(
)
;
}
if
(
hadChildren
)
{
aContent
-
>
SetHasDirtyDescendantsForServo
(
)
;
}
}
void
ServoRestyleManager
:
:
NoteRestyleHint
(
Element
*
aElement
nsRestyleHint
aHint
)
{
if
(
aHint
&
eRestyle_Self
)
{
aElement
-
>
SetIsDirtyForServo
(
)
;
MarkParentsAsHavingDirtyDescendants
(
aElement
)
;
}
else
if
(
aHint
&
eRestyle_Subtree
)
{
MarkChildrenAsDirtyForServo
(
aElement
)
;
MarkParentsAsHavingDirtyDescendants
(
aElement
)
;
}
if
(
aHint
&
eRestyle_LaterSiblings
)
{
for
(
nsINode
*
cur
=
aElement
-
>
GetNextSibling
(
)
;
cur
;
cur
=
cur
-
>
GetNextSibling
(
)
)
{
if
(
cur
-
>
IsContent
(
)
)
{
cur
-
>
SetIsDirtyForServo
(
)
;
}
}
}
if
(
aHint
&
~
(
eRestyle_Self
|
eRestyle_Subtree
|
eRestyle_LaterSiblings
)
)
{
NS_ERROR
(
nsPrintfCString
(
"
stylo
:
Unhandled
restyle
hint
%
s
"
RestyleManagerBase
:
:
RestyleHintToString
(
aHint
)
.
get
(
)
)
.
get
(
)
)
;
}
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
if
(
!
HasPendingRestyles
(
)
)
{
return
;
}
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
if
(
!
styleSet
-
>
StylingStarted
(
)
)
{
return
;
}
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
Element
*
root
=
doc
-
>
GetRootElement
(
)
;
if
(
root
)
{
for
(
auto
iter
=
mModifiedElements
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
ServoElementSnapshot
*
snapshot
=
iter
.
UserData
(
)
;
Element
*
element
=
iter
.
Key
(
)
;
nsRestyleHint
hint
=
styleSet
-
>
ComputeRestyleHint
(
element
snapshot
)
;
hint
|
=
snapshot
-
>
ExplicitRestyleHint
(
)
;
if
(
hint
)
{
NoteRestyleHint
(
element
hint
)
;
}
}
if
(
root
-
>
IsDirtyForServo
(
)
|
|
root
-
>
HasDirtyDescendantsForServo
(
)
)
{
styleSet
-
>
RestyleSubtree
(
root
)
;
RecreateStyleContexts
(
root
nullptr
styleSet
)
;
}
}
mModifiedElements
.
Clear
(
)
;
MOZ_ASSERT
(
!
doc
-
>
IsDirtyForServo
(
)
)
;
doc
-
>
UnsetFlags
(
NODE_HAS_DIRTY_DESCENDANTS_FOR_SERVO
)
;
IncrementRestyleGeneration
(
)
;
}
void
ServoRestyleManager
:
:
RestyleForInsertOrChange
(
Element
*
aContainer
nsIContent
*
aChild
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
RestyleForInsertOrChange
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
RestyleForAppend
(
Element
*
aContainer
nsIContent
*
aFirstNewContent
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
RestyleForAppend
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
RestyleForRemove
(
Element
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
RestyleForRemove
not
implemented
"
)
;
}
nsresult
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
NS_OK
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddState
(
previousState
)
;
PostRestyleEvent
(
aElement
restyleHint
changeHint
)
;
return
NS_OK
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
ServoElementSnapshot
*
snapshot
=
SnapshotForElement
(
aElement
)
;
snapshot
-
>
AddAttrs
(
aElement
)
;
}
void
ServoRestyleManager
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
AttributeChanged
not
implemented
"
)
;
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_ERROR
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
ServoElementSnapshot
*
ServoRestyleManager
:
:
SnapshotForElement
(
Element
*
aElement
)
{
ServoElementSnapshot
*
snapshot
=
mModifiedElements
.
LookupOrAdd
(
aElement
)
;
if
(
!
snapshot
-
>
HasAny
(
ServoElementSnapshot
:
:
Flags
:
:
HTMLElementInHTMLDocument
)
)
{
snapshot
-
>
SetIsHTMLElementInHTMLDocument
(
aElement
-
>
IsHTMLElement
(
)
&
&
aElement
-
>
OwnerDoc
(
)
-
>
IsHTMLDocument
(
)
)
;
}
return
snapshot
;
}
}
