#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
AutoRestyleTimelineMarker
.
h
"
#
include
"
mozilla
/
AutoTimelineMarker
.
h
"
#
include
"
mozilla
/
DocumentStyleRootIterator
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
ViewportFrame
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsBulletFrame
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
#
ifdef
DEBUG
static
bool
IsAnonBox
(
const
nsIFrame
&
aFrame
)
{
return
aFrame
.
StyleContext
(
)
-
>
IsAnonBox
(
)
;
}
static
const
nsIFrame
*
FirstContinuationOrPartOfIBSplit
(
const
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
)
{
return
nullptr
;
}
return
nsLayoutUtils
:
:
FirstContinuationOrIBSplitSibling
(
aFrame
)
;
}
static
const
nsIFrame
*
ExpectedOwnerForChild
(
const
nsIFrame
&
aFrame
)
{
if
(
IsAnonBox
(
aFrame
)
)
{
return
aFrame
.
GetParent
(
)
-
>
IsViewportFrame
(
)
?
nullptr
:
aFrame
.
GetParent
(
)
;
}
if
(
aFrame
.
IsBulletFrame
(
)
)
{
return
aFrame
.
GetParent
(
)
;
}
const
nsIFrame
*
parent
=
FirstContinuationOrPartOfIBSplit
(
aFrame
.
GetParent
(
)
)
;
if
(
aFrame
.
IsTableFrame
(
)
)
{
MOZ_ASSERT
(
parent
-
>
IsTableWrapperFrame
(
)
)
;
parent
=
FirstContinuationOrPartOfIBSplit
(
parent
-
>
GetParent
(
)
)
;
}
while
(
parent
&
&
(
IsAnonBox
(
*
parent
)
|
|
parent
-
>
IsLineFrame
(
)
)
)
{
auto
*
pseudo
=
parent
-
>
StyleContext
(
)
-
>
GetPseudo
(
)
;
if
(
pseudo
=
=
nsCSSAnonBoxes
:
:
tableWrapper
)
{
const
nsIFrame
*
tableFrame
=
parent
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
MOZ_ASSERT
(
tableFrame
-
>
IsTableFrame
(
)
)
;
parent
=
IsAnonBox
(
*
tableFrame
)
?
parent
-
>
GetParent
(
)
:
tableFrame
;
}
else
{
parent
=
parent
-
>
GetParent
(
)
;
}
parent
=
FirstContinuationOrPartOfIBSplit
(
parent
)
;
}
return
parent
;
}
void
ServoRestyleState
:
:
AssertOwner
(
const
ServoRestyleState
&
aParent
)
const
{
MOZ_ASSERT
(
mOwner
)
;
MOZ_ASSERT
(
!
mOwner
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
)
;
MOZ_ASSERT
(
ExpectedOwnerForChild
(
*
mOwner
)
=
=
aParent
.
mOwner
)
;
}
nsChangeHint
ServoRestyleState
:
:
ChangesHandledFor
(
const
nsIFrame
&
aFrame
)
const
{
if
(
!
mOwner
)
{
MOZ_ASSERT
(
!
mChangesHandled
)
;
return
mChangesHandled
;
}
MOZ_ASSERT
(
mOwner
=
=
ExpectedOwnerForChild
(
aFrame
)
"
Missed
some
frame
in
the
hierarchy
?
"
)
;
return
mChangesHandled
;
}
#
endif
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManager
(
StyleBackendType
:
:
Servo
aPresContext
)
mReentrantChanges
(
nullptr
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
MOZ_ASSERT
(
!
(
aMinChangeHint
&
nsChangeHint_NeutralChange
)
"
Didn
'
t
expect
explicit
change
hints
to
be
neutral
!
"
)
;
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
MOZ_ASSERT
(
!
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
;
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
)
{
return
;
}
if
(
aRestyleHint
)
{
IncrementUndisplayedRestyleGeneration
(
)
;
}
if
(
mReentrantChanges
&
&
!
aRestyleHint
)
{
mReentrantChanges
-
>
AppendElement
(
ReentrantChange
{
aElement
aMinChangeHint
}
)
;
return
;
}
if
(
aRestyleHint
&
~
eRestyle_AllHintsWithAnimations
)
{
mHaveNonAnimationRestyles
=
true
;
}
if
(
aRestyleHint
&
eRestyle_LaterSiblings
)
{
aRestyleHint
&
=
~
eRestyle_LaterSiblings
;
nsRestyleHint
siblingHint
=
eRestyle_Subtree
;
Element
*
current
=
aElement
-
>
GetNextElementSibling
(
)
;
while
(
current
)
{
Servo_NoteExplicitHints
(
current
siblingHint
nsChangeHint
(
0
)
)
;
current
=
current
-
>
GetNextElementSibling
(
)
;
}
}
if
(
aRestyleHint
|
|
aMinChangeHint
)
{
Servo_NoteExplicitHints
(
aElement
aRestyleHint
aMinChangeHint
)
;
}
}
void
ServoRestyleManager
:
:
PostRestyleEventForCSSRuleChanges
(
)
{
mRestyleForCSSRuleChanges
=
true
;
mPresContext
-
>
PresShell
(
)
-
>
EnsureStyleFlush
(
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForAnimations
(
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsRestyleHint
aRestyleHint
)
{
Element
*
elementToRestyle
=
EffectCompositor
:
:
GetElementToRestyle
(
aElement
aPseudoType
)
;
if
(
!
elementToRestyle
)
{
return
;
}
Servo_NoteExplicitHints
(
elementToRestyle
aRestyleHint
nsChangeHint
(
0
)
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
PostRebuildAllStyleDataEvent
(
aExtraHint
aRestyleHint
)
;
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
StyleSet
(
)
-
>
ClearDataAndMarkDeviceDirty
(
)
;
DocumentStyleRootIterator
iter
(
mPresContext
-
>
Document
(
)
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
PostRestyleEvent
(
root
aRestyleHint
aExtraHint
)
;
}
}
void
ServoRestyleManager
:
:
ClearServoDataFromSubtree
(
Element
*
aElement
)
{
if
(
!
aElement
-
>
HasServoData
(
)
)
{
MOZ_ASSERT
(
!
aElement
-
>
HasDirtyDescendantsForServo
(
)
)
;
MOZ_ASSERT
(
!
aElement
-
>
HasAnimationOnlyDirtyDescendantsForServo
(
)
)
;
return
;
}
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearServoDataFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
aElement
-
>
ClearServoData
(
)
;
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetHasAnimationOnlyDirtyDescendantsForServo
(
)
;
}
void
ServoRestyleManager
:
:
ClearRestyleStateFromSubtree
(
Element
*
aElement
)
{
if
(
aElement
-
>
HasDirtyDescendantsForServo
(
)
|
|
aElement
-
>
HasAnimationOnlyDirtyDescendantsForServo
(
)
)
{
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearRestyleStateFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
}
Unused
<
<
Servo_TakeChangeHint
(
aElement
)
;
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetHasAnimationOnlyDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
}
struct
ServoRestyleManager
:
:
TextPostTraversalState
{
public
:
TextPostTraversalState
(
nsStyleContext
&
aParentContext
bool
aDisplayContentsParentStyleChanged
ServoRestyleState
&
aParentRestyleState
)
:
mParentContext
(
aParentContext
)
mParentRestyleState
(
aParentRestyleState
)
mStyle
(
nullptr
)
mShouldPostHints
(
aDisplayContentsParentStyleChanged
)
mShouldComputeHints
(
aDisplayContentsParentStyleChanged
)
mComputedHint
(
nsChangeHint_Empty
)
{
}
nsStyleChangeList
&
ChangeList
(
)
{
return
mParentRestyleState
.
ChangeList
(
)
;
}
nsStyleContext
&
ComputeStyle
(
nsIContent
*
aTextNode
)
{
if
(
!
mStyle
)
{
mStyle
=
mParentRestyleState
.
StyleSet
(
)
.
ResolveStyleForText
(
aTextNode
&
mParentContext
)
;
}
MOZ_ASSERT
(
mStyle
)
;
return
*
mStyle
;
}
void
ComputeHintIfNeeded
(
nsIContent
*
aContent
nsIFrame
*
aTextFrame
nsStyleContext
&
aNewContext
)
{
MOZ_ASSERT
(
aTextFrame
)
;
MOZ_ASSERT
(
aNewContext
.
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
mozText
)
;
if
(
MOZ_LIKELY
(
!
mShouldPostHints
)
)
{
return
;
}
nsStyleContext
*
oldContext
=
aTextFrame
-
>
StyleContext
(
)
;
MOZ_ASSERT
(
oldContext
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
mozText
)
;
if
(
mShouldComputeHints
)
{
mShouldComputeHints
=
false
;
uint32_t
equalStructs
samePointerStructs
;
mComputedHint
=
oldContext
-
>
CalcStyleDifference
(
&
aNewContext
&
equalStructs
&
samePointerStructs
)
;
mComputedHint
=
NS_RemoveSubsumedHints
(
mComputedHint
mParentRestyleState
.
ChangesHandledFor
(
*
aTextFrame
)
)
;
}
if
(
mComputedHint
)
{
mParentRestyleState
.
ChangeList
(
)
.
AppendChange
(
aTextFrame
aContent
mComputedHint
)
;
}
}
private
:
nsStyleContext
&
mParentContext
;
ServoRestyleState
&
mParentRestyleState
;
RefPtr
<
nsStyleContext
>
mStyle
;
bool
mShouldPostHints
;
bool
mShouldComputeHints
;
nsChangeHint
mComputedHint
;
}
;
static
nsIFrame
*
FindFirstLetterFrameForElement
(
const
Element
*
aElement
)
{
nsIFrame
*
frame
=
aElement
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
return
nullptr
;
}
frame
=
frame
-
>
GetContentInsertionFrame
(
)
;
if
(
!
frame
)
{
return
nullptr
;
}
if
(
!
frame
-
>
IsFrameOfType
(
nsIFrame
:
:
eBlockFrame
)
)
{
return
nullptr
;
}
return
static_cast
<
nsBlockFrame
*
>
(
frame
)
-
>
GetFirstLetter
(
)
;
}
static
void
UpdateBackdropIfNeeded
(
nsIFrame
*
aFrame
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
const
nsStyleDisplay
*
display
=
aFrame
-
>
StyleContext
(
)
-
>
StyleDisplay
(
)
;
if
(
display
-
>
mTopLayer
!
=
NS_STYLE_TOP_LAYER_TOP
)
{
return
;
}
MOZ_ASSERT
(
display
-
>
IsAbsolutelyPositionedStyle
(
)
)
;
nsIFrame
*
backdropPlaceholder
=
aFrame
-
>
GetChildList
(
nsIFrame
:
:
kBackdropList
)
.
FirstChild
(
)
;
if
(
!
backdropPlaceholder
)
{
return
;
}
MOZ_ASSERT
(
backdropPlaceholder
-
>
IsPlaceholderFrame
(
)
)
;
nsIFrame
*
backdropFrame
=
nsPlaceholderFrame
:
:
GetRealFrameForPlaceholder
(
backdropPlaceholder
)
;
MOZ_ASSERT
(
backdropFrame
-
>
IsBackdropFrame
(
)
)
;
MOZ_ASSERT
(
backdropFrame
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
=
=
CSSPseudoElementType
:
:
backdrop
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
.
ResolvePseudoElementStyle
(
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
CSSPseudoElementType
:
:
backdrop
aFrame
-
>
StyleContext
(
)
nullptr
)
;
MOZ_ASSERT
(
backdropFrame
-
>
GetParent
(
)
-
>
IsViewportFrame
(
)
)
;
ServoRestyleState
state
(
aStyleSet
aChangeList
)
;
aFrame
-
>
UpdateStyleOfOwnedChildFrame
(
backdropFrame
newContext
state
)
;
}
static
void
UpdateFirstLetterIfNeeded
(
nsIFrame
*
aFrame
ServoRestyleState
&
aRestyleState
)
{
if
(
!
aFrame
-
>
HasFirstLetterChild
(
)
)
{
return
;
}
nsIFrame
*
block
=
aFrame
;
while
(
!
block
-
>
IsFrameOfType
(
nsIFrame
:
:
eBlockFrame
)
)
{
block
=
block
-
>
GetParent
(
)
;
}
static_cast
<
nsBlockFrame
*
>
(
block
-
>
FirstContinuation
(
)
)
-
>
UpdateFirstLetterStyle
(
aRestyleState
)
;
}
static
void
UpdateFramePseudoElementStyles
(
nsIFrame
*
aFrame
ServoRestyleState
&
aRestyleState
)
{
UpdateFirstLetterIfNeeded
(
aFrame
aRestyleState
)
;
if
(
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eBlockFrame
)
)
{
static_cast
<
nsBlockFrame
*
>
(
aFrame
)
-
>
UpdatePseudoElementStyles
(
aRestyleState
)
;
}
UpdateBackdropIfNeeded
(
aFrame
aRestyleState
.
StyleSet
(
)
aRestyleState
.
ChangeList
(
)
)
;
}
bool
ServoRestyleManager
:
:
ProcessPostTraversal
(
Element
*
aElement
nsStyleContext
*
aParentContext
ServoRestyleState
&
aRestyleState
)
{
nsIFrame
*
styleFrame
=
nsLayoutUtils
:
:
GetStyleFrame
(
aElement
)
;
const
bool
isOutOfFlow
=
aElement
-
>
GetPrimaryFrame
(
)
&
&
aElement
-
>
GetPrimaryFrame
(
)
-
>
HasAnyStateBits
(
NS_FRAME_OUT_OF_FLOW
)
;
nsChangeHint
changeHint
=
Servo_TakeChangeHint
(
aElement
)
;
if
(
styleFrame
&
&
styleFrame
-
>
GetContent
(
)
!
=
aElement
)
{
MOZ_ASSERT
(
styleFrame
-
>
IsImageFrame
(
)
)
;
styleFrame
=
nullptr
;
}
if
(
aElement
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
changeHint
|
=
nsChangeHint_ReconstructFrame
;
MOZ_ASSERT
(
!
styleFrame
)
;
}
if
(
styleFrame
&
&
!
isOutOfFlow
)
{
changeHint
=
NS_RemoveSubsumedHints
(
changeHint
aRestyleState
.
ChangesHandledFor
(
*
styleFrame
)
)
;
}
if
(
(
styleFrame
|
|
(
changeHint
&
nsChangeHint_ReconstructFrame
)
)
&
&
changeHint
)
{
aRestyleState
.
ChangeList
(
)
.
AppendChange
(
styleFrame
aElement
changeHint
)
;
}
if
(
changeHint
&
nsChangeHint_ReconstructFrame
)
{
ClearRestyleStateFromSubtree
(
aElement
)
;
return
true
;
}
RefPtr
<
ServoStyleContext
>
oldStyleContext
=
styleFrame
?
styleFrame
-
>
StyleContext
(
)
-
>
AsServo
(
)
:
nullptr
;
UndisplayedNode
*
displayContentsNode
=
nullptr
;
if
(
!
oldStyleContext
)
{
displayContentsNode
=
PresContext
(
)
-
>
FrameConstructor
(
)
-
>
GetDisplayContentsNodeFor
(
aElement
)
;
if
(
displayContentsNode
)
{
oldStyleContext
=
displayContentsNode
-
>
mStyle
-
>
AsServo
(
)
;
}
}
RefPtr
<
ServoComputedValues
>
computedValues
=
aRestyleState
.
StyleSet
(
)
.
ResolveServoStyle
(
aElement
)
;
const
bool
recreateContext
=
oldStyleContext
&
&
oldStyleContext
-
>
ComputedValues
(
)
!
=
computedValues
;
Maybe
<
ServoRestyleState
>
thisFrameRestyleState
;
if
(
styleFrame
)
{
auto
type
=
isOutOfFlow
?
ServoRestyleState
:
:
Type
:
:
OutOfFlow
:
ServoRestyleState
:
:
Type
:
:
InFlow
;
thisFrameRestyleState
.
emplace
(
*
styleFrame
aRestyleState
changeHint
type
)
;
}
ServoRestyleState
&
childrenRestyleState
=
thisFrameRestyleState
?
*
thisFrameRestyleState
:
aRestyleState
;
RefPtr
<
ServoStyleContext
>
newContext
=
nullptr
;
if
(
recreateContext
)
{
MOZ_ASSERT
(
styleFrame
|
|
displayContentsNode
)
;
auto
pseudo
=
aElement
-
>
GetPseudoElementType
(
)
;
nsIAtom
*
pseudoTag
=
pseudo
=
=
CSSPseudoElementType
:
:
NotPseudo
?
nullptr
:
nsCSSPseudoElements
:
:
GetPseudoAtom
(
pseudo
)
;
newContext
=
aRestyleState
.
StyleSet
(
)
.
GetContext
(
computedValues
.
forget
(
)
aParentContext
pseudoTag
pseudo
aElement
)
;
newContext
-
>
ResolveSameStructsAs
(
PresContext
(
)
oldStyleContext
)
;
for
(
nsIFrame
*
f
=
styleFrame
;
f
;
f
=
f
-
>
GetNextContinuation
(
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
if
(
MOZ_UNLIKELY
(
displayContentsNode
)
)
{
MOZ_ASSERT
(
!
styleFrame
)
;
displayContentsNode
-
>
mStyle
=
newContext
;
}
if
(
styleFrame
)
{
styleFrame
-
>
UpdateStyleOfOwnedAnonBoxes
(
childrenRestyleState
)
;
}
if
(
!
aElement
-
>
GetParent
(
)
)
{
ViewportFrame
*
viewport
=
do_QueryFrame
(
mPresContext
-
>
PresShell
(
)
-
>
GetRootFrame
(
)
)
;
if
(
viewport
)
{
viewport
-
>
UpdateStyle
(
aRestyleState
)
;
}
}
AddLayerChangesForAnimation
(
styleFrame
aElement
aRestyleState
.
ChangeList
(
)
)
;
}
const
bool
descendantsNeedFrames
=
aElement
-
>
HasFlag
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
const
bool
traverseElementChildren
=
aElement
-
>
HasDirtyDescendantsForServo
(
)
|
|
aElement
-
>
HasAnimationOnlyDirtyDescendantsForServo
(
)
|
|
descendantsNeedFrames
;
const
bool
traverseTextChildren
=
recreateContext
|
|
descendantsNeedFrames
;
bool
recreatedAnyContext
=
recreateContext
;
if
(
traverseElementChildren
|
|
traverseTextChildren
)
{
nsStyleContext
*
upToDateContext
=
recreateContext
?
newContext
:
oldStyleContext
;
StyleChildrenIterator
it
(
aElement
)
;
TextPostTraversalState
textState
(
*
upToDateContext
displayContentsNode
&
&
recreateContext
childrenRestyleState
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
traverseElementChildren
&
&
n
-
>
IsElement
(
)
)
{
recreatedAnyContext
|
=
ProcessPostTraversal
(
n
-
>
AsElement
(
)
upToDateContext
childrenRestyleState
)
;
}
else
if
(
traverseTextChildren
&
&
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
recreatedAnyContext
|
=
ProcessPostTraversalForText
(
n
textState
)
;
}
}
}
if
(
recreateContext
&
&
styleFrame
)
{
UpdateFramePseudoElementStyles
(
styleFrame
childrenRestyleState
)
;
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetHasAnimationOnlyDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
return
recreatedAnyContext
;
}
bool
ServoRestyleManager
:
:
ProcessPostTraversalForText
(
nsIContent
*
aTextNode
TextPostTraversalState
&
aPostTraversalState
)
{
if
(
aTextNode
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
aPostTraversalState
.
ChangeList
(
)
.
AppendChange
(
nullptr
aTextNode
nsChangeHint_ReconstructFrame
)
;
return
true
;
}
nsIFrame
*
primaryFrame
=
aTextNode
-
>
GetPrimaryFrame
(
)
;
if
(
!
primaryFrame
)
{
return
false
;
}
nsStyleContext
&
newContext
=
aPostTraversalState
.
ComputeStyle
(
aTextNode
)
;
aPostTraversalState
.
ComputeHintIfNeeded
(
aTextNode
primaryFrame
newContext
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
f
-
>
GetNextContinuation
(
)
)
{
f
-
>
SetStyleContext
(
&
newContext
)
;
}
return
true
;
}
void
ServoRestyleManager
:
:
ClearSnapshots
(
)
{
for
(
auto
iter
=
mSnapshots
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Key
(
)
-
>
UnsetFlags
(
ELEMENT_HAS_SNAPSHOT
|
ELEMENT_HANDLED_SNAPSHOT
)
;
iter
.
Remove
(
)
;
}
}
ServoElementSnapshot
&
ServoRestyleManager
:
:
SnapshotFor
(
Element
*
aElement
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
MOZ_ASSERT
(
aElement
-
>
HasServoData
(
)
)
;
MOZ_ASSERT
(
!
aElement
-
>
HasFlag
(
ELEMENT_HANDLED_SNAPSHOT
)
)
;
ServoElementSnapshot
*
snapshot
=
mSnapshots
.
LookupOrAdd
(
aElement
aElement
)
;
aElement
-
>
SetFlags
(
ELEMENT_HAS_SNAPSHOT
)
;
nsIPresShell
*
presShell
=
mPresContext
-
>
PresShell
(
)
;
presShell
-
>
EnsureStyleFlush
(
)
;
return
*
snapshot
;
}
nsIFrame
*
ServoRestyleManager
:
:
FrameForPseudoElement
(
const
Element
*
aElement
nsIAtom
*
aPseudoTagOrNull
)
{
if
(
!
aPseudoTagOrNull
)
{
return
nsLayoutUtils
:
:
GetStyleFrame
(
aElement
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
before
)
{
Element
*
pseudoElement
=
nsLayoutUtils
:
:
GetBeforePseudo
(
aElement
)
;
return
pseudoElement
?
nsLayoutUtils
:
:
GetStyleFrame
(
pseudoElement
)
:
nullptr
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
after
)
{
Element
*
pseudoElement
=
nsLayoutUtils
:
:
GetAfterPseudo
(
aElement
)
;
return
pseudoElement
?
nsLayoutUtils
:
:
GetStyleFrame
(
pseudoElement
)
:
nullptr
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
firstLetter
)
{
return
FindFirstLetterFrameForElement
(
aElement
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
firstLine
)
{
return
nullptr
;
}
MOZ_CRASH
(
"
Unkown
pseudo
-
element
given
to
"
"
ServoRestyleManager
:
:
FrameForPseudoElement
"
)
;
return
nullptr
;
}
void
ServoRestyleManager
:
:
DoProcessPendingRestyles
(
TraversalRestyleBehavior
aRestyleBehavior
)
{
MOZ_ASSERT
(
PresContext
(
)
-
>
Document
(
)
"
No
document
?
Pshaw
!
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Missing
a
script
blocker
!
"
)
;
MOZ_ASSERT
(
!
mInStyleRefresh
"
Reentrant
call
?
"
)
;
if
(
MOZ_UNLIKELY
(
!
PresContext
(
)
-
>
PresShell
(
)
-
>
DidInitialize
(
)
)
)
{
return
;
}
AnimationsWithDestroyedFrame
animationsWithDestroyedFrame
(
this
)
;
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
bool
animationOnly
=
aRestyleBehavior
=
=
TraversalRestyleBehavior
:
:
ForAnimationOnly
;
PresContext
(
)
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
mInStyleRefresh
=
true
;
if
(
mHaveNonAnimationRestyles
&
&
!
animationOnly
)
{
+
+
mAnimationGeneration
;
}
TraversalRestyleBehavior
restyleBehavior
=
mRestyleForCSSRuleChanges
?
TraversalRestyleBehavior
:
:
ForCSSRuleChanges
:
TraversalRestyleBehavior
:
:
Normal
;
while
(
animationOnly
?
styleSet
-
>
StyleDocumentForAnimationOnly
(
)
:
styleSet
-
>
StyleDocument
(
restyleBehavior
)
)
{
if
(
!
animationOnly
)
{
ClearSnapshots
(
)
;
}
nsStyleChangeList
currentChanges
(
StyleBackendType
:
:
Servo
)
;
bool
anyStyleChanged
=
false
;
{
AutoRestyleTimelineMarker
marker
(
mPresContext
-
>
GetDocShell
(
)
animationOnly
)
;
DocumentStyleRootIterator
iter
(
doc
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
ServoRestyleState
state
(
*
styleSet
currentChanges
)
;
anyStyleChanged
|
=
ProcessPostTraversal
(
root
nullptr
state
)
;
}
}
{
AutoTimelineMarker
marker
(
mPresContext
-
>
GetDocShell
(
)
"
StylesApplyChanges
"
)
;
ReentrantChangeList
newChanges
;
mReentrantChanges
=
&
newChanges
;
while
(
!
currentChanges
.
IsEmpty
(
)
)
{
ProcessRestyledFrames
(
currentChanges
)
;
MOZ_ASSERT
(
currentChanges
.
IsEmpty
(
)
)
;
for
(
ReentrantChange
&
change
:
newChanges
)
{
if
(
!
(
change
.
mHint
&
nsChangeHint_ReconstructFrame
)
&
&
!
change
.
mContent
-
>
GetPrimaryFrame
(
)
)
{
continue
;
}
currentChanges
.
AppendChange
(
change
.
mContent
-
>
GetPrimaryFrame
(
)
change
.
mContent
change
.
mHint
)
;
}
newChanges
.
Clear
(
)
;
}
mReentrantChanges
=
nullptr
;
}
if
(
anyStyleChanged
)
{
IncrementRestyleGeneration
(
)
;
}
}
FlushOverflowChangedTracker
(
)
;
if
(
!
animationOnly
)
{
ClearSnapshots
(
)
;
styleSet
-
>
AssertTreeIsClean
(
)
;
mHaveNonAnimationRestyles
=
false
;
}
mRestyleForCSSRuleChanges
=
false
;
mInStyleRefresh
=
false
;
styleSet
-
>
MaybeGCRuleTree
(
)
;
MOZ_ASSERT
(
mAnimationsWithDestroyedFrame
)
;
mAnimationsWithDestroyedFrame
-
>
StopAnimationsForElementsWithoutFrames
(
)
;
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
DoProcessPendingRestyles
(
TraversalRestyleBehavior
:
:
Normal
)
;
}
void
ServoRestyleManager
:
:
UpdateOnlyAnimationStyles
(
)
{
bool
doCSS
=
PresContext
(
)
-
>
EffectCompositor
(
)
-
>
HasPendingStyleUpdates
(
)
;
if
(
!
doCSS
)
{
return
;
}
DoProcessPendingRestyles
(
TraversalRestyleBehavior
:
:
ForAnimationOnly
)
;
}
void
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
if
(
!
aElement
-
>
HasServoData
(
)
)
{
return
;
}
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
if
(
!
aChangedBits
.
HasAtLeastOneOfStates
(
DIRECTION_STATES
)
&
&
!
StyleSet
(
)
-
>
HasStateDependency
(
*
aElement
aChangedBits
)
)
{
return
;
}
ServoElementSnapshot
&
snapshot
=
SnapshotFor
(
aElement
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
snapshot
.
AddState
(
previousState
)
;
if
(
Element
*
parent
=
aElement
-
>
GetFlattenedTreeParentElementForStyle
(
)
)
{
parent
-
>
NoteDirtyDescendantsForServo
(
)
;
}
if
(
restyleHint
|
|
changeHint
)
{
Servo_NoteExplicitHints
(
aElement
restyleHint
changeHint
)
;
}
IncrementUndisplayedRestyleGeneration
(
)
;
}
static
inline
bool
AttributeInfluencesOtherPseudoClassState
(
const
Element
&
aElement
const
nsIAtom
*
aAttribute
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
mozbrowser
)
{
return
aElement
.
IsAnyOfHTMLElements
(
nsGkAtoms
:
:
iframe
nsGkAtoms
:
:
frame
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
border
)
{
return
aElement
.
IsHTMLElement
(
nsGkAtoms
:
:
table
)
;
}
return
false
;
}
static
inline
bool
NeedToRecordAttrChange
(
const
ServoStyleSet
&
aStyleSet
const
Element
&
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
bool
*
aInfluencesOtherPseudoClassState
)
{
*
aInfluencesOtherPseudoClassState
=
AttributeInfluencesOtherPseudoClassState
(
aElement
aAttribute
)
;
if
(
*
aInfluencesOtherPseudoClassState
)
{
return
true
;
}
if
(
aNameSpaceID
=
=
kNameSpaceID_None
&
&
(
aAttribute
=
=
nsGkAtoms
:
:
id
|
|
aAttribute
=
=
nsGkAtoms
:
:
_class
)
)
{
return
true
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
lang
)
{
return
true
;
}
return
aStyleSet
.
MightHaveAttributeDependency
(
aElement
aAttribute
)
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
TakeSnapshotForAttributeChange
(
aElement
aNameSpaceID
aAttribute
)
;
}
void
ServoRestyleManager
:
:
ClassAttributeWillBeChangedBySMIL
(
Element
*
aElement
)
{
TakeSnapshotForAttributeChange
(
aElement
kNameSpaceID_None
nsGkAtoms
:
:
_class
)
;
}
void
ServoRestyleManager
:
:
TakeSnapshotForAttributeChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
if
(
!
aElement
-
>
HasServoData
(
)
)
{
return
;
}
bool
influencesOtherPseudoClassState
;
if
(
!
NeedToRecordAttrChange
(
*
StyleSet
(
)
*
aElement
aNameSpaceID
aAttribute
&
influencesOtherPseudoClassState
)
)
{
return
;
}
IncrementUndisplayedRestyleGeneration
(
)
;
ServoElementSnapshot
&
snapshot
=
SnapshotFor
(
aElement
)
;
snapshot
.
AddAttrs
(
aElement
aNameSpaceID
aAttribute
)
;
if
(
influencesOtherPseudoClassState
)
{
snapshot
.
AddOtherPseudoClassState
(
aElement
)
;
}
if
(
Element
*
parent
=
aElement
-
>
GetFlattenedTreeParentElementForStyle
(
)
)
{
parent
-
>
NoteDirtyDescendantsForServo
(
)
;
}
}
static
inline
bool
AttributeChangeRequiresSubtreeRestyle
(
const
Element
&
aElement
nsIAtom
*
aAttr
)
{
if
(
aAttr
=
=
nsGkAtoms
:
:
cellpadding
)
{
return
aElement
.
IsHTMLElement
(
nsGkAtoms
:
:
table
)
;
}
return
aAttr
=
=
nsGkAtoms
:
:
lang
;
}
void
ServoRestyleManager
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
if
(
nsIFrame
*
primaryFrame
=
aElement
-
>
GetPrimaryFrame
(
)
)
{
primaryFrame
-
>
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
auto
changeHint
=
nsChangeHint
(
0
)
;
auto
restyleHint
=
nsRestyleHint
(
0
)
;
changeHint
|
=
aElement
-
>
GetAttributeChangeHint
(
aAttribute
aModType
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
style
)
{
restyleHint
|
=
eRestyle_StyleAttribute
;
}
else
if
(
AttributeChangeRequiresSubtreeRestyle
(
*
aElement
aAttribute
)
)
{
restyleHint
|
=
eRestyle_Subtree
;
}
else
if
(
aElement
-
>
IsAttributeMapped
(
aAttribute
)
)
{
restyleHint
|
=
eRestyle_Self
;
}
if
(
restyleHint
|
|
changeHint
)
{
Servo_NoteExplicitHints
(
aElement
restyleHint
changeHint
)
;
}
if
(
restyleHint
)
{
IncrementUndisplayedRestyleGeneration
(
)
;
}
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
}
