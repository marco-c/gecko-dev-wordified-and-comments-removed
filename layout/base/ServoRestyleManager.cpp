#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
DocumentStyleRootIterator
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsBulletFrame
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoRestyleManager
:
:
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
:
RestyleManager
(
StyleBackendType
:
:
Servo
aPresContext
)
mReentrantChanges
(
nullptr
)
{
}
void
ServoRestyleManager
:
:
PostRestyleEvent
(
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
{
MOZ_ASSERT
(
!
(
aMinChangeHint
&
nsChangeHint_NeutralChange
)
"
Didn
'
t
expect
explicit
change
hints
to
be
neutral
!
"
)
;
if
(
MOZ_UNLIKELY
(
IsDisconnected
(
)
)
|
|
MOZ_UNLIKELY
(
PresContext
(
)
-
>
PresShell
(
)
-
>
IsDestroying
(
)
)
)
{
return
;
}
MOZ_ASSERT
(
!
ServoStyleSet
:
:
IsInServoTraversal
(
)
)
;
if
(
aRestyleHint
=
=
0
&
&
!
aMinChangeHint
)
{
return
;
}
if
(
mReentrantChanges
&
&
!
aRestyleHint
)
{
mReentrantChanges
-
>
AppendElement
(
ReentrantChange
{
aElement
aMinChangeHint
}
)
;
return
;
}
if
(
aRestyleHint
&
~
eRestyle_AllHintsWithAnimations
)
{
mHaveNonAnimationRestyles
=
true
;
}
Servo_NoteExplicitHints
(
aElement
aRestyleHint
aMinChangeHint
)
;
}
void
ServoRestyleManager
:
:
PostRestyleEventForAnimations
(
Element
*
aElement
nsRestyleHint
aRestyleHint
)
{
Servo_NoteExplicitHints
(
aElement
aRestyleHint
nsChangeHint
(
0
)
)
;
}
void
ServoRestyleManager
:
:
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
PostRebuildAllStyleDataEvent
(
aExtraHint
aRestyleHint
)
;
}
void
ServoRestyleManager
:
:
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
{
StyleSet
(
)
-
>
ClearDataAndMarkDeviceDirty
(
)
;
if
(
Element
*
root
=
mPresContext
-
>
Document
(
)
-
>
GetRootElement
(
)
)
{
PostRestyleEvent
(
root
aRestyleHint
aExtraHint
)
;
}
}
void
ServoRestyleManager
:
:
ClearServoDataFromSubtree
(
Element
*
aElement
)
{
if
(
!
aElement
-
>
HasServoData
(
)
)
{
MOZ_ASSERT
(
!
aElement
-
>
HasDirtyDescendantsForServo
(
)
)
;
return
;
}
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearServoDataFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
aElement
-
>
ClearServoData
(
)
;
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
}
void
ServoRestyleManager
:
:
ClearRestyleStateFromSubtree
(
Element
*
aElement
)
{
if
(
aElement
-
>
HasDirtyDescendantsForServo
(
)
)
{
StyleChildrenIterator
it
(
aElement
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
n
-
>
IsElement
(
)
)
{
ClearRestyleStateFromSubtree
(
n
-
>
AsElement
(
)
)
;
}
}
}
Unused
<
<
Servo_TakeChangeHint
(
aElement
)
;
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
}
struct
ServoRestyleManager
:
:
TextPostTraversalState
{
nsStyleContext
&
mParentContext
;
ServoStyleSet
&
mStyleSet
;
RefPtr
<
nsStyleContext
>
mStyle
;
bool
mShouldPostHints
;
bool
mShouldComputeHints
;
nsChangeHint
mComputedHint
;
TextPostTraversalState
(
nsStyleContext
&
aParentContext
ServoStyleSet
&
aStyleSet
bool
aDisplayContentsParentStyleChanged
)
:
mParentContext
(
aParentContext
)
mStyleSet
(
aStyleSet
)
mStyle
(
nullptr
)
mShouldPostHints
(
aDisplayContentsParentStyleChanged
)
mShouldComputeHints
(
aDisplayContentsParentStyleChanged
)
mComputedHint
(
nsChangeHint_Empty
)
{
}
nsStyleContext
&
ComputeStyle
(
nsIContent
*
aTextNode
)
{
if
(
!
mStyle
)
{
mStyle
=
mStyleSet
.
ResolveStyleForText
(
aTextNode
&
mParentContext
)
;
}
MOZ_ASSERT
(
mStyle
)
;
return
*
mStyle
;
}
void
ComputeHintIfNeeded
(
nsIContent
*
aContent
nsIFrame
*
aTextFrame
nsStyleContext
&
aNewContext
nsStyleChangeList
&
aChangeList
)
{
MOZ_ASSERT
(
aTextFrame
)
;
MOZ_ASSERT
(
aNewContext
.
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
mozText
)
;
if
(
MOZ_LIKELY
(
!
mShouldPostHints
)
)
{
return
;
}
nsStyleContext
*
oldContext
=
aTextFrame
-
>
StyleContext
(
)
;
MOZ_ASSERT
(
oldContext
-
>
GetPseudo
(
)
=
=
nsCSSAnonBoxes
:
:
mozText
)
;
if
(
mShouldComputeHints
)
{
mShouldComputeHints
=
false
;
uint32_t
equalStructs
samePointerStructs
;
mComputedHint
=
oldContext
-
>
CalcStyleDifference
(
&
aNewContext
&
equalStructs
&
samePointerStructs
)
;
}
if
(
mComputedHint
)
{
aChangeList
.
AppendChange
(
aTextFrame
aContent
mComputedHint
)
;
}
}
}
;
static
void
UpdateBlockFramePseudoElements
(
nsBlockFrame
*
aFrame
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
if
(
nsBulletFrame
*
bullet
=
aFrame
-
>
GetBullet
(
)
)
{
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
.
ResolvePseudoElementStyle
(
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
bullet
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
aFrame
-
>
StyleContext
(
)
nullptr
)
;
aFrame
-
>
UpdateStyleOfOwnedChildFrame
(
bullet
newContext
aChangeList
)
;
}
}
static
void
UpdateBackdropIfNeeded
(
nsIFrame
*
aFrame
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
const
nsStyleDisplay
*
display
=
aFrame
-
>
StyleContext
(
)
-
>
StyleDisplay
(
)
;
if
(
display
-
>
mTopLayer
!
=
NS_STYLE_TOP_LAYER_TOP
)
{
return
;
}
MOZ_ASSERT
(
display
-
>
IsAbsolutelyPositionedStyle
(
)
)
;
nsIFrame
*
backdropPlaceholder
=
aFrame
-
>
GetChildList
(
nsIFrame
:
:
kBackdropList
)
.
FirstChild
(
)
;
if
(
!
backdropPlaceholder
)
{
return
;
}
MOZ_ASSERT
(
backdropPlaceholder
-
>
IsPlaceholderFrame
(
)
)
;
nsIFrame
*
backdropFrame
=
nsPlaceholderFrame
:
:
GetRealFrameForPlaceholder
(
backdropPlaceholder
)
;
MOZ_ASSERT
(
backdropFrame
-
>
IsBackdropFrame
(
)
)
;
MOZ_ASSERT
(
backdropFrame
-
>
StyleContext
(
)
-
>
GetPseudoType
(
)
=
=
CSSPseudoElementType
:
:
backdrop
)
;
RefPtr
<
nsStyleContext
>
newContext
=
aStyleSet
.
ResolvePseudoElementStyle
(
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
CSSPseudoElementType
:
:
backdrop
aFrame
-
>
StyleContext
(
)
nullptr
)
;
aFrame
-
>
UpdateStyleOfOwnedChildFrame
(
backdropFrame
newContext
aChangeList
)
;
}
static
void
UpdateFramePseudoElementStyles
(
nsIFrame
*
aFrame
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
if
(
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eBlockFrame
)
)
{
UpdateBlockFramePseudoElements
(
static_cast
<
nsBlockFrame
*
>
(
aFrame
)
aStyleSet
aChangeList
)
;
}
UpdateBackdropIfNeeded
(
aFrame
aStyleSet
aChangeList
)
;
}
void
ServoRestyleManager
:
:
ProcessPostTraversal
(
Element
*
aElement
nsStyleContext
*
aParentContext
ServoStyleSet
*
aStyleSet
nsStyleChangeList
&
aChangeList
)
{
nsIFrame
*
styleFrame
=
nsLayoutUtils
:
:
GetStyleFrame
(
aElement
)
;
nsChangeHint
changeHint
=
Servo_TakeChangeHint
(
aElement
)
;
if
(
aElement
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
changeHint
|
=
nsChangeHint_ReconstructFrame
;
MOZ_ASSERT_IF
(
styleFrame
styleFrame
-
>
IsImageFrame
(
)
)
;
styleFrame
=
nullptr
;
}
if
(
(
styleFrame
|
|
(
changeHint
&
nsChangeHint_ReconstructFrame
)
)
&
&
changeHint
)
{
aChangeList
.
AppendChange
(
styleFrame
aElement
changeHint
)
;
}
if
(
changeHint
&
nsChangeHint_ReconstructFrame
)
{
ClearRestyleStateFromSubtree
(
aElement
)
;
return
;
}
RefPtr
<
nsStyleContext
>
oldStyleContext
=
styleFrame
?
styleFrame
-
>
StyleContext
(
)
:
nullptr
;
UndisplayedNode
*
displayContentsNode
=
nullptr
;
if
(
!
oldStyleContext
)
{
displayContentsNode
=
PresContext
(
)
-
>
FrameConstructor
(
)
-
>
GetDisplayContentsNodeFor
(
aElement
)
;
if
(
displayContentsNode
)
{
oldStyleContext
=
displayContentsNode
-
>
mStyle
;
}
}
RefPtr
<
ServoComputedValues
>
computedValues
=
aStyleSet
-
>
ResolveServoStyle
(
aElement
)
;
const
bool
recreateContext
=
oldStyleContext
&
&
oldStyleContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
!
=
computedValues
;
RefPtr
<
nsStyleContext
>
newContext
=
nullptr
;
if
(
recreateContext
)
{
MOZ_ASSERT
(
styleFrame
|
|
displayContentsNode
)
;
auto
pseudo
=
aElement
-
>
GetPseudoElementType
(
)
;
nsIAtom
*
pseudoTag
=
pseudo
=
=
CSSPseudoElementType
:
:
NotPseudo
?
nullptr
:
nsCSSPseudoElements
:
:
GetPseudoAtom
(
pseudo
)
;
newContext
=
aStyleSet
-
>
GetContext
(
computedValues
.
forget
(
)
aParentContext
pseudoTag
pseudo
aElement
)
;
newContext
-
>
EnsureSameStructsCached
(
oldStyleContext
)
;
for
(
nsIFrame
*
f
=
styleFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
newContext
)
;
}
if
(
MOZ_UNLIKELY
(
displayContentsNode
)
)
{
MOZ_ASSERT
(
!
styleFrame
)
;
displayContentsNode
-
>
mStyle
=
newContext
;
}
if
(
styleFrame
)
{
styleFrame
-
>
UpdateStyleOfOwnedAnonBoxes
(
*
aStyleSet
aChangeList
changeHint
)
;
UpdateFramePseudoElementStyles
(
styleFrame
*
aStyleSet
aChangeList
)
;
}
AddLayerChangesForAnimation
(
styleFrame
aElement
aChangeList
)
;
}
const
bool
descendantsNeedFrames
=
aElement
-
>
HasFlag
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
const
bool
traverseElementChildren
=
aElement
-
>
HasDirtyDescendantsForServo
(
)
|
|
descendantsNeedFrames
;
const
bool
traverseTextChildren
=
recreateContext
|
|
descendantsNeedFrames
;
if
(
traverseElementChildren
|
|
traverseTextChildren
)
{
nsStyleContext
*
upToDateContext
=
recreateContext
?
newContext
:
oldStyleContext
;
StyleChildrenIterator
it
(
aElement
)
;
TextPostTraversalState
textState
(
*
upToDateContext
*
aStyleSet
displayContentsNode
&
&
recreateContext
)
;
for
(
nsIContent
*
n
=
it
.
GetNextChild
(
)
;
n
;
n
=
it
.
GetNextChild
(
)
)
{
if
(
traverseElementChildren
&
&
n
-
>
IsElement
(
)
)
{
ProcessPostTraversal
(
n
-
>
AsElement
(
)
upToDateContext
aStyleSet
aChangeList
)
;
}
else
if
(
traverseTextChildren
&
&
n
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
{
ProcessPostTraversalForText
(
n
aChangeList
textState
)
;
}
}
}
aElement
-
>
UnsetHasDirtyDescendantsForServo
(
)
;
aElement
-
>
UnsetFlags
(
NODE_DESCENDANTS_NEED_FRAMES
)
;
}
void
ServoRestyleManager
:
:
ProcessPostTraversalForText
(
nsIContent
*
aTextNode
nsStyleChangeList
&
aChangeList
TextPostTraversalState
&
aPostTraversalState
)
{
if
(
aTextNode
-
>
HasFlag
(
NODE_NEEDS_FRAME
)
)
{
aChangeList
.
AppendChange
(
nullptr
aTextNode
nsChangeHint_ReconstructFrame
)
;
return
;
}
nsIFrame
*
primaryFrame
=
aTextNode
-
>
GetPrimaryFrame
(
)
;
if
(
primaryFrame
)
{
RefPtr
<
nsStyleContext
>
oldStyleContext
=
primaryFrame
-
>
StyleContext
(
)
;
nsStyleContext
&
newContext
=
aPostTraversalState
.
ComputeStyle
(
aTextNode
)
;
aPostTraversalState
.
ComputeHintIfNeeded
(
aTextNode
primaryFrame
newContext
aChangeList
)
;
for
(
nsIFrame
*
f
=
primaryFrame
;
f
;
f
=
GetNextContinuationWithSameStyle
(
f
oldStyleContext
)
)
{
f
-
>
SetStyleContext
(
&
newContext
)
;
}
}
}
void
ServoRestyleManager
:
:
ClearSnapshots
(
)
{
for
(
auto
iter
=
mSnapshots
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Key
(
)
-
>
UnsetFlags
(
ELEMENT_HAS_SNAPSHOT
|
ELEMENT_HANDLED_SNAPSHOT
)
;
iter
.
Remove
(
)
;
}
}
ServoElementSnapshot
&
ServoRestyleManager
:
:
SnapshotFor
(
Element
*
aElement
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
MOZ_ASSERT
(
aElement
-
>
HasServoData
(
)
)
;
MOZ_ASSERT
(
!
aElement
-
>
HasFlag
(
ELEMENT_HANDLED_SNAPSHOT
)
)
;
ServoElementSnapshot
*
snapshot
=
mSnapshots
.
LookupOrAdd
(
aElement
aElement
)
;
aElement
-
>
SetFlags
(
ELEMENT_HAS_SNAPSHOT
)
;
nsIPresShell
*
presShell
=
mPresContext
-
>
PresShell
(
)
;
presShell
-
>
EnsureStyleFlush
(
)
;
return
*
snapshot
;
}
nsIFrame
*
ServoRestyleManager
:
:
FrameForPseudoElement
(
const
nsIContent
*
aContent
nsIAtom
*
aPseudoTagOrNull
)
{
MOZ_ASSERT_IF
(
aPseudoTagOrNull
aContent
-
>
IsElement
(
)
)
;
if
(
!
aPseudoTagOrNull
)
{
return
aContent
-
>
GetPrimaryFrame
(
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
before
)
{
return
nsLayoutUtils
:
:
GetBeforeFrame
(
aContent
)
;
}
if
(
aPseudoTagOrNull
=
=
nsCSSPseudoElements
:
:
after
)
{
return
nsLayoutUtils
:
:
GetAfterFrame
(
aContent
)
;
}
MOZ_CRASH
(
"
Unkown
pseudo
-
element
given
to
"
"
ServoRestyleManager
:
:
FrameForPseudoElement
"
)
;
return
nullptr
;
}
void
ServoRestyleManager
:
:
DoProcessPendingRestyles
(
TraversalRestyleBehavior
aRestyleBehavior
)
{
MOZ_ASSERT
(
PresContext
(
)
-
>
Document
(
)
"
No
document
?
Pshaw
!
"
)
;
MOZ_ASSERT
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Missing
a
script
blocker
!
"
)
;
MOZ_ASSERT
(
!
mInStyleRefresh
"
Reentrant
call
?
"
)
;
if
(
MOZ_UNLIKELY
(
!
PresContext
(
)
-
>
PresShell
(
)
-
>
DidInitialize
(
)
)
)
{
return
;
}
AnimationsWithDestroyedFrame
animationsWithDestroyedFrame
(
this
)
;
ServoStyleSet
*
styleSet
=
StyleSet
(
)
;
nsIDocument
*
doc
=
PresContext
(
)
-
>
Document
(
)
;
bool
animationOnly
=
aRestyleBehavior
=
=
TraversalRestyleBehavior
:
:
ForAnimationOnly
;
PresContext
(
)
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
mInStyleRefresh
=
true
;
if
(
mHaveNonAnimationRestyles
&
&
!
animationOnly
)
{
+
+
mAnimationGeneration
;
}
while
(
animationOnly
?
styleSet
-
>
StyleDocumentForAnimationOnly
(
)
:
styleSet
-
>
StyleDocument
(
)
)
{
if
(
!
animationOnly
)
{
ClearSnapshots
(
)
;
}
nsStyleChangeList
currentChanges
(
StyleBackendType
:
:
Servo
)
;
DocumentStyleRootIterator
iter
(
doc
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
ProcessPostTraversal
(
root
nullptr
styleSet
currentChanges
)
;
}
ReentrantChangeList
newChanges
;
mReentrantChanges
=
&
newChanges
;
while
(
!
currentChanges
.
IsEmpty
(
)
)
{
ProcessRestyledFrames
(
currentChanges
)
;
MOZ_ASSERT
(
currentChanges
.
IsEmpty
(
)
)
;
for
(
ReentrantChange
&
change
:
newChanges
)
{
if
(
!
(
change
.
mHint
&
nsChangeHint_ReconstructFrame
)
&
&
!
change
.
mContent
-
>
GetPrimaryFrame
(
)
)
{
continue
;
}
currentChanges
.
AppendChange
(
change
.
mContent
-
>
GetPrimaryFrame
(
)
change
.
mContent
change
.
mHint
)
;
}
newChanges
.
Clear
(
)
;
}
mReentrantChanges
=
nullptr
;
IncrementRestyleGeneration
(
)
;
}
FlushOverflowChangedTracker
(
)
;
if
(
!
animationOnly
)
{
ClearSnapshots
(
)
;
styleSet
-
>
AssertTreeIsClean
(
)
;
mHaveNonAnimationRestyles
=
false
;
}
mInStyleRefresh
=
false
;
MOZ_ASSERT
(
mAnimationsWithDestroyedFrame
)
;
mAnimationsWithDestroyedFrame
-
>
StopAnimationsForElementsWithoutFrames
(
)
;
}
void
ServoRestyleManager
:
:
ProcessPendingRestyles
(
)
{
DoProcessPendingRestyles
(
TraversalRestyleBehavior
:
:
Normal
)
;
}
void
ServoRestyleManager
:
:
UpdateOnlyAnimationStyles
(
)
{
bool
doCSS
=
PresContext
(
)
-
>
EffectCompositor
(
)
-
>
HasPendingStyleUpdates
(
)
;
if
(
!
doCSS
)
{
return
;
}
DoProcessPendingRestyles
(
TraversalRestyleBehavior
:
:
ForAnimationOnly
)
;
}
void
ServoRestyleManager
:
:
RestyleForInsertOrChange
(
nsINode
*
aContainer
nsIContent
*
aChild
)
{
}
void
ServoRestyleManager
:
:
RestyleForAppend
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
{
}
void
ServoRestyleManager
:
:
ContentRemoved
(
nsINode
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ContentRemoved
not
implemented
"
)
;
}
void
ServoRestyleManager
:
:
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aChangedBits
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
if
(
!
aContent
-
>
IsElement
(
)
)
{
return
;
}
Element
*
aElement
=
aContent
-
>
AsElement
(
)
;
nsChangeHint
changeHint
;
nsRestyleHint
restyleHint
;
if
(
!
aElement
-
>
HasServoData
(
)
)
{
return
;
}
ContentStateChangedInternal
(
aElement
aChangedBits
&
changeHint
&
restyleHint
)
;
ServoElementSnapshot
&
snapshot
=
SnapshotFor
(
aElement
)
;
EventStates
previousState
=
aElement
-
>
StyleState
(
)
^
aChangedBits
;
snapshot
.
AddState
(
previousState
)
;
if
(
Element
*
parent
=
aElement
-
>
GetFlattenedTreeParentElementForStyle
(
)
)
{
parent
-
>
NoteDirtyDescendantsForServo
(
)
;
}
PostRestyleEvent
(
aElement
restyleHint
changeHint
)
;
}
void
ServoRestyleManager
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
if
(
!
aElement
-
>
HasServoData
(
)
)
{
return
;
}
ServoElementSnapshot
&
snapshot
=
SnapshotFor
(
aElement
)
;
snapshot
.
AddAttrs
(
aElement
)
;
if
(
Element
*
parent
=
aElement
-
>
GetFlattenedTreeParentElementForStyle
(
)
)
{
parent
-
>
NoteDirtyDescendantsForServo
(
)
;
}
}
void
ServoRestyleManager
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MOZ_ASSERT
(
!
mInStyleRefresh
)
;
MOZ_ASSERT_IF
(
mSnapshots
.
Get
(
aElement
)
mSnapshots
.
Get
(
aElement
)
-
>
HasAttrs
(
)
)
;
nsIFrame
*
primaryFrame
=
aElement
-
>
GetPrimaryFrame
(
)
;
if
(
primaryFrame
)
{
primaryFrame
-
>
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
}
nsChangeHint
hint
=
aElement
-
>
GetAttributeChangeHint
(
aAttribute
aModType
)
;
if
(
hint
)
{
PostRestyleEvent
(
aElement
nsRestyleHint
(
0
)
hint
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
style
)
{
PostRestyleEvent
(
aElement
eRestyle_StyleAttribute
nsChangeHint
(
0
)
)
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
cellpadding
&
&
aElement
-
>
IsHTMLElement
(
nsGkAtoms
:
:
table
)
)
{
PostRestyleEvent
(
aElement
eRestyle_Subtree
nsChangeHint
(
0
)
)
;
}
if
(
aElement
-
>
IsAttributeMapped
(
aAttribute
)
)
{
Servo_NoteExplicitHints
(
aElement
eRestyle_Self
nsChangeHint
(
0
)
)
;
}
}
nsresult
ServoRestyleManager
:
:
ReparentStyleContext
(
nsIFrame
*
aFrame
)
{
NS_WARNING
(
"
stylo
:
ServoRestyleManager
:
:
ReparentStyleContext
not
implemented
"
)
;
return
NS_OK
;
}
}
