#
include
"
nsCounterManager
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
nsBulletFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsTArray
.
h
"
using
namespace
mozilla
;
bool
nsCounterUseNode
:
:
InitTextFrame
(
nsGenConList
*
aList
nsIFrame
*
aPseudoFrame
nsIFrame
*
aTextFrame
)
{
nsCounterNode
:
:
InitTextFrame
(
aList
aPseudoFrame
aTextFrame
)
;
nsCounterList
*
counterList
=
static_cast
<
nsCounterList
*
>
(
aList
)
;
counterList
-
>
Insert
(
this
)
;
bool
dirty
=
counterList
-
>
IsDirty
(
)
;
if
(
!
dirty
)
{
if
(
counterList
-
>
IsLast
(
this
)
)
{
Calc
(
counterList
)
;
nsAutoString
contentString
;
GetText
(
contentString
)
;
aTextFrame
-
>
GetContent
(
)
-
>
SetText
(
contentString
false
)
;
}
else
{
counterList
-
>
SetDirty
(
)
;
return
true
;
}
}
return
false
;
}
void
nsCounterUseNode
:
:
Calc
(
nsCounterList
*
aList
)
{
NS_ASSERTION
(
!
aList
-
>
IsDirty
(
)
"
Why
are
we
calculating
with
a
dirty
list
?
"
)
;
mValueAfter
=
aList
-
>
ValueBefore
(
this
)
;
}
void
nsCounterChangeNode
:
:
Calc
(
nsCounterList
*
aList
)
{
NS_ASSERTION
(
!
aList
-
>
IsDirty
(
)
"
Why
are
we
calculating
with
a
dirty
list
?
"
)
;
if
(
mType
=
=
RESET
)
{
mValueAfter
=
mChangeValue
;
}
else
{
NS_ASSERTION
(
mType
=
=
INCREMENT
"
invalid
type
"
)
;
mValueAfter
=
nsCounterManager
:
:
IncrementCounter
(
aList
-
>
ValueBefore
(
this
)
mChangeValue
)
;
}
}
void
nsCounterUseNode
:
:
GetText
(
nsString
&
aResult
)
{
aResult
.
Truncate
(
)
;
AutoTArray
<
nsCounterNode
*
8
>
stack
;
stack
.
AppendElement
(
static_cast
<
nsCounterNode
*
>
(
this
)
)
;
if
(
mAllCounters
&
&
mScopeStart
)
{
for
(
nsCounterNode
*
n
=
mScopeStart
;
n
-
>
mScopePrev
;
n
=
n
-
>
mScopeStart
)
{
stack
.
AppendElement
(
n
-
>
mScopePrev
)
;
}
}
WritingMode
wm
=
mPseudoFrame
?
mPseudoFrame
-
>
GetWritingMode
(
)
:
WritingMode
(
)
;
for
(
uint32_t
i
=
stack
.
Length
(
)
-
1
;
;
-
-
i
)
{
nsCounterNode
*
n
=
stack
[
i
]
;
nsAutoString
text
;
bool
isTextRTL
;
mCounterStyle
-
>
GetCounterText
(
n
-
>
mValueAfter
wm
text
isTextRTL
)
;
aResult
.
Append
(
text
)
;
if
(
i
=
=
0
)
{
break
;
}
aResult
.
Append
(
mSeparator
)
;
}
}
void
nsCounterList
:
:
SetScope
(
nsCounterNode
*
aNode
)
{
if
(
aNode
=
=
First
(
)
)
{
aNode
-
>
mScopeStart
=
nullptr
;
aNode
-
>
mScopePrev
=
nullptr
;
return
;
}
nsIContent
*
nodeContent
=
aNode
-
>
mPseudoFrame
-
>
GetContent
(
)
-
>
GetParent
(
)
;
for
(
nsCounterNode
*
prev
=
Prev
(
aNode
)
*
start
;
prev
;
prev
=
start
-
>
mScopePrev
)
{
start
=
(
prev
-
>
mType
=
=
nsCounterNode
:
:
RESET
|
|
!
prev
-
>
mScopeStart
)
?
prev
:
prev
-
>
mScopeStart
;
nsIContent
*
startContent
=
start
-
>
mPseudoFrame
-
>
GetContent
(
)
-
>
GetParent
(
)
;
NS_ASSERTION
(
nodeContent
|
|
!
startContent
"
null
check
on
startContent
should
be
sufficient
to
"
"
null
check
nodeContent
as
well
since
if
nodeContent
"
"
is
for
the
root
startContent
(
which
is
before
it
)
"
"
must
be
too
"
)
;
if
(
!
(
aNode
-
>
mType
=
=
nsCounterNode
:
:
RESET
&
&
nodeContent
=
=
startContent
)
&
&
(
!
startContent
|
|
nsContentUtils
:
:
ContentIsDescendantOf
(
nodeContent
startContent
)
)
)
{
aNode
-
>
mScopeStart
=
start
;
aNode
-
>
mScopePrev
=
prev
;
return
;
}
}
aNode
-
>
mScopeStart
=
nullptr
;
aNode
-
>
mScopePrev
=
nullptr
;
}
void
nsCounterList
:
:
RecalcAll
(
)
{
mDirty
=
false
;
for
(
nsCounterNode
*
node
=
First
(
)
;
node
;
node
=
Next
(
node
)
)
{
SetScope
(
node
)
;
node
-
>
Calc
(
this
)
;
if
(
node
-
>
mType
=
=
nsCounterNode
:
:
USE
)
{
nsCounterUseNode
*
useNode
=
node
-
>
UseNode
(
)
;
if
(
useNode
-
>
mText
)
{
nsAutoString
text
;
useNode
-
>
GetText
(
text
)
;
useNode
-
>
mText
-
>
SetData
(
text
)
;
}
}
}
}
nsCounterManager
:
:
nsCounterManager
(
)
:
mNames
(
)
{
}
bool
nsCounterManager
:
:
AddCounterResetsAndIncrements
(
nsIFrame
*
aFrame
)
{
const
nsStyleContent
*
styleContent
=
aFrame
-
>
StyleContent
(
)
;
if
(
!
styleContent
-
>
CounterIncrementCount
(
)
&
&
!
styleContent
-
>
CounterResetCount
(
)
)
{
return
false
;
}
int32_t
i
i_end
;
bool
dirty
=
false
;
for
(
i
=
0
i_end
=
styleContent
-
>
CounterResetCount
(
)
;
i
!
=
i_end
;
+
+
i
)
{
dirty
|
=
AddResetOrIncrement
(
aFrame
i
styleContent
-
>
CounterResetAt
(
i
)
nsCounterChangeNode
:
:
RESET
)
;
}
for
(
i
=
0
i_end
=
styleContent
-
>
CounterIncrementCount
(
)
;
i
!
=
i_end
;
+
+
i
)
{
dirty
|
=
AddResetOrIncrement
(
aFrame
i
styleContent
-
>
CounterIncrementAt
(
i
)
nsCounterChangeNode
:
:
INCREMENT
)
;
}
return
dirty
;
}
bool
nsCounterManager
:
:
AddResetOrIncrement
(
nsIFrame
*
aFrame
int32_t
aIndex
const
nsStyleCounterData
&
aCounterData
nsCounterNode
:
:
Type
aType
)
{
nsCounterChangeNode
*
node
=
new
nsCounterChangeNode
(
aFrame
aType
aCounterData
.
mValue
aIndex
)
;
nsCounterList
*
counterList
=
CounterListFor
(
aCounterData
.
mCounter
)
;
counterList
-
>
Insert
(
node
)
;
if
(
!
counterList
-
>
IsLast
(
node
)
)
{
counterList
-
>
SetDirty
(
)
;
return
true
;
}
if
(
MOZ_LIKELY
(
!
counterList
-
>
IsDirty
(
)
)
)
{
node
-
>
Calc
(
counterList
)
;
}
return
false
;
}
nsCounterList
*
nsCounterManager
:
:
CounterListFor
(
const
nsSubstring
&
aCounterName
)
{
nsCounterList
*
counterList
;
if
(
!
mNames
.
Get
(
aCounterName
&
counterList
)
)
{
counterList
=
new
nsCounterList
(
)
;
mNames
.
Put
(
aCounterName
counterList
)
;
}
return
counterList
;
}
void
nsCounterManager
:
:
RecalcAll
(
)
{
for
(
auto
iter
=
mNames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsCounterList
*
list
=
iter
.
UserData
(
)
;
if
(
list
-
>
IsDirty
(
)
)
{
list
-
>
RecalcAll
(
)
;
}
}
}
void
nsCounterManager
:
:
SetAllDirty
(
)
{
for
(
auto
iter
=
mNames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
UserData
(
)
-
>
SetDirty
(
)
;
}
}
bool
nsCounterManager
:
:
DestroyNodesFor
(
nsIFrame
*
aFrame
)
{
bool
destroyedAny
=
false
;
for
(
auto
iter
=
mNames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsCounterList
*
list
=
iter
.
UserData
(
)
;
if
(
list
-
>
DestroyNodesFor
(
aFrame
)
)
{
destroyedAny
=
true
;
list
-
>
SetDirty
(
)
;
}
}
return
destroyedAny
;
}
#
ifdef
DEBUG
void
nsCounterManager
:
:
Dump
(
)
{
printf
(
"
\
n
\
nCounter
Manager
Lists
:
\
n
"
)
;
for
(
auto
iter
=
mNames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
printf
(
"
Counter
named
\
"
%
s
\
"
:
\
n
"
NS_ConvertUTF16toUTF8
(
iter
.
Key
(
)
)
.
get
(
)
)
;
nsCounterList
*
list
=
iter
.
UserData
(
)
;
int32_t
i
=
0
;
for
(
nsCounterNode
*
node
=
list
-
>
First
(
)
;
node
;
node
=
list
-
>
Next
(
node
)
)
{
const
char
*
types
[
]
=
{
"
RESET
"
"
INCREMENT
"
"
USE
"
}
;
printf
(
"
Node
#
%
d
%
p
frame
=
%
p
index
=
%
d
type
=
%
s
valAfter
=
%
d
\
n
"
"
scope
-
start
=
%
p
scope
-
prev
=
%
p
"
i
+
+
(
void
*
)
node
(
void
*
)
node
-
>
mPseudoFrame
node
-
>
mContentIndex
types
[
node
-
>
mType
]
node
-
>
mValueAfter
(
void
*
)
node
-
>
mScopeStart
(
void
*
)
node
-
>
mScopePrev
)
;
if
(
node
-
>
mType
=
=
nsCounterNode
:
:
USE
)
{
nsAutoString
text
;
node
-
>
UseNode
(
)
-
>
GetText
(
text
)
;
printf
(
"
text
=
%
s
"
NS_ConvertUTF16toUTF8
(
text
)
.
get
(
)
)
;
}
printf
(
"
\
n
"
)
;
}
}
printf
(
"
\
n
\
n
"
)
;
}
#
endif
