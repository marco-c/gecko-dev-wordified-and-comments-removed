#
ifndef
mozilla_RestyleManager_h
#
define
mozilla_RestyleManager_h
#
include
"
mozilla
/
OverflowChangedTracker
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsPresContext
.
h
"
class
nsCString
;
class
nsCSSFrameConstructor
;
class
nsStyleChangeList
;
namespace
mozilla
{
class
EventStates
;
class
GeckoRestyleManager
;
class
ServoRestyleManager
;
namespace
dom
{
class
Element
;
}
class
RestyleManager
{
public
:
typedef
mozilla
:
:
dom
:
:
Element
Element
;
NS_INLINE_DECL_REFCOUNTING
(
mozilla
:
:
RestyleManager
)
uint32_t
GetRestyleGeneration
(
)
const
{
return
mRestyleGeneration
;
}
uint32_t
GetHoverGeneration
(
)
const
{
return
mHoverGeneration
;
}
void
Disconnect
(
)
{
mPresContext
=
nullptr
;
}
static
nsCString
RestyleHintToString
(
nsRestyleHint
aHint
)
;
#
ifdef
DEBUG
static
nsCString
ChangeHintToString
(
nsChangeHint
aHint
)
;
void
DebugVerifyStyleTree
(
nsIFrame
*
aFrame
)
;
#
endif
void
FlushOverflowChangedTracker
(
)
{
mOverflowChangedTracker
.
Flush
(
)
;
}
void
NotifyDestroyingFrame
(
nsIFrame
*
aFrame
)
{
mOverflowChangedTracker
.
RemoveFrame
(
aFrame
)
;
if
(
mDestroyedFrames
)
{
mDestroyedFrames
-
>
PutEntry
(
aFrame
)
;
}
}
void
ProcessRestyledFrames
(
nsStyleChangeList
&
aChangeList
)
;
bool
IsInStyleRefresh
(
)
const
{
return
mInStyleRefresh
;
}
class
MOZ_STACK_CLASS
AnimationsWithDestroyedFrame
final
{
public
:
explicit
AnimationsWithDestroyedFrame
(
RestyleManager
*
aRestyleManager
)
;
void
Put
(
nsIContent
*
aContent
nsStyleContext
*
aStyleContext
)
{
MOZ_ASSERT
(
aContent
)
;
CSSPseudoElementType
pseudoType
=
aStyleContext
-
>
GetPseudoType
(
)
;
if
(
pseudoType
=
=
CSSPseudoElementType
:
:
NotPseudo
)
{
mContents
.
AppendElement
(
aContent
)
;
}
else
if
(
pseudoType
=
=
CSSPseudoElementType
:
:
before
)
{
MOZ_ASSERT
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
mozgeneratedcontentbefore
)
;
mBeforeContents
.
AppendElement
(
aContent
-
>
GetParent
(
)
)
;
}
else
if
(
pseudoType
=
=
CSSPseudoElementType
:
:
after
)
{
MOZ_ASSERT
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
mozgeneratedcontentafter
)
;
mAfterContents
.
AppendElement
(
aContent
-
>
GetParent
(
)
)
;
}
}
void
StopAnimationsForElementsWithoutFrames
(
)
;
private
:
void
StopAnimationsWithoutFrame
(
nsTArray
<
RefPtr
<
nsIContent
>
>
&
aArray
CSSPseudoElementType
aPseudoType
)
;
RestyleManager
*
mRestyleManager
;
AutoRestore
<
AnimationsWithDestroyedFrame
*
>
mRestorePointer
;
nsTArray
<
RefPtr
<
nsIContent
>
>
mContents
;
nsTArray
<
RefPtr
<
nsIContent
>
>
mBeforeContents
;
nsTArray
<
RefPtr
<
nsIContent
>
>
mAfterContents
;
}
;
AnimationsWithDestroyedFrame
*
GetAnimationsWithDestroyedFrame
(
)
{
return
mAnimationsWithDestroyedFrame
;
}
void
ContentInserted
(
nsINode
*
aContainer
nsIContent
*
aChild
)
;
void
ContentAppended
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
;
void
ContentRemoved
(
nsINode
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
;
void
RestyleForInsertOrChange
(
nsINode
*
aContainer
nsIContent
*
aChild
)
;
void
RestyleForAppend
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
;
MOZ_DECL_STYLO_METHODS
(
GeckoRestyleManager
ServoRestyleManager
)
inline
void
PostRestyleEvent
(
dom
:
:
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
;
inline
void
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
inline
void
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
inline
void
ProcessPendingRestyles
(
)
;
inline
void
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aStateMask
)
;
inline
void
AttributeWillChange
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
;
inline
void
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
;
inline
nsresult
ReparentStyleContext
(
nsIFrame
*
aFrame
)
;
inline
void
UpdateOnlyAnimationStyles
(
)
;
uint64_t
GetAnimationGeneration
(
)
const
{
return
mAnimationGeneration
;
}
static
uint64_t
GetAnimationGenerationForFrame
(
nsIFrame
*
aFrame
)
;
void
IncrementAnimationGeneration
(
)
;
static
void
AddLayerChangesForAnimation
(
nsIFrame
*
aFrame
nsIContent
*
aContent
nsStyleChangeList
&
aChangeListToProcess
)
;
protected
:
RestyleManager
(
StyleBackendType
aType
nsPresContext
*
aPresContext
)
;
virtual
~
RestyleManager
(
)
{
MOZ_ASSERT
(
!
mAnimationsWithDestroyedFrame
"
leaving
dangling
pointers
from
AnimationsWithDestroyedFrame
"
)
;
}
void
RestyleForEmptyChange
(
Element
*
aContainer
)
;
void
ContentStateChangedInternal
(
Element
*
aElement
EventStates
aStateMask
nsChangeHint
*
aOutChangeHint
nsRestyleHint
*
aOutRestyleHint
)
;
bool
IsDisconnected
(
)
{
return
mPresContext
=
=
nullptr
;
}
void
IncrementHoverGeneration
(
)
{
+
+
mHoverGeneration
;
}
void
IncrementRestyleGeneration
(
)
{
if
(
+
+
mRestyleGeneration
=
=
0
)
{
+
+
mRestyleGeneration
;
}
}
nsPresContext
*
PresContext
(
)
const
{
MOZ_ASSERT
(
mPresContext
)
;
return
mPresContext
;
}
nsCSSFrameConstructor
*
FrameConstructor
(
)
const
{
return
PresContext
(
)
-
>
FrameConstructor
(
)
;
}
private
:
nsPresContext
*
mPresContext
;
uint32_t
mRestyleGeneration
;
uint32_t
mHoverGeneration
;
mozilla
:
:
UniquePtr
<
nsTHashtable
<
nsPtrHashKey
<
const
nsIFrame
>
>
>
mDestroyedFrames
;
const
StyleBackendType
mType
;
protected
:
bool
mInStyleRefresh
;
uint64_t
mAnimationGeneration
;
OverflowChangedTracker
mOverflowChangedTracker
;
static
nsIFrame
*
GetNearestAncestorFrame
(
nsIContent
*
aContent
)
;
static
nsIFrame
*
GetNextBlockInInlineSibling
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
GetNextContinuationWithSameStyle
(
nsIFrame
*
aFrame
nsStyleContext
*
aOldStyleContext
bool
*
aHaveMoreContinuations
=
nullptr
)
;
AnimationsWithDestroyedFrame
*
mAnimationsWithDestroyedFrame
=
nullptr
;
friend
class
mozilla
:
:
GeckoRestyleManager
;
friend
class
mozilla
:
:
ServoRestyleManager
;
}
;
}
#
endif
