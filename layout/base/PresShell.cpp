#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
FontFaceSet
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
AutoRestore
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
IMEStateManager
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
Logging
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
Sprintf
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
mozilla
/
TouchEvents
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
<
algorithm
>
#
ifdef
XP_WIN
#
include
"
winuser
.
h
"
#
endif
#
include
"
gfxContext
.
h
"
#
include
"
gfxPrefs
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIContentIterator
.
h
"
#
include
"
nsIPresShellInlines
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
PointerEventHandler
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsFrame
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsCRTGlue
.
h
"
#
include
"
prinrval
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsWindowSizes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsIPageSequenceFrame
.
h
"
#
include
"
nsIPermissionManager
.
h
"
#
include
"
nsIMozBrowserFrame
.
h
"
#
include
"
nsCaret
.
h
"
#
include
"
mozilla
/
AccessibleCaretEventHub
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsILineIterator
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
dom
/
Touch
.
h
"
#
include
"
mozilla
/
dom
/
TouchEvent
.
h
"
#
include
"
mozilla
/
dom
/
PointerEventBinding
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsViewportInfo
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
prenv
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsRegion
.
h
"
#
include
"
nsAutoLayoutPhase
.
h
"
#
ifdef
MOZ_GECKO_PROFILER
#
include
"
AutoProfilerStyleMarker
.
h
"
#
endif
#
ifdef
MOZ_REFLOW_PERF
#
include
"
nsFontMetrics
.
h
"
#
endif
#
include
"
PositionedEventTargeting
.
h
"
#
include
"
nsIReflowCallback
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsIObjectFrame
.
h
"
#
include
"
nsIObjectLoadingContent
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsStyleSheetService
.
h
"
#
include
"
gfxUtils
.
h
"
#
include
"
nsSMILAnimationController
.
h
"
#
include
"
SVGContentUtils
.
h
"
#
include
"
SVGObserverUtils
.
h
"
#
include
"
SVGFragmentIdentifier
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsIDocShellTreeItem
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsITimer
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
nsAccessibilityService
.
h
"
#
include
"
mozilla
/
a11y
/
DocAccessible
.
h
"
#
ifdef
DEBUG
#
include
"
mozilla
/
a11y
/
Logging
.
h
"
#
endif
#
endif
#
include
"
nsStyleChangeList
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
ifdef
MOZ_XUL
#
include
"
nsMenuFrame
.
h
"
#
include
"
nsTreeBodyFrame
.
h
"
#
include
"
nsIBoxObject
.
h
"
#
include
"
nsITreeBoxObject
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsTreeColumns
.
h
"
#
include
"
nsIDOMXULMultSelectCntrlEl
.
h
"
#
include
"
nsIDOMXULSelectCntrlItemEl
.
h
"
#
include
"
nsIDOMXULMenuListElement
.
h
"
#
include
"
nsXULElement
.
h
"
#
include
"
mozilla
/
dom
/
BoxObject
.
h
"
#
endif
#
include
"
mozilla
/
layers
/
CompositorBridgeChild
.
h
"
#
include
"
ClientLayerManager
.
h
"
#
include
"
GeckoProfiler
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
Layers
.
h
"
#
include
"
LayerTreeInvalidation
.
h
"
#
include
"
mozilla
/
css
/
ImageLoader
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimeline
.
h
"
#
include
"
mozilla
/
dom
/
ScriptSettings
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsIImageLoadingContent
.
h
"
#
include
"
nsImageFrame
.
h
"
#
include
"
nsIScreen
.
h
"
#
include
"
nsIScreenManager
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
include
"
ChildIterator
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
nsIDragSession
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
nsSubDocumentFrame
.
h
"
#
include
"
nsQueryObject
.
h
"
#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
mozilla
/
layers
/
InputAPZContext
.
h
"
#
include
"
mozilla
/
layers
/
FocusTarget
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderLayerManager
.
h
"
#
include
"
mozilla
/
layers
/
WebRenderUserData
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
dom
/
ImageTracker
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsHashKeys
.
h
"
#
ifdef
MOZ_TASK_TRACER
#
include
"
GeckoTaskTracer
.
h
"
using
namespace
mozilla
:
:
tasktracer
;
#
endif
#
define
ANCHOR_SCROLL_FLAGS
\
(
nsIPresShell
:
:
SCROLL_OVERFLOW_HIDDEN
|
nsIPresShell
:
:
SCROLL_NO_PARENT_FRAMES
)
#
define
RELATIVE_SCALEFACTOR
0
.
0925f
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layers
;
using
namespace
mozilla
:
:
gfx
;
using
namespace
mozilla
:
:
layout
;
using
PaintFrameFlags
=
nsLayoutUtils
:
:
PaintFrameFlags
;
typedef
FrameMetrics
:
:
ViewID
ViewID
;
CapturingContentInfo
nsIPresShell
:
:
gCaptureInfo
=
{
false
false
false
false
}
;
nsIContent
*
nsIPresShell
:
:
gKeyDownTarget
;
struct
RangePaintInfo
{
RefPtr
<
nsRange
>
mRange
;
nsDisplayListBuilder
mBuilder
;
nsDisplayList
mList
;
nsPoint
mRootOffset
;
RangePaintInfo
(
nsRange
*
aRange
nsIFrame
*
aFrame
)
:
mRange
(
aRange
)
mBuilder
(
aFrame
nsDisplayListBuilderMode
:
:
PAINTING
false
)
{
MOZ_COUNT_CTOR
(
RangePaintInfo
)
;
mBuilder
.
BeginFrame
(
)
;
}
~
RangePaintInfo
(
)
{
mList
.
DeleteAll
(
&
mBuilder
)
;
mBuilder
.
EndFrame
(
)
;
MOZ_COUNT_DTOR
(
RangePaintInfo
)
;
}
}
;
#
undef
NOISY
#
ifdef
DEBUG
static
uint32_t
gVerifyReflowFlags
;
struct
VerifyReflowFlags
{
const
char
*
name
;
uint32_t
bit
;
}
;
static
const
VerifyReflowFlags
gFlags
[
]
=
{
{
"
verify
"
VERIFY_REFLOW_ON
}
{
"
reflow
"
VERIFY_REFLOW_NOISY
}
{
"
all
"
VERIFY_REFLOW_ALL
}
{
"
list
-
commands
"
VERIFY_REFLOW_DUMP_COMMANDS
}
{
"
noisy
-
commands
"
VERIFY_REFLOW_NOISY_RC
}
{
"
really
-
noisy
-
commands
"
VERIFY_REFLOW_REALLY_NOISY_RC
}
{
"
resize
"
VERIFY_REFLOW_DURING_RESIZE_REFLOW
}
}
;
#
define
NUM_VERIFY_REFLOW_FLAGS
(
sizeof
(
gFlags
)
/
sizeof
(
gFlags
[
0
]
)
)
static
void
ShowVerifyReflowFlags
(
)
{
printf
(
"
Here
are
the
available
GECKO_VERIFY_REFLOW_FLAGS
:
\
n
"
)
;
const
VerifyReflowFlags
*
flag
=
gFlags
;
const
VerifyReflowFlags
*
limit
=
gFlags
+
NUM_VERIFY_REFLOW_FLAGS
;
while
(
flag
<
limit
)
{
printf
(
"
%
s
\
n
"
flag
-
>
name
)
;
+
+
flag
;
}
printf
(
"
Note
:
GECKO_VERIFY_REFLOW_FLAGS
is
a
comma
separated
list
of
flag
\
n
"
)
;
printf
(
"
names
(
no
whitespace
)
\
n
"
)
;
}
#
endif
#
ifdef
MOZ_REFLOW_PERF
class
ReflowCountMgr
;
static
const
char
kGrandTotalsStr
[
]
=
"
Grand
Totals
"
;
class
ReflowCounter
{
public
:
explicit
ReflowCounter
(
ReflowCountMgr
*
aMgr
=
nullptr
)
;
~
ReflowCounter
(
)
;
void
ClearTotals
(
)
;
void
DisplayTotals
(
const
char
*
aStr
)
;
void
DisplayDiffTotals
(
const
char
*
aStr
)
;
void
DisplayHTMLTotals
(
const
char
*
aStr
)
;
void
Add
(
)
{
mTotal
+
+
;
}
void
Add
(
uint32_t
aTotal
)
{
mTotal
+
=
aTotal
;
}
void
CalcDiffInTotals
(
)
;
void
SetTotalsCache
(
)
;
void
SetMgr
(
ReflowCountMgr
*
aMgr
)
{
mMgr
=
aMgr
;
}
uint32_t
GetTotal
(
)
{
return
mTotal
;
}
protected
:
void
DisplayTotals
(
uint32_t
aTotal
const
char
*
aTitle
)
;
void
DisplayHTMLTotals
(
uint32_t
aTotal
const
char
*
aTitle
)
;
uint32_t
mTotal
;
uint32_t
mCacheTotal
;
ReflowCountMgr
*
mMgr
;
}
;
class
IndiReflowCounter
{
public
:
explicit
IndiReflowCounter
(
ReflowCountMgr
*
aMgr
=
nullptr
)
:
mFrame
(
nullptr
)
mCount
(
0
)
mMgr
(
aMgr
)
mCounter
(
aMgr
)
mHasBeenOutput
(
false
)
{
}
virtual
~
IndiReflowCounter
(
)
{
}
nsAutoString
mName
;
nsIFrame
*
mFrame
;
int32_t
mCount
;
ReflowCountMgr
*
mMgr
;
ReflowCounter
mCounter
;
bool
mHasBeenOutput
;
}
;
class
ReflowCountMgr
{
public
:
ReflowCountMgr
(
)
;
virtual
~
ReflowCountMgr
(
)
;
void
ClearTotals
(
)
;
void
ClearGrandTotals
(
)
;
void
DisplayTotals
(
const
char
*
aStr
)
;
void
DisplayHTMLTotals
(
const
char
*
aStr
)
;
void
DisplayDiffsInTotals
(
)
;
void
Add
(
const
char
*
aName
nsIFrame
*
aFrame
)
;
ReflowCounter
*
LookUp
(
const
char
*
aName
)
;
void
PaintCount
(
const
char
*
aName
gfxContext
*
aRenderingContext
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
const
nsPoint
&
aOffset
uint32_t
aColor
)
;
FILE
*
GetOutFile
(
)
{
return
mFD
;
}
void
SetPresContext
(
nsPresContext
*
aPresContext
)
{
mPresContext
=
aPresContext
;
}
void
SetPresShell
(
nsIPresShell
*
aPresShell
)
{
mPresShell
=
aPresShell
;
}
void
SetDumpFrameCounts
(
bool
aVal
)
{
mDumpFrameCounts
=
aVal
;
}
void
SetDumpFrameByFrameCounts
(
bool
aVal
)
{
mDumpFrameByFrameCounts
=
aVal
;
}
void
SetPaintFrameCounts
(
bool
aVal
)
{
mPaintFrameByFrameCounts
=
aVal
;
}
bool
IsPaintingFrameCounts
(
)
{
return
mPaintFrameByFrameCounts
;
}
protected
:
void
DisplayTotals
(
uint32_t
aTotal
uint32_t
*
aDupArray
char
*
aTitle
)
;
void
DisplayHTMLTotals
(
uint32_t
aTotal
uint32_t
*
aDupArray
char
*
aTitle
)
;
void
DoGrandTotals
(
)
;
void
DoIndiTotalsTree
(
)
;
void
DoGrandHTMLTotals
(
)
;
nsClassHashtable
<
nsCharPtrHashKey
ReflowCounter
>
mCounts
;
nsClassHashtable
<
nsCharPtrHashKey
IndiReflowCounter
>
mIndiFrameCounts
;
FILE
*
mFD
;
bool
mDumpFrameCounts
;
bool
mDumpFrameByFrameCounts
;
bool
mPaintFrameByFrameCounts
;
bool
mCycledOnce
;
nsPresContext
*
mPresContext
;
nsIPresShell
*
mPresShell
;
}
;
#
endif
#
define
SHOW_CARET
#
define
NS_MAX_REFLOW_TIME
1000000
static
int32_t
gMaxRCProcessingTime
=
-
1
;
struct
nsCallbackEventRequest
{
nsIReflowCallback
*
callback
;
nsCallbackEventRequest
*
next
;
}
;
#
ifdef
DEBUG
#
define
ASSERT_REFLOW_SCHEDULED_STATE
(
)
\
{
\
if
(
ObservingLayoutFlushes
(
)
)
{
\
MOZ_ASSERT
(
mDocument
-
>
GetBFCacheEntry
(
)
|
|
\
mPresContext
-
>
RefreshDriver
(
)
-
>
IsLayoutFlushObserver
(
this
)
\
"
Unexpected
state
"
)
;
\
}
else
{
\
MOZ_ASSERT
(
!
mPresContext
-
>
RefreshDriver
(
)
-
>
IsLayoutFlushObserver
(
this
)
\
"
Unexpected
state
"
)
;
\
}
\
}
#
else
#
define
ASSERT_REFLOW_SCHEDULED_STATE
(
)
#
endif
class
nsAutoCauseReflowNotifier
{
public
:
explicit
nsAutoCauseReflowNotifier
(
PresShell
*
aShell
)
:
mShell
(
aShell
)
{
mShell
-
>
WillCauseReflow
(
)
;
}
~
nsAutoCauseReflowNotifier
(
)
{
if
(
!
mShell
-
>
mHaveShutDown
)
{
mShell
-
>
DidCauseReflow
(
)
;
}
else
{
nsContentUtils
:
:
RemoveScriptBlocker
(
)
;
}
}
PresShell
*
mShell
;
}
;
class
MOZ_STACK_CLASS
nsPresShellEventCB
:
public
EventDispatchingCallback
{
public
:
explicit
nsPresShellEventCB
(
PresShell
*
aPresShell
)
:
mPresShell
(
aPresShell
)
{
}
virtual
void
HandleEvent
(
EventChainPostVisitor
&
aVisitor
)
override
{
if
(
aVisitor
.
mPresContext
&
&
aVisitor
.
mEvent
-
>
mClass
!
=
eBasicEventClass
)
{
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eMouseDown
|
|
aVisitor
.
mEvent
-
>
mMessage
=
=
eMouseUp
)
{
mPresShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
else
if
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eWheel
&
&
aVisitor
.
mEventStatus
!
=
nsEventStatus_eConsumeNoDefault
)
{
nsIFrame
*
frame
=
mPresShell
-
>
GetCurrentEventFrame
(
)
;
if
(
frame
)
{
RefPtr
<
EventStateManager
>
esm
=
aVisitor
.
mPresContext
-
>
EventStateManager
(
)
;
esm
-
>
DispatchLegacyMouseScrollEvents
(
frame
aVisitor
.
mEvent
-
>
AsWheelEvent
(
)
&
aVisitor
.
mEventStatus
)
;
}
}
nsIFrame
*
frame
=
mPresShell
-
>
GetCurrentEventFrame
(
)
;
if
(
!
frame
&
&
(
aVisitor
.
mEvent
-
>
mMessage
=
=
eMouseUp
|
|
aVisitor
.
mEvent
-
>
mMessage
=
=
eTouchEnd
)
)
{
frame
=
mPresShell
-
>
GetRootFrame
(
)
;
}
if
(
frame
)
{
frame
-
>
HandleEvent
(
aVisitor
.
mPresContext
aVisitor
.
mEvent
-
>
AsGUIEvent
(
)
&
aVisitor
.
mEventStatus
)
;
}
}
}
RefPtr
<
PresShell
>
mPresShell
;
}
;
class
nsBeforeFirstPaintDispatcher
:
public
Runnable
{
public
:
explicit
nsBeforeFirstPaintDispatcher
(
nsIDocument
*
aDocument
)
:
mozilla
:
:
Runnable
(
"
nsBeforeFirstPaintDispatcher
"
)
mDocument
(
aDocument
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
mDocument
"
before
-
first
-
paint
"
nullptr
)
;
}
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIDocument
>
mDocument
;
}
;
class
MOZ_STACK_CLASS
AutoPointerEventTargetUpdater
final
{
public
:
AutoPointerEventTargetUpdater
(
PresShell
*
aShell
WidgetEvent
*
aEvent
nsIFrame
*
aFrame
nsIContent
*
*
aTargetContent
)
{
MOZ_ASSERT
(
aEvent
)
;
if
(
!
aTargetContent
|
|
aEvent
-
>
mClass
!
=
ePointerEventClass
)
{
mTargetContent
=
nullptr
;
return
;
}
MOZ_ASSERT
(
aShell
)
;
MOZ_ASSERT
(
aFrame
)
;
MOZ_ASSERT
(
!
aFrame
-
>
GetContent
(
)
|
|
aShell
-
>
GetDocument
(
)
=
=
aFrame
-
>
GetContent
(
)
-
>
OwnerDoc
(
)
)
;
MOZ_ASSERT
(
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
)
;
mShell
=
aShell
;
mWeakFrame
=
aFrame
;
mTargetContent
=
aTargetContent
;
aShell
-
>
mPointerEventTarget
=
aFrame
-
>
GetContent
(
)
;
}
~
AutoPointerEventTargetUpdater
(
)
{
if
(
!
mTargetContent
|
|
!
mShell
|
|
mWeakFrame
.
IsAlive
(
)
)
{
return
;
}
mShell
-
>
mPointerEventTarget
.
swap
(
*
mTargetContent
)
;
}
private
:
RefPtr
<
PresShell
>
mShell
;
AutoWeakFrame
mWeakFrame
;
nsIContent
*
*
mTargetContent
;
}
;
bool
PresShell
:
:
sDisableNonTestMouseEvents
=
false
;
mozilla
:
:
LazyLogModule
PresShell
:
:
gLog
(
"
PresShell
"
)
;
mozilla
:
:
TimeStamp
PresShell
:
:
sLastInputCreated
;
mozilla
:
:
TimeStamp
PresShell
:
:
sLastInputProcessed
;
bool
PresShell
:
:
sProcessInteractable
=
false
;
static
bool
gVerifyReflowEnabled
;
bool
nsIPresShell
:
:
GetVerifyReflowEnable
(
)
{
#
ifdef
DEBUG
static
bool
firstTime
=
true
;
if
(
firstTime
)
{
firstTime
=
false
;
char
*
flags
=
PR_GetEnv
(
"
GECKO_VERIFY_REFLOW_FLAGS
"
)
;
if
(
flags
)
{
bool
error
=
false
;
for
(
;
;
)
{
char
*
comma
=
PL_strchr
(
flags
'
'
)
;
if
(
comma
)
*
comma
=
'
\
0
'
;
bool
found
=
false
;
const
VerifyReflowFlags
*
flag
=
gFlags
;
const
VerifyReflowFlags
*
limit
=
gFlags
+
NUM_VERIFY_REFLOW_FLAGS
;
while
(
flag
<
limit
)
{
if
(
PL_strcasecmp
(
flag
-
>
name
flags
)
=
=
0
)
{
gVerifyReflowFlags
|
=
flag
-
>
bit
;
found
=
true
;
break
;
}
+
+
flag
;
}
if
(
!
found
)
error
=
true
;
if
(
!
comma
)
break
;
*
comma
=
'
'
;
flags
=
comma
+
1
;
}
if
(
error
)
ShowVerifyReflowFlags
(
)
;
}
if
(
VERIFY_REFLOW_ON
&
gVerifyReflowFlags
)
{
gVerifyReflowEnabled
=
true
;
printf
(
"
Note
:
verifyreflow
is
enabled
"
)
;
if
(
VERIFY_REFLOW_NOISY
&
gVerifyReflowFlags
)
{
printf
(
"
(
noisy
)
"
)
;
}
if
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
{
printf
(
"
(
all
)
"
)
;
}
if
(
VERIFY_REFLOW_DUMP_COMMANDS
&
gVerifyReflowFlags
)
{
printf
(
"
(
show
reflow
commands
)
"
)
;
}
if
(
VERIFY_REFLOW_NOISY_RC
&
gVerifyReflowFlags
)
{
printf
(
"
(
noisy
reflow
commands
)
"
)
;
if
(
VERIFY_REFLOW_REALLY_NOISY_RC
&
gVerifyReflowFlags
)
{
printf
(
"
(
REALLY
noisy
reflow
commands
)
"
)
;
}
}
printf
(
"
\
n
"
)
;
}
}
#
endif
return
gVerifyReflowEnabled
;
}
void
nsIPresShell
:
:
SetVerifyReflowEnable
(
bool
aEnabled
)
{
gVerifyReflowEnabled
=
aEnabled
;
}
void
nsIPresShell
:
:
AddAutoWeakFrame
(
AutoWeakFrame
*
aWeakFrame
)
{
if
(
aWeakFrame
-
>
GetFrame
(
)
)
{
aWeakFrame
-
>
GetFrame
(
)
-
>
AddStateBits
(
NS_FRAME_EXTERNAL_REFERENCE
)
;
}
aWeakFrame
-
>
SetPreviousWeakFrame
(
mAutoWeakFrames
)
;
mAutoWeakFrames
=
aWeakFrame
;
}
void
nsIPresShell
:
:
AddWeakFrame
(
WeakFrame
*
aWeakFrame
)
{
if
(
aWeakFrame
-
>
GetFrame
(
)
)
{
aWeakFrame
-
>
GetFrame
(
)
-
>
AddStateBits
(
NS_FRAME_EXTERNAL_REFERENCE
)
;
}
MOZ_ASSERT
(
!
mWeakFrames
.
GetEntry
(
aWeakFrame
)
)
;
mWeakFrames
.
PutEntry
(
aWeakFrame
)
;
}
void
nsIPresShell
:
:
RemoveAutoWeakFrame
(
AutoWeakFrame
*
aWeakFrame
)
{
if
(
mAutoWeakFrames
=
=
aWeakFrame
)
{
mAutoWeakFrames
=
aWeakFrame
-
>
GetPreviousWeakFrame
(
)
;
return
;
}
AutoWeakFrame
*
nextWeak
=
mAutoWeakFrames
;
while
(
nextWeak
&
&
nextWeak
-
>
GetPreviousWeakFrame
(
)
!
=
aWeakFrame
)
{
nextWeak
=
nextWeak
-
>
GetPreviousWeakFrame
(
)
;
}
if
(
nextWeak
)
{
nextWeak
-
>
SetPreviousWeakFrame
(
aWeakFrame
-
>
GetPreviousWeakFrame
(
)
)
;
}
}
void
nsIPresShell
:
:
RemoveWeakFrame
(
WeakFrame
*
aWeakFrame
)
{
MOZ_ASSERT
(
mWeakFrames
.
GetEntry
(
aWeakFrame
)
)
;
mWeakFrames
.
RemoveEntry
(
aWeakFrame
)
;
}
already_AddRefed
<
nsFrameSelection
>
nsIPresShell
:
:
FrameSelection
(
)
{
RefPtr
<
nsFrameSelection
>
ret
=
mSelection
;
return
ret
.
forget
(
)
;
}
static
bool
sSynthMouseMove
=
true
;
static
uint32_t
sNextPresShellId
;
bool
PresShell
:
:
AccessibleCaretEnabled
(
nsIDocShell
*
aDocShell
)
{
if
(
StaticPrefs
:
:
layout_accessiblecaret_enabled
(
)
)
{
return
true
;
}
if
(
StaticPrefs
:
:
layout_accessiblecaret_enabled_on_touch
(
)
&
&
dom
:
:
TouchEvent
:
:
PrefEnabled
(
aDocShell
)
)
{
return
true
;
}
return
false
;
}
nsIPresShell
:
:
nsIPresShell
(
)
:
mFrameConstructor
(
nullptr
)
mViewManager
(
nullptr
)
mFrameManager
(
nullptr
)
#
ifdef
ACCESSIBILITY
mDocAccessible
(
nullptr
)
#
endif
#
ifdef
DEBUG
mDrawEventTargetFrame
(
nullptr
)
#
endif
mPaintCount
(
0
)
mAutoWeakFrames
(
nullptr
)
mCanvasBackgroundColor
(
NS_RGBA
(
0
0
0
0
)
)
mSelectionFlags
(
0
)
mChangeNestCount
(
0
)
mRenderFlags
(
0
)
mDidInitialize
(
false
)
mIsDestroying
(
false
)
mIsReflowing
(
false
)
mIsObservingDocument
(
false
)
mIsDocumentGone
(
false
)
mPaintingSuppressed
(
false
)
mIsActive
(
false
)
mFrozen
(
false
)
mIsFirstPaint
(
false
)
mObservesMutationsForPrint
(
false
)
mWasLastReflowInterrupted
(
false
)
mVisualViewportSizeSet
(
false
)
mNeedLayoutFlush
(
true
)
mNeedStyleFlush
(
true
)
mObservingStyleFlushes
(
false
)
mObservingLayoutFlushes
(
false
)
mResizeEventPending
(
false
)
mNeedThrottledAnimationFlush
(
true
)
mPresShellId
(
0
)
mFontSizeInflationEmPerLine
(
0
)
mFontSizeInflationMinTwips
(
0
)
mFontSizeInflationLineThreshold
(
0
)
mFontSizeInflationForceEnabled
(
false
)
mFontSizeInflationDisabledInMasterProcess
(
false
)
mFontSizeInflationEnabled
(
false
)
mPaintingIsFrozen
(
false
)
mIsNeverPainting
(
false
)
mInFlush
(
false
)
mCurrentEventFrame
(
nullptr
)
{
}
PresShell
:
:
PresShell
(
)
:
mCaretEnabled
(
false
)
#
ifdef
DEBUG
mInVerifyReflow
(
false
)
mCurrentReflowRoot
(
nullptr
)
#
endif
#
ifdef
MOZ_REFLOW_PERF
mReflowCountMgr
(
nullptr
)
#
endif
mMouseLocation
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
mFirstCallbackEventRequest
(
nullptr
)
mLastCallbackEventRequest
(
nullptr
)
mLastReflowStart
(
0
.
0
)
mLastAnchorScrollPositionY
(
0
)
mActiveSuppressDisplayport
(
0
)
mAPZFocusSequenceNumber
(
0
)
mDocumentLoading
(
false
)
mIgnoreFrameDestruction
(
false
)
mHaveShutDown
(
false
)
mLastRootReflowHadUnconstrainedBSize
(
false
)
mNoDelayedMouseEvents
(
false
)
mNoDelayedKeyEvents
(
false
)
mShouldUnsuppressPainting
(
false
)
mApproximateFrameVisibilityVisited
(
false
)
mNextPaintCompressed
(
false
)
mHasCSSBackgroundColor
(
false
)
mScaleToResolution
(
false
)
mIsLastChromeOnlyEscapeKeyConsumed
(
false
)
mHasReceivedPaintMessage
(
false
)
mIsLastKeyDownCanceled
(
false
)
mHasHandledUserInput
(
false
)
#
ifdef
NIGHTLY_BUILD
mForceDispatchKeyPressEventsForNonPrintableKeys
(
false
)
mInitializedForceDispatchKeyPressEventsForNonPrintableKeys
(
false
)
#
endif
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
PresShell
:
:
PresShell
this
=
%
p
"
this
)
)
;
#
ifdef
MOZ_REFLOW_PERF
mReflowCountMgr
=
new
ReflowCountMgr
(
)
;
mReflowCountMgr
-
>
SetPresContext
(
mPresContext
)
;
mReflowCountMgr
-
>
SetPresShell
(
this
)
;
#
endif
mLastOSWake
=
mLoadBegin
=
TimeStamp
:
:
Now
(
)
;
mSelectionFlags
=
nsISelectionDisplay
:
:
DISPLAY_TEXT
|
nsISelectionDisplay
:
:
DISPLAY_IMAGES
;
mIsActive
=
true
;
mIsFirstPaint
=
true
;
mPresShellId
=
sNextPresShellId
+
+
;
mFrozen
=
false
;
mRenderFlags
=
0
;
mVisualViewportSizeSet
=
false
;
static
bool
addedSynthMouseMove
=
false
;
if
(
!
addedSynthMouseMove
)
{
Preferences
:
:
AddBoolVarCache
(
&
sSynthMouseMove
"
layout
.
reflow
.
synthMouseMove
"
true
)
;
addedSynthMouseMove
=
true
;
}
PointerEventHandler
:
:
Initialize
(
)
;
mPaintingIsFrozen
=
false
;
mHasCSSBackgroundColor
=
true
;
mIsLastChromeOnlyEscapeKeyConsumed
=
false
;
mHasReceivedPaintMessage
=
false
;
}
NS_IMPL_ISUPPORTS
(
PresShell
nsIPresShell
nsIDocumentObserver
nsISelectionController
nsISelectionDisplay
nsIObserver
nsISupportsWeakReference
nsIMutationObserver
)
PresShell
:
:
~
PresShell
(
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
PresShell
:
:
~
PresShell
this
=
%
p
"
this
)
)
;
if
(
!
mHaveShutDown
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Someone
did
not
call
nsIPresShell
:
:
destroy
"
)
;
Destroy
(
)
;
}
NS_ASSERTION
(
mCurrentEventContentStack
.
Count
(
)
=
=
0
"
Huh
event
content
left
on
the
stack
in
pres
shell
dtor
!
"
)
;
NS_ASSERTION
(
mFirstCallbackEventRequest
=
=
nullptr
&
&
mLastCallbackEventRequest
=
=
nullptr
"
post
-
reflow
queues
not
empty
.
This
means
we
'
re
leaking
"
)
;
if
(
mPaintingIsFrozen
)
{
mPresContext
-
>
RefreshDriver
(
)
-
>
Thaw
(
)
;
}
MOZ_ASSERT
(
mAllocatedPointers
.
IsEmpty
(
)
"
Some
pres
arena
objects
were
not
freed
"
)
;
mStyleSet
=
nullptr
;
delete
mFrameConstructor
;
mCurrentEventContent
=
nullptr
;
}
void
PresShell
:
:
Init
(
nsIDocument
*
aDocument
nsPresContext
*
aPresContext
nsViewManager
*
aViewManager
UniquePtr
<
ServoStyleSet
>
aStyleSet
)
{
MOZ_ASSERT
(
aDocument
"
null
ptr
"
)
;
MOZ_ASSERT
(
aPresContext
"
null
ptr
"
)
;
MOZ_ASSERT
(
aViewManager
"
null
ptr
"
)
;
MOZ_ASSERT
(
!
mDocument
"
already
initialized
"
)
;
if
(
!
aDocument
|
|
!
aPresContext
|
|
!
aViewManager
|
|
mDocument
)
{
return
;
}
mDocument
=
aDocument
;
mViewManager
=
aViewManager
;
SetNeedLayoutFlush
(
)
;
SetNeedStyleFlush
(
)
;
mFrameConstructor
=
new
nsCSSFrameConstructor
(
mDocument
this
)
;
mFrameManager
=
mFrameConstructor
;
mViewManager
-
>
SetPresShell
(
this
)
;
mPresContext
=
aPresContext
;
mPresContext
-
>
AttachShell
(
this
)
;
mStyleSet
=
std
:
:
move
(
aStyleSet
)
;
mStyleSet
-
>
Init
(
aPresContext
)
;
mPresContext
-
>
CompatibilityModeChanged
(
)
;
UpdatePreferenceStyles
(
)
;
bool
accessibleCaretEnabled
=
AccessibleCaretEnabled
(
mDocument
-
>
GetDocShell
(
)
)
;
if
(
accessibleCaretEnabled
)
{
mAccessibleCaretEventHub
=
new
AccessibleCaretEventHub
(
this
)
;
}
mSelection
=
new
nsFrameSelection
(
)
;
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
frameSelection
-
>
Init
(
this
nullptr
accessibleCaretEnabled
)
;
#
ifdef
SHOW_CARET
mCaret
=
new
nsCaret
(
)
;
mCaret
-
>
Init
(
this
)
;
mOriginalCaret
=
mCaret
;
#
endif
nsPresContext
:
:
nsPresContextType
type
=
aPresContext
-
>
Type
(
)
;
if
(
type
!
=
nsPresContext
:
:
eContext_PrintPreview
&
&
type
!
=
nsPresContext
:
:
eContext_Print
)
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_DISABLED
)
;
if
(
gMaxRCProcessingTime
=
=
-
1
)
{
gMaxRCProcessingTime
=
Preferences
:
:
GetInt
(
"
layout
.
reflow
.
timeslice
"
NS_MAX_REFLOW_TIME
)
;
}
if
(
nsStyleSheetService
*
ss
=
nsStyleSheetService
:
:
GetInstance
(
)
)
{
ss
-
>
RegisterPresShell
(
this
)
;
}
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
#
ifdef
MOZ_XUL
os
-
>
AddObserver
(
this
"
chrome
-
flush
-
skin
-
caches
"
false
)
;
#
endif
os
-
>
AddObserver
(
this
"
memory
-
pressure
"
false
)
;
os
-
>
AddObserver
(
this
NS_WIDGET_WAKE_OBSERVER_TOPIC
false
)
;
if
(
XRE_IsParentProcess
(
)
&
&
!
sProcessInteractable
)
{
os
-
>
AddObserver
(
this
"
sessionstore
-
one
-
or
-
no
-
tab
-
restored
"
false
)
;
}
os
-
>
AddObserver
(
this
"
font
-
info
-
updated
"
false
)
;
}
}
#
ifdef
MOZ_REFLOW_PERF
if
(
mReflowCountMgr
)
{
bool
paintFrameCounts
=
Preferences
:
:
GetBool
(
"
layout
.
reflow
.
showframecounts
"
)
;
bool
dumpFrameCounts
=
Preferences
:
:
GetBool
(
"
layout
.
reflow
.
dumpframecounts
"
)
;
bool
dumpFrameByFrameCounts
=
Preferences
:
:
GetBool
(
"
layout
.
reflow
.
dumpframebyframecounts
"
)
;
mReflowCountMgr
-
>
SetDumpFrameCounts
(
dumpFrameCounts
)
;
mReflowCountMgr
-
>
SetDumpFrameByFrameCounts
(
dumpFrameByFrameCounts
)
;
mReflowCountMgr
-
>
SetPaintFrameCounts
(
paintFrameCounts
)
;
}
#
endif
if
(
mDocument
-
>
HasAnimationController
(
)
)
{
nsSMILAnimationController
*
animCtrl
=
mDocument
-
>
GetAnimationController
(
)
;
animCtrl
-
>
NotifyRefreshDriverCreated
(
GetPresContext
(
)
-
>
RefreshDriver
(
)
)
;
}
for
(
DocumentTimeline
*
timeline
:
mDocument
-
>
Timelines
(
)
)
{
timeline
-
>
NotifyRefreshDriverCreated
(
GetPresContext
(
)
-
>
RefreshDriver
(
)
)
;
}
QueryIsActive
(
)
;
mFontSizeInflationEmPerLine
=
nsLayoutUtils
:
:
FontSizeInflationEmPerLine
(
)
;
mFontSizeInflationMinTwips
=
nsLayoutUtils
:
:
FontSizeInflationMinTwips
(
)
;
mFontSizeInflationLineThreshold
=
nsLayoutUtils
:
:
FontSizeInflationLineThreshold
(
)
;
mFontSizeInflationForceEnabled
=
nsLayoutUtils
:
:
FontSizeInflationForceEnabled
(
)
;
mFontSizeInflationDisabledInMasterProcess
=
nsLayoutUtils
:
:
FontSizeInflationDisabledInMasterProcess
(
)
;
mTouchManager
.
Init
(
this
mDocument
)
;
if
(
mPresContext
-
>
IsRootContentDocument
(
)
)
{
mZoomConstraintsClient
=
new
ZoomConstraintsClient
(
)
;
mZoomConstraintsClient
-
>
Init
(
this
mDocument
)
;
UpdateViewportOverridden
(
false
)
;
}
}
enum
TextPerfLogType
{
eLog_reflow
eLog_loaddone
eLog_totals
}
;
static
void
LogTextPerfStats
(
gfxTextPerfMetrics
*
aTextPerf
PresShell
*
aPresShell
const
gfxTextPerfMetrics
:
:
TextCounts
&
aCounts
float
aTime
TextPerfLogType
aLogType
const
char
*
aURL
)
{
LogModule
*
tpLog
=
gfxPlatform
:
:
GetLog
(
eGfxLog_textperf
)
;
mozilla
:
:
LogLevel
logLevel
=
LogLevel
:
:
Warning
;
if
(
aCounts
.
numContentTextRuns
=
=
0
)
{
logLevel
=
LogLevel
:
:
Debug
;
}
if
(
!
MOZ_LOG_TEST
(
tpLog
logLevel
)
)
{
return
;
}
char
prefix
[
256
]
;
switch
(
aLogType
)
{
case
eLog_reflow
:
SprintfLiteral
(
prefix
"
(
textperf
-
reflow
)
%
p
time
-
ms
:
%
7
.
0f
"
aPresShell
aTime
)
;
break
;
case
eLog_loaddone
:
SprintfLiteral
(
prefix
"
(
textperf
-
loaddone
)
%
p
time
-
ms
:
%
7
.
0f
"
aPresShell
aTime
)
;
break
;
default
:
MOZ_ASSERT
(
aLogType
=
=
eLog_totals
"
unknown
textperf
log
type
"
)
;
SprintfLiteral
(
prefix
"
(
textperf
-
totals
)
%
p
"
aPresShell
)
;
}
double
hitRatio
=
0
.
0
;
uint32_t
lookups
=
aCounts
.
wordCacheHit
+
aCounts
.
wordCacheMiss
;
if
(
lookups
)
{
hitRatio
=
double
(
aCounts
.
wordCacheHit
)
/
double
(
lookups
)
;
}
if
(
aLogType
=
=
eLog_loaddone
)
{
MOZ_LOG
(
tpLog
logLevel
(
"
%
s
reflow
:
%
d
chars
:
%
d
"
"
[
%
s
]
"
"
content
-
textruns
:
%
d
chrome
-
textruns
:
%
d
"
"
max
-
textrun
-
len
:
%
d
"
"
word
-
cache
-
lookups
:
%
d
word
-
cache
-
hit
-
ratio
:
%
4
.
3f
"
"
word
-
cache
-
space
:
%
d
word
-
cache
-
long
:
%
d
"
"
pref
-
fallbacks
:
%
d
system
-
fallbacks
:
%
d
"
"
textruns
-
const
:
%
d
textruns
-
destr
:
%
d
"
"
generic
-
lookups
:
%
d
"
"
cumulative
-
textruns
-
destr
:
%
d
\
n
"
prefix
aTextPerf
-
>
reflowCount
aCounts
.
numChars
(
aURL
?
aURL
:
"
"
)
aCounts
.
numContentTextRuns
aCounts
.
numChromeTextRuns
aCounts
.
maxTextRunLen
lookups
hitRatio
aCounts
.
wordCacheSpaceRules
aCounts
.
wordCacheLong
aCounts
.
fallbackPrefs
aCounts
.
fallbackSystem
aCounts
.
textrunConst
aCounts
.
textrunDestr
aCounts
.
genericLookups
aTextPerf
-
>
cumulative
.
textrunDestr
)
)
;
}
else
{
MOZ_LOG
(
tpLog
logLevel
(
"
%
s
reflow
:
%
d
chars
:
%
d
"
"
content
-
textruns
:
%
d
chrome
-
textruns
:
%
d
"
"
max
-
textrun
-
len
:
%
d
"
"
word
-
cache
-
lookups
:
%
d
word
-
cache
-
hit
-
ratio
:
%
4
.
3f
"
"
word
-
cache
-
space
:
%
d
word
-
cache
-
long
:
%
d
"
"
pref
-
fallbacks
:
%
d
system
-
fallbacks
:
%
d
"
"
textruns
-
const
:
%
d
textruns
-
destr
:
%
d
"
"
generic
-
lookups
:
%
d
"
"
cumulative
-
textruns
-
destr
:
%
d
\
n
"
prefix
aTextPerf
-
>
reflowCount
aCounts
.
numChars
aCounts
.
numContentTextRuns
aCounts
.
numChromeTextRuns
aCounts
.
maxTextRunLen
lookups
hitRatio
aCounts
.
wordCacheSpaceRules
aCounts
.
wordCacheLong
aCounts
.
fallbackPrefs
aCounts
.
fallbackSystem
aCounts
.
textrunConst
aCounts
.
textrunDestr
aCounts
.
genericLookups
aTextPerf
-
>
cumulative
.
textrunDestr
)
)
;
}
}
void
PresShell
:
:
Destroy
(
)
{
if
(
mHaveShutDown
)
{
return
;
}
NS_ASSERTION
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
destroy
called
on
presshell
while
scripts
not
blocked
"
)
;
gfxTextPerfMetrics
*
tp
;
if
(
mPresContext
&
&
(
tp
=
mPresContext
-
>
GetTextPerfMetrics
(
)
)
)
{
tp
-
>
Accumulate
(
)
;
if
(
tp
-
>
cumulative
.
numChars
>
0
)
{
LogTextPerfStats
(
tp
this
tp
-
>
cumulative
0
.
0
eLog_totals
nullptr
)
;
}
}
if
(
mPresContext
)
{
const
bool
mayFlushUserFontSet
=
false
;
gfxUserFontSet
*
fs
=
mPresContext
-
>
GetUserFontSet
(
mayFlushUserFontSet
)
;
if
(
fs
)
{
uint32_t
fontCount
;
uint64_t
fontSize
;
fs
-
>
GetLoadStatistics
(
fontCount
fontSize
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBFONT_PER_PAGE
fontCount
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBFONT_SIZE_PER_PAGE
uint32_t
(
fontSize
/
1024
)
)
;
}
else
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBFONT_PER_PAGE
0
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
WEBFONT_SIZE_PER_PAGE
0
)
;
}
}
#
ifdef
MOZ_REFLOW_PERF
DumpReflows
(
)
;
if
(
mReflowCountMgr
)
{
delete
mReflowCountMgr
;
mReflowCountMgr
=
nullptr
;
}
#
endif
if
(
mZoomConstraintsClient
)
{
mZoomConstraintsClient
-
>
Destroy
(
)
;
mZoomConstraintsClient
=
nullptr
;
}
if
(
mMobileViewportManager
)
{
mMobileViewportManager
-
>
Destroy
(
)
;
mMobileViewportManager
=
nullptr
;
}
#
ifdef
ACCESSIBILITY
if
(
mDocAccessible
)
{
#
ifdef
DEBUG
if
(
a11y
:
:
logging
:
:
IsEnabled
(
a11y
:
:
logging
:
:
eDocDestroy
)
)
a11y
:
:
logging
:
:
DocDestroy
(
"
presshell
destroyed
"
mDocument
)
;
#
endif
mDocAccessible
-
>
Shutdown
(
)
;
mDocAccessible
=
nullptr
;
}
#
endif
MaybeReleaseCapturingContent
(
)
;
if
(
gKeyDownTarget
&
&
gKeyDownTarget
-
>
OwnerDoc
(
)
=
=
mDocument
)
{
NS_RELEASE
(
gKeyDownTarget
)
;
}
if
(
mContentToScrollTo
)
{
mContentToScrollTo
-
>
DeleteProperty
(
nsGkAtoms
:
:
scrolling
)
;
mContentToScrollTo
=
nullptr
;
}
if
(
mPresContext
)
{
mPresContext
-
>
EventStateManager
(
)
-
>
NotifyDestroyPresContext
(
mPresContext
)
;
}
if
(
nsStyleSheetService
*
ss
=
nsStyleSheetService
:
:
GetInstance
(
)
)
{
ss
-
>
UnregisterPresShell
(
this
)
;
}
{
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
#
ifdef
MOZ_XUL
os
-
>
RemoveObserver
(
this
"
chrome
-
flush
-
skin
-
caches
"
)
;
#
endif
os
-
>
RemoveObserver
(
this
"
memory
-
pressure
"
)
;
os
-
>
RemoveObserver
(
this
NS_WIDGET_WAKE_OBSERVER_TOPIC
)
;
if
(
XRE_IsParentProcess
(
)
)
{
os
-
>
RemoveObserver
(
this
"
sessionstore
-
one
-
or
-
no
-
tab
-
restored
"
)
;
}
os
-
>
RemoveObserver
(
this
"
font
-
info
-
updated
"
)
;
}
}
if
(
mPaintSuppressionTimer
)
{
mPaintSuppressionTimer
-
>
Cancel
(
)
;
mPaintSuppressionTimer
=
nullptr
;
}
if
(
mReflowContinueTimer
)
{
mReflowContinueTimer
-
>
Cancel
(
)
;
mReflowContinueTimer
=
nullptr
;
}
if
(
mDelayedPaintTimer
)
{
mDelayedPaintTimer
-
>
Cancel
(
)
;
mDelayedPaintTimer
=
nullptr
;
}
mSynthMouseMoveEvent
.
Revoke
(
)
;
mUpdateApproximateFrameVisibilityEvent
.
Revoke
(
)
;
ClearApproximatelyVisibleFramesList
(
Some
(
OnNonvisible
:
:
DISCARD_IMAGES
)
)
;
if
(
mCaret
)
{
mCaret
-
>
Terminate
(
)
;
mCaret
=
nullptr
;
}
if
(
mSelection
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
frameSelection
-
>
DisconnectFromPresShell
(
)
;
}
if
(
mAccessibleCaretEventHub
)
{
mAccessibleCaretEventHub
-
>
Terminate
(
)
;
mAccessibleCaretEventHub
=
nullptr
;
}
RemovePreferenceStyles
(
)
;
mIsDestroying
=
true
;
mCurrentEventFrame
=
nullptr
;
int32_t
i
count
=
mCurrentEventFrameStack
.
Length
(
)
;
for
(
i
=
0
;
i
<
count
;
i
+
+
)
{
mCurrentEventFrameStack
[
i
]
=
nullptr
;
}
mFramesToDirty
.
Clear
(
)
;
if
(
mViewManager
)
{
mViewManager
-
>
SetPresShell
(
nullptr
)
;
mViewManager
=
nullptr
;
}
mFrameArena
.
ClearArenaRefPtrs
(
)
;
mStyleSet
-
>
BeginShutdown
(
)
;
nsRefreshDriver
*
rd
=
GetPresContext
(
)
-
>
RefreshDriver
(
)
;
if
(
mDocument
)
{
NS_ASSERTION
(
mDocument
-
>
GetShell
(
)
=
=
this
"
Wrong
shell
?
"
)
;
mDocument
-
>
ClearServoRestyleRoot
(
)
;
mDocument
-
>
DeleteShell
(
)
;
if
(
mDocument
-
>
HasAnimationController
(
)
)
{
mDocument
-
>
GetAnimationController
(
)
-
>
NotifyRefreshDriverDestroying
(
rd
)
;
}
for
(
DocumentTimeline
*
timeline
:
mDocument
-
>
Timelines
(
)
)
{
timeline
-
>
NotifyRefreshDriverDestroying
(
rd
)
;
}
}
if
(
mPresContext
)
{
rd
-
>
CancelPendingAnimationEvents
(
mPresContext
-
>
AnimationEventDispatcher
(
)
)
;
}
StopObservingRefreshDriver
(
)
;
if
(
rd
-
>
GetPresContext
(
)
=
=
GetPresContext
(
)
)
{
rd
-
>
RevokeViewManagerFlush
(
)
;
}
CancelAllPendingReflows
(
)
;
CancelPostedReflowCallbacks
(
)
;
mFrameConstructor
-
>
WillDestroyFrameTree
(
)
;
NS_WARNING_ASSERTION
(
!
mAutoWeakFrames
&
&
mWeakFrames
.
IsEmpty
(
)
"
Weak
frames
alive
after
destroying
FrameManager
"
)
;
while
(
mAutoWeakFrames
)
{
mAutoWeakFrames
-
>
Clear
(
this
)
;
}
nsTArray
<
WeakFrame
*
>
toRemove
(
mWeakFrames
.
Count
(
)
)
;
for
(
auto
iter
=
mWeakFrames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
toRemove
.
AppendElement
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
}
for
(
WeakFrame
*
weakFrame
:
toRemove
)
{
weakFrame
-
>
Clear
(
this
)
;
}
mStyleSet
-
>
Shutdown
(
)
;
if
(
mPresContext
)
{
mPresContext
-
>
DetachShell
(
)
;
mPresContext
-
>
SetLinkHandler
(
nullptr
)
;
}
mHaveShutDown
=
true
;
mTouchManager
.
Destroy
(
)
;
}
void
nsIPresShell
:
:
StopObservingRefreshDriver
(
)
{
nsRefreshDriver
*
rd
=
mPresContext
-
>
RefreshDriver
(
)
;
if
(
mResizeEventPending
)
{
rd
-
>
RemoveResizeEventFlushObserver
(
this
)
;
}
if
(
mObservingLayoutFlushes
)
{
rd
-
>
RemoveLayoutFlushObserver
(
this
)
;
}
if
(
mObservingStyleFlushes
)
{
rd
-
>
RemoveStyleFlushObserver
(
this
)
;
}
}
void
nsIPresShell
:
:
StartObservingRefreshDriver
(
)
{
nsRefreshDriver
*
rd
=
mPresContext
-
>
RefreshDriver
(
)
;
if
(
mResizeEventPending
)
{
rd
-
>
AddResizeEventFlushObserver
(
this
)
;
}
if
(
mObservingLayoutFlushes
)
{
rd
-
>
AddLayoutFlushObserver
(
this
)
;
}
if
(
mObservingStyleFlushes
)
{
rd
-
>
AddStyleFlushObserver
(
this
)
;
}
}
nsRefreshDriver
*
nsIPresShell
:
:
GetRefreshDriver
(
)
const
{
return
mPresContext
?
mPresContext
-
>
RefreshDriver
(
)
:
nullptr
;
}
void
nsIPresShell
:
:
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
{
if
(
aStyleDisabled
!
=
mStyleSet
-
>
GetAuthorStyleDisabled
(
)
)
{
mStyleSet
-
>
SetAuthorStyleDisabled
(
aStyleDisabled
)
;
ApplicableStylesChanged
(
)
;
nsCOMPtr
<
nsIObserverService
>
observerService
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
observerService
)
{
observerService
-
>
NotifyObservers
(
mDocument
"
author
-
style
-
disabled
-
changed
"
nullptr
)
;
}
}
}
bool
nsIPresShell
:
:
GetAuthorStyleDisabled
(
)
const
{
return
mStyleSet
-
>
GetAuthorStyleDisabled
(
)
;
}
void
PresShell
:
:
UpdatePreferenceStyles
(
)
{
if
(
!
mDocument
)
{
return
;
}
if
(
!
mDocument
-
>
GetWindow
(
)
)
{
return
;
}
if
(
nsContentUtils
:
:
IsInChromeDocshell
(
mDocument
)
)
{
return
;
}
auto
cache
=
nsLayoutStylesheetCache
:
:
Singleton
(
)
;
RefPtr
<
StyleSheet
>
newPrefSheet
=
mPresContext
-
>
IsChromeOriginImage
(
)
?
cache
-
>
ChromePreferenceSheet
(
mPresContext
)
:
cache
-
>
ContentPreferenceSheet
(
mPresContext
)
;
if
(
mPrefStyleSheet
=
=
newPrefSheet
)
{
return
;
}
RemovePreferenceStyles
(
)
;
mStyleSet
-
>
AppendStyleSheet
(
SheetType
:
:
Agent
newPrefSheet
)
;
mPrefStyleSheet
=
newPrefSheet
;
}
void
PresShell
:
:
RemovePreferenceStyles
(
)
{
if
(
mPrefStyleSheet
)
{
mStyleSet
-
>
RemoveStyleSheet
(
SheetType
:
:
Agent
mPrefStyleSheet
)
;
mPrefStyleSheet
=
nullptr
;
}
}
void
PresShell
:
:
AddUserSheet
(
StyleSheet
*
aSheet
)
{
nsCOMPtr
<
nsIStyleSheetService
>
dummy
=
do_GetService
(
NS_STYLESHEETSERVICE_CONTRACTID
)
;
nsStyleSheetService
*
sheetService
=
nsStyleSheetService
:
:
gInstance
;
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
userSheets
=
*
sheetService
-
>
UserStyleSheets
(
)
;
for
(
StyleSheet
*
sheet
:
userSheets
)
{
mStyleSet
-
>
RemoveStyleSheet
(
SheetType
:
:
User
sheet
)
;
}
for
(
StyleSheet
*
sheet
:
Reversed
(
userSheets
)
)
{
mStyleSet
-
>
PrependStyleSheet
(
SheetType
:
:
User
sheet
)
;
}
ApplicableStylesChanged
(
)
;
}
void
PresShell
:
:
AddAgentSheet
(
StyleSheet
*
aSheet
)
{
mStyleSet
-
>
AppendStyleSheet
(
SheetType
:
:
Agent
aSheet
)
;
ApplicableStylesChanged
(
)
;
}
void
PresShell
:
:
AddAuthorSheet
(
StyleSheet
*
aSheet
)
{
StyleSheet
*
firstAuthorSheet
=
mDocument
-
>
GetFirstAdditionalAuthorSheet
(
)
;
if
(
firstAuthorSheet
)
{
mStyleSet
-
>
InsertStyleSheetBefore
(
SheetType
:
:
Doc
aSheet
firstAuthorSheet
)
;
}
else
{
mStyleSet
-
>
AppendStyleSheet
(
SheetType
:
:
Doc
aSheet
)
;
}
ApplicableStylesChanged
(
)
;
}
void
PresShell
:
:
RemoveSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
{
mStyleSet
-
>
RemoveStyleSheet
(
aType
aSheet
)
;
ApplicableStylesChanged
(
)
;
}
NS_IMETHODIMP
PresShell
:
:
SetDisplaySelection
(
int16_t
aToggle
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
frameSelection
-
>
SetDisplaySelection
(
aToggle
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
GetDisplaySelection
(
int16_t
*
aToggle
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
*
aToggle
=
frameSelection
-
>
GetDisplaySelection
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
GetSelectionFromScript
(
RawSelectionType
aRawSelectionType
Selection
*
*
aSelection
)
{
if
(
!
aSelection
|
|
!
mSelection
)
return
NS_ERROR_NULL_POINTER
;
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
RefPtr
<
Selection
>
selection
=
frameSelection
-
>
GetSelection
(
ToSelectionType
(
aRawSelectionType
)
)
;
if
(
!
selection
)
{
return
NS_ERROR_INVALID_ARG
;
}
selection
.
forget
(
aSelection
)
;
return
NS_OK
;
}
Selection
*
PresShell
:
:
GetSelection
(
RawSelectionType
aRawSelectionType
)
{
if
(
!
mSelection
)
{
return
nullptr
;
}
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
GetSelection
(
ToSelectionType
(
aRawSelectionType
)
)
;
}
Selection
*
PresShell
:
:
GetCurrentSelection
(
SelectionType
aSelectionType
)
{
if
(
!
mSelection
)
return
nullptr
;
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
GetSelection
(
aSelectionType
)
;
}
already_AddRefed
<
nsISelectionController
>
PresShell
:
:
GetSelectionControllerForFocusedContent
(
nsIContent
*
*
aFocusedContent
)
{
if
(
aFocusedContent
)
{
*
aFocusedContent
=
nullptr
;
}
if
(
mDocument
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsCOMPtr
<
nsIContent
>
focusedContent
=
nsFocusManager
:
:
GetFocusedDescendant
(
mDocument
-
>
GetWindow
(
)
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
if
(
focusedContent
)
{
nsIFrame
*
frame
=
focusedContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsCOMPtr
<
nsISelectionController
>
selectionController
;
frame
-
>
GetSelectionController
(
mPresContext
getter_AddRefs
(
selectionController
)
)
;
if
(
selectionController
)
{
if
(
aFocusedContent
)
{
focusedContent
.
forget
(
aFocusedContent
)
;
}
return
selectionController
.
forget
(
)
;
}
}
}
}
nsCOMPtr
<
nsISelectionController
>
self
(
this
)
;
return
self
.
forget
(
)
;
}
NS_IMETHODIMP
PresShell
:
:
ScrollSelectionIntoView
(
RawSelectionType
aRawSelectionType
SelectionRegion
aRegion
int16_t
aFlags
)
{
if
(
!
mSelection
)
return
NS_ERROR_NULL_POINTER
;
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
ScrollSelectionIntoView
(
ToSelectionType
(
aRawSelectionType
)
aRegion
aFlags
)
;
}
NS_IMETHODIMP
PresShell
:
:
RepaintSelection
(
RawSelectionType
aRawSelectionType
)
{
if
(
!
mSelection
)
{
return
NS_ERROR_NULL_POINTER
;
}
if
(
MOZ_UNLIKELY
(
mIsDestroying
)
)
{
return
NS_OK
;
}
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
RepaintSelection
(
ToSelectionType
(
aRawSelectionType
)
)
;
}
void
nsIPresShell
:
:
BeginObservingDocument
(
)
{
if
(
mDocument
&
&
!
mIsDestroying
)
{
mIsObservingDocument
=
true
;
if
(
mIsDocumentGone
)
{
NS_WARNING
(
"
Adding
a
presshell
that
was
disconnected
from
the
document
"
"
as
a
document
observer
?
Sounds
wrong
.
.
.
"
)
;
mIsDocumentGone
=
false
;
}
}
}
void
nsIPresShell
:
:
EndObservingDocument
(
)
{
mIsDocumentGone
=
true
;
mIsObservingDocument
=
false
;
}
#
ifdef
DEBUG_kipp
char
*
nsPresShell_ReflowStackPointerTop
;
#
endif
class
XBLConstructorRunner
:
public
Runnable
{
public
:
explicit
XBLConstructorRunner
(
nsIDocument
*
aDocument
)
:
Runnable
(
"
XBLConstructorRunner
"
)
mDocument
(
aDocument
)
{
}
NS_IMETHOD
Run
(
)
override
{
mDocument
-
>
BindingManager
(
)
-
>
ProcessAttachedQueue
(
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIDocument
>
mDocument
;
}
;
nsresult
PresShell
:
:
Initialize
(
)
{
if
(
mIsDestroying
)
{
return
NS_OK
;
}
if
(
!
mDocument
)
{
return
NS_OK
;
}
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
PresShell
:
:
Initialize
this
=
%
p
"
this
)
)
;
NS_ASSERTION
(
!
mDidInitialize
"
Why
are
we
being
called
?
"
)
;
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
(
this
)
;
RecomputeFontSizeInflationEnabled
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsDestroying
)
;
mPresContext
-
>
FlushPendingMediaFeatureValuesChanged
(
)
;
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsDestroying
)
;
mDidInitialize
=
true
;
#
ifdef
DEBUG
if
(
VERIFY_REFLOW_NOISY_RC
&
gVerifyReflowFlags
)
{
if
(
mDocument
)
{
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
if
(
uri
)
{
printf
(
"
*
*
*
PresShell
:
:
Initialize
(
this
=
%
p
url
=
'
%
s
'
)
\
n
"
(
void
*
)
this
uri
-
>
GetSpecOrDefault
(
)
.
get
(
)
)
;
}
}
}
#
endif
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
NS_ASSERTION
(
!
rootFrame
"
How
did
that
happen
exactly
?
"
)
;
if
(
!
rootFrame
)
{
nsAutoScriptBlocker
scriptBlocker
;
rootFrame
=
mFrameConstructor
-
>
ConstructRootFrame
(
)
;
mFrameConstructor
-
>
SetRootFrame
(
rootFrame
)
;
}
NS_ENSURE_STATE
(
!
mHaveShutDown
)
;
if
(
!
rootFrame
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
if
(
Element
*
root
=
mDocument
-
>
GetRootElement
(
)
)
{
{
nsAutoCauseReflowNotifier
reflowNotifier
(
this
)
;
mFrameConstructor
-
>
ContentInserted
(
root
nullptr
nsCSSFrameConstructor
:
:
InsertionKind
:
:
Sync
)
;
NS_ENSURE_STATE
(
!
mHaveShutDown
)
;
}
NS_ENSURE_STATE
(
!
mHaveShutDown
)
;
nsContentUtils
:
:
AddScriptRunner
(
new
XBLConstructorRunner
(
mDocument
)
)
;
NS_ENSURE_STATE
(
!
mHaveShutDown
)
;
}
mDocument
-
>
TriggerAutoFocus
(
)
;
NS_ASSERTION
(
rootFrame
"
How
did
that
happen
?
"
)
;
if
(
MOZ_LIKELY
(
rootFrame
-
>
GetStateBits
(
)
&
NS_FRAME_IS_DIRTY
)
)
{
rootFrame
-
>
RemoveStateBits
(
NS_FRAME_IS_DIRTY
|
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
NS_ASSERTION
(
!
mDirtyRoots
.
Contains
(
rootFrame
)
"
Why
is
the
root
in
mDirtyRoots
already
?
"
)
;
FrameNeedsReflow
(
rootFrame
nsIPresShell
:
:
eResize
NS_FRAME_IS_DIRTY
)
;
NS_ASSERTION
(
mDirtyRoots
.
Contains
(
rootFrame
)
"
Should
be
in
mDirtyRoots
now
"
)
;
NS_ASSERTION
(
mObservingLayoutFlushes
"
Why
no
reflow
scheduled
?
"
)
;
}
if
(
!
mDocumentLoading
)
{
RestoreRootScrollPosition
(
)
;
}
if
(
!
mPresContext
-
>
IsPaginated
(
)
)
{
mPaintingSuppressed
=
true
;
nsIDocument
:
:
ReadyState
readyState
=
mDocument
-
>
GetReadyStateEnum
(
)
;
if
(
readyState
!
=
nsIDocument
:
:
READYSTATE_COMPLETE
)
{
mPaintSuppressionTimer
=
NS_NewTimer
(
)
;
}
if
(
!
mPaintSuppressionTimer
)
{
mPaintingSuppressed
=
false
;
}
else
{
int32_t
delay
=
Preferences
:
:
GetInt
(
"
nglayout
.
initialpaint
.
delay
"
PAINTLOCK_EVENT_DELAY
)
;
mPaintSuppressionTimer
-
>
SetTarget
(
mDocument
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
mPaintSuppressionTimer
-
>
InitWithNamedFuncCallback
(
sPaintSuppressionCallback
this
delay
nsITimer
:
:
TYPE_ONE_SHOT
"
PresShell
:
:
sPaintSuppressionCallback
"
)
;
}
}
if
(
!
mPaintingSuppressed
)
{
ScheduleBeforeFirstPaint
(
)
;
}
return
NS_OK
;
}
void
PresShell
:
:
sPaintSuppressionCallback
(
nsITimer
*
aTimer
void
*
aPresShell
)
{
RefPtr
<
PresShell
>
self
=
static_cast
<
PresShell
*
>
(
aPresShell
)
;
if
(
self
)
self
-
>
UnsuppressPainting
(
)
;
}
nsresult
PresShell
:
:
ResizeReflow
(
nscoord
aWidth
nscoord
aHeight
nscoord
aOldWidth
nscoord
aOldHeight
ResizeReflowOptions
aOptions
)
{
if
(
mZoomConstraintsClient
)
{
mZoomConstraintsClient
-
>
ScreenSizeChanged
(
)
;
}
if
(
mMobileViewportManager
)
{
mMobileViewportManager
-
>
RequestReflow
(
)
;
return
NS_OK
;
}
return
ResizeReflowIgnoreOverride
(
aWidth
aHeight
aOldWidth
aOldHeight
aOptions
)
;
}
nsresult
PresShell
:
:
ResizeReflowIgnoreOverride
(
nscoord
aWidth
nscoord
aHeight
nscoord
aOldWidth
nscoord
aOldHeight
ResizeReflowOptions
aOptions
)
{
MOZ_ASSERT
(
!
mIsReflowing
"
Shouldn
'
t
be
in
reflow
here
!
"
)
;
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
if
(
aHeight
=
=
NS_UNCONSTRAINEDSIZE
|
|
aWidth
=
=
NS_UNCONSTRAINEDSIZE
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
mPresContext
-
>
SetVisibleArea
(
nsRect
(
0
0
aWidth
aHeight
)
)
;
return
NS_OK
;
}
WritingMode
wm
=
rootFrame
-
>
GetWritingMode
(
)
;
const
bool
shrinkToFit
=
aOptions
=
=
ResizeReflowOptions
:
:
eBSizeLimit
;
MOZ_ASSERT
(
shrinkToFit
|
|
(
wm
.
IsVertical
(
)
?
aWidth
:
aHeight
)
!
=
NS_UNCONSTRAINEDSIZE
"
unconstrained
bsize
only
usable
with
eBSizeLimit
"
)
;
MOZ_ASSERT
(
(
wm
.
IsVertical
(
)
?
aHeight
:
aWidth
)
!
=
NS_UNCONSTRAINEDSIZE
"
unconstrained
isize
not
allowed
"
)
;
bool
isBSizeChanging
=
wm
.
IsVertical
(
)
?
aOldWidth
!
=
aWidth
:
aOldHeight
!
=
aHeight
;
nscoord
targetWidth
=
aWidth
;
nscoord
targetHeight
=
aHeight
;
if
(
shrinkToFit
)
{
if
(
wm
.
IsVertical
(
)
)
{
targetWidth
=
NS_UNCONSTRAINEDSIZE
;
}
else
{
targetHeight
=
NS_UNCONSTRAINEDSIZE
;
}
isBSizeChanging
=
true
;
}
const
bool
suppressingResizeReflow
=
GetPresContext
(
)
-
>
SuppressingResizeReflow
(
)
;
RefPtr
<
nsViewManager
>
viewManager
=
mViewManager
;
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
(
this
)
;
if
(
!
suppressingResizeReflow
&
&
shrinkToFit
)
{
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
if
(
!
mIsDestroying
)
{
mPresContext
-
>
SetVisibleArea
(
nsRect
(
0
0
targetWidth
targetHeight
)
)
;
}
if
(
!
mIsDestroying
&
&
!
suppressingResizeReflow
)
{
if
(
!
shrinkToFit
)
{
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Frames
)
;
}
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
mIsDestroying
&
&
rootFrame
)
{
if
(
isBSizeChanging
)
{
nsLayoutUtils
:
:
MarkIntrinsicISizesDirtyIfDependentOnBSize
(
rootFrame
)
;
}
{
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
WillDoReflow
(
)
;
AUTO_LAYOUT_PHASE_ENTRY_POINT
(
GetPresContext
(
)
Reflow
)
;
nsViewManager
:
:
AutoDisableRefresh
refreshBlocker
(
viewManager
)
;
mDirtyRoots
.
RemoveElement
(
rootFrame
)
;
DoReflow
(
rootFrame
true
)
;
if
(
shrinkToFit
)
{
const
bool
reflowAgain
=
wm
.
IsVertical
(
)
?
mPresContext
-
>
GetVisibleArea
(
)
.
width
>
aWidth
:
mPresContext
-
>
GetVisibleArea
(
)
.
height
>
aHeight
;
if
(
reflowAgain
)
{
mPresContext
-
>
SetVisibleArea
(
nsRect
(
0
0
aWidth
aHeight
)
)
;
DoReflow
(
rootFrame
true
)
;
}
}
}
NS_ASSERTION
(
mPresContext
-
>
GetVisibleArea
(
)
.
width
!
=
NS_UNCONSTRAINEDSIZE
"
width
should
not
be
NS_UNCONSTRAINEDSIZE
after
reflow
"
)
;
NS_ASSERTION
(
mPresContext
-
>
GetVisibleArea
(
)
.
height
!
=
NS_UNCONSTRAINEDSIZE
"
height
should
not
be
NS_UNCONSTRAINEDSIZE
after
reflow
"
)
;
DidDoReflow
(
true
)
;
}
}
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
rootFrame
)
{
wm
=
rootFrame
-
>
GetWritingMode
(
)
;
if
(
wm
.
IsVertical
(
)
)
{
if
(
mPresContext
-
>
GetVisibleArea
(
)
.
width
=
=
NS_UNCONSTRAINEDSIZE
)
{
mPresContext
-
>
SetVisibleArea
(
nsRect
(
0
0
rootFrame
-
>
GetRect
(
)
.
width
aHeight
)
)
;
}
}
else
{
if
(
mPresContext
-
>
GetVisibleArea
(
)
.
height
=
=
NS_UNCONSTRAINEDSIZE
)
{
mPresContext
-
>
SetVisibleArea
(
nsRect
(
0
0
aWidth
rootFrame
-
>
GetRect
(
)
.
height
)
)
;
}
}
}
if
(
!
mIsDestroying
&
&
!
mResizeEventPending
)
{
mResizeEventPending
=
true
;
if
(
MOZ_LIKELY
(
!
mDocument
-
>
GetBFCacheEntry
(
)
)
)
{
mPresContext
-
>
RefreshDriver
(
)
-
>
AddResizeEventFlushObserver
(
this
)
;
}
}
return
NS_OK
;
}
void
PresShell
:
:
FireResizeEvent
(
)
{
if
(
mIsDocumentGone
)
{
return
;
}
mResizeEventPending
=
false
;
WidgetEvent
event
(
true
mozilla
:
:
eResize
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
if
(
nsPIDOMWindowOuter
*
window
=
mDocument
-
>
GetWindow
(
)
)
{
EventDispatcher
:
:
Dispatch
(
window
mPresContext
&
event
nullptr
&
status
)
;
}
}
void
nsIPresShell
:
:
NativeAnonymousContentRemoved
(
nsIContent
*
aAnonContent
)
{
if
(
aAnonContent
=
=
mCurrentEventContent
)
{
mCurrentEventContent
=
aAnonContent
-
>
GetFlattenedTreeParent
(
)
;
mCurrentEventFrame
=
nullptr
;
}
for
(
unsigned
int
i
=
0
;
i
<
mCurrentEventContentStack
.
Length
(
)
;
i
+
+
)
{
if
(
aAnonContent
=
=
mCurrentEventContentStack
.
ElementAt
(
i
)
)
{
mCurrentEventContentStack
.
ReplaceObjectAt
(
aAnonContent
-
>
GetFlattenedTreeParent
(
)
i
)
;
mCurrentEventFrameStack
[
i
]
=
nullptr
;
}
}
}
void
PresShell
:
:
SetIgnoreFrameDestruction
(
bool
aIgnore
)
{
if
(
mDocument
)
{
mDocument
-
>
StyleImageLoader
(
)
-
>
ClearFrames
(
mPresContext
)
;
}
mIgnoreFrameDestruction
=
aIgnore
;
}
void
PresShell
:
:
NotifyDestroyingFrame
(
nsIFrame
*
aFrame
)
{
aFrame
-
>
RemoveDisplayItemDataForDeletion
(
)
;
if
(
!
mIgnoreFrameDestruction
)
{
if
(
aFrame
-
>
HasImageRequest
(
)
)
{
mDocument
-
>
StyleImageLoader
(
)
-
>
DropRequestsForFrame
(
aFrame
)
;
}
mFrameConstructor
-
>
NotifyDestroyingFrame
(
aFrame
)
;
for
(
int32_t
idx
=
mDirtyRoots
.
Length
(
)
;
idx
;
)
{
-
-
idx
;
if
(
mDirtyRoots
[
idx
]
=
=
aFrame
)
{
mDirtyRoots
.
RemoveElementAt
(
idx
)
;
}
}
aFrame
-
>
DeleteAllProperties
(
)
;
if
(
aFrame
=
=
mCurrentEventFrame
)
{
mCurrentEventContent
=
aFrame
-
>
GetContent
(
)
;
mCurrentEventFrame
=
nullptr
;
}
#
ifdef
DEBUG
if
(
aFrame
=
=
mDrawEventTargetFrame
)
{
mDrawEventTargetFrame
=
nullptr
;
}
#
endif
for
(
unsigned
int
i
=
0
;
i
<
mCurrentEventFrameStack
.
Length
(
)
;
i
+
+
)
{
if
(
aFrame
=
=
mCurrentEventFrameStack
.
ElementAt
(
i
)
)
{
nsIContent
*
currentEventContent
=
aFrame
-
>
GetContent
(
)
;
mCurrentEventContentStack
.
ReplaceObjectAt
(
currentEventContent
i
)
;
mCurrentEventFrameStack
[
i
]
=
nullptr
;
}
}
mFramesToDirty
.
RemoveEntry
(
aFrame
)
;
}
}
already_AddRefed
<
nsCaret
>
PresShell
:
:
GetCaret
(
)
const
{
RefPtr
<
nsCaret
>
caret
=
mCaret
;
return
caret
.
forget
(
)
;
}
already_AddRefed
<
AccessibleCaretEventHub
>
PresShell
:
:
GetAccessibleCaretEventHub
(
)
const
{
RefPtr
<
AccessibleCaretEventHub
>
eventHub
=
mAccessibleCaretEventHub
;
return
eventHub
.
forget
(
)
;
}
void
PresShell
:
:
SetCaret
(
nsCaret
*
aNewCaret
)
{
mCaret
=
aNewCaret
;
}
void
PresShell
:
:
RestoreCaret
(
)
{
mCaret
=
mOriginalCaret
;
}
NS_IMETHODIMP
PresShell
:
:
SetCaretEnabled
(
bool
aInEnable
)
{
bool
oldEnabled
=
mCaretEnabled
;
mCaretEnabled
=
aInEnable
;
if
(
mCaretEnabled
!
=
oldEnabled
)
{
MOZ_ASSERT
(
mCaret
)
;
if
(
mCaret
)
{
mCaret
-
>
SetVisible
(
mCaretEnabled
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
SetCaretReadOnly
(
bool
aReadOnly
)
{
if
(
mCaret
)
mCaret
-
>
SetCaretReadOnly
(
aReadOnly
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
GetCaretEnabled
(
bool
*
aOutEnabled
)
{
NS_ENSURE_ARG_POINTER
(
aOutEnabled
)
;
*
aOutEnabled
=
mCaretEnabled
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
SetCaretVisibilityDuringSelection
(
bool
aVisibility
)
{
if
(
mCaret
)
mCaret
-
>
SetVisibilityDuringSelection
(
aVisibility
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
GetCaretVisible
(
bool
*
aOutIsVisible
)
{
*
aOutIsVisible
=
false
;
if
(
mCaret
)
{
*
aOutIsVisible
=
mCaret
-
>
IsVisible
(
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
SetSelectionFlags
(
int16_t
aInEnable
)
{
mSelectionFlags
=
aInEnable
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
GetSelectionFlags
(
int16_t
*
aOutEnable
)
{
if
(
!
aOutEnable
)
return
NS_ERROR_INVALID_ARG
;
*
aOutEnable
=
mSelectionFlags
;
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
PhysicalMove
(
int16_t
aDirection
int16_t
aAmount
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
PhysicalMove
(
aDirection
aAmount
aExtend
)
;
}
NS_IMETHODIMP
PresShell
:
:
CharacterMove
(
bool
aForward
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
CharacterMove
(
aForward
aExtend
)
;
}
NS_IMETHODIMP
PresShell
:
:
CharacterExtendForDelete
(
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
CharacterExtendForDelete
(
)
;
}
NS_IMETHODIMP
PresShell
:
:
CharacterExtendForBackspace
(
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
CharacterExtendForBackspace
(
)
;
}
NS_IMETHODIMP
PresShell
:
:
WordMove
(
bool
aForward
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
nsresult
result
=
frameSelection
-
>
WordMove
(
aForward
aExtend
)
;
if
(
NS_FAILED
(
result
)
)
result
=
CompleteMove
(
aForward
aExtend
)
;
return
result
;
}
NS_IMETHODIMP
PresShell
:
:
WordExtendForDelete
(
bool
aForward
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
WordExtendForDelete
(
aForward
)
;
}
NS_IMETHODIMP
PresShell
:
:
LineMove
(
bool
aForward
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
nsresult
result
=
frameSelection
-
>
LineMove
(
aForward
aExtend
)
;
if
(
NS_FAILED
(
result
)
)
result
=
CompleteMove
(
aForward
aExtend
)
;
return
result
;
}
NS_IMETHODIMP
PresShell
:
:
IntraLineMove
(
bool
aForward
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
IntraLineMove
(
aForward
aExtend
)
;
}
NS_IMETHODIMP
PresShell
:
:
PageMove
(
bool
aForward
bool
aExtend
)
{
nsIFrame
*
frame
;
if
(
!
aExtend
)
{
frame
=
do_QueryFrame
(
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eVertical
)
)
;
}
else
{
frame
=
mSelection
-
>
GetFrameToPageSelect
(
)
;
}
if
(
!
frame
)
{
return
NS_OK
;
}
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
frameSelection
-
>
CommonPageMove
(
aForward
aExtend
frame
)
;
return
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
nsISelectionController
:
:
SELECTION_FOCUS_REGION
nsISelectionController
:
:
SCROLL_SYNCHRONOUS
|
nsISelectionController
:
:
SCROLL_FOR_CARET_MOVE
)
;
}
NS_IMETHODIMP
PresShell
:
:
ScrollPage
(
bool
aForward
)
{
nsIScrollableFrame
*
scrollFrame
=
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eVertical
)
;
if
(
scrollFrame
)
{
scrollFrame
-
>
ScrollBy
(
nsIntPoint
(
0
aForward
?
1
:
-
1
)
nsIScrollableFrame
:
:
PAGES
nsIScrollableFrame
:
:
SMOOTH
nullptr
nullptr
nsIScrollableFrame
:
:
NOT_MOMENTUM
nsIScrollableFrame
:
:
ENABLE_SNAP
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
ScrollLine
(
bool
aForward
)
{
nsIScrollableFrame
*
scrollFrame
=
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eVertical
)
;
if
(
scrollFrame
)
{
int32_t
lineCount
=
Preferences
:
:
GetInt
(
"
toolkit
.
scrollbox
.
verticalScrollDistance
"
NS_DEFAULT_VERTICAL_SCROLL_DISTANCE
)
;
scrollFrame
-
>
ScrollBy
(
nsIntPoint
(
0
aForward
?
lineCount
:
-
lineCount
)
nsIScrollableFrame
:
:
LINES
nsIScrollableFrame
:
:
SMOOTH
nullptr
nullptr
nsIScrollableFrame
:
:
NOT_MOMENTUM
nsIScrollableFrame
:
:
ENABLE_SNAP
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
ScrollCharacter
(
bool
aRight
)
{
nsIScrollableFrame
*
scrollFrame
=
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eHorizontal
)
;
if
(
scrollFrame
)
{
int32_t
h
=
Preferences
:
:
GetInt
(
"
toolkit
.
scrollbox
.
horizontalScrollDistance
"
NS_DEFAULT_HORIZONTAL_SCROLL_DISTANCE
)
;
scrollFrame
-
>
ScrollBy
(
nsIntPoint
(
aRight
?
h
:
-
h
0
)
nsIScrollableFrame
:
:
LINES
nsIScrollableFrame
:
:
SMOOTH
nullptr
nullptr
nsIScrollableFrame
:
:
NOT_MOMENTUM
nsIScrollableFrame
:
:
ENABLE_SNAP
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
CompleteScroll
(
bool
aForward
)
{
nsIScrollableFrame
*
scrollFrame
=
GetScrollableFrameToScroll
(
nsIPresShell
:
:
eVertical
)
;
if
(
scrollFrame
)
{
scrollFrame
-
>
ScrollBy
(
nsIntPoint
(
0
aForward
?
1
:
-
1
)
nsIScrollableFrame
:
:
WHOLE
nsIScrollableFrame
:
:
SMOOTH
nullptr
nullptr
nsIScrollableFrame
:
:
NOT_MOMENTUM
nsIScrollableFrame
:
:
ENABLE_SNAP
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
PresShell
:
:
CompleteMove
(
bool
aForward
bool
aExtend
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
nsIContent
*
limiter
=
frameSelection
-
>
GetAncestorLimiter
(
)
;
nsIFrame
*
frame
=
limiter
?
limiter
-
>
GetPrimaryFrame
(
)
:
FrameConstructor
(
)
-
>
GetRootElementFrame
(
)
;
if
(
!
frame
)
return
NS_ERROR_FAILURE
;
nsIFrame
:
:
CaretPosition
pos
=
frame
-
>
GetExtremeCaretPosition
(
!
aForward
)
;
frameSelection
-
>
HandleClick
(
pos
.
mResultContent
pos
.
mContentOffset
pos
.
mContentOffset
aExtend
false
aForward
?
CARET_ASSOCIATE_AFTER
:
CARET_ASSOCIATE_BEFORE
)
;
if
(
limiter
)
{
frameSelection
-
>
SetAncestorLimiter
(
limiter
)
;
}
return
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
nsISelectionController
:
:
SELECTION_FOCUS_REGION
nsISelectionController
:
:
SCROLL_SYNCHRONOUS
|
nsISelectionController
:
:
SCROLL_FOR_CARET_MOVE
)
;
}
NS_IMETHODIMP
PresShell
:
:
SelectAll
(
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
mSelection
;
return
frameSelection
-
>
SelectAll
(
)
;
}
static
void
DoCheckVisibility
(
nsPresContext
*
aPresContext
nsIContent
*
aNode
int16_t
aStartOffset
int16_t
aEndOffset
bool
*
aRetval
)
{
nsIFrame
*
frame
=
aNode
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
return
;
}
bool
finished
=
false
;
frame
-
>
CheckVisibility
(
aPresContext
aStartOffset
aEndOffset
true
&
finished
aRetval
)
;
}
NS_IMETHODIMP
PresShell
:
:
CheckVisibility
(
nsINode
*
node
int16_t
startOffset
int16_t
EndOffset
bool
*
_retval
)
{
if
(
!
node
|
|
startOffset
>
EndOffset
|
|
!
_retval
|
|
startOffset
<
0
|
|
EndOffset
<
0
)
return
NS_ERROR_INVALID_ARG
;
*
_retval
=
false
;
nsCOMPtr
<
nsIContent
>
content
(
do_QueryInterface
(
node
)
)
;
if
(
!
content
)
return
NS_ERROR_FAILURE
;
DoCheckVisibility
(
mPresContext
content
startOffset
EndOffset
_retval
)
;
return
NS_OK
;
}
nsresult
PresShell
:
:
CheckVisibilityContent
(
nsIContent
*
aNode
int16_t
aStartOffset
int16_t
aEndOffset
bool
*
aRetval
)
{
if
(
!
aNode
|
|
aStartOffset
>
aEndOffset
|
|
!
aRetval
|
|
aStartOffset
<
0
|
|
aEndOffset
<
0
)
{
return
NS_ERROR_INVALID_ARG
;
}
*
aRetval
=
false
;
DoCheckVisibility
(
mPresContext
aNode
aStartOffset
aEndOffset
aRetval
)
;
return
NS_OK
;
}
nsIFrame
*
nsIPresShell
:
:
GetRootScrollFrame
(
)
const
{
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
|
|
!
rootFrame
-
>
IsViewportFrame
(
)
)
return
nullptr
;
nsIFrame
*
theFrame
=
rootFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
!
theFrame
|
|
!
theFrame
-
>
IsScrollFrame
(
)
)
return
nullptr
;
return
theFrame
;
}
nsIScrollableFrame
*
nsIPresShell
:
:
GetRootScrollFrameAsScrollable
(
)
const
{
nsIFrame
*
frame
=
GetRootScrollFrame
(
)
;
if
(
!
frame
)
return
nullptr
;
nsIScrollableFrame
*
scrollableFrame
=
do_QueryFrame
(
frame
)
;
NS_ASSERTION
(
scrollableFrame
"
All
scroll
frames
must
implement
nsIScrollableFrame
"
)
;
return
scrollableFrame
;
}
nsIPageSequenceFrame
*
PresShell
:
:
GetPageSequenceFrame
(
)
const
{
nsIFrame
*
frame
=
mFrameConstructor
-
>
GetPageSequenceFrame
(
)
;
return
do_QueryFrame
(
frame
)
;
}
nsCanvasFrame
*
PresShell
:
:
GetCanvasFrame
(
)
const
{
nsIFrame
*
frame
=
mFrameConstructor
-
>
GetDocElementContainingBlock
(
)
;
return
do_QueryFrame
(
frame
)
;
}
void
PresShell
:
:
RestoreRootScrollPosition
(
)
{
nsIScrollableFrame
*
scrollableFrame
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
scrollableFrame
)
{
scrollableFrame
-
>
ScrollToRestoredPosition
(
)
;
}
}
void
PresShell
:
:
MaybeReleaseCapturingContent
(
)
{
RefPtr
<
nsFrameSelection
>
frameSelection
=
FrameSelection
(
)
;
if
(
frameSelection
)
{
frameSelection
-
>
SetDragState
(
false
)
;
}
if
(
gCaptureInfo
.
mContent
&
&
gCaptureInfo
.
mContent
-
>
OwnerDoc
(
)
=
=
mDocument
)
{
SetCapturingContent
(
nullptr
0
)
;
}
}
void
PresShell
:
:
BeginLoad
(
nsIDocument
*
aDocument
)
{
mDocumentLoading
=
true
;
gfxTextPerfMetrics
*
tp
=
nullptr
;
if
(
mPresContext
)
{
tp
=
mPresContext
-
>
GetTextPerfMetrics
(
)
;
}
bool
shouldLog
=
MOZ_LOG_TEST
(
gLog
LogLevel
:
:
Debug
)
;
if
(
shouldLog
|
|
tp
)
{
mLoadBegin
=
TimeStamp
:
:
Now
(
)
;
}
if
(
shouldLog
)
{
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
(
presshell
)
%
p
load
begin
[
%
s
]
\
n
"
this
uri
?
uri
-
>
GetSpecOrDefault
(
)
.
get
(
)
:
"
"
)
)
;
}
}
void
PresShell
:
:
EndLoad
(
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
=
=
mDocument
"
Wrong
document
"
)
;
RestoreRootScrollPosition
(
)
;
mDocumentLoading
=
false
;
}
void
PresShell
:
:
LoadComplete
(
)
{
gfxTextPerfMetrics
*
tp
=
nullptr
;
if
(
mPresContext
)
{
tp
=
mPresContext
-
>
GetTextPerfMetrics
(
)
;
}
bool
shouldLog
=
MOZ_LOG_TEST
(
gLog
LogLevel
:
:
Debug
)
;
if
(
shouldLog
|
|
tp
)
{
TimeDuration
loadTime
=
TimeStamp
:
:
Now
(
)
-
mLoadBegin
;
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
nsAutoCString
spec
;
if
(
uri
)
{
spec
=
uri
-
>
GetSpecOrDefault
(
)
;
}
if
(
shouldLog
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
(
presshell
)
%
p
load
done
time
-
ms
:
%
9
.
2f
[
%
s
]
\
n
"
this
loadTime
.
ToMilliseconds
(
)
spec
.
get
(
)
)
)
;
}
if
(
tp
)
{
tp
-
>
Accumulate
(
)
;
if
(
tp
-
>
cumulative
.
numChars
>
0
)
{
LogTextPerfStats
(
tp
this
tp
-
>
cumulative
loadTime
.
ToMilliseconds
(
)
eLog_loaddone
spec
.
get
(
)
)
;
}
}
}
}
#
ifdef
DEBUG
void
PresShell
:
:
VerifyHasDirtyRootAncestor
(
nsIFrame
*
aFrame
)
{
return
;
if
(
!
aFrame
-
>
GetParent
(
)
)
{
return
;
}
while
(
aFrame
&
&
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_HAS_DIRTY_CHILDREN
)
)
{
if
(
(
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_REFLOW_ROOT
)
|
|
!
aFrame
-
>
GetParent
(
)
)
&
&
mDirtyRoots
.
Contains
(
aFrame
)
)
{
return
;
}
aFrame
=
aFrame
-
>
GetParent
(
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Frame
has
dirty
bits
set
but
isn
'
t
scheduled
to
be
"
"
reflowed
?
"
)
;
}
#
endif
void
PresShell
:
:
FrameNeedsReflow
(
nsIFrame
*
aFrame
IntrinsicDirty
aIntrinsicDirty
nsFrameState
aBitToAdd
ReflowRootHandling
aRootHandling
)
{
MOZ_ASSERT
(
aBitToAdd
=
=
NS_FRAME_IS_DIRTY
|
|
aBitToAdd
=
=
NS_FRAME_HAS_DIRTY_CHILDREN
|
|
!
aBitToAdd
"
Unexpected
bits
being
added
"
)
;
NS_ASSERTION
(
!
(
aIntrinsicDirty
=
=
eStyleChange
&
&
aBitToAdd
=
=
NS_FRAME_HAS_DIRTY_CHILDREN
)
"
bits
don
'
t
correspond
to
style
change
reason
"
)
;
NS_ASSERTION
(
!
mIsReflowing
"
can
'
t
mark
frame
dirty
during
reflow
"
)
;
if
(
!
mDidInitialize
)
return
;
if
(
mIsDestroying
)
return
;
#
ifdef
DEBUG
if
(
mInVerifyReflow
)
return
;
if
(
VERIFY_REFLOW_NOISY_RC
&
gVerifyReflowFlags
)
{
printf
(
"
\
nPresShell
%
p
:
frame
%
p
needs
reflow
\
n
"
(
void
*
)
this
(
void
*
)
aFrame
)
;
if
(
VERIFY_REFLOW_REALLY_NOISY_RC
&
gVerifyReflowFlags
)
{
printf
(
"
Current
content
model
:
\
n
"
)
;
Element
*
rootElement
=
mDocument
-
>
GetRootElement
(
)
;
if
(
rootElement
)
{
rootElement
-
>
List
(
stdout
0
)
;
}
}
}
#
endif
AutoTArray
<
nsIFrame
*
4
>
subtrees
;
subtrees
.
AppendElement
(
aFrame
)
;
do
{
nsIFrame
*
subtreeRoot
=
subtrees
.
PopLastElement
(
)
;
bool
wasDirty
=
NS_SUBTREE_DIRTY
(
subtreeRoot
)
;
subtreeRoot
-
>
AddStateBits
(
aBitToAdd
)
;
bool
targetNeedsReflowFromParent
;
switch
(
aRootHandling
)
{
case
ePositionOrSizeChange
:
targetNeedsReflowFromParent
=
true
;
break
;
case
eNoPositionOrSizeChange
:
targetNeedsReflowFromParent
=
false
;
break
;
case
eInferFromBitToAdd
:
targetNeedsReflowFromParent
=
(
aBitToAdd
=
=
NS_FRAME_IS_DIRTY
)
;
break
;
}
#
define
FRAME_IS_REFLOW_ROOT
(
_f
)
\
(
(
_f
-
>
GetStateBits
(
)
&
NS_FRAME_REFLOW_ROOT
)
&
&
\
(
_f
!
=
subtreeRoot
|
|
!
targetNeedsReflowFromParent
)
)
if
(
aIntrinsicDirty
!
=
nsIPresShell
:
:
eResize
)
{
for
(
nsIFrame
*
a
=
subtreeRoot
;
a
&
&
!
FRAME_IS_REFLOW_ROOT
(
a
)
;
a
=
a
-
>
GetParent
(
)
)
a
-
>
MarkIntrinsicISizesDirty
(
)
;
}
if
(
aIntrinsicDirty
=
=
eStyleChange
)
{
AutoTArray
<
nsIFrame
*
32
>
stack
;
stack
.
AppendElement
(
subtreeRoot
)
;
do
{
nsIFrame
*
f
=
stack
.
PopLastElement
(
)
;
if
(
f
-
>
IsPlaceholderFrame
(
)
)
{
nsIFrame
*
oof
=
nsPlaceholderFrame
:
:
GetRealFrameForPlaceholder
(
f
)
;
if
(
!
nsLayoutUtils
:
:
IsProperAncestorFrame
(
subtreeRoot
oof
)
)
{
subtrees
.
AppendElement
(
oof
)
;
}
}
nsIFrame
:
:
ChildListIterator
lists
(
f
)
;
for
(
;
!
lists
.
IsDone
(
)
;
lists
.
Next
(
)
)
{
for
(
nsIFrame
*
kid
:
lists
.
CurrentList
(
)
)
{
kid
-
>
MarkIntrinsicISizesDirty
(
)
;
stack
.
AppendElement
(
kid
)
;
}
}
}
while
(
stack
.
Length
(
)
!
=
0
)
;
}
if
(
!
aBitToAdd
)
{
continue
;
}
nsIFrame
*
f
=
subtreeRoot
;
for
(
;
;
)
{
if
(
FRAME_IS_REFLOW_ROOT
(
f
)
|
|
!
f
-
>
GetParent
(
)
)
{
if
(
!
wasDirty
)
{
mDirtyRoots
.
AppendElement
(
f
)
;
SetNeedLayoutFlush
(
)
;
}
#
ifdef
DEBUG
else
{
VerifyHasDirtyRootAncestor
(
f
)
;
}
#
endif
break
;
}
nsIFrame
*
child
=
f
;
f
=
f
-
>
GetParent
(
)
;
wasDirty
=
NS_SUBTREE_DIRTY
(
f
)
;
f
-
>
ChildIsDirty
(
child
)
;
NS_ASSERTION
(
f
-
>
GetStateBits
(
)
&
NS_FRAME_HAS_DIRTY_CHILDREN
"
ChildIsDirty
didn
'
t
do
its
job
"
)
;
if
(
wasDirty
)
{
#
ifdef
DEBUG
VerifyHasDirtyRootAncestor
(
f
)
;
#
endif
break
;
}
}
}
while
(
subtrees
.
Length
(
)
!
=
0
)
;
MaybeScheduleReflow
(
)
;
}
void
PresShell
:
:
FrameNeedsToContinueReflow
(
nsIFrame
*
aFrame
)
{
NS_ASSERTION
(
mIsReflowing
"
Must
be
in
reflow
when
marking
path
dirty
.
"
)
;
MOZ_ASSERT
(
mCurrentReflowRoot
"
Must
have
a
current
reflow
root
here
"
)
;
NS_ASSERTION
(
aFrame
=
=
mCurrentReflowRoot
|
|
nsLayoutUtils
:
:
IsProperAncestorFrame
(
mCurrentReflowRoot
aFrame
)
"
Frame
passed
in
is
not
the
descendant
of
mCurrentReflowRoot
"
)
;
NS_ASSERTION
(
aFrame
-
>
GetStateBits
(
)
&
NS_FRAME_IN_REFLOW
"
Frame
passed
in
not
in
reflow
?
"
)
;
mFramesToDirty
.
PutEntry
(
aFrame
)
;
}
already_AddRefed
<
nsIContent
>
nsIPresShell
:
:
GetContentForScrolling
(
)
const
{
if
(
nsCOMPtr
<
nsIContent
>
focused
=
GetFocusedContentInOurWindow
(
)
)
{
return
focused
.
forget
(
)
;
}
return
GetSelectedContentForScrolling
(
)
;
}
already_AddRefed
<
nsIContent
>
nsIPresShell
:
:
GetSelectedContentForScrolling
(
)
const
{
nsCOMPtr
<
nsIContent
>
selectedContent
;
if
(
mSelection
)
{
Selection
*
domSelection
=
mSelection
-
>
GetSelection
(
SelectionType
:
:
eNormal
)
;
if
(
domSelection
)
{
selectedContent
=
nsIContent
:
:
FromNodeOrNull
(
domSelection
-
>
GetFocusNode
(
)
)
;
}
}
return
selectedContent
.
forget
(
)
;
}
nsIScrollableFrame
*
nsIPresShell
:
:
GetNearestScrollableFrame
(
nsIFrame
*
aFrame
nsIPresShell
:
:
ScrollDirection
aDirection
)
{
if
(
aDirection
=
=
nsIPresShell
:
:
eEither
)
{
return
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
aFrame
)
;
}
return
nsLayoutUtils
:
:
GetNearestScrollableFrameForDirection
(
aFrame
aDirection
=
=
eVertical
?
nsLayoutUtils
:
:
eVertical
:
nsLayoutUtils
:
:
eHorizontal
)
;
}
nsIScrollableFrame
*
nsIPresShell
:
:
GetScrollableFrameToScrollForContent
(
nsIContent
*
aContent
nsIPresShell
:
:
ScrollDirection
aDirection
)
{
nsIScrollableFrame
*
scrollFrame
=
nullptr
;
if
(
aContent
)
{
nsIFrame
*
startFrame
=
aContent
-
>
GetPrimaryFrame
(
)
;
if
(
startFrame
)
{
scrollFrame
=
startFrame
-
>
GetScrollTargetFrame
(
)
;
if
(
scrollFrame
)
{
startFrame
=
scrollFrame
-
>
GetScrolledFrame
(
)
;
}
scrollFrame
=
GetNearestScrollableFrame
(
startFrame
aDirection
)
;
}
}
if
(
!
scrollFrame
)
{
scrollFrame
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
!
scrollFrame
|
|
!
scrollFrame
-
>
GetScrolledFrame
(
)
)
{
return
nullptr
;
}
scrollFrame
=
GetNearestScrollableFrame
(
scrollFrame
-
>
GetScrolledFrame
(
)
aDirection
)
;
}
return
scrollFrame
;
}
nsIScrollableFrame
*
nsIPresShell
:
:
GetScrollableFrameToScroll
(
nsIPresShell
:
:
ScrollDirection
aDirection
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetContentForScrolling
(
)
;
return
GetScrollableFrameToScrollForContent
(
content
.
get
(
)
aDirection
)
;
}
void
PresShell
:
:
CancelAllPendingReflows
(
)
{
mDirtyRoots
.
Clear
(
)
;
if
(
mObservingLayoutFlushes
)
{
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
RemoveLayoutFlushObserver
(
this
)
;
mObservingLayoutFlushes
=
false
;
}
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
}
static
bool
DestroyFramesAndStyleDataFor
(
Element
*
aElement
nsPresContext
&
aPresContext
RestyleManager
:
:
IncludeRoot
aIncludeRoot
)
{
bool
didReconstruct
=
aPresContext
.
FrameConstructor
(
)
-
>
DestroyFramesFor
(
aElement
)
;
RestyleManager
:
:
ClearServoDataFromSubtree
(
aElement
aIncludeRoot
)
;
return
didReconstruct
;
}
void
nsIPresShell
:
:
SlotAssignmentWillChange
(
Element
&
aElement
HTMLSlotElement
*
aOldSlot
HTMLSlotElement
*
aNewSlot
)
{
MOZ_ASSERT
(
aOldSlot
!
=
aNewSlot
)
;
if
(
MOZ_UNLIKELY
(
!
mDidInitialize
)
)
{
return
;
}
if
(
aOldSlot
&
&
aOldSlot
-
>
AssignedNodes
(
)
.
Length
(
)
=
=
1
)
{
DestroyFramesForAndRestyle
(
aOldSlot
)
;
}
DestroyFramesAndStyleDataFor
(
&
aElement
*
mPresContext
RestyleManager
:
:
IncludeRoot
:
:
Yes
)
;
if
(
aNewSlot
)
{
if
(
aNewSlot
-
>
AssignedNodes
(
)
.
IsEmpty
(
)
)
{
DestroyFramesForAndRestyle
(
aNewSlot
)
;
}
else
if
(
aNewSlot
-
>
HasServoData
(
)
&
&
!
Servo_Element_IsDisplayNone
(
aNewSlot
)
)
{
aNewSlot
-
>
NoteDescendantsNeedFramesForServo
(
)
;
aElement
.
SetFlags
(
NODE_NEEDS_FRAME
)
;
aNewSlot
-
>
SetHasDirtyDescendantsForServo
(
)
;
aNewSlot
-
>
NoteDirtySubtreeForServo
(
)
;
}
}
}
#
ifdef
DEBUG
static
void
AssertNoFramesInSubtree
(
nsIContent
*
aContent
)
{
for
(
nsIContent
*
c
=
aContent
;
c
;
c
=
c
-
>
GetNextNode
(
aContent
)
)
{
MOZ_ASSERT
(
!
c
-
>
GetPrimaryFrame
(
)
)
;
if
(
auto
*
shadowRoot
=
c
-
>
GetShadowRoot
(
)
)
{
AssertNoFramesInSubtree
(
shadowRoot
)
;
}
if
(
auto
*
binding
=
c
-
>
GetXBLBinding
(
)
)
{
if
(
auto
*
bindingWithContent
=
binding
-
>
GetBindingWithContent
(
)
)
{
nsIContent
*
anonContent
=
bindingWithContent
-
>
GetAnonymousContent
(
)
;
MOZ_ASSERT
(
!
anonContent
-
>
GetPrimaryFrame
(
)
)
;
for
(
nsIContent
*
child
=
anonContent
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
AssertNoFramesInSubtree
(
child
)
;
}
}
}
}
}
#
endif
void
nsIPresShell
:
:
DestroyFramesForAndRestyle
(
Element
*
aElement
)
{
#
ifdef
DEBUG
auto
postCondition
=
mozilla
:
:
MakeScopeExit
(
[
&
]
(
)
{
AssertNoFramesInSubtree
(
aElement
)
;
}
)
;
#
endif
MOZ_ASSERT
(
aElement
)
;
if
(
MOZ_UNLIKELY
(
!
mDidInitialize
)
)
{
return
;
}
if
(
!
aElement
-
>
GetFlattenedTreeParentNode
(
)
)
{
return
;
}
nsAutoScriptBlocker
scriptBlocker
;
+
+
mChangeNestCount
;
const
bool
didReconstruct
=
FrameConstructor
(
)
-
>
DestroyFramesFor
(
aElement
)
;
RestyleManager
:
:
ClearServoDataFromSubtree
(
aElement
RestyleManager
:
:
IncludeRoot
:
:
No
)
;
auto
changeHint
=
didReconstruct
?
nsChangeHint
(
0
)
:
nsChangeHint_ReconstructFrame
;
mPresContext
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
aElement
eRestyle_Subtree
changeHint
)
;
-
-
mChangeNestCount
;
}
void
nsIPresShell
:
:
PostRecreateFramesFor
(
Element
*
aElement
)
{
if
(
MOZ_UNLIKELY
(
!
mDidInitialize
)
)
{
return
;
}
mPresContext
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
aElement
nsRestyleHint
(
0
)
nsChangeHint_ReconstructFrame
)
;
}
void
nsIPresShell
:
:
RestyleForAnimation
(
Element
*
aElement
nsRestyleHint
aHint
)
{
mPresContext
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
aElement
aHint
nsChangeHint
(
0
)
)
;
}
void
nsIPresShell
:
:
SetForwardingContainer
(
const
WeakPtr
<
nsDocShell
>
&
aContainer
)
{
mForwardingContainer
=
aContainer
;
}
void
PresShell
:
:
ClearFrameRefs
(
nsIFrame
*
aFrame
)
{
mPresContext
-
>
EventStateManager
(
)
-
>
ClearFrameRefs
(
aFrame
)
;
AutoWeakFrame
*
weakFrame
=
mAutoWeakFrames
;
while
(
weakFrame
)
{
AutoWeakFrame
*
prev
=
weakFrame
-
>
GetPreviousWeakFrame
(
)
;
if
(
weakFrame
-
>
GetFrame
(
)
=
=
aFrame
)
{
weakFrame
-
>
Clear
(
this
)
;
}
weakFrame
=
prev
;
}
AutoTArray
<
WeakFrame
*
4
>
toRemove
;
for
(
auto
iter
=
mWeakFrames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
WeakFrame
*
weakFrame
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
weakFrame
-
>
GetFrame
(
)
=
=
aFrame
)
{
toRemove
.
AppendElement
(
weakFrame
)
;
}
}
for
(
WeakFrame
*
weakFrame
:
toRemove
)
{
weakFrame
-
>
Clear
(
this
)
;
}
}
already_AddRefed
<
gfxContext
>
PresShell
:
:
CreateReferenceRenderingContext
(
)
{
nsDeviceContext
*
devCtx
=
mPresContext
-
>
DeviceContext
(
)
;
RefPtr
<
gfxContext
>
rc
;
if
(
mPresContext
-
>
IsScreen
(
)
)
{
rc
=
gfxContext
:
:
CreateOrNull
(
gfxPlatform
:
:
GetPlatform
(
)
-
>
ScreenReferenceDrawTarget
(
)
.
get
(
)
)
;
}
else
{
rc
=
devCtx
-
>
CreateReferenceRenderingContext
(
)
;
}
return
rc
?
rc
.
forget
(
)
:
nullptr
;
}
nsresult
PresShell
:
:
GoToAnchor
(
const
nsAString
&
aAnchorName
bool
aScroll
uint32_t
aAdditionalScrollFlags
)
{
if
(
!
mDocument
)
{
return
NS_ERROR_FAILURE
;
}
const
Element
*
root
=
mDocument
-
>
GetRootElement
(
)
;
if
(
root
&
&
root
-
>
IsSVGElement
(
nsGkAtoms
:
:
svg
)
)
{
if
(
SVGFragmentIdentifier
:
:
ProcessFragmentIdentifier
(
mDocument
aAnchorName
)
)
{
return
NS_OK
;
}
}
RefPtr
<
EventStateManager
>
esm
=
mPresContext
-
>
EventStateManager
(
)
;
if
(
aAnchorName
.
IsEmpty
(
)
)
{
NS_ASSERTION
(
!
aScroll
"
can
'
t
scroll
to
empty
anchor
name
"
)
;
esm
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_URLTARGET
)
;
return
NS_OK
;
}
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsIContent
>
content
;
if
(
mDocument
)
{
content
=
mDocument
-
>
GetElementById
(
aAnchorName
)
;
}
if
(
!
content
&
&
mDocument
-
>
IsHTMLDocument
(
)
)
{
nsCOMPtr
<
nsINodeList
>
list
=
mDocument
-
>
GetElementsByName
(
aAnchorName
)
;
if
(
list
)
{
uint32_t
length
=
list
-
>
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
length
;
i
+
+
)
{
nsIContent
*
node
=
list
-
>
Item
(
i
)
;
if
(
node
-
>
IsHTMLElement
(
nsGkAtoms
:
:
a
)
)
{
content
=
node
;
break
;
}
}
}
}
if
(
!
content
&
&
!
mDocument
-
>
IsHTMLDocument
(
)
)
{
NS_NAMED_LITERAL_STRING
(
nameSpace
"
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
"
)
;
nsCOMPtr
<
nsINodeList
>
list
=
mDocument
-
>
GetElementsByTagNameNS
(
nameSpace
NS_LITERAL_STRING
(
"
a
"
)
)
;
for
(
uint32_t
i
=
0
;
true
;
i
+
+
)
{
nsIContent
*
node
=
list
-
>
Item
(
i
)
;
if
(
!
node
)
{
break
;
}
if
(
node
-
>
IsElement
(
)
&
&
node
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
name
aAnchorName
eCaseMatters
)
)
{
content
=
node
;
break
;
}
}
}
esm
-
>
SetContentState
(
content
NS_EVENT_STATE_URLTARGET
)
;
#
ifdef
ACCESSIBILITY
nsIContent
*
anchorTarget
=
content
;
#
endif
nsIScrollableFrame
*
rootScroll
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
rootScroll
&
&
rootScroll
-
>
DidHistoryRestore
(
)
)
{
aScroll
=
false
;
rootScroll
-
>
ClearDidHistoryRestore
(
)
;
}
if
(
content
)
{
if
(
aScroll
)
{
rv
=
ScrollContentIntoView
(
content
ScrollAxis
(
SCROLL_TOP
SCROLL_ALWAYS
)
ScrollAxis
(
)
ANCHOR_SCROLL_FLAGS
|
aAdditionalScrollFlags
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
nsIScrollableFrame
*
rootScroll
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
rootScroll
)
{
mLastAnchorScrolledTo
=
content
;
mLastAnchorScrollPositionY
=
rootScroll
-
>
GetScrollPosition
(
)
.
y
;
}
}
bool
selectAnchor
=
Preferences
:
:
GetBool
(
"
layout
.
selectanchor
"
)
;
RefPtr
<
nsRange
>
jumpToRange
=
new
nsRange
(
mDocument
)
;
while
(
content
&
&
content
-
>
GetFirstChild
(
)
)
{
content
=
content
-
>
GetFirstChild
(
)
;
}
jumpToRange
-
>
SelectNodeContents
(
*
content
IgnoreErrors
(
)
)
;
RefPtr
<
Selection
>
sel
=
mSelection
-
>
GetSelection
(
SelectionType
:
:
eNormal
)
;
if
(
sel
)
{
sel
-
>
RemoveAllRanges
(
IgnoreErrors
(
)
)
;
sel
-
>
AddRange
(
*
jumpToRange
IgnoreErrors
(
)
)
;
if
(
!
selectAnchor
)
{
sel
-
>
CollapseToStart
(
IgnoreErrors
(
)
)
;
}
}
nsPIDOMWindowOuter
*
win
=
mDocument
-
>
GetWindow
(
)
;
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
win
)
{
nsCOMPtr
<
mozIDOMWindowProxy
>
focusedWindow
;
fm
-
>
GetFocusedWindow
(
getter_AddRefs
(
focusedWindow
)
)
;
if
(
SameCOMIdentity
(
win
focusedWindow
)
)
{
fm
-
>
ClearFocus
(
focusedWindow
)
;
}
}
if
(
content
-
>
IsNodeOfType
(
nsINode
:
:
eANIMATION
)
)
{
SVGContentUtils
:
:
ActivateByHyperlink
(
content
.
get
(
)
)
;
}
}
else
{
rv
=
NS_ERROR_FAILURE
;
NS_NAMED_LITERAL_STRING
(
top
"
top
"
)
;
if
(
nsContentUtils
:
:
EqualsIgnoreASCIICase
(
aAnchorName
top
)
)
{
rv
=
NS_OK
;
nsIScrollableFrame
*
sf
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
aScroll
&
&
sf
)
{
sf
-
>
ScrollTo
(
nsPoint
(
0
0
)
nsIScrollableFrame
:
:
INSTANT
)
;
}
}
}
#
ifdef
ACCESSIBILITY
if
(
anchorTarget
)
{
nsAccessibilityService
*
accService
=
AccService
(
)
;
if
(
accService
)
accService
-
>
NotifyOfAnchorJumpTo
(
anchorTarget
)
;
}
#
endif
return
rv
;
}
nsresult
PresShell
:
:
ScrollToAnchor
(
)
{
if
(
!
mLastAnchorScrolledTo
)
{
return
NS_OK
;
}
NS_ASSERTION
(
mDidInitialize
"
should
have
done
initial
reflow
by
now
"
)
;
nsIScrollableFrame
*
rootScroll
=
GetRootScrollFrameAsScrollable
(
)
;
if
(
!
rootScroll
|
|
mLastAnchorScrollPositionY
!
=
rootScroll
-
>
GetScrollPosition
(
)
.
y
)
{
return
NS_OK
;
}
nsresult
rv
=
ScrollContentIntoView
(
mLastAnchorScrolledTo
ScrollAxis
(
SCROLL_TOP
SCROLL_ALWAYS
)
ScrollAxis
(
)
ANCHOR_SCROLL_FLAGS
)
;
mLastAnchorScrolledTo
=
nullptr
;
return
rv
;
}
static
void
AccumulateFrameBounds
(
nsIFrame
*
aContainerFrame
nsIFrame
*
aFrame
bool
aUseWholeLineHeightForInlines
nsRect
&
aRect
bool
&
aHaveRect
nsIFrame
*
&
aPrevBlock
nsAutoLineIterator
&
aLines
int32_t
&
aCurLine
)
{
nsIFrame
*
frame
=
aFrame
;
nsRect
frameBounds
=
nsRect
(
nsPoint
(
0
0
)
aFrame
-
>
GetSize
(
)
)
;
if
(
frameBounds
.
height
=
=
0
|
|
aUseWholeLineHeightForInlines
)
{
nsIFrame
*
prevFrame
=
aFrame
;
nsIFrame
*
f
=
aFrame
;
while
(
f
&
&
f
-
>
IsFrameOfType
(
nsIFrame
:
:
eLineParticipant
)
&
&
!
f
-
>
IsTransformed
(
)
&
&
!
f
-
>
IsAbsPosContainingBlock
(
)
)
{
prevFrame
=
f
;
f
=
prevFrame
-
>
GetParent
(
)
;
}
if
(
f
!
=
aFrame
&
&
f
&
&
f
-
>
IsBlockFrame
(
)
)
{
if
(
f
!
=
aPrevBlock
)
{
aLines
=
f
-
>
GetLineIterator
(
)
;
aPrevBlock
=
f
;
aCurLine
=
0
;
}
if
(
aLines
)
{
int32_t
index
=
aLines
-
>
FindLineContaining
(
prevFrame
aCurLine
)
;
if
(
index
>
=
0
)
{
aCurLine
=
index
;
nsIFrame
*
trash1
;
int32_t
trash2
;
nsRect
lineBounds
;
if
(
NS_SUCCEEDED
(
aLines
-
>
GetLine
(
index
&
trash1
&
trash2
lineBounds
)
)
)
{
frameBounds
+
=
frame
-
>
GetOffsetTo
(
f
)
;
frame
=
f
;
if
(
lineBounds
.
y
<
frameBounds
.
y
)
{
frameBounds
.
height
=
frameBounds
.
YMost
(
)
-
lineBounds
.
y
;
frameBounds
.
y
=
lineBounds
.
y
;
}
}
}
}
}
}
nsRect
transformedBounds
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
frame
frameBounds
aContainerFrame
)
;
if
(
aHaveRect
)
{
aRect
.
UnionRectEdges
(
aRect
transformedBounds
)
;
}
else
{
aHaveRect
=
true
;
aRect
=
transformedBounds
;
}
}
static
bool
ComputeNeedToScroll
(
nsIPresShell
:
:
WhenToScroll
aWhenToScroll
nscoord
aLineSize
nscoord
aRectMin
nscoord
aRectMax
nscoord
aViewMin
nscoord
aViewMax
)
{
if
(
nsIPresShell
:
:
SCROLL_ALWAYS
=
=
aWhenToScroll
)
{
return
true
;
}
else
if
(
nsIPresShell
:
:
SCROLL_IF_NOT_VISIBLE
=
=
aWhenToScroll
)
{
return
aRectMax
-
aLineSize
<
=
aViewMin
|
|
aRectMin
+
aLineSize
>
=
aViewMax
;
}
else
if
(
nsIPresShell
:
:
SCROLL_IF_NOT_FULLY_VISIBLE
=
=
aWhenToScroll
)
{
return
!
(
aRectMin
>
=
aViewMin
&
&
aRectMax
<
=
aViewMax
)
&
&
std
:
:
min
(
aViewMax
aRectMax
)
-
std
:
:
max
(
aRectMin
aViewMin
)
<
aViewMax
-
aViewMin
;
}
return
false
;
}
static
nscoord
ComputeWhereToScroll
(
int16_t
aWhereToScroll
nscoord
aOriginalCoord
nscoord
aRectMin
nscoord
aRectMax
nscoord
aViewMin
nscoord
aViewMax
nscoord
*
aRangeMin
nscoord
*
aRangeMax
)
{
nscoord
resultCoord
=
aOriginalCoord
;
nscoord
scrollPortLength
=
aViewMax
-
aViewMin
;
if
(
nsIPresShell
:
:
SCROLL_MINIMUM
=
=
aWhereToScroll
)
{
nscoord
min
=
std
:
:
min
(
aRectMin
aRectMax
-
scrollPortLength
)
;
nscoord
max
=
std
:
:
max
(
aRectMin
aRectMax
-
scrollPortLength
)
;
resultCoord
=
std
:
:
min
(
std
:
:
max
(
aOriginalCoord
min
)
max
)
;
}
else
{
nscoord
frameAlignCoord
=
NSToCoordRound
(
aRectMin
+
(
aRectMax
-
aRectMin
)
*
(
aWhereToScroll
/
100
.
0f
)
)
;
resultCoord
=
NSToCoordRound
(
frameAlignCoord
-
scrollPortLength
*
(
aWhereToScroll
/
100
.
0f
)
)
;
}
*
aRangeMin
=
std
:
:
min
(
resultCoord
aRectMax
-
scrollPortLength
)
;
*
aRangeMax
=
std
:
:
max
(
resultCoord
aRectMin
)
;
return
resultCoord
;
}
static
void
ScrollToShowRect
(
nsIScrollableFrame
*
aFrameAsScrollable
const
nsRect
&
aRect
nsIPresShell
:
:
ScrollAxis
aVertical
nsIPresShell
:
:
ScrollAxis
aHorizontal
uint32_t
aFlags
)
{
nsPoint
scrollPt
=
aFrameAsScrollable
-
>
GetVisualViewportOffset
(
)
;
nsRect
visibleRect
(
scrollPt
aFrameAsScrollable
-
>
GetVisualViewportSize
(
)
)
;
nsSize
lineSize
;
if
(
aVertical
.
mWhenToScroll
=
=
nsIPresShell
:
:
SCROLL_IF_NOT_VISIBLE
|
|
aHorizontal
.
mWhenToScroll
=
=
nsIPresShell
:
:
SCROLL_IF_NOT_VISIBLE
)
{
lineSize
=
aFrameAsScrollable
-
>
GetLineScrollAmount
(
)
;
}
ScrollStyles
ss
=
aFrameAsScrollable
-
>
GetScrollStyles
(
)
;
nsRect
allowedRange
(
scrollPt
nsSize
(
0
0
)
)
;
bool
needToScroll
=
false
;
uint32_t
directions
=
aFrameAsScrollable
-
>
GetPerceivedScrollingDirections
(
)
;
if
(
(
(
aFlags
&
nsIPresShell
:
:
SCROLL_OVERFLOW_HIDDEN
)
|
|
ss
.
mVertical
!
=
NS_STYLE_OVERFLOW_HIDDEN
)
&
&
(
!
aVertical
.
mOnlyIfPerceivedScrollableDirection
|
|
(
directions
&
nsIScrollableFrame
:
:
VERTICAL
)
)
)
{
if
(
ComputeNeedToScroll
(
aVertical
.
mWhenToScroll
lineSize
.
height
aRect
.
y
aRect
.
YMost
(
)
visibleRect
.
y
visibleRect
.
YMost
(
)
)
)
{
nscoord
maxHeight
;
scrollPt
.
y
=
ComputeWhereToScroll
(
aVertical
.
mWhereToScroll
scrollPt
.
y
aRect
.
y
aRect
.
YMost
(
)
visibleRect
.
y
visibleRect
.
YMost
(
)
&
allowedRange
.
y
&
maxHeight
)
;
allowedRange
.
height
=
maxHeight
-
allowedRange
.
y
;
needToScroll
=
true
;
}
}
if
(
(
(
aFlags
&
nsIPresShell
:
:
SCROLL_OVERFLOW_HIDDEN
)
|
|
ss
.
mHorizontal
!
=
NS_STYLE_OVERFLOW_HIDDEN
)
&
&
(
!
aHorizontal
.
mOnlyIfPerceivedScrollableDirection
|
|
(
directions
&
nsIScrollableFrame
:
:
HORIZONTAL
)
)
)
{
if
(
ComputeNeedToScroll
(
aHorizontal
.
mWhenToScroll
lineSize
.
width
aRect
.
x
aRect
.
XMost
(
)
visibleRect
.
x
visibleRect
.
XMost
(
)
)
)
{
nscoord
maxWidth
;
scrollPt
.
x
=
ComputeWhereToScroll
(
aHorizontal
.
mWhereToScroll
scrollPt
.
x
aRect
.
x
aRect
.
XMost
(
)
visibleRect
.
x
visibleRect
.
XMost
(
)
&
allowedRange
.
x
&
maxWidth
)
;
allowedRange
.
width
=
maxWidth
-
allowedRange
.
x
;
needToScroll
=
true
;
}
}
if
(
needToScroll
)
{
nsIScrollableFrame
:
:
ScrollMode
scrollMode
=
nsIScrollableFrame
:
:
INSTANT
;
bool
autoBehaviorIsSmooth
=
(
aFrameAsScrollable
-
>
GetScrollStyles
(
)
.
mScrollBehavior
=
=
NS_STYLE_SCROLL_BEHAVIOR_SMOOTH
)
;
bool
smoothScroll
=
(
aFlags
&
nsIPresShell
:
:
SCROLL_SMOOTH
)
|
|
(
(
aFlags
&
nsIPresShell
:
:
SCROLL_SMOOTH_AUTO
)
&
&
autoBehaviorIsSmooth
)
;
if
(
gfxPrefs
:
:
ScrollBehaviorEnabled
(
)
&
&
smoothScroll
)
{
scrollMode
=
nsIScrollableFrame
:
:
SMOOTH_MSD
;
}
aFrameAsScrollable
-
>
ScrollTo
(
scrollPt
scrollMode
&
allowedRange
)
;
}
}
nsresult
PresShell
:
:
ScrollContentIntoView
(
nsIContent
*
aContent
nsIPresShell
:
:
ScrollAxis
aVertical
nsIPresShell
:
:
ScrollAxis
aHorizontal
uint32_t
aFlags
)
{
NS_ENSURE_TRUE
(
aContent
NS_ERROR_NULL_POINTER
)
;
nsCOMPtr
<
nsIDocument
>
composedDoc
=
aContent
-
>
GetComposedDoc
(
)
;
NS_ENSURE_STATE
(
composedDoc
)
;
NS_ASSERTION
(
mDidInitialize
"
should
have
done
initial
reflow
by
now
"
)
;
if
(
mContentToScrollTo
)
{
mContentToScrollTo
-
>
DeleteProperty
(
nsGkAtoms
:
:
scrolling
)
;
}
mContentToScrollTo
=
aContent
;
ScrollIntoViewData
*
data
=
new
ScrollIntoViewData
(
)
;
data
-
>
mContentScrollVAxis
=
aVertical
;
data
-
>
mContentScrollHAxis
=
aHorizontal
;
data
-
>
mContentToScrollToFlags
=
aFlags
;
if
(
NS_FAILED
(
mContentToScrollTo
-
>
SetProperty
(
nsGkAtoms
:
:
scrolling
data
nsINode
:
:
DeleteProperty
<
PresShell
:
:
ScrollIntoViewData
>
)
)
)
{
mContentToScrollTo
=
nullptr
;
}
if
(
nsIPresShell
*
shell
=
composedDoc
-
>
GetShell
(
)
)
{
shell
-
>
SetNeedLayoutFlush
(
)
;
}
composedDoc
-
>
FlushPendingNotifications
(
FlushType
:
:
InterruptibleLayout
)
;
if
(
mContentToScrollTo
)
{
DoScrollContentIntoView
(
)
;
}
return
NS_OK
;
}
void
PresShell
:
:
DoScrollContentIntoView
(
)
{
NS_ASSERTION
(
mDidInitialize
"
should
have
done
initial
reflow
by
now
"
)
;
nsIFrame
*
frame
=
mContentToScrollTo
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
mContentToScrollTo
-
>
DeleteProperty
(
nsGkAtoms
:
:
scrolling
)
;
mContentToScrollTo
=
nullptr
;
return
;
}
if
(
frame
-
>
GetStateBits
(
)
&
NS_FRAME_FIRST_REFLOW
)
{
return
;
}
nsIFrame
*
container
=
nsLayoutUtils
:
:
GetClosestFrameOfType
(
frame
-
>
GetParent
(
)
LayoutFrameType
:
:
Scroll
)
;
if
(
!
container
)
{
return
;
}
ScrollIntoViewData
*
data
=
static_cast
<
ScrollIntoViewData
*
>
(
mContentToScrollTo
-
>
GetProperty
(
nsGkAtoms
:
:
scrolling
)
)
;
if
(
MOZ_UNLIKELY
(
!
data
)
)
{
mContentToScrollTo
=
nullptr
;
return
;
}
nsRect
frameBounds
;
bool
haveRect
=
false
;
bool
useWholeLineHeightForInlines
=
data
-
>
mContentScrollVAxis
.
mWhenToScroll
!
=
nsIPresShell
:
:
SCROLL_IF_NOT_FULLY_VISIBLE
;
nsIFrame
*
prevBlock
=
nullptr
;
nsAutoLineIterator
lines
;
int32_t
curLine
=
0
;
do
{
AccumulateFrameBounds
(
container
frame
useWholeLineHeightForInlines
frameBounds
haveRect
prevBlock
lines
curLine
)
;
}
while
(
(
frame
=
frame
-
>
GetNextContinuation
(
)
)
)
;
ScrollFrameRectIntoView
(
container
frameBounds
data
-
>
mContentScrollVAxis
data
-
>
mContentScrollHAxis
data
-
>
mContentToScrollToFlags
)
;
}
bool
PresShell
:
:
ScrollFrameRectIntoView
(
nsIFrame
*
aFrame
const
nsRect
&
aRect
nsIPresShell
:
:
ScrollAxis
aVertical
nsIPresShell
:
:
ScrollAxis
aHorizontal
uint32_t
aFlags
)
{
bool
didScroll
=
false
;
nsRect
rect
=
aRect
;
nsIFrame
*
container
=
aFrame
;
do
{
nsIScrollableFrame
*
sf
=
do_QueryFrame
(
container
)
;
if
(
sf
)
{
nsPoint
oldPosition
=
sf
-
>
GetScrollPosition
(
)
;
nsRect
targetRect
=
rect
;
auto
*
disp
=
container
-
>
StyleDisplay
(
)
;
if
(
disp
-
>
mOverflowClipBoxBlock
=
=
NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX
|
|
disp
-
>
mOverflowClipBoxInline
=
=
NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX
)
{
WritingMode
wm
=
container
-
>
GetWritingMode
(
)
;
bool
cbH
=
(
wm
.
IsVertical
(
)
?
disp
-
>
mOverflowClipBoxBlock
:
disp
-
>
mOverflowClipBoxInline
)
=
=
NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX
;
bool
cbV
=
(
wm
.
IsVertical
(
)
?
disp
-
>
mOverflowClipBoxInline
:
disp
-
>
mOverflowClipBoxBlock
)
=
=
NS_STYLE_OVERFLOW_CLIP_BOX_CONTENT_BOX
;
nsMargin
padding
=
container
-
>
GetUsedPadding
(
)
;
if
(
!
cbH
)
{
padding
.
left
=
padding
.
right
=
nscoord
(
0
)
;
}
if
(
!
cbV
)
{
padding
.
top
=
padding
.
bottom
=
nscoord
(
0
)
;
}
targetRect
.
Inflate
(
padding
)
;
}
ScrollToShowRect
(
sf
targetRect
-
sf
-
>
GetScrolledFrame
(
)
-
>
GetPosition
(
)
aVertical
aHorizontal
aFlags
)
;
nsPoint
newPosition
=
sf
-
>
LastScrollDestination
(
)
;
rect
+
=
oldPosition
-
newPosition
;
if
(
oldPosition
!
=
newPosition
)
{
didScroll
=
true
;
}
if
(
aFlags
&
nsIPresShell
:
:
SCROLL_FIRST_ANCESTOR_ONLY
)
{
break
;
}
}
nsIFrame
*
parent
;
if
(
container
-
>
IsTransformed
(
)
)
{
container
-
>
GetTransformMatrix
(
nullptr
&
parent
)
;
rect
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
container
rect
parent
)
;
}
else
{
rect
+
=
container
-
>
GetPosition
(
)
;
parent
=
container
-
>
GetParent
(
)
;
}
if
(
!
parent
&
&
!
(
aFlags
&
nsIPresShell
:
:
SCROLL_NO_PARENT_FRAMES
)
)
{
nsPoint
extraOffset
(
0
0
)
;
parent
=
nsLayoutUtils
:
:
GetCrossDocParentFrame
(
container
&
extraOffset
)
;
if
(
parent
)
{
int32_t
APD
=
container
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
int32_t
parentAPD
=
parent
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
rect
=
rect
.
ScaleToOtherAppUnitsRoundOut
(
APD
parentAPD
)
;
rect
+
=
extraOffset
;
}
}
container
=
parent
;
}
while
(
container
)
;
return
didScroll
;
}
nsRectVisibility
PresShell
:
:
GetRectVisibility
(
nsIFrame
*
aFrame
const
nsRect
&
aRect
nscoord
aMinTwips
)
const
{
NS_ASSERTION
(
aFrame
-
>
PresContext
(
)
=
=
GetPresContext
(
)
"
prescontext
mismatch
?
"
)
;
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
NS_ASSERTION
(
rootFrame
"
How
can
someone
have
a
frame
for
this
presshell
when
there
'
s
no
root
?
"
)
;
nsIScrollableFrame
*
sf
=
GetRootScrollFrameAsScrollable
(
)
;
nsRect
scrollPortRect
;
if
(
sf
)
{
scrollPortRect
=
sf
-
>
GetScrollPortRect
(
)
;
nsIFrame
*
f
=
do_QueryFrame
(
sf
)
;
scrollPortRect
+
=
f
-
>
GetOffsetTo
(
rootFrame
)
;
}
else
{
scrollPortRect
=
nsRect
(
nsPoint
(
0
0
)
rootFrame
-
>
GetSize
(
)
)
;
}
nsRect
visibleAreaRect
(
scrollPortRect
)
;
nsIScrollableFrame
*
scrollAncestorFrame
=
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
aFrame
nsLayoutUtils
:
:
SCROLLABLE_INCLUDE_HIDDEN
)
;
while
(
scrollAncestorFrame
)
{
nsRect
scrollAncestorRect
=
scrollAncestorFrame
-
>
GetScrollPortRect
(
)
;
nsIFrame
*
f
=
do_QueryFrame
(
scrollAncestorFrame
)
;
scrollAncestorRect
+
=
f
-
>
GetOffsetTo
(
rootFrame
)
;
visibleAreaRect
=
visibleAreaRect
.
Intersect
(
scrollAncestorRect
)
;
scrollAncestorFrame
=
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
f
-
>
GetParent
(
)
nsLayoutUtils
:
:
SCROLLABLE_INCLUDE_HIDDEN
)
;
}
nsRect
r
=
aRect
+
aFrame
-
>
GetOffsetTo
(
rootFrame
)
;
if
(
visibleAreaRect
.
Contains
(
r
)
)
{
return
nsRectVisibility_kVisible
;
}
nsRect
insetRect
=
visibleAreaRect
;
insetRect
.
Deflate
(
aMinTwips
aMinTwips
)
;
if
(
r
.
YMost
(
)
<
=
insetRect
.
y
)
return
nsRectVisibility_kAboveViewport
;
if
(
r
.
y
>
=
insetRect
.
YMost
(
)
)
return
nsRectVisibility_kBelowViewport
;
if
(
r
.
XMost
(
)
<
=
insetRect
.
x
)
return
nsRectVisibility_kLeftOfViewport
;
if
(
r
.
x
>
=
insetRect
.
XMost
(
)
)
return
nsRectVisibility_kRightOfViewport
;
return
nsRectVisibility_kVisible
;
}
void
PresShell
:
:
ScheduleViewManagerFlush
(
PaintType
aType
)
{
if
(
MOZ_UNLIKELY
(
mIsDestroying
)
)
{
return
;
}
if
(
aType
=
=
PAINT_DELAYED_COMPRESS
)
{
static
const
uint32_t
kPaintDelayPeriod
=
1000
;
if
(
!
mDelayedPaintTimer
)
{
nsTimerCallbackFunc
PaintTimerCallBack
=
[
]
(
nsITimer
*
aTimer
void
*
aClosure
)
{
auto
self
=
static_cast
<
PresShell
*
>
(
aClosure
)
;
self
-
>
SetNextPaintCompressed
(
)
;
self
-
>
ScheduleViewManagerFlush
(
)
;
}
;
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mDelayedPaintTimer
)
PaintTimerCallBack
this
kPaintDelayPeriod
nsITimer
:
:
TYPE_ONE_SHOT
"
PaintTimerCallBack
"
mDocument
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
return
;
}
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
presContext
)
{
presContext
-
>
RefreshDriver
(
)
-
>
ScheduleViewManagerFlush
(
)
;
}
SetNeedLayoutFlush
(
)
;
}
void
nsIPresShell
:
:
DispatchSynthMouseMove
(
WidgetGUIEvent
*
aEvent
)
{
AUTO_PROFILER_TRACING
(
"
Paint
"
"
DispatchSynthMouseMove
"
)
;
nsEventStatus
status
=
nsEventStatus_eIgnore
;
nsView
*
targetView
=
nsView
:
:
GetViewFor
(
aEvent
-
>
mWidget
)
;
if
(
!
targetView
)
return
;
targetView
-
>
GetViewManager
(
)
-
>
DispatchEvent
(
aEvent
targetView
&
status
)
;
}
void
PresShell
:
:
ClearMouseCaptureOnView
(
nsView
*
aView
)
{
if
(
gCaptureInfo
.
mContent
)
{
if
(
aView
)
{
nsIFrame
*
frame
=
gCaptureInfo
.
mContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
nsView
*
view
=
frame
-
>
GetClosestView
(
)
;
if
(
view
)
{
do
{
if
(
view
=
=
aView
)
{
gCaptureInfo
.
mContent
=
nullptr
;
gCaptureInfo
.
mAllowed
=
false
;
break
;
}
view
=
view
-
>
GetParent
(
)
;
}
while
(
view
)
;
return
;
}
}
}
gCaptureInfo
.
mContent
=
nullptr
;
}
gCaptureInfo
.
mAllowed
=
false
;
}
void
nsIPresShell
:
:
ClearMouseCapture
(
nsIFrame
*
aFrame
)
{
if
(
!
gCaptureInfo
.
mContent
)
{
gCaptureInfo
.
mAllowed
=
false
;
return
;
}
if
(
!
aFrame
)
{
gCaptureInfo
.
mContent
=
nullptr
;
gCaptureInfo
.
mAllowed
=
false
;
return
;
}
nsIFrame
*
capturingFrame
=
gCaptureInfo
.
mContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
capturingFrame
)
{
gCaptureInfo
.
mContent
=
nullptr
;
gCaptureInfo
.
mAllowed
=
false
;
return
;
}
if
(
nsLayoutUtils
:
:
IsAncestorFrameCrossDoc
(
aFrame
capturingFrame
)
)
{
gCaptureInfo
.
mContent
=
nullptr
;
gCaptureInfo
.
mAllowed
=
false
;
}
}
nsresult
PresShell
:
:
CaptureHistoryState
(
nsILayoutHistoryState
*
*
aState
)
{
MOZ_ASSERT
(
nullptr
!
=
aState
"
null
state
pointer
"
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
(
mPresContext
-
>
GetDocShell
(
)
)
;
if
(
!
docShell
)
return
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsILayoutHistoryState
>
historyState
;
docShell
-
>
GetLayoutHistoryState
(
getter_AddRefs
(
historyState
)
)
;
if
(
!
historyState
)
{
historyState
=
NS_NewLayoutHistoryState
(
)
;
docShell
-
>
SetLayoutHistoryState
(
historyState
)
;
}
*
aState
=
historyState
;
NS_IF_ADDREF
(
*
aState
)
;
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
return
NS_OK
;
mFrameConstructor
-
>
CaptureFrameState
(
rootFrame
historyState
)
;
return
NS_OK
;
}
void
PresShell
:
:
ScheduleBeforeFirstPaint
(
)
{
if
(
!
mDocument
-
>
IsResourceDoc
(
)
)
{
MOZ_LOG
(
gLog
LogLevel
:
:
Debug
(
"
PresShell
:
:
ScheduleBeforeFirstPaint
this
=
%
p
"
this
)
)
;
nsContentUtils
:
:
AddScriptRunner
(
new
nsBeforeFirstPaintDispatcher
(
mDocument
)
)
;
}
}
void
PresShell
:
:
UnsuppressAndInvalidate
(
)
{
if
(
(
!
mDocument
-
>
IsResourceDoc
(
)
&
&
!
mPresContext
-
>
EnsureVisible
(
)
)
|
|
mHaveShutDown
)
{
return
;
}
ScheduleBeforeFirstPaint
(
)
;
mPaintingSuppressed
=
false
;
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
rootFrame
)
{
rootFrame
-
>
InvalidateFrame
(
)
;
}
if
(
nsPIDOMWindowOuter
*
win
=
mDocument
-
>
GetWindow
(
)
)
win
-
>
SetReadyForFocus
(
)
;
if
(
!
mHaveShutDown
)
{
SynthesizeMouseMove
(
false
)
;
ScheduleApproximateFrameVisibilityUpdateNow
(
)
;
}
}
void
PresShell
:
:
UnsuppressPainting
(
)
{
if
(
mPaintSuppressionTimer
)
{
mPaintSuppressionTimer
-
>
Cancel
(
)
;
mPaintSuppressionTimer
=
nullptr
;
}
if
(
mIsDocumentGone
|
|
!
mPaintingSuppressed
)
return
;
if
(
!
mDirtyRoots
.
IsEmpty
(
)
)
mShouldUnsuppressPainting
=
true
;
else
UnsuppressAndInvalidate
(
)
;
}
nsresult
PresShell
:
:
PostReflowCallback
(
nsIReflowCallback
*
aCallback
)
{
void
*
result
=
AllocateByObjectID
(
eArenaObjectID_nsCallbackEventRequest
sizeof
(
nsCallbackEventRequest
)
)
;
nsCallbackEventRequest
*
request
=
(
nsCallbackEventRequest
*
)
result
;
request
-
>
callback
=
aCallback
;
request
-
>
next
=
nullptr
;
if
(
mLastCallbackEventRequest
)
{
mLastCallbackEventRequest
=
mLastCallbackEventRequest
-
>
next
=
request
;
}
else
{
mFirstCallbackEventRequest
=
request
;
mLastCallbackEventRequest
=
request
;
}
return
NS_OK
;
}
void
PresShell
:
:
CancelReflowCallback
(
nsIReflowCallback
*
aCallback
)
{
nsCallbackEventRequest
*
before
=
nullptr
;
nsCallbackEventRequest
*
node
=
mFirstCallbackEventRequest
;
while
(
node
)
{
nsIReflowCallback
*
callback
=
node
-
>
callback
;
if
(
callback
=
=
aCallback
)
{
nsCallbackEventRequest
*
toFree
=
node
;
if
(
node
=
=
mFirstCallbackEventRequest
)
{
node
=
node
-
>
next
;
mFirstCallbackEventRequest
=
node
;
NS_ASSERTION
(
before
=
=
nullptr
"
impossible
"
)
;
}
else
{
node
=
node
-
>
next
;
before
-
>
next
=
node
;
}
if
(
toFree
=
=
mLastCallbackEventRequest
)
{
mLastCallbackEventRequest
=
before
;
}
FreeByObjectID
(
eArenaObjectID_nsCallbackEventRequest
toFree
)
;
}
else
{
before
=
node
;
node
=
node
-
>
next
;
}
}
}
void
PresShell
:
:
CancelPostedReflowCallbacks
(
)
{
while
(
mFirstCallbackEventRequest
)
{
nsCallbackEventRequest
*
node
=
mFirstCallbackEventRequest
;
mFirstCallbackEventRequest
=
node
-
>
next
;
if
(
!
mFirstCallbackEventRequest
)
{
mLastCallbackEventRequest
=
nullptr
;
}
nsIReflowCallback
*
callback
=
node
-
>
callback
;
FreeByObjectID
(
eArenaObjectID_nsCallbackEventRequest
node
)
;
if
(
callback
)
{
callback
-
>
ReflowCallbackCanceled
(
)
;
}
}
}
void
PresShell
:
:
HandlePostedReflowCallbacks
(
bool
aInterruptible
)
{
bool
shouldFlush
=
false
;
while
(
mFirstCallbackEventRequest
)
{
nsCallbackEventRequest
*
node
=
mFirstCallbackEventRequest
;
mFirstCallbackEventRequest
=
node
-
>
next
;
if
(
!
mFirstCallbackEventRequest
)
{
mLastCallbackEventRequest
=
nullptr
;
}
nsIReflowCallback
*
callback
=
node
-
>
callback
;
FreeByObjectID
(
eArenaObjectID_nsCallbackEventRequest
node
)
;
if
(
callback
)
{
if
(
callback
-
>
ReflowFinished
(
)
)
{
shouldFlush
=
true
;
}
}
}
FlushType
flushType
=
aInterruptible
?
FlushType
:
:
InterruptibleLayout
:
FlushType
:
:
Layout
;
if
(
shouldFlush
&
&
!
mIsDestroying
)
{
FlushPendingNotifications
(
flushType
)
;
}
}
bool
nsIPresShell
:
:
IsSafeToFlush
(
)
const
{
if
(
mIsReflowing
|
|
mChangeNestCount
|
|
mIsDestroying
)
{
return
false
;
}
if
(
nsViewManager
*
viewManager
=
GetViewManager
(
)
)
{
bool
isPainting
=
false
;
viewManager
-
>
IsPainting
(
isPainting
)
;
if
(
isPainting
)
{
return
false
;
}
}
return
true
;
}
void
nsIPresShell
:
:
NotifyFontFaceSetOnRefresh
(
)
{
if
(
FontFaceSet
*
set
=
mDocument
-
>
GetFonts
(
)
)
{
set
-
>
DidRefresh
(
)
;
}
}
void
PresShell
:
:
DoFlushPendingNotifications
(
FlushType
aType
)
{
mozilla
:
:
ChangesToFlush
flush
(
aType
aType
>
=
FlushType
:
:
Style
)
;
FlushPendingNotifications
(
flush
)
;
}
#
ifdef
DEBUG
static
void
AssertFrameSubtreeIsSane
(
const
nsIFrame
&
aRoot
)
{
if
(
const
nsIContent
*
content
=
aRoot
.
GetContent
(
)
)
{
MOZ_ASSERT
(
content
-
>
GetFlattenedTreeParentNodeForStyle
(
)
"
Node
not
in
the
flattened
tree
still
has
a
frame
?
"
)
;
}
nsIFrame
:
:
ChildListIterator
childLists
(
&
aRoot
)
;
for
(
;
!
childLists
.
IsDone
(
)
;
childLists
.
Next
(
)
)
{
for
(
const
nsIFrame
*
child
:
childLists
.
CurrentList
(
)
)
{
AssertFrameSubtreeIsSane
(
*
child
)
;
}
}
}
#
endif
static
inline
void
AssertFrameTreeIsSane
(
const
nsIPresShell
&
aShell
)
{
#
ifdef
DEBUG
if
(
const
nsIFrame
*
root
=
aShell
.
GetRootFrame
(
)
)
{
AssertFrameSubtreeIsSane
(
*
root
)
;
}
#
endif
}
void
PresShell
:
:
DoFlushPendingNotifications
(
mozilla
:
:
ChangesToFlush
aFlush
)
{
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
=
this
;
FlushType
flushType
=
aFlush
.
mFlushType
;
MOZ_ASSERT
(
NeedFlush
(
flushType
)
"
Why
did
we
get
called
?
"
)
;
#
ifdef
MOZ_GECKO_PROFILER
static
const
EnumeratedArray
<
FlushType
FlushType
:
:
Count
const
char
*
>
flushTypeNames
=
{
"
"
"
Event
"
"
Content
"
"
ContentAndNotify
"
"
Style
"
"
Style
"
"
InterruptibleLayout
"
"
Layout
"
"
Display
"
}
;
AUTO_PROFILER_LABEL_DYNAMIC_CSTR
(
"
PresShell
:
:
DoFlushPendingNotifications
"
LAYOUT
flushTypeNames
[
flushType
]
)
;
#
endif
#
ifdef
ACCESSIBILITY
#
ifdef
DEBUG
if
(
nsAccessibilityService
*
accService
=
GetAccService
(
)
)
{
NS_ASSERTION
(
!
accService
-
>
IsProcessingRefreshDriverNotification
(
)
"
Flush
during
accessible
tree
update
!
"
)
;
}
#
endif
#
endif
NS_ASSERTION
(
flushType
>
=
FlushType
:
:
Frames
"
Why
did
we
get
called
?
"
)
;
mNeedStyleFlush
=
false
;
mNeedThrottledAnimationFlush
=
mNeedThrottledAnimationFlush
&
&
!
aFlush
.
mFlushAnimations
;
mNeedLayoutFlush
=
mNeedLayoutFlush
&
&
(
flushType
<
FlushType
:
:
InterruptibleLayout
)
;
bool
isSafeToFlush
=
IsSafeToFlush
(
)
;
bool
hasHadScriptObject
;
if
(
mDocument
-
>
GetScriptHandlingObject
(
hasHadScriptObject
)
|
|
hasHadScriptObject
)
{
isSafeToFlush
=
isSafeToFlush
&
&
nsContentUtils
:
:
IsSafeToRunScript
(
)
;
}
MOZ_DIAGNOSTIC_ASSERT
(
!
mIsDestroying
|
|
!
isSafeToFlush
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mIsDestroying
|
|
mViewManager
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mIsDestroying
|
|
mDocument
-
>
HasShellOrBFCacheEntry
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
mIsDestroying
|
|
mDocument
-
>
GetShell
(
)
=
=
this
)
;
RefPtr
<
nsViewManager
>
viewManager
=
mViewManager
;
bool
didStyleFlush
=
false
;
bool
didLayoutFlush
=
false
;
if
(
isSafeToFlush
)
{
AutoRestore
<
bool
>
guard
(
mInFlush
)
;
mInFlush
=
true
;
mDocument
-
>
FlushExternalResources
(
flushType
)
;
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
ContentAndNotify
)
;
mDocument
-
>
UpdateSVGUseElementShadowTrees
(
)
;
if
(
MOZ_LIKELY
(
!
mIsDestroying
)
)
{
viewManager
-
>
FlushDelayedResize
(
false
)
;
mPresContext
-
>
FlushPendingMediaFeatureValuesChanged
(
)
;
}
if
(
MOZ_LIKELY
(
!
mIsDestroying
)
)
{
mStyleSet
-
>
UpdateStylistIfNeeded
(
)
;
mDocument
-
>
FlushUserFontSet
(
)
;
mPresContext
-
>
FlushCounterStyles
(
)
;
mPresContext
-
>
FlushFontFeatureValues
(
)
;
if
(
mDocument
-
>
HasAnimationController
(
)
)
{
mDocument
-
>
GetAnimationController
(
)
-
>
FlushResampleRequests
(
)
;
}
if
(
aFlush
.
mFlushAnimations
&
&
mPresContext
-
>
EffectCompositor
(
)
)
{
mPresContext
-
>
EffectCompositor
(
)
-
>
PostRestyleForThrottledAnimations
(
)
;
}
}
if
(
MOZ_LIKELY
(
!
mIsDestroying
)
)
{
nsAutoScriptBlocker
scriptBlocker
;
#
ifdef
MOZ_GECKO_PROFILER
AutoProfilerStyleMarker
tracingStyleFlush
(
std
:
:
move
(
mStyleCause
)
)
;
#
endif
mPresContext
-
>
RestyleManager
(
)
-
>
ProcessPendingRestyles
(
)
;
}
if
(
MOZ_LIKELY
(
!
mIsDestroying
)
)
{
mDocument
-
>
BindingManager
(
)
-
>
ProcessAttachedQueue
(
)
;
}
if
(
MOZ_LIKELY
(
!
mIsDestroying
)
)
{
nsAutoScriptBlocker
scriptBlocker
;
#
ifdef
MOZ_GECKO_PROFILER
AutoProfilerStyleMarker
tracingStyleFlush
(
std
:
:
move
(
mStyleCause
)
)
;
#
endif
mPresContext
-
>
RestyleManager
(
)
-
>
ProcessPendingRestyles
(
)
;
mNeedStyleFlush
=
false
;
}
AssertFrameTreeIsSane
(
*
this
)
;
didStyleFlush
=
true
;
if
(
flushType
>
=
(
SuppressInterruptibleReflows
(
)
?
FlushType
:
:
Layout
:
FlushType
:
:
InterruptibleLayout
)
&
&
!
mIsDestroying
)
{
didLayoutFlush
=
true
;
mFrameConstructor
-
>
RecalcQuotesAndCounters
(
)
;
viewManager
-
>
FlushDelayedResize
(
true
)
;
if
(
ProcessReflowCommands
(
flushType
<
FlushType
:
:
Layout
)
&
&
mContentToScrollTo
)
{
DoScrollContentIntoView
(
)
;
if
(
mContentToScrollTo
)
{
mContentToScrollTo
-
>
DeleteProperty
(
nsGkAtoms
:
:
scrolling
)
;
mContentToScrollTo
=
nullptr
;
}
}
}
if
(
flushType
>
=
FlushType
:
:
Layout
)
{
if
(
!
mIsDestroying
)
{
viewManager
-
>
UpdateWidgetGeometry
(
)
;
}
}
}
if
(
!
didStyleFlush
&
&
flushType
>
=
FlushType
:
:
Style
&
&
!
mIsDestroying
)
{
SetNeedStyleFlush
(
)
;
if
(
aFlush
.
mFlushAnimations
)
{
SetNeedThrottledAnimationFlush
(
)
;
}
}
if
(
!
didLayoutFlush
&
&
flushType
>
=
FlushType
:
:
InterruptibleLayout
&
&
!
mIsDestroying
)
{
SetNeedLayoutFlush
(
)
;
}
}
void
PresShell
:
:
CharacterDataChanged
(
nsIContent
*
aContent
const
CharacterDataChangeInfo
&
aInfo
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
CharacterDataChanged
"
)
;
MOZ_ASSERT
(
aContent
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
CharacterDataChanged
(
aContent
aInfo
)
;
mFrameConstructor
-
>
CharacterDataChanged
(
aContent
aInfo
)
;
}
void
PresShell
:
:
ContentStateChanged
(
nsIDocument
*
aDocument
nsIContent
*
aContent
EventStates
aStateMask
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
ContentStateChanged
"
)
;
MOZ_ASSERT
(
aDocument
=
=
mDocument
"
Unexpected
aDocument
"
)
;
if
(
mDidInitialize
)
{
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
ContentStateChanged
(
aContent
aStateMask
)
;
}
}
void
PresShell
:
:
DocumentStatesChanged
(
nsIDocument
*
aDocument
EventStates
aStateMask
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
DocumentStatesChanged
"
)
;
MOZ_ASSERT
(
aDocument
=
=
mDocument
"
Unexpected
aDocument
"
)
;
MOZ_ASSERT
(
!
aStateMask
.
IsEmpty
(
)
)
;
if
(
mDidInitialize
)
{
mStyleSet
-
>
InvalidateStyleForDocumentStateChanges
(
aStateMask
)
;
}
if
(
aStateMask
.
HasState
(
NS_DOCUMENT_STATE_WINDOW_INACTIVE
)
)
{
if
(
nsIFrame
*
root
=
mFrameConstructor
-
>
GetRootFrame
(
)
)
{
root
-
>
SchedulePaint
(
)
;
}
}
}
void
PresShell
:
:
AttributeWillChange
(
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
AttributeWillChange
"
)
;
MOZ_ASSERT
(
aElement
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
if
(
mDidInitialize
)
{
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
AttributeWillChange
(
aElement
aNameSpaceID
aAttribute
aModType
aNewValue
)
;
}
}
void
PresShell
:
:
AttributeChanged
(
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
AttributeChanged
"
)
;
MOZ_ASSERT
(
aElement
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
if
(
mDidInitialize
)
{
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
AttributeChanged
(
aElement
aNameSpaceID
aAttribute
aModType
aOldValue
)
;
}
}
void
PresShell
:
:
ContentAppended
(
nsIContent
*
aFirstNewContent
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
ContentAppended
"
)
;
MOZ_ASSERT
(
aFirstNewContent
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
MOZ_ASSERT
(
aFirstNewContent
-
>
GetParent
(
)
)
;
MOZ_ASSERT
(
aFirstNewContent
-
>
GetParent
(
)
-
>
IsElement
(
)
|
|
aFirstNewContent
-
>
GetParent
(
)
-
>
IsShadowRoot
(
)
)
;
if
(
!
mDidInitialize
)
{
return
;
}
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
ContentAppended
(
aFirstNewContent
)
;
mFrameConstructor
-
>
ContentAppended
(
aFirstNewContent
nsCSSFrameConstructor
:
:
InsertionKind
:
:
Async
)
;
}
void
PresShell
:
:
ContentInserted
(
nsIContent
*
aChild
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
ContentInserted
"
)
;
MOZ_ASSERT
(
aChild
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
if
(
!
mDidInitialize
)
{
return
;
}
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
ContentInserted
(
aChild
)
;
mFrameConstructor
-
>
ContentInserted
(
aChild
nullptr
nsCSSFrameConstructor
:
:
InsertionKind
:
:
Async
)
;
}
void
PresShell
:
:
ContentRemoved
(
nsIContent
*
aChild
nsIContent
*
aPreviousSibling
)
{
MOZ_ASSERT
(
!
mIsDocumentGone
"
Unexpected
ContentRemoved
"
)
;
MOZ_ASSERT
(
aChild
-
>
OwnerDoc
(
)
=
=
mDocument
"
Unexpected
document
"
)
;
nsINode
*
container
=
aChild
-
>
GetParentNode
(
)
;
mPresContext
-
>
EventStateManager
(
)
-
>
ContentRemoved
(
mDocument
aChild
)
;
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
nsIContent
*
oldNextSibling
=
nullptr
;
if
(
MOZ_LIKELY
(
!
aChild
-
>
IsRootOfAnonymousSubtree
(
)
)
)
{
oldNextSibling
=
aPreviousSibling
?
aPreviousSibling
-
>
GetNextSibling
(
)
:
container
-
>
GetFirstChild
(
)
;
}
if
(
mPointerEventTarget
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
mPointerEventTarget
aChild
)
)
{
mPointerEventTarget
=
aChild
-
>
GetParent
(
)
;
}
mFrameConstructor
-
>
ContentRemoved
(
aChild
oldNextSibling
nsCSSFrameConstructor
:
:
REMOVE_CONTENT
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
ContentRemoved
(
aChild
oldNextSibling
)
;
}
void
PresShell
:
:
NotifyCounterStylesAreDirty
(
)
{
nsAutoCauseReflowNotifier
reflowNotifier
(
this
)
;
mFrameConstructor
-
>
NotifyCounterStylesAreDirty
(
)
;
}
bool
nsIPresShell
:
:
FrameIsAncestorOfDirtyRoot
(
nsIFrame
*
aFrame
)
const
{
MOZ_ASSERT
(
aFrame
)
;
for
(
nsIFrame
*
dirtyFrame
:
mDirtyRoots
)
{
while
(
dirtyFrame
)
{
if
(
dirtyFrame
=
=
aFrame
)
{
return
true
;
}
dirtyFrame
=
dirtyFrame
-
>
GetParent
(
)
;
}
}
return
false
;
}
void
PresShell
:
:
ReconstructFrames
(
)
{
MOZ_ASSERT
(
!
mFrameConstructor
-
>
GetRootFrame
(
)
|
|
mDidInitialize
"
Must
not
have
root
frame
before
initial
reflow
"
)
;
if
(
!
mDidInitialize
|
|
mIsDestroying
)
{
return
;
}
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
(
this
)
;
mDocument
-
>
FlushPendingNotifications
(
FlushType
:
:
Style
)
;
if
(
mIsDestroying
)
{
return
;
}
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
mFrameConstructor
-
>
ReconstructDocElementHierarchy
(
nsCSSFrameConstructor
:
:
InsertionKind
:
:
Sync
)
;
}
void
nsIPresShell
:
:
ApplicableStylesChanged
(
)
{
if
(
mIsDestroying
)
{
return
;
}
EnsureStyleFlush
(
)
;
mDocument
-
>
MarkUserFontSetDirty
(
)
;
if
(
mPresContext
)
{
mPresContext
-
>
MarkCounterStylesDirty
(
)
;
mPresContext
-
>
MarkFontFeatureValuesDirty
(
)
;
mPresContext
-
>
RestyleManager
(
)
-
>
NextRestyleIsForCSSRuleChanges
(
)
;
}
}
nsresult
PresShell
:
:
RenderDocument
(
const
nsRect
&
aRect
uint32_t
aFlags
nscolor
aBackgroundColor
gfxContext
*
aThebesContext
)
{
NS_ENSURE_TRUE
(
!
(
aFlags
&
RENDER_IS_UNTRUSTED
)
NS_ERROR_NOT_IMPLEMENTED
)
;
nsRootPresContext
*
rootPresContext
=
mPresContext
-
>
GetRootPresContext
(
)
;
if
(
rootPresContext
)
{
rootPresContext
-
>
FlushWillPaintObservers
(
)
;
if
(
mIsDestroying
)
return
NS_OK
;
}
nsAutoScriptBlocker
blockScripts
;
gfxRect
r
(
0
0
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aRect
.
width
)
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aRect
.
height
)
)
;
aThebesContext
-
>
NewPath
(
)
;
#
ifdef
MOZ_GFX_OPTIMIZE_MOBILE
aThebesContext
-
>
Rectangle
(
r
true
)
;
#
else
aThebesContext
-
>
Rectangle
(
r
)
;
#
endif
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
aThebesContext
-
>
SetColor
(
Color
:
:
FromABGR
(
aBackgroundColor
)
)
;
aThebesContext
-
>
Fill
(
)
;
return
NS_OK
;
}
gfxContextAutoSaveRestore
save
(
aThebesContext
)
;
MOZ_ASSERT
(
aThebesContext
-
>
CurrentOp
(
)
=
=
CompositionOp
:
:
OP_OVER
)
;
aThebesContext
-
>
Clip
(
)
;
nsDeviceContext
*
devCtx
=
mPresContext
-
>
DeviceContext
(
)
;
gfxPoint
offset
(
-
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aRect
.
x
)
-
nsPresContext
:
:
AppUnitsToFloatCSSPixels
(
aRect
.
y
)
)
;
gfxFloat
scale
=
gfxFloat
(
devCtx
-
>
AppUnitsPerDevPixel
(
)
)
/
AppUnitsPerCSSPixel
(
)
;
gfxMatrix
newTM
=
aThebesContext
-
>
CurrentMatrixDouble
(
)
.
PreTranslate
(
offset
)
.
PreScale
(
scale
scale
)
.
NudgeToIntegers
(
)
;
aThebesContext
-
>
SetMatrixDouble
(
newTM
)
;
AutoSaveRestoreRenderingState
_
(
this
)
;
bool
wouldFlushRetainedLayers
=
false
;
PaintFrameFlags
flags
=
PaintFrameFlags
:
:
PAINT_IGNORE_SUPPRESSION
;
if
(
aThebesContext
-
>
CurrentMatrix
(
)
.
HasNonIntegerTranslation
(
)
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_IN_TRANSFORM
;
}
if
(
!
(
aFlags
&
RENDER_ASYNC_DECODE_IMAGES
)
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_SYNC_DECODE_IMAGES
;
}
if
(
aFlags
&
RENDER_USE_WIDGET_LAYERS
)
{
nsView
*
view
=
rootFrame
-
>
GetView
(
)
;
if
(
view
&
&
view
-
>
GetWidget
(
)
&
&
nsLayoutUtils
:
:
GetDisplayRootFrame
(
rootFrame
)
=
=
rootFrame
)
{
LayerManager
*
layerManager
=
view
-
>
GetWidget
(
)
-
>
GetLayerManager
(
)
;
if
(
layerManager
&
&
(
!
layerManager
-
>
AsKnowsCompositor
(
)
|
|
XRE_IsParentProcess
(
)
)
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_WIDGET_LAYERS
;
}
}
}
if
(
!
(
aFlags
&
RENDER_CARET
)
)
{
wouldFlushRetainedLayers
=
true
;
flags
|
=
PaintFrameFlags
:
:
PAINT_HIDE_CARET
;
}
if
(
aFlags
&
RENDER_IGNORE_VIEWPORT_SCROLLING
)
{
wouldFlushRetainedLayers
=
!
IgnoringViewportScrolling
(
)
;
mRenderFlags
=
ChangeFlag
(
mRenderFlags
true
STATE_IGNORING_VIEWPORT_SCROLLING
)
;
}
if
(
aFlags
&
RENDER_DRAWWINDOW_NOT_FLUSHING
)
{
mRenderFlags
=
ChangeFlag
(
mRenderFlags
true
STATE_DRAWWINDOW_NOT_FLUSHING
)
;
}
if
(
aFlags
&
RENDER_DOCUMENT_RELATIVE
)
{
wouldFlushRetainedLayers
=
true
;
flags
|
=
PaintFrameFlags
:
:
PAINT_DOCUMENT_RELATIVE
;
}
if
(
(
flags
&
PaintFrameFlags
:
:
PAINT_WIDGET_LAYERS
)
&
&
wouldFlushRetainedLayers
)
{
flags
&
=
~
PaintFrameFlags
:
:
PAINT_WIDGET_LAYERS
;
}
nsLayoutUtils
:
:
PaintFrame
(
aThebesContext
rootFrame
nsRegion
(
aRect
)
aBackgroundColor
nsDisplayListBuilderMode
:
:
PAINTING
flags
)
;
return
NS_OK
;
}
nsRect
PresShell
:
:
ClipListToRange
(
nsDisplayListBuilder
*
aBuilder
nsDisplayList
*
aList
nsRange
*
aRange
)
{
nsRect
surfaceRect
;
nsDisplayList
tmpList
;
nsDisplayItem
*
i
;
while
(
(
i
=
aList
-
>
RemoveBottom
(
)
)
)
{
nsDisplayItem
*
itemToInsert
=
nullptr
;
nsIFrame
*
frame
=
i
-
>
Frame
(
)
;
nsIContent
*
content
=
frame
-
>
GetContent
(
)
;
if
(
content
)
{
bool
atStart
=
(
content
=
=
aRange
-
>
GetStartContainer
(
)
)
;
bool
atEnd
=
(
content
=
=
aRange
-
>
GetEndContainer
(
)
)
;
if
(
(
atStart
|
|
atEnd
)
&
&
frame
-
>
IsTextFrame
(
)
)
{
int32_t
frameStartOffset
frameEndOffset
;
frame
-
>
GetOffsets
(
frameStartOffset
frameEndOffset
)
;
int32_t
hilightStart
=
atStart
?
std
:
:
max
(
static_cast
<
int32_t
>
(
aRange
-
>
StartOffset
(
)
)
frameStartOffset
)
:
frameStartOffset
;
int32_t
hilightEnd
=
atEnd
?
std
:
:
min
(
static_cast
<
int32_t
>
(
aRange
-
>
EndOffset
(
)
)
frameEndOffset
)
:
frameEndOffset
;
if
(
hilightStart
<
hilightEnd
)
{
nsPoint
startPoint
endPoint
;
frame
-
>
GetPointFromOffset
(
hilightStart
&
startPoint
)
;
frame
-
>
GetPointFromOffset
(
hilightEnd
&
endPoint
)
;
nsRect
textRect
(
aBuilder
-
>
ToReferenceFrame
(
frame
)
frame
-
>
GetSize
(
)
)
;
if
(
frame
-
>
GetWritingMode
(
)
.
IsVertical
(
)
)
{
nscoord
y
=
std
:
:
min
(
startPoint
.
y
endPoint
.
y
)
;
textRect
.
y
+
=
y
;
textRect
.
height
=
std
:
:
max
(
startPoint
.
y
endPoint
.
y
)
-
y
;
}
else
{
nscoord
x
=
std
:
:
min
(
startPoint
.
x
endPoint
.
x
)
;
textRect
.
x
+
=
x
;
textRect
.
width
=
std
:
:
max
(
startPoint
.
x
endPoint
.
x
)
-
x
;
}
surfaceRect
.
UnionRect
(
surfaceRect
textRect
)
;
const
ActiveScrolledRoot
*
asr
=
i
-
>
GetActiveScrolledRoot
(
)
;
DisplayItemClip
newClip
;
newClip
.
SetTo
(
textRect
)
;
const
DisplayItemClipChain
*
newClipChain
=
aBuilder
-
>
AllocateDisplayItemClipChain
(
newClip
asr
nullptr
)
;
i
-
>
IntersectClip
(
aBuilder
newClipChain
true
)
;
itemToInsert
=
i
;
}
}
else
if
(
content
-
>
GetUncomposedDoc
(
)
=
=
aRange
-
>
GetStartContainer
(
)
-
>
GetUncomposedDoc
(
)
)
{
bool
before
after
;
nsresult
rv
=
nsRange
:
:
CompareNodeToRange
(
content
aRange
&
before
&
after
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
before
&
&
!
after
)
{
itemToInsert
=
i
;
bool
snap
;
surfaceRect
.
UnionRect
(
surfaceRect
i
-
>
GetBounds
(
aBuilder
&
snap
)
)
;
}
}
}
nsDisplayList
*
sublist
=
i
-
>
GetSameCoordinateSystemChildren
(
)
;
if
(
itemToInsert
|
|
sublist
)
{
tmpList
.
AppendToTop
(
itemToInsert
?
itemToInsert
:
i
)
;
if
(
sublist
)
surfaceRect
.
UnionRect
(
surfaceRect
ClipListToRange
(
aBuilder
sublist
aRange
)
)
;
}
else
{
i
-
>
Destroy
(
aBuilder
)
;
}
}
aList
-
>
AppendToTop
(
&
tmpList
)
;
return
surfaceRect
;
}
#
ifdef
DEBUG
#
include
<
stdio
.
h
>
static
bool
gDumpRangePaintList
=
false
;
#
endif
UniquePtr
<
RangePaintInfo
>
PresShell
:
:
CreateRangePaintInfo
(
nsRange
*
aRange
nsRect
&
aSurfaceRect
bool
aForPrimarySelection
)
{
nsIFrame
*
ancestorFrame
;
nsIFrame
*
rootFrame
=
GetRootFrame
(
)
;
nsINode
*
startContainer
=
aRange
-
>
GetStartContainer
(
)
;
nsINode
*
endContainer
=
aRange
-
>
GetEndContainer
(
)
;
nsIDocument
*
doc
=
startContainer
-
>
GetComposedDoc
(
)
;
if
(
startContainer
=
=
doc
|
|
endContainer
=
=
doc
)
{
ancestorFrame
=
rootFrame
;
}
else
{
nsINode
*
ancestor
=
nsContentUtils
:
:
GetCommonAncestor
(
startContainer
endContainer
)
;
NS_ASSERTION
(
!
ancestor
|
|
ancestor
-
>
IsContent
(
)
"
common
ancestor
is
not
content
"
)
;
if
(
!
ancestor
|
|
!
ancestor
-
>
IsContent
(
)
)
return
nullptr
;
ancestorFrame
=
ancestor
-
>
AsContent
(
)
-
>
GetPrimaryFrame
(
)
;
while
(
ancestorFrame
&
&
nsLayoutUtils
:
:
GetNextContinuationOrIBSplitSibling
(
ancestorFrame
)
)
ancestorFrame
=
ancestorFrame
-
>
GetParent
(
)
;
}
if
(
!
ancestorFrame
)
{
return
nullptr
;
}
auto
info
=
MakeUnique
<
RangePaintInfo
>
(
aRange
ancestorFrame
)
;
info
-
>
mBuilder
.
SetIncludeAllOutOfFlows
(
)
;
if
(
aForPrimarySelection
)
{
info
-
>
mBuilder
.
SetSelectedFramesOnly
(
)
;
}
info
-
>
mBuilder
.
EnterPresShell
(
ancestorFrame
)
;
nsCOMPtr
<
nsIContentIterator
>
iter
=
NS_NewContentSubtreeIterator
(
)
;
nsresult
rv
=
iter
-
>
Init
(
aRange
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
auto
BuildDisplayListForNode
=
[
&
]
(
nsINode
*
aNode
)
{
if
(
MOZ_UNLIKELY
(
!
aNode
-
>
IsContent
(
)
)
)
{
return
;
}
nsIFrame
*
frame
=
aNode
-
>
AsContent
(
)
-
>
GetPrimaryFrame
(
)
;
for
(
;
frame
;
frame
=
nsLayoutUtils
:
:
GetNextContinuationOrIBSplitSibling
(
frame
)
)
{
info
-
>
mBuilder
.
SetVisibleRect
(
frame
-
>
GetVisualOverflowRect
(
)
)
;
info
-
>
mBuilder
.
SetDirtyRect
(
frame
-
>
GetVisualOverflowRect
(
)
)
;
frame
-
>
BuildDisplayListForStackingContext
(
&
info
-
>
mBuilder
&
info
-
>
mList
)
;
}
}
;
if
(
startContainer
-
>
NodeType
(
)
=
=
nsINode
:
:
TEXT_NODE
)
{
BuildDisplayListForNode
(
startContainer
)
;
}
for
(
;
!
iter
-
>
IsDone
(
)
;
iter
-
>
Next
(
)
)
{
nsCOMPtr
<
nsINode
>
node
=
iter
-
>
GetCurrentNode
(
)
;
BuildDisplayListForNode
(
node
)
;
}
if
(
endContainer
!
=
startContainer
&
&
endContainer
-
>
NodeType
(
)
=
=
nsINode
:
:
TEXT_NODE
)
{
BuildDisplayListForNode
(
endContainer
)
;
}
#
ifdef
DEBUG
if
(
gDumpRangePaintList
)
{
fprintf
(
stderr
"
CreateRangePaintInfo
-
-
-
before
ClipListToRange
:
\
n
"
)
;
nsFrame
:
:
PrintDisplayList
(
&
(
info
-
>
mBuilder
)
info
-
>
mList
)
;
}
#
endif
nsRect
rangeRect
=
ClipListToRange
(
&
info
-
>
mBuilder
&
info
-
>
mList
aRange
)
;
info
-
>
mBuilder
.
LeavePresShell
(
ancestorFrame
&
info
-
>
mList
)
;
#
ifdef
DEBUG
if
(
gDumpRangePaintList
)
{
fprintf
(
stderr
"
CreateRangePaintInfo
-
-
-
after
ClipListToRange
:
\
n
"
)
;
nsFrame
:
:
PrintDisplayList
(
&
(
info
-
>
mBuilder
)
info
-
>
mList
)
;
}
#
endif
info
-
>
mRootOffset
=
ancestorFrame
-
>
GetOffsetTo
(
rootFrame
)
;
rangeRect
.
MoveBy
(
info
-
>
mRootOffset
)
;
aSurfaceRect
.
UnionRect
(
aSurfaceRect
rangeRect
)
;
return
info
;
}
already_AddRefed
<
SourceSurface
>
PresShell
:
:
PaintRangePaintInfo
(
const
nsTArray
<
UniquePtr
<
RangePaintInfo
>
>
&
aItems
Selection
*
aSelection
const
Maybe
<
CSSIntRegion
>
&
aRegion
nsRect
aArea
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
uint32_t
aFlags
)
{
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
!
pc
|
|
aArea
.
width
=
=
0
|
|
aArea
.
height
=
=
0
)
return
nullptr
;
nsIntRect
pixelArea
=
aArea
.
ToOutsidePixels
(
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
float
scale
=
1
.
0
;
nsIntRect
rootScreenRect
=
GetRootFrame
(
)
-
>
GetScreenRectInAppUnits
(
)
.
ToNearestPixels
(
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
nsRect
maxSize
;
pc
-
>
DeviceContext
(
)
-
>
GetClientRect
(
maxSize
)
;
bool
resize
=
aFlags
&
RENDER_AUTO_SCALE
;
if
(
resize
)
{
if
(
aFlags
&
RENDER_IS_IMAGE
)
{
nscoord
maxWidth
=
pc
-
>
AppUnitsToDevPixels
(
maxSize
.
width
)
;
nscoord
maxHeight
=
pc
-
>
AppUnitsToDevPixels
(
maxSize
.
height
)
;
float
bestHeight
=
float
(
maxHeight
)
*
RELATIVE_SCALEFACTOR
;
float
bestWidth
=
float
(
maxWidth
)
*
RELATIVE_SCALEFACTOR
;
float
adjustedScale
=
bestWidth
/
float
(
pixelArea
.
width
)
;
float
worstHeight
=
float
(
pixelArea
.
height
)
*
adjustedScale
;
float
difference
=
bestHeight
-
worstHeight
;
adjustedScale
=
(
worstHeight
+
difference
/
2
)
/
float
(
pixelArea
.
height
)
;
scale
=
std
:
:
min
(
scale
adjustedScale
)
;
}
else
{
nscoord
maxWidth
=
pc
-
>
AppUnitsToDevPixels
(
maxSize
.
width
>
>
1
)
;
nscoord
maxHeight
=
pc
-
>
AppUnitsToDevPixels
(
maxSize
.
height
>
>
1
)
;
if
(
pixelArea
.
width
>
maxWidth
|
|
pixelArea
.
height
>
maxHeight
)
{
if
(
pixelArea
.
width
>
maxWidth
)
scale
=
std
:
:
min
(
scale
float
(
maxWidth
)
/
pixelArea
.
width
)
;
if
(
pixelArea
.
height
>
maxHeight
)
scale
=
std
:
:
min
(
scale
float
(
maxHeight
)
/
pixelArea
.
height
)
;
}
}
pixelArea
.
width
=
NSToIntFloor
(
float
(
pixelArea
.
width
)
*
scale
)
;
pixelArea
.
height
=
NSToIntFloor
(
float
(
pixelArea
.
height
)
*
scale
)
;
if
(
!
pixelArea
.
width
|
|
!
pixelArea
.
height
)
return
nullptr
;
nscoord
left
=
rootScreenRect
.
x
+
pixelArea
.
x
;
nscoord
top
=
rootScreenRect
.
y
+
pixelArea
.
y
;
aScreenRect
-
>
x
=
NSToIntFloor
(
aPoint
.
x
-
float
(
aPoint
.
x
-
left
)
*
scale
)
;
aScreenRect
-
>
y
=
NSToIntFloor
(
aPoint
.
y
-
float
(
aPoint
.
y
-
top
)
*
scale
)
;
}
else
{
aScreenRect
-
>
MoveTo
(
rootScreenRect
.
x
+
pixelArea
.
x
rootScreenRect
.
y
+
pixelArea
.
y
)
;
}
aScreenRect
-
>
width
=
pixelArea
.
width
;
aScreenRect
-
>
height
=
pixelArea
.
height
;
RefPtr
<
DrawTarget
>
dt
=
gfxPlatform
:
:
GetPlatform
(
)
-
>
CreateOffscreenContentDrawTarget
(
IntSize
(
pixelArea
.
width
pixelArea
.
height
)
SurfaceFormat
:
:
B8G8R8A8
)
;
if
(
!
dt
|
|
!
dt
-
>
IsValid
(
)
)
{
return
nullptr
;
}
RefPtr
<
gfxContext
>
ctx
=
gfxContext
:
:
CreateOrNull
(
dt
)
;
MOZ_ASSERT
(
ctx
)
;
if
(
aRegion
)
{
RefPtr
<
PathBuilder
>
builder
=
dt
-
>
CreatePathBuilder
(
FillRule
:
:
FILL_WINDING
)
;
nsIntRegion
region
=
aRegion
-
>
ToAppUnits
(
AppUnitsPerCSSPixel
(
)
)
.
ToOutsidePixels
(
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
for
(
auto
iter
=
region
.
RectIter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
const
IntRect
&
rect
=
iter
.
Get
(
)
;
builder
-
>
MoveTo
(
rect
.
TopLeft
(
)
)
;
builder
-
>
LineTo
(
rect
.
TopRight
(
)
)
;
builder
-
>
LineTo
(
rect
.
BottomRight
(
)
)
;
builder
-
>
LineTo
(
rect
.
BottomLeft
(
)
)
;
builder
-
>
LineTo
(
rect
.
TopLeft
(
)
)
;
}
RefPtr
<
Path
>
path
=
builder
-
>
Finish
(
)
;
ctx
-
>
Clip
(
path
)
;
}
gfxMatrix
initialTM
=
ctx
-
>
CurrentMatrixDouble
(
)
;
if
(
resize
)
initialTM
.
PreScale
(
scale
scale
)
;
gfxPoint
surfaceOffset
=
nsLayoutUtils
:
:
PointToGfxPoint
(
-
aArea
.
TopLeft
(
)
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
initialTM
.
PreTranslate
(
surfaceOffset
)
;
RefPtr
<
nsFrameSelection
>
frameSelection
;
if
(
aSelection
)
{
frameSelection
=
aSelection
-
>
GetFrameSelection
(
)
;
}
else
{
frameSelection
=
FrameSelection
(
)
;
}
int16_t
oldDisplaySelection
=
frameSelection
-
>
GetDisplaySelection
(
)
;
frameSelection
-
>
SetDisplaySelection
(
nsISelectionController
:
:
SELECTION_HIDDEN
)
;
for
(
const
UniquePtr
<
RangePaintInfo
>
&
rangeInfo
:
aItems
)
{
gfxPoint
rootOffset
=
nsLayoutUtils
:
:
PointToGfxPoint
(
rangeInfo
-
>
mRootOffset
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
ctx
-
>
SetMatrixDouble
(
initialTM
.
PreTranslate
(
rootOffset
)
)
;
aArea
.
MoveBy
(
-
rangeInfo
-
>
mRootOffset
.
x
-
rangeInfo
-
>
mRootOffset
.
y
)
;
nsRegion
visible
(
aArea
)
;
RefPtr
<
LayerManager
>
layerManager
=
rangeInfo
-
>
mList
.
PaintRoot
(
&
rangeInfo
-
>
mBuilder
ctx
nsDisplayList
:
:
PAINT_DEFAULT
)
;
aArea
.
MoveBy
(
rangeInfo
-
>
mRootOffset
.
x
rangeInfo
-
>
mRootOffset
.
y
)
;
}
frameSelection
-
>
SetDisplaySelection
(
oldDisplaySelection
)
;
return
dt
-
>
Snapshot
(
)
;
}
already_AddRefed
<
SourceSurface
>
PresShell
:
:
RenderNode
(
nsINode
*
aNode
const
Maybe
<
CSSIntRegion
>
&
aRegion
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
uint32_t
aFlags
)
{
nsRect
area
;
nsTArray
<
UniquePtr
<
RangePaintInfo
>
>
rangeItems
;
if
(
!
aNode
-
>
IsInComposedDoc
(
)
)
{
return
nullptr
;
}
RefPtr
<
nsRange
>
range
=
new
nsRange
(
aNode
)
;
IgnoredErrorResult
rv
;
range
-
>
SelectNode
(
*
aNode
rv
)
;
if
(
rv
.
Failed
(
)
)
{
return
nullptr
;
}
UniquePtr
<
RangePaintInfo
>
info
=
CreateRangePaintInfo
(
range
area
false
)
;
if
(
info
&
&
!
rangeItems
.
AppendElement
(
std
:
:
move
(
info
)
)
)
{
return
nullptr
;
}
Maybe
<
CSSIntRegion
>
region
=
aRegion
;
if
(
region
)
{
CSSIntRect
rrectPixels
=
region
-
>
GetBounds
(
)
;
nsRect
rrect
=
ToAppUnits
(
rrectPixels
AppUnitsPerCSSPixel
(
)
)
;
area
.
IntersectRect
(
area
rrect
)
;
nsPresContext
*
pc
=
GetPresContext
(
)
;
if
(
!
pc
)
return
nullptr
;
region
-
>
MoveBy
(
-
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
area
.
x
)
-
nsPresContext
:
:
AppUnitsToIntCSSPixels
(
area
.
y
)
)
;
}
return
PaintRangePaintInfo
(
rangeItems
nullptr
region
area
aPoint
aScreenRect
aFlags
)
;
}
already_AddRefed
<
SourceSurface
>
PresShell
:
:
RenderSelection
(
Selection
*
aSelection
const
LayoutDeviceIntPoint
aPoint
LayoutDeviceIntRect
*
aScreenRect
uint32_t
aFlags
)
{
nsRect
area
;
nsTArray
<
UniquePtr
<
RangePaintInfo
>
>
rangeItems
;
uint32_t
numRanges
=
aSelection
-
>
RangeCount
(
)
;
NS_ASSERTION
(
numRanges
>
0
"
RenderSelection
called
with
no
selection
"
)
;
for
(
uint32_t
r
=
0
;
r
<
numRanges
;
r
+
+
)
{
RefPtr
<
nsRange
>
range
=
aSelection
-
>
GetRangeAt
(
r
)
;
UniquePtr
<
RangePaintInfo
>
info
=
CreateRangePaintInfo
(
range
area
true
)
;
if
(
info
&
&
!
rangeItems
.
AppendElement
(
std
:
:
move
(
info
)
)
)
{
return
nullptr
;
}
}
return
PaintRangePaintInfo
(
rangeItems
aSelection
Nothing
(
)
area
aPoint
aScreenRect
aFlags
)
;
}
void
PresShell
:
:
AddPrintPreviewBackgroundItem
(
nsDisplayListBuilder
&
aBuilder
nsDisplayList
&
aList
nsIFrame
*
aFrame
const
nsRect
&
aBounds
)
{
aList
.
AppendToBottom
(
MakeDisplayItem
<
nsDisplaySolidColor
>
(
&
aBuilder
aFrame
aBounds
NS_RGB
(
115
115
115
)
)
)
;
}
static
bool
AddCanvasBackgroundColor
(
const
nsDisplayList
&
aList
nsIFrame
*
aCanvasFrame
nscolor
aColor
bool
aCSSBackgroundColor
)
{
for
(
nsDisplayItem
*
i
=
aList
.
GetBottom
(
)
;
i
;
i
=
i
-
>
GetAbove
(
)
)
{
const
DisplayItemType
type
=
i
-
>
GetType
(
)
;
if
(
i
-
>
Frame
(
)
=
=
aCanvasFrame
&
&
type
=
=
DisplayItemType
:
:
TYPE_CANVAS_BACKGROUND_COLOR
)
{
nsDisplayCanvasBackgroundColor
*
bg
=
static_cast
<
nsDisplayCanvasBackgroundColor
*
>
(
i
)
;
bg
-
>
SetExtraBackgroundColor
(
aColor
)
;
return
true
;
}
const
bool
isBlendContainer
=
type
=
=
DisplayItemType
:
:
TYPE_BLEND_CONTAINER
|
|
type
=
=
DisplayItemType
:
:
TYPE_TABLE_BLEND_CONTAINER
;
nsDisplayList
*
sublist
=
i
-
>
GetSameCoordinateSystemChildren
(
)
;
if
(
sublist
&
&
!
(
isBlendContainer
&
&
!
aCSSBackgroundColor
)
&
&
AddCanvasBackgroundColor
(
*
sublist
aCanvasFrame
aColor
aCSSBackgroundColor
)
)
return
true
;
}
return
false
;
}
void
PresShell
:
:
AddCanvasBackgroundColorItem
(
nsDisplayListBuilder
&
aBuilder
nsDisplayList
&
aList
nsIFrame
*
aFrame
const
nsRect
&
aBounds
nscolor
aBackstopColor
uint32_t
aFlags
)
{
if
(
aBounds
.
IsEmpty
(
)
)
{
return
;
}
if
(
!
(
aFlags
&
nsIPresShell
:
:
FORCE_DRAW
)
&
&
!
nsCSSRendering
:
:
IsCanvasFrame
(
aFrame
)
)
{
return
;
}
nscolor
bgcolor
=
NS_ComposeColors
(
aBackstopColor
mCanvasBackgroundColor
)
;
if
(
NS_GET_A
(
bgcolor
)
=
=
0
)
return
;
bool
addedScrollingBackgroundColor
=
(
aFlags
&
APPEND_UNSCROLLED_ONLY
)
;
if
(
!
aFrame
-
>
GetParent
(
)
&
&
!
addedScrollingBackgroundColor
)
{
nsIScrollableFrame
*
sf
=
aFrame
-
>
PresShell
(
)
-
>
GetRootScrollFrameAsScrollable
(
)
;
if
(
sf
)
{
nsCanvasFrame
*
canvasFrame
=
do_QueryFrame
(
sf
-
>
GetScrolledFrame
(
)
)
;
if
(
canvasFrame
&
&
canvasFrame
-
>
IsVisibleForPainting
(
&
aBuilder
)
)
{
addedScrollingBackgroundColor
=
AddCanvasBackgroundColor
(
aList
canvasFrame
bgcolor
mHasCSSBackgroundColor
)
;
}
}
}
bool
forceUnscrolledItem
=
nsLayoutUtils
:
:
UsesAsyncScrolling
(
aFrame
)
&
&
NS_GET_A
(
bgcolor
)
=
=
255
;
if
(
(
aFlags
&
ADD_FOR_SUBDOC
)
&
&
gfxPrefs
:
:
LayoutUseContainersForRootFrames
(
)
)
{
forceUnscrolledItem
=
false
;
}
if
(
!
addedScrollingBackgroundColor
|
|
forceUnscrolledItem
)
{
aList
.
AppendToBottom
(
MakeDisplayItem
<
nsDisplaySolidColor
>
(
&
aBuilder
aFrame
aBounds
bgcolor
)
)
;
}
}
static
bool
IsTransparentContainerElement
(
nsPresContext
*
aPresContext
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
aPresContext
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
false
;
}
nsCOMPtr
<
nsPIDOMWindowOuter
>
pwin
=
docShell
-
>
GetWindow
(
)
;
if
(
!
pwin
)
return
false
;
nsCOMPtr
<
Element
>
containerElement
=
pwin
-
>
GetFrameElementInternal
(
)
;
TabChild
*
tab
=
TabChild
:
:
GetFrom
(
docShell
)
;
if
(
tab
)
{
nsCOMPtr
<
nsIPresShell
>
presShell
=
aPresContext
-
>
GetPresShell
(
)
;
nsCOMPtr
<
nsIPresShell
>
topPresShell
=
tab
-
>
GetPresShell
(
)
;
if
(
presShell
!
=
topPresShell
)
{
tab
=
nullptr
;
}
}
return
(
containerElement
&
&
containerElement
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
transparent
)
)
|
|
(
tab
&
&
tab
-
>
IsTransparent
(
)
)
;
}
nscolor
PresShell
:
:
GetDefaultBackgroundColorToDraw
(
)
{
if
(
!
mPresContext
|
|
!
mPresContext
-
>
GetBackgroundColorDraw
(
)
)
{
return
NS_RGB
(
255
255
255
)
;
}
return
mPresContext
-
>
DefaultBackgroundColor
(
)
;
}
void
PresShell
:
:
UpdateCanvasBackground
(
)
{
nsIFrame
*
rootStyleFrame
=
FrameConstructor
(
)
-
>
GetRootElementStyleFrame
(
)
;
if
(
rootStyleFrame
)
{
ComputedStyle
*
bgStyle
=
nsCSSRendering
:
:
FindRootFrameBackground
(
rootStyleFrame
)
;
bool
drawBackgroundImage
;
bool
drawBackgroundColor
;
mCanvasBackgroundColor
=
nsCSSRendering
:
:
DetermineBackgroundColor
(
mPresContext
bgStyle
rootStyleFrame
drawBackgroundImage
drawBackgroundColor
)
;
mHasCSSBackgroundColor
=
drawBackgroundColor
;
if
(
mPresContext
-
>
IsRootContentDocument
(
)
&
&
!
IsTransparentContainerElement
(
mPresContext
)
)
{
mCanvasBackgroundColor
=
NS_ComposeColors
(
GetDefaultBackgroundColorToDraw
(
)
mCanvasBackgroundColor
)
;
}
}
if
(
!
FrameConstructor
(
)
-
>
GetRootElementFrame
(
)
)
{
mCanvasBackgroundColor
=
GetDefaultBackgroundColorToDraw
(
)
;
}
}
nscolor
PresShell
:
:
ComputeBackstopColor
(
nsView
*
aDisplayRoot
)
{
nsIWidget
*
widget
=
aDisplayRoot
-
>
GetWidget
(
)
;
if
(
widget
&
&
(
widget
-
>
GetTransparencyMode
(
)
!
=
eTransparencyOpaque
|
|
widget
-
>
WidgetPaintsBackground
(
)
)
)
{
return
NS_RGBA
(
0
0
0
0
)
;
}
return
GetDefaultBackgroundColorToDraw
(
)
;
}
struct
PaintParams
{
nscolor
mBackgroundColor
;
}
;
LayerManager
*
PresShell
:
:
GetLayerManager
(
)
{
NS_ASSERTION
(
mViewManager
"
Should
have
view
manager
"
)
;
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
if
(
rootView
)
{
if
(
nsIWidget
*
widget
=
rootView
-
>
GetWidget
(
)
)
{
return
widget
-
>
GetLayerManager
(
)
;
}
}
return
nullptr
;
}
bool
PresShell
:
:
AsyncPanZoomEnabled
(
)
{
NS_ASSERTION
(
mViewManager
"
Should
have
view
manager
"
)
;
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
if
(
rootView
)
{
if
(
nsIWidget
*
widget
=
rootView
-
>
GetWidget
(
)
)
{
return
widget
-
>
AsyncPanZoomEnabled
(
)
;
}
}
return
gfxPlatform
:
:
AsyncPanZoomEnabled
(
)
;
}
void
PresShell
:
:
SetIgnoreViewportScrolling
(
bool
aIgnore
)
{
if
(
IgnoringViewportScrolling
(
)
=
=
aIgnore
)
{
return
;
}
RenderingState
state
(
this
)
;
state
.
mRenderFlags
=
ChangeFlag
(
state
.
mRenderFlags
aIgnore
STATE_IGNORING_VIEWPORT_SCROLLING
)
;
SetRenderingState
(
state
)
;
}
nsresult
PresShell
:
:
SetResolutionImpl
(
float
aResolution
bool
aScaleToResolution
)
{
if
(
!
(
aResolution
>
0
.
0
)
)
{
return
NS_ERROR_ILLEGAL_VALUE
;
}
if
(
aResolution
=
=
mResolution
.
valueOr
(
0
.
0
)
)
{
MOZ_ASSERT
(
mResolution
.
isSome
(
)
)
;
return
NS_OK
;
}
RenderingState
state
(
this
)
;
state
.
mResolution
=
Some
(
aResolution
)
;
SetRenderingState
(
state
)
;
mScaleToResolution
=
aScaleToResolution
;
if
(
mMobileViewportManager
)
{
mMobileViewportManager
-
>
ResolutionUpdated
(
)
;
}
return
NS_OK
;
}
bool
PresShell
:
:
ScaleToResolution
(
)
const
{
return
mScaleToResolution
;
}
float
PresShell
:
:
GetCumulativeResolution
(
)
{
float
resolution
=
GetResolution
(
)
;
nsPresContext
*
parentCtx
=
GetPresContext
(
)
-
>
GetParentPresContext
(
)
;
if
(
parentCtx
)
{
resolution
*
=
parentCtx
-
>
PresShell
(
)
-
>
GetCumulativeResolution
(
)
;
}
return
resolution
;
}
float
PresShell
:
:
GetCumulativeNonRootScaleResolution
(
)
{
float
resolution
=
1
.
0
;
nsIPresShell
*
currentShell
=
this
;
while
(
currentShell
)
{
nsPresContext
*
currentCtx
=
currentShell
-
>
GetPresContext
(
)
;
if
(
currentCtx
!
=
currentCtx
-
>
GetRootPresContext
(
)
)
{
resolution
*
=
currentShell
-
>
ScaleToResolution
(
)
?
currentShell
-
>
GetResolution
(
)
:
1
.
0f
;
}
nsPresContext
*
parentCtx
=
currentCtx
-
>
GetParentPresContext
(
)
;
if
(
parentCtx
)
{
currentShell
=
parentCtx
-
>
PresShell
(
)
;
}
else
{
currentShell
=
nullptr
;
}
}
return
resolution
;
}
void
PresShell
:
:
SetRestoreResolution
(
float
aResolution
LayoutDeviceIntSize
aDisplaySize
)
{
if
(
mMobileViewportManager
)
{
mMobileViewportManager
-
>
SetRestoreResolution
(
aResolution
aDisplaySize
)
;
}
}
void
PresShell
:
:
SetRenderingState
(
const
RenderingState
&
aState
)
{
if
(
mRenderFlags
!
=
aState
.
mRenderFlags
)
{
LayerManager
*
manager
=
GetLayerManager
(
)
;
if
(
manager
)
{
FrameLayerBuilder
:
:
InvalidateAllLayers
(
manager
)
;
}
}
mRenderFlags
=
aState
.
mRenderFlags
;
mResolution
=
aState
.
mResolution
;
}
void
PresShell
:
:
SynthesizeMouseMove
(
bool
aFromScroll
)
{
if
(
!
sSynthMouseMove
)
return
;
if
(
mPaintingSuppressed
|
|
!
mIsActive
|
|
!
mPresContext
)
{
return
;
}
if
(
!
mPresContext
-
>
IsRoot
(
)
)
{
nsIPresShell
*
rootPresShell
=
GetRootPresShell
(
)
;
if
(
rootPresShell
)
{
rootPresShell
-
>
SynthesizeMouseMove
(
aFromScroll
)
;
}
return
;
}
if
(
mMouseLocation
=
=
nsPoint
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
)
return
;
if
(
!
mSynthMouseMoveEvent
.
IsPending
(
)
)
{
RefPtr
<
nsSynthMouseMoveEvent
>
ev
=
new
nsSynthMouseMoveEvent
(
this
aFromScroll
)
;
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
AddRefreshObserver
(
ev
FlushType
:
:
Display
)
;
mSynthMouseMoveEvent
=
std
:
:
move
(
ev
)
;
}
}
static
nsView
*
FindFloatingViewContaining
(
nsView
*
aView
nsPoint
aPt
)
{
if
(
aView
-
>
GetVisibility
(
)
=
=
nsViewVisibility_kHide
)
return
nullptr
;
nsIFrame
*
frame
=
aView
-
>
GetFrame
(
)
;
if
(
frame
)
{
if
(
!
frame
-
>
IsVisibleConsideringAncestors
(
nsIFrame
:
:
VISIBILITY_CROSS_CHROME_CONTENT_BOUNDARY
)
|
|
!
frame
-
>
PresShell
(
)
-
>
IsActive
(
)
)
{
return
nullptr
;
}
}
for
(
nsView
*
v
=
aView
-
>
GetFirstChild
(
)
;
v
;
v
=
v
-
>
GetNextSibling
(
)
)
{
nsView
*
r
=
FindFloatingViewContaining
(
v
v
-
>
ConvertFromParentCoords
(
aPt
)
)
;
if
(
r
)
return
r
;
}
if
(
aView
-
>
GetFloating
(
)
&
&
aView
-
>
HasWidget
(
)
&
&
aView
-
>
GetDimensions
(
)
.
Contains
(
aPt
)
)
return
aView
;
return
nullptr
;
}
static
nsView
*
FindViewContaining
(
nsView
*
aView
nsPoint
aPt
)
{
if
(
!
aView
-
>
GetDimensions
(
)
.
Contains
(
aPt
)
|
|
aView
-
>
GetVisibility
(
)
=
=
nsViewVisibility_kHide
)
{
return
nullptr
;
}
nsIFrame
*
frame
=
aView
-
>
GetFrame
(
)
;
if
(
frame
)
{
if
(
!
frame
-
>
IsVisibleConsideringAncestors
(
nsIFrame
:
:
VISIBILITY_CROSS_CHROME_CONTENT_BOUNDARY
)
|
|
!
frame
-
>
PresShell
(
)
-
>
IsActive
(
)
)
{
return
nullptr
;
}
}
for
(
nsView
*
v
=
aView
-
>
GetFirstChild
(
)
;
v
;
v
=
v
-
>
GetNextSibling
(
)
)
{
nsView
*
r
=
FindViewContaining
(
v
v
-
>
ConvertFromParentCoords
(
aPt
)
)
;
if
(
r
)
return
r
;
}
return
aView
;
}
void
PresShell
:
:
ProcessSynthMouseMoveEvent
(
bool
aFromScroll
)
{
nsCOMPtr
<
nsIDragSession
>
dragSession
=
nsContentUtils
:
:
GetDragSession
(
)
;
if
(
dragSession
)
{
mSynthMouseMoveEvent
.
Forget
(
)
;
return
;
}
if
(
aFromScroll
)
{
mSynthMouseMoveEvent
.
Forget
(
)
;
}
nsView
*
rootView
=
mViewManager
?
mViewManager
-
>
GetRootView
(
)
:
nullptr
;
if
(
mMouseLocation
=
=
nsPoint
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
|
|
!
rootView
|
|
!
rootView
-
>
HasWidget
(
)
|
|
!
mPresContext
)
{
mSynthMouseMoveEvent
.
Forget
(
)
;
return
;
}
NS_ASSERTION
(
mPresContext
-
>
IsRoot
(
)
"
Only
a
root
pres
shell
should
be
here
"
)
;
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
(
this
)
;
#
ifdef
DEBUG_MOUSE_LOCATION
printf
(
"
[
ps
=
%
p
]
synthesizing
mouse
move
to
(
%
d
%
d
)
\
n
"
this
mMouseLocation
.
x
mMouseLocation
.
y
)
;
#
endif
int32_t
APD
=
mPresContext
-
>
AppUnitsPerDevPixel
(
)
;
nsView
*
view
=
nullptr
;
int32_t
viewAPD
;
nsPoint
refpoint
(
0
0
)
;
nsViewManager
*
pointVM
=
nullptr
;
view
=
FindFloatingViewContaining
(
rootView
mMouseLocation
)
;
if
(
!
view
)
{
view
=
rootView
;
nsView
*
pointView
=
FindViewContaining
(
rootView
mMouseLocation
)
;
pointVM
=
(
pointView
?
pointView
:
view
)
-
>
GetViewManager
(
)
;
refpoint
=
mMouseLocation
+
rootView
-
>
ViewToWidgetOffset
(
)
;
viewAPD
=
APD
;
}
else
{
pointVM
=
view
-
>
GetViewManager
(
)
;
nsIFrame
*
frame
=
view
-
>
GetFrame
(
)
;
NS_ASSERTION
(
frame
"
floating
views
can
'
t
be
anonymous
"
)
;
viewAPD
=
frame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
refpoint
=
mMouseLocation
.
ScaleToOtherAppUnits
(
APD
viewAPD
)
;
refpoint
-
=
view
-
>
GetOffsetTo
(
rootView
)
;
refpoint
+
=
view
-
>
ViewToWidgetOffset
(
)
;
}
NS_ASSERTION
(
view
-
>
GetWidget
(
)
"
view
should
have
a
widget
here
"
)
;
WidgetMouseEvent
event
(
true
eMouseMove
view
-
>
GetWidget
(
)
WidgetMouseEvent
:
:
eSynthesized
)
;
event
.
mRefPoint
=
LayoutDeviceIntPoint
:
:
FromAppUnitsToNearest
(
refpoint
viewAPD
)
;
event
.
mTime
=
PR_IntervalNow
(
)
;
nsCOMPtr
<
nsIPresShell
>
shell
=
pointVM
-
>
GetPresShell
(
)
;
if
(
shell
)
{
InputAPZContext
apzContext
(
mMouseEventTargetGuid
0
nsEventStatus_eIgnore
)
;
shell
-
>
DispatchSynthMouseMove
(
&
event
)
;
}
if
(
!
aFromScroll
)
{
mSynthMouseMoveEvent
.
Forget
(
)
;
}
}
void
PresShell
:
:
MarkFramesInListApproximatelyVisible
(
const
nsDisplayList
&
aList
)
{
for
(
nsDisplayItem
*
item
=
aList
.
GetBottom
(
)
;
item
;
item
=
item
-
>
GetAbove
(
)
)
{
nsDisplayList
*
sublist
=
item
-
>
GetChildren
(
)
;
if
(
sublist
)
{
MarkFramesInListApproximatelyVisible
(
*
sublist
)
;
continue
;
}
nsIFrame
*
frame
=
item
-
>
Frame
(
)
;
MOZ_ASSERT
(
frame
)
;
if
(
!
frame
-
>
TrackingVisibility
(
)
)
{
continue
;
}
auto
*
presShell
=
static_cast
<
PresShell
*
>
(
frame
-
>
PresShell
(
)
)
;
MOZ_ASSERT
(
!
presShell
-
>
AssumeAllFramesVisible
(
)
)
;
if
(
presShell
-
>
mApproximatelyVisibleFrames
.
EnsureInserted
(
frame
)
)
{
frame
-
>
IncApproximateVisibleCount
(
)
;
}
}
}
void
PresShell
:
:
DecApproximateVisibleCount
(
VisibleFrames
&
aFrames
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
)
{
for
(
auto
iter
=
aFrames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsIFrame
*
frame
=
iter
.
Get
(
)
-
>
GetKey
(
)
;
if
(
frame
-
>
TrackingVisibility
(
)
)
{
frame
-
>
DecApproximateVisibleCount
(
aNonvisibleAction
)
;
}
}
}
void
PresShell
:
:
RebuildApproximateFrameVisibilityDisplayList
(
const
nsDisplayList
&
aList
)
{
MOZ_ASSERT
(
!
mApproximateFrameVisibilityVisited
"
already
visited
?
"
)
;
mApproximateFrameVisibilityVisited
=
true
;
VisibleFrames
oldApproximatelyVisibleFrames
;
mApproximatelyVisibleFrames
.
SwapElements
(
oldApproximatelyVisibleFrames
)
;
MarkFramesInListApproximatelyVisible
(
aList
)
;
DecApproximateVisibleCount
(
oldApproximatelyVisibleFrames
)
;
}
void
PresShell
:
:
ClearApproximateFrameVisibilityVisited
(
nsView
*
aView
bool
aClear
)
{
nsViewManager
*
vm
=
aView
-
>
GetViewManager
(
)
;
if
(
aClear
)
{
PresShell
*
presShell
=
static_cast
<
PresShell
*
>
(
vm
-
>
GetPresShell
(
)
)
;
if
(
!
presShell
-
>
mApproximateFrameVisibilityVisited
)
{
presShell
-
>
ClearApproximatelyVisibleFramesList
(
)
;
}
presShell
-
>
mApproximateFrameVisibilityVisited
=
false
;
}
for
(
nsView
*
v
=
aView
-
>
GetFirstChild
(
)
;
v
;
v
=
v
-
>
GetNextSibling
(
)
)
{
ClearApproximateFrameVisibilityVisited
(
v
v
-
>
GetViewManager
(
)
!
=
vm
)
;
}
}
void
PresShell
:
:
ClearApproximatelyVisibleFramesList
(
const
Maybe
<
OnNonvisible
>
&
aNonvisibleAction
)
{
DecApproximateVisibleCount
(
mApproximatelyVisibleFrames
aNonvisibleAction
)
;
mApproximatelyVisibleFrames
.
Clear
(
)
;
}
void
PresShell
:
:
MarkFramesInSubtreeApproximatelyVisible
(
nsIFrame
*
aFrame
const
nsRect
&
aRect
bool
aRemoveOnly
)
{
MOZ_ASSERT
(
aFrame
-
>
PresShell
(
)
=
=
this
"
wrong
presshell
"
)
;
if
(
aFrame
-
>
TrackingVisibility
(
)
&
&
aFrame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
&
&
(
!
aRemoveOnly
|
|
aFrame
-
>
GetVisibility
(
)
=
=
Visibility
:
:
APPROXIMATELY_VISIBLE
)
)
{
MOZ_ASSERT
(
!
AssumeAllFramesVisible
(
)
)
;
if
(
mApproximatelyVisibleFrames
.
EnsureInserted
(
aFrame
)
)
{
aFrame
-
>
IncApproximateVisibleCount
(
)
;
}
}
nsSubDocumentFrame
*
subdocFrame
=
do_QueryFrame
(
aFrame
)
;
if
(
subdocFrame
)
{
nsIPresShell
*
presShell
=
subdocFrame
-
>
GetSubdocumentPresShellForPainting
(
nsSubDocumentFrame
:
:
IGNORE_PAINT_SUPPRESSION
)
;
if
(
presShell
&
&
!
presShell
-
>
AssumeAllFramesVisible
(
)
)
{
nsRect
rect
=
aRect
;
nsIFrame
*
root
=
presShell
-
>
GetRootFrame
(
)
;
if
(
root
)
{
rect
.
MoveBy
(
aFrame
-
>
GetOffsetToCrossDoc
(
root
)
)
;
}
else
{
rect
.
MoveBy
(
-
aFrame
-
>
GetContentRectRelativeToSelf
(
)
.
TopLeft
(
)
)
;
}
rect
=
rect
.
ScaleToOtherAppUnitsRoundOut
(
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
presShell
-
>
GetPresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
;
presShell
-
>
RebuildApproximateFrameVisibility
(
&
rect
)
;
}
return
;
}
nsRect
rect
=
aRect
;
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
aFrame
)
;
if
(
scrollFrame
)
{
bool
ignoreDisplayPort
=
false
;
if
(
nsLayoutUtils
:
:
IsMissingDisplayPortBaseRect
(
aFrame
-
>
GetContent
(
)
)
)
{
nsPresContext
*
pc
=
aFrame
-
>
PresContext
(
)
;
if
(
scrollFrame
-
>
IsRootScrollFrameOfDocument
(
)
&
&
(
pc
-
>
IsRootContentDocument
(
)
|
|
!
pc
-
>
GetParentPresContext
(
)
)
)
{
nsRect
baseRect
=
nsRect
(
nsPoint
(
0
0
)
nsLayoutUtils
:
:
CalculateCompositionSizeForFrame
(
aFrame
)
)
;
nsLayoutUtils
:
:
SetDisplayPortBase
(
aFrame
-
>
GetContent
(
)
baseRect
)
;
}
else
{
ignoreDisplayPort
=
true
;
}
}
nsRect
displayPort
;
bool
usingDisplayport
=
!
ignoreDisplayPort
&
&
nsLayoutUtils
:
:
GetDisplayPortForVisibilityTesting
(
aFrame
-
>
GetContent
(
)
&
displayPort
RelativeTo
:
:
ScrollFrame
)
;
scrollFrame
-
>
NotifyApproximateFrameVisibilityUpdate
(
!
usingDisplayport
)
;
if
(
usingDisplayport
)
{
rect
=
displayPort
;
}
else
{
rect
=
rect
.
Intersect
(
scrollFrame
-
>
GetScrollPortRect
(
)
)
;
}
rect
=
scrollFrame
-
>
ExpandRectToNearlyVisible
(
rect
)
;
}
bool
preserves3DChildren
=
aFrame
-
>
Extend3DContext
(
)
;
const
nsIFrame
:
:
ChildListIDs
skip
(
nsIFrame
:
:
kPopupList
|
nsIFrame
:
:
kSelectPopupList
)
;
for
(
nsIFrame
:
:
ChildListIterator
childLists
(
aFrame
)
;
!
childLists
.
IsDone
(
)
;
childLists
.
Next
(
)
)
{
if
(
skip
.
Contains
(
childLists
.
CurrentID
(
)
)
)
{
continue
;
}
for
(
nsIFrame
*
child
:
childLists
.
CurrentList
(
)
)
{
nsRect
r
=
rect
-
child
-
>
GetPosition
(
)
;
if
(
!
r
.
IntersectRect
(
r
child
-
>
GetVisualOverflowRect
(
)
)
)
{
continue
;
}
if
(
child
-
>
IsTransformed
(
)
)
{
if
(
!
preserves3DChildren
|
|
!
child
-
>
Combines3DTransformWithAncestors
(
)
)
{
const
nsRect
overflow
=
child
-
>
GetVisualOverflowRectRelativeToSelf
(
)
;
nsRect
out
;
if
(
nsDisplayTransform
:
:
UntransformRect
(
r
overflow
child
&
out
)
)
{
r
=
out
;
}
else
{
r
.
SetEmpty
(
)
;
}
}
}
MarkFramesInSubtreeApproximatelyVisible
(
child
r
)
;
}
}
}
void
PresShell
:
:
RebuildApproximateFrameVisibility
(
nsRect
*
aRect
bool
aRemoveOnly
)
{
MOZ_ASSERT
(
!
mApproximateFrameVisibilityVisited
"
already
visited
?
"
)
;
mApproximateFrameVisibilityVisited
=
true
;
nsIFrame
*
rootFrame
=
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
;
}
VisibleFrames
oldApproximatelyVisibleFrames
;
mApproximatelyVisibleFrames
.
SwapElements
(
oldApproximatelyVisibleFrames
)
;
nsRect
vis
(
nsPoint
(
0
0
)
rootFrame
-
>
GetSize
(
)
)
;
if
(
aRect
)
{
vis
=
*
aRect
;
}
MarkFramesInSubtreeApproximatelyVisible
(
rootFrame
vis
aRemoveOnly
)
;
DecApproximateVisibleCount
(
oldApproximatelyVisibleFrames
)
;
}
void
PresShell
:
:
UpdateApproximateFrameVisibility
(
)
{
DoUpdateApproximateFrameVisibility
(
false
)
;
}
void
PresShell
:
:
DoUpdateApproximateFrameVisibility
(
bool
aRemoveOnly
)
{
MOZ_ASSERT
(
!
mPresContext
|
|
mPresContext
-
>
IsRootContentDocument
(
)
"
Updating
approximate
frame
visibility
on
a
non
-
root
content
document
?
"
)
;
mUpdateApproximateFrameVisibilityEvent
.
Revoke
(
)
;
if
(
mHaveShutDown
|
|
mIsDestroying
)
{
return
;
}
nsIFrame
*
rootFrame
=
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
ClearApproximatelyVisibleFramesList
(
Some
(
OnNonvisible
:
:
DISCARD_IMAGES
)
)
;
return
;
}
RebuildApproximateFrameVisibility
(
nullptr
aRemoveOnly
)
;
ClearApproximateFrameVisibilityVisited
(
rootFrame
-
>
GetView
(
)
true
)
;
#
ifdef
DEBUG_FRAME_VISIBILITY_DISPLAY_LIST
nsDisplayListBuilder
builder
(
rootFrame
nsDisplayListBuilderMode
:
:
FRAME_VISIBILITY
false
)
;
nsRect
updateRect
(
nsPoint
(
0
0
)
rootFrame
-
>
GetSize
(
)
)
;
nsIFrame
*
rootScroll
=
GetRootScrollFrame
(
)
;
if
(
rootScroll
)
{
nsIContent
*
content
=
rootScroll
-
>
GetContent
(
)
;
if
(
content
)
{
Unused
<
<
nsLayoutUtils
:
:
GetDisplayPortForVisibilityTesting
(
content
&
updateRect
RelativeTo
:
:
ScrollFrame
)
;
}
if
(
IgnoringViewportScrolling
(
)
)
{
builder
.
SetIgnoreScrollFrame
(
rootScroll
)
;
}
}
builder
.
IgnorePaintSuppression
(
)
;
builder
.
EnterPresShell
(
rootFrame
)
;
nsDisplayList
list
;
rootFrame
-
>
BuildDisplayListForStackingContext
(
&
builder
updateRect
&
list
)
;
builder
.
LeavePresShell
(
rootFrame
&
list
)
;
RebuildApproximateFrameVisibilityDisplayList
(
list
)
;
ClearApproximateFrameVisibilityVisited
(
rootFrame
-
>
GetView
(
)
true
)
;
list
.
DeleteAll
(
&
builder
)
;
#
endif
}
bool
PresShell
:
:
AssumeAllFramesVisible
(
)
{
static
bool
sFrameVisibilityEnabled
=
true
;
static
bool
sFrameVisibilityPrefCached
=
false
;
if
(
!
sFrameVisibilityPrefCached
)
{
Preferences
:
:
AddBoolVarCache
(
&
sFrameVisibilityEnabled
"
layout
.
framevisibility
.
enabled
"
true
)
;
sFrameVisibilityPrefCached
=
true
;
}
if
(
!
sFrameVisibilityEnabled
|
|
!
mPresContext
|
|
!
mDocument
)
{
return
true
;
}
if
(
mPresContext
-
>
Type
(
)
=
=
nsPresContext
:
:
eContext_PrintPreview
|
|
mPresContext
-
>
Type
(
)
=
=
nsPresContext
:
:
eContext_Print
|
|
mPresContext
-
>
IsChrome
(
)
|
|
mDocument
-
>
IsResourceDoc
(
)
)
{
return
true
;
}
if
(
!
mHaveShutDown
&
&
!
mIsDestroying
&
&
!
mPresContext
-
>
IsRootContentDocument
(
)
)
{
nsPresContext
*
presContext
=
mPresContext
-
>
GetToplevelContentDocumentPresContext
(
)
;
if
(
presContext
&
&
presContext
-
>
PresShell
(
)
-
>
AssumeAllFramesVisible
(
)
)
{
return
true
;
}
}
return
false
;
}
void
PresShell
:
:
ScheduleApproximateFrameVisibilityUpdateSoon
(
)
{
if
(
AssumeAllFramesVisible
(
)
)
{
return
;
}
if
(
!
mPresContext
)
{
return
;
}
nsRefreshDriver
*
refreshDriver
=
mPresContext
-
>
RefreshDriver
(
)
;
if
(
!
refreshDriver
)
{
return
;
}
refreshDriver
-
>
ScheduleFrameVisibilityUpdate
(
)
;
}
void
PresShell
:
:
ScheduleApproximateFrameVisibilityUpdateNow
(
)
{
if
(
AssumeAllFramesVisible
(
)
)
{
return
;
}
if
(
!
mPresContext
-
>
IsRootContentDocument
(
)
)
{
nsPresContext
*
presContext
=
mPresContext
-
>
GetToplevelContentDocumentPresContext
(
)
;
if
(
!
presContext
)
return
;
MOZ_ASSERT
(
presContext
-
>
IsRootContentDocument
(
)
"
Didn
'
t
get
a
root
prescontext
from
GetToplevelContentDocumentPresContext
?
"
)
;
presContext
-
>
PresShell
(
)
-
>
ScheduleApproximateFrameVisibilityUpdateNow
(
)
;
return
;
}
if
(
mHaveShutDown
|
|
mIsDestroying
)
{
return
;
}
if
(
mUpdateApproximateFrameVisibilityEvent
.
IsPending
(
)
)
{
return
;
}
RefPtr
<
nsRunnableMethod
<
PresShell
>
>
event
=
NewRunnableMethod
(
"
PresShell
:
:
UpdateApproximateFrameVisibility
"
this
&
PresShell
:
:
UpdateApproximateFrameVisibility
)
;
nsresult
rv
=
mDocument
-
>
Dispatch
(
TaskCategory
:
:
Other
do_AddRef
(
event
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
mUpdateApproximateFrameVisibilityEvent
=
std
:
:
move
(
event
)
;
}
}
void
PresShell
:
:
EnsureFrameInApproximatelyVisibleList
(
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
TrackingVisibility
(
)
)
{
return
;
}
if
(
AssumeAllFramesVisible
(
)
)
{
aFrame
-
>
IncApproximateVisibleCount
(
)
;
return
;
}
#
ifdef
DEBUG
nsCOMPtr
<
nsIContent
>
content
=
aFrame
-
>
GetContent
(
)
;
if
(
content
)
{
PresShell
*
shell
=
static_cast
<
PresShell
*
>
(
content
-
>
OwnerDoc
(
)
-
>
GetShell
(
)
)
;
MOZ_ASSERT
(
!
shell
|
|
shell
=
=
this
"
wrong
shell
"
)
;
}
#
endif
if
(
mApproximatelyVisibleFrames
.
EnsureInserted
(
aFrame
)
)
{
aFrame
-
>
IncApproximateVisibleCount
(
)
;
}
}
void
PresShell
:
:
RemoveFrameFromApproximatelyVisibleList
(
nsIFrame
*
aFrame
)
{
#
ifdef
DEBUG
nsCOMPtr
<
nsIContent
>
content
=
aFrame
-
>
GetContent
(
)
;
if
(
content
)
{
PresShell
*
shell
=
static_cast
<
PresShell
*
>
(
content
-
>
OwnerDoc
(
)
-
>
GetShell
(
)
)
;
MOZ_ASSERT
(
!
shell
|
|
shell
=
=
this
"
wrong
shell
"
)
;
}
#
endif
if
(
AssumeAllFramesVisible
(
)
)
{
MOZ_ASSERT
(
mApproximatelyVisibleFrames
.
Count
(
)
=
=
0
"
Shouldn
'
t
have
any
frames
in
the
table
"
)
;
return
;
}
if
(
mApproximatelyVisibleFrames
.
EnsureRemoved
(
aFrame
)
&
&
aFrame
-
>
TrackingVisibility
(
)
)
{
aFrame
-
>
DecApproximateVisibleCount
(
)
;
}
}
class
nsAutoNotifyDidPaint
{
public
:
nsAutoNotifyDidPaint
(
PresShell
*
aShell
uint32_t
aFlags
)
:
mShell
(
aShell
)
mFlags
(
aFlags
)
{
}
~
nsAutoNotifyDidPaint
(
)
{
if
(
mFlags
&
nsIPresShell
:
:
PAINT_COMPOSITE
)
{
mShell
-
>
GetPresContext
(
)
-
>
NotifyDidPaintForSubtree
(
)
;
}
}
private
:
PresShell
*
mShell
;
uint32_t
mFlags
;
}
;
void
nsIPresShell
:
:
RecordShadowStyleChange
(
ShadowRoot
&
aShadowRoot
)
{
mStyleSet
-
>
RecordShadowStyleChange
(
aShadowRoot
)
;
ApplicableStylesChanged
(
)
;
}
void
PresShell
:
:
Paint
(
nsView
*
aViewToPaint
const
nsRegion
&
aDirtyRegion
uint32_t
aFlags
)
{
#
ifdef
MOZ_GECKO_PROFILER
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
nsIDocument
*
contentRoot
=
GetPrimaryContentDocument
(
)
;
if
(
contentRoot
)
{
uri
=
contentRoot
-
>
GetDocumentURI
(
)
;
}
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
"
PresShell
:
:
Paint
"
GRAPHICS
uri
?
uri
-
>
GetSpecOrDefault
(
)
:
NS_LITERAL_CSTRING
(
"
N
/
A
"
)
)
;
#
endif
Maybe
<
js
:
:
AutoAssertNoContentJS
>
nojs
;
#
if
!
defined
(
MOZ_WIDGET_ANDROID
)
if
(
!
(
aFlags
&
nsIPresShell
:
:
PAINT_COMPOSITE
)
)
{
nojs
.
emplace
(
dom
:
:
danger
:
:
GetJSContext
(
)
)
;
}
#
endif
NS_ASSERTION
(
!
mIsDestroying
"
painting
a
destroyed
PresShell
"
)
;
NS_ASSERTION
(
aViewToPaint
"
null
view
"
)
;
MOZ_ASSERT
(
!
mApproximateFrameVisibilityVisited
"
Should
have
been
cleared
"
)
;
if
(
!
mIsActive
)
{
return
;
}
if
(
gfxPrefs
:
:
APZKeyboardEnabled
(
)
)
{
mAPZFocusTarget
=
FocusTarget
(
this
mAPZFocusSequenceNumber
)
;
}
nsPresContext
*
presContext
=
GetPresContext
(
)
;
AUTO_LAYOUT_PHASE_ENTRY_POINT
(
presContext
Paint
)
;
nsIFrame
*
frame
=
aViewToPaint
-
>
GetFrame
(
)
;
LayerManager
*
layerManager
=
aViewToPaint
-
>
GetWidget
(
)
-
>
GetLayerManager
(
)
;
NS_ASSERTION
(
layerManager
"
Must
be
in
paint
event
"
)
;
bool
shouldInvalidate
=
layerManager
-
>
NeedsWidgetInvalidation
(
)
;
nsAutoNotifyDidPaint
notifyDidPaint
(
this
aFlags
)
;
if
(
mIsFirstPaint
&
&
!
mPaintingSuppressed
)
{
layerManager
-
>
SetIsFirstPaint
(
)
;
mIsFirstPaint
=
false
;
}
if
(
!
layerManager
-
>
BeginTransaction
(
)
)
{
return
;
}
layerManager
-
>
SetFocusTarget
(
mAPZFocusTarget
)
;
if
(
frame
)
{
if
(
!
(
aFlags
&
PAINT_LAYERS
)
)
{
if
(
layerManager
-
>
EndEmptyTransaction
(
)
)
{
return
;
}
NS_WARNING
(
"
Must
complete
empty
transaction
when
compositing
!
"
)
;
}
if
(
!
(
aFlags
&
PAINT_SYNC_DECODE_IMAGES
)
&
&
!
(
frame
-
>
GetStateBits
(
)
&
NS_FRAME_UPDATE_LAYER_TREE
)
&
&
!
mNextPaintCompressed
)
{
NotifySubDocInvalidationFunc
computeInvalidFunc
=
presContext
-
>
MayHavePaintEventListenerInSubDocument
(
)
?
nsPresContext
:
:
NotifySubDocInvalidation
:
0
;
bool
computeInvalidRect
=
computeInvalidFunc
|
|
(
layerManager
-
>
GetBackendType
(
)
=
=
LayersBackend
:
:
LAYERS_BASIC
)
;
UniquePtr
<
LayerProperties
>
props
;
if
(
computeInvalidRect
&
&
layerManager
-
>
GetRoot
(
)
)
{
props
=
LayerProperties
:
:
CloneFrom
(
layerManager
-
>
GetRoot
(
)
)
;
}
MaybeSetupTransactionIdAllocator
(
layerManager
presContext
)
;
if
(
layerManager
-
>
EndEmptyTransaction
(
(
aFlags
&
PAINT_COMPOSITE
)
?
LayerManager
:
:
END_DEFAULT
:
LayerManager
:
:
END_NO_COMPOSITE
)
)
{
nsIntRegion
invalid
;
bool
areaOverflowed
=
false
;
if
(
props
)
{
if
(
!
props
-
>
ComputeDifferences
(
layerManager
-
>
GetRoot
(
)
invalid
computeInvalidFunc
)
)
{
areaOverflowed
=
true
;
}
}
else
{
LayerProperties
:
:
ClearInvalidations
(
layerManager
-
>
GetRoot
(
)
)
;
}
if
(
props
&
&
!
areaOverflowed
)
{
if
(
!
invalid
.
IsEmpty
(
)
)
{
nsIntRect
bounds
=
invalid
.
GetBounds
(
)
;
nsRect
rect
(
presContext
-
>
DevPixelsToAppUnits
(
bounds
.
x
)
presContext
-
>
DevPixelsToAppUnits
(
bounds
.
y
)
presContext
-
>
DevPixelsToAppUnits
(
bounds
.
width
)
presContext
-
>
DevPixelsToAppUnits
(
bounds
.
height
)
)
;
if
(
shouldInvalidate
)
{
aViewToPaint
-
>
GetViewManager
(
)
-
>
InvalidateViewNoSuppression
(
aViewToPaint
rect
)
;
}
presContext
-
>
NotifyInvalidation
(
layerManager
-
>
GetLastTransactionId
(
)
bounds
)
;
}
}
else
if
(
shouldInvalidate
)
{
aViewToPaint
-
>
GetViewManager
(
)
-
>
InvalidateView
(
aViewToPaint
)
;
}
frame
-
>
UpdatePaintCountForPaintedPresShells
(
)
;
return
;
}
}
frame
-
>
RemoveStateBits
(
NS_FRAME_UPDATE_LAYER_TREE
)
;
}
if
(
frame
)
{
frame
-
>
ClearPresShellsFromLastPaint
(
)
;
}
nscolor
bgcolor
=
ComputeBackstopColor
(
aViewToPaint
)
;
PaintFrameFlags
flags
=
PaintFrameFlags
:
:
PAINT_WIDGET_LAYERS
|
PaintFrameFlags
:
:
PAINT_EXISTING_TRANSACTION
;
if
(
!
(
aFlags
&
PAINT_COMPOSITE
)
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_NO_COMPOSITE
;
}
if
(
aFlags
&
PAINT_SYNC_DECODE_IMAGES
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_SYNC_DECODE_IMAGES
;
}
if
(
mNextPaintCompressed
)
{
flags
|
=
PaintFrameFlags
:
:
PAINT_COMPRESSED
;
mNextPaintCompressed
=
false
;
}
if
(
frame
)
{
nsLayoutUtils
:
:
PaintFrame
(
nullptr
frame
aDirtyRegion
bgcolor
nsDisplayListBuilderMode
:
:
PAINTING
flags
)
;
return
;
}
if
(
layerManager
-
>
GetBackendType
(
)
=
=
layers
:
:
LayersBackend
:
:
LAYERS_WR
)
{
nsPresContext
*
pc
=
GetPresContext
(
)
;
LayoutDeviceRect
bounds
=
LayoutDeviceRect
:
:
FromAppUnits
(
pc
-
>
GetVisibleArea
(
)
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
bgcolor
=
NS_ComposeColors
(
bgcolor
mCanvasBackgroundColor
)
;
WebRenderBackgroundData
data
(
wr
:
:
ToLayoutRect
(
bounds
)
wr
:
:
ToColorF
(
ToDeviceColor
(
bgcolor
)
)
)
;
nsTArray
<
wr
:
:
WrFilterOp
>
wrFilters
;
MaybeSetupTransactionIdAllocator
(
layerManager
presContext
)
;
layerManager
-
>
AsWebRenderLayerManager
(
)
-
>
EndTransactionWithoutLayer
(
nullptr
nullptr
wrFilters
&
data
)
;
return
;
}
RefPtr
<
ColorLayer
>
root
=
layerManager
-
>
CreateColorLayer
(
)
;
if
(
root
)
{
nsPresContext
*
pc
=
GetPresContext
(
)
;
nsIntRect
bounds
=
pc
-
>
GetVisibleArea
(
)
.
ToOutsidePixels
(
pc
-
>
AppUnitsPerDevPixel
(
)
)
;
bgcolor
=
NS_ComposeColors
(
bgcolor
mCanvasBackgroundColor
)
;
root
-
>
SetColor
(
Color
:
:
FromABGR
(
bgcolor
)
)
;
root
-
>
SetVisibleRegion
(
LayerIntRegion
:
:
FromUnknownRegion
(
bounds
)
)
;
layerManager
-
>
SetRoot
(
root
)
;
}
MaybeSetupTransactionIdAllocator
(
layerManager
presContext
)
;
layerManager
-
>
EndTransaction
(
nullptr
nullptr
(
aFlags
&
PAINT_COMPOSITE
)
?
LayerManager
:
:
END_DEFAULT
:
LayerManager
:
:
END_NO_COMPOSITE
)
;
}
void
nsIPresShell
:
:
SetCapturingContent
(
nsIContent
*
aContent
uint8_t
aFlags
)
{
if
(
!
aContent
&
&
gCaptureInfo
.
mPointerLock
&
&
!
(
aFlags
&
CAPTURE_POINTERLOCK
)
)
{
return
;
}
gCaptureInfo
.
mContent
=
nullptr
;
if
(
(
aFlags
&
CAPTURE_IGNOREALLOWED
)
|
|
gCaptureInfo
.
mAllowed
|
|
(
aFlags
&
CAPTURE_POINTERLOCK
)
)
{
if
(
aContent
)
{
gCaptureInfo
.
mContent
=
aContent
;
}
gCaptureInfo
.
mRetargetToElement
=
(
(
aFlags
&
CAPTURE_RETARGETTOELEMENT
)
!
=
0
)
|
|
(
(
aFlags
&
CAPTURE_POINTERLOCK
)
!
=
0
)
;
gCaptureInfo
.
mPreventDrag
=
(
aFlags
&
CAPTURE_PREVENTDRAG
)
!
=
0
;
gCaptureInfo
.
mPointerLock
=
(
aFlags
&
CAPTURE_POINTERLOCK
)
!
=
0
;
}
}
nsIContent
*
nsIPresShell
:
:
GetCurrentEventContent
(
)
{
if
(
mCurrentEventContent
&
&
mCurrentEventContent
-
>
GetComposedDoc
(
)
!
=
mDocument
)
{
mCurrentEventContent
=
nullptr
;
mCurrentEventFrame
=
nullptr
;
}
return
mCurrentEventContent
;
}
nsIFrame
*
nsIPresShell
:
:
GetCurrentEventFrame
(
)
{
if
(
MOZ_UNLIKELY
(
mIsDestroying
)
)
{
return
nullptr
;
}
nsIContent
*
content
=
GetCurrentEventContent
(
)
;
if
(
!
mCurrentEventFrame
&
&
content
)
{
mCurrentEventFrame
=
content
-
>
GetPrimaryFrame
(
)
;
MOZ_ASSERT
(
!
mCurrentEventFrame
|
|
mCurrentEventFrame
-
>
PresContext
(
)
-
>
GetPresShell
(
)
=
=
this
)
;
}
return
mCurrentEventFrame
;
}
already_AddRefed
<
nsIContent
>
nsIPresShell
:
:
GetEventTargetContent
(
WidgetEvent
*
aEvent
)
{
nsCOMPtr
<
nsIContent
>
content
=
GetCurrentEventContent
(
)
;
if
(
!
content
)
{
nsIFrame
*
currentEventFrame
=
GetCurrentEventFrame
(
)
;
if
(
currentEventFrame
)
{
currentEventFrame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
content
)
)
;
NS_ASSERTION
(
!
content
|
|
content
-
>
GetComposedDoc
(
)
=
=
mDocument
"
handing
out
content
from
a
different
doc
"
)
;
}
}
return
content
.
forget
(
)
;
}
void
nsIPresShell
:
:
PushCurrentEventInfo
(
nsIFrame
*
aFrame
nsIContent
*
aContent
)
{
if
(
mCurrentEventFrame
|
|
mCurrentEventContent
)
{
mCurrentEventFrameStack
.
InsertElementAt
(
0
mCurrentEventFrame
)
;
mCurrentEventContentStack
.
InsertObjectAt
(
mCurrentEventContent
0
)
;
}
mCurrentEventFrame
=
aFrame
;
mCurrentEventContent
=
aContent
;
}
void
nsIPresShell
:
:
PopCurrentEventInfo
(
)
{
mCurrentEventFrame
=
nullptr
;
mCurrentEventContent
=
nullptr
;
if
(
0
!
=
mCurrentEventFrameStack
.
Length
(
)
)
{
mCurrentEventFrame
=
mCurrentEventFrameStack
.
ElementAt
(
0
)
;
mCurrentEventFrameStack
.
RemoveElementAt
(
0
)
;
mCurrentEventContent
=
mCurrentEventContentStack
.
ObjectAt
(
0
)
;
mCurrentEventContentStack
.
RemoveObjectAt
(
0
)
;
if
(
mCurrentEventContent
&
&
mCurrentEventContent
-
>
GetComposedDoc
(
)
!
=
mDocument
)
{
mCurrentEventContent
=
nullptr
;
mCurrentEventFrame
=
nullptr
;
}
}
}
bool
PresShell
:
:
InZombieDocument
(
nsIContent
*
aContent
)
{
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
return
!
doc
|
|
!
doc
-
>
GetWindow
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
PresShell
:
:
GetRootWindow
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
mDocument
-
>
GetWindow
(
)
;
if
(
window
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWindow
=
window
-
>
GetPrivateRoot
(
)
;
NS_ASSERTION
(
rootWindow
"
nsPIDOMWindow
:
:
GetPrivateRoot
(
)
returns
NULL
"
)
;
return
rootWindow
.
forget
(
)
;
}
nsCOMPtr
<
nsIPresShell
>
parent
=
GetParentPresShellForEventHandling
(
)
;
NS_ENSURE_TRUE
(
parent
nullptr
)
;
return
parent
-
>
GetRootWindow
(
)
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
PresShell
:
:
GetFocusedDOMWindowInOurWindow
(
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWindow
=
GetRootWindow
(
)
;
NS_ENSURE_TRUE
(
rootWindow
nullptr
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsFocusManager
:
:
GetFocusedDescendant
(
rootWindow
nsFocusManager
:
:
eIncludeAllDescendants
getter_AddRefs
(
focusedWindow
)
)
;
return
focusedWindow
.
forget
(
)
;
}
already_AddRefed
<
nsIContent
>
nsIPresShell
:
:
GetFocusedContentInOurWindow
(
)
const
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
&
&
mDocument
)
{
RefPtr
<
Element
>
focusedElement
;
fm
-
>
GetFocusedElementForWindow
(
mDocument
-
>
GetWindow
(
)
false
nullptr
getter_AddRefs
(
focusedElement
)
)
;
return
focusedElement
.
forget
(
)
;
}
return
nullptr
;
}
already_AddRefed
<
nsIPresShell
>
PresShell
:
:
GetParentPresShellForEventHandling
(
)
{
NS_ENSURE_TRUE
(
mPresContext
nullptr
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
treeItem
=
mPresContext
-
>
GetDocShell
(
)
;
if
(
!
treeItem
)
{
treeItem
=
mForwardingContainer
.
get
(
)
;
}
NS_ENSURE_TRUE
(
treeItem
nullptr
)
;
nsCOMPtr
<
nsIDocShellTreeItem
>
parentTreeItem
;
treeItem
-
>
GetParent
(
getter_AddRefs
(
parentTreeItem
)
)
;
nsCOMPtr
<
nsIDocShell
>
parentDocShell
=
do_QueryInterface
(
parentTreeItem
)
;
NS_ENSURE_TRUE
(
parentDocShell
&
&
treeItem
!
=
parentTreeItem
nullptr
)
;
nsCOMPtr
<
nsIPresShell
>
parentPresShell
=
parentDocShell
-
>
GetPresShell
(
)
;
return
parentPresShell
.
forget
(
)
;
}
nsresult
PresShell
:
:
RetargetEventToParent
(
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
nsCOMPtr
<
nsIPresShell
>
kungFuDeathGrip
(
this
)
;
nsCOMPtr
<
nsIPresShell
>
parentPresShell
=
GetParentPresShellForEventHandling
(
)
;
NS_ENSURE_TRUE
(
parentPresShell
NS_ERROR_FAILURE
)
;
return
parentPresShell
-
>
HandleEvent
(
parentPresShell
-
>
GetRootFrame
(
)
aEvent
true
aEventStatus
)
;
}
void
PresShell
:
:
DisableNonTestMouseEvents
(
bool
aDisable
)
{
sDisableNonTestMouseEvents
=
aDisable
;
}
void
PresShell
:
:
RecordMouseLocation
(
WidgetGUIEvent
*
aEvent
)
{
if
(
!
mPresContext
)
return
;
if
(
!
mPresContext
-
>
IsRoot
(
)
)
{
PresShell
*
rootPresShell
=
GetRootPresShell
(
)
;
if
(
rootPresShell
)
{
rootPresShell
-
>
RecordMouseLocation
(
aEvent
)
;
}
return
;
}
if
(
(
aEvent
-
>
mMessage
=
=
eMouseMove
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
mReason
=
=
WidgetMouseEvent
:
:
eReal
)
|
|
aEvent
-
>
mMessage
=
=
eMouseEnterIntoWidget
|
|
aEvent
-
>
mMessage
=
=
eMouseDown
|
|
aEvent
-
>
mMessage
=
=
eMouseUp
)
{
nsIFrame
*
rootFrame
=
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
mMouseLocation
=
nsLayoutUtils
:
:
TranslateWidgetToView
(
mPresContext
aEvent
-
>
mWidget
aEvent
-
>
mRefPoint
rootView
)
;
mMouseEventTargetGuid
=
InputAPZContext
:
:
GetTargetLayerGuid
(
)
;
}
else
{
mMouseLocation
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
rootFrame
)
;
mMouseEventTargetGuid
=
InputAPZContext
:
:
GetTargetLayerGuid
(
)
;
}
#
ifdef
DEBUG_MOUSE_LOCATION
if
(
aEvent
-
>
mMessage
=
=
eMouseEnterIntoWidget
)
{
printf
(
"
[
ps
=
%
p
]
got
mouse
enter
for
%
p
\
n
"
this
aEvent
-
>
mWidget
)
;
}
printf
(
"
[
ps
=
%
p
]
setting
mouse
location
to
(
%
d
%
d
)
\
n
"
this
mMouseLocation
.
x
mMouseLocation
.
y
)
;
#
endif
if
(
aEvent
-
>
mMessage
=
=
eMouseEnterIntoWidget
)
{
SynthesizeMouseMove
(
false
)
;
}
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseExitFromWidget
)
{
mMouseLocation
=
nsPoint
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
;
mMouseEventTargetGuid
=
InputAPZContext
:
:
GetTargetLayerGuid
(
)
;
#
ifdef
DEBUG_MOUSE_LOCATION
printf
(
"
[
ps
=
%
p
]
got
mouse
exit
for
%
p
\
n
"
this
aEvent
-
>
mWidget
)
;
printf
(
"
[
ps
=
%
p
]
clearing
mouse
location
\
n
"
this
)
;
#
endif
}
}
static
nsIFrame
*
GetNearestFrameContainingPresShell
(
nsIPresShell
*
aPresShell
)
{
nsView
*
view
=
aPresShell
-
>
GetViewManager
(
)
-
>
GetRootView
(
)
;
while
(
view
&
&
!
view
-
>
GetFrame
(
)
)
{
view
=
view
-
>
GetParent
(
)
;
}
nsIFrame
*
frame
=
nullptr
;
if
(
view
)
{
frame
=
view
-
>
GetFrame
(
)
;
}
return
frame
;
}
static
bool
FlushThrottledStyles
(
nsIDocument
*
aDocument
void
*
aData
)
{
nsIPresShell
*
shell
=
aDocument
-
>
GetShell
(
)
;
if
(
shell
&
&
shell
-
>
IsVisible
(
)
)
{
nsPresContext
*
presContext
=
shell
-
>
GetPresContext
(
)
;
if
(
presContext
)
{
presContext
-
>
RestyleManager
(
)
-
>
UpdateOnlyAnimationStyles
(
)
;
}
}
aDocument
-
>
EnumerateSubDocuments
(
FlushThrottledStyles
nullptr
)
;
return
true
;
}
bool
PresShell
:
:
CanDispatchEvent
(
const
WidgetGUIEvent
*
aEvent
)
const
{
bool
rv
=
mPresContext
&
&
!
mHaveShutDown
&
&
nsContentUtils
:
:
IsSafeToRunScript
(
)
;
if
(
aEvent
)
{
rv
&
=
(
aEvent
&
&
aEvent
-
>
mWidget
&
&
!
aEvent
-
>
mWidget
-
>
Destroyed
(
)
)
;
}
return
rv
;
}
PresShell
*
PresShell
:
:
GetShellForEventTarget
(
nsIFrame
*
aFrame
nsIContent
*
aContent
)
{
if
(
aFrame
)
{
return
static_cast
<
PresShell
*
>
(
aFrame
-
>
PresShell
(
)
)
;
}
if
(
aContent
)
{
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
return
static_cast
<
PresShell
*
>
(
doc
-
>
GetShell
(
)
)
;
}
return
nullptr
;
}
PresShell
*
PresShell
:
:
GetShellForTouchEvent
(
WidgetGUIEvent
*
aEvent
)
{
PresShell
*
shell
=
nullptr
;
switch
(
aEvent
-
>
mMessage
)
{
case
eTouchMove
:
case
eTouchCancel
:
case
eTouchEnd
:
{
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
for
(
dom
:
:
Touch
*
touch
:
touchEvent
-
>
mTouches
)
{
if
(
!
touch
)
{
break
;
}
RefPtr
<
dom
:
:
Touch
>
oldTouch
=
TouchManager
:
:
GetCapturedTouch
(
touch
-
>
Identifier
(
)
)
;
if
(
!
oldTouch
)
{
break
;
}
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
oldTouch
-
>
GetTarget
(
)
)
;
if
(
!
content
)
{
break
;
}
nsIFrame
*
contentFrame
=
content
-
>
GetPrimaryFrame
(
)
;
if
(
!
contentFrame
)
{
break
;
}
shell
=
static_cast
<
PresShell
*
>
(
contentFrame
-
>
PresContext
(
)
-
>
PresShell
(
)
)
;
if
(
shell
)
{
break
;
}
}
break
;
}
default
:
break
;
}
return
shell
;
}
nsresult
PresShell
:
:
HandleEvent
(
nsIFrame
*
aFrame
WidgetGUIEvent
*
aEvent
bool
aDontRetargetEvents
nsEventStatus
*
aEventStatus
)
{
#
ifdef
MOZ_TASK_TRACER
Maybe
<
AutoSourceEvent
>
taskTracerEvent
;
if
(
MOZ_UNLIKELY
(
IsStartLogging
(
)
)
)
{
SourceEventType
type
=
SourceEventType
:
:
Unknown
;
if
(
aEvent
-
>
AsTouchEvent
(
)
)
{
type
=
SourceEventType
:
:
Touch
;
}
else
if
(
aEvent
-
>
AsMouseEvent
(
)
)
{
type
=
SourceEventType
:
:
Mouse
;
}
else
if
(
aEvent
-
>
AsKeyboardEvent
(
)
)
{
type
=
SourceEventType
:
:
Key
;
}
taskTracerEvent
.
emplace
(
type
)
;
}
#
endif
NS_ASSERTION
(
aFrame
"
aFrame
should
be
not
null
"
)
;
if
(
mAPZFocusSequenceNumber
<
aEvent
-
>
mFocusSequenceNumber
)
{
mAPZFocusSequenceNumber
=
aEvent
-
>
mFocusSequenceNumber
;
}
if
(
mIsDestroying
|
|
(
sDisableNonTestMouseEvents
&
&
!
aEvent
-
>
mFlags
.
mIsSynthesizedForTests
&
&
aEvent
-
>
HasMouseEventMessage
(
)
)
)
{
return
NS_OK
;
}
RecordMouseLocation
(
aEvent
)
;
if
(
AccessibleCaretEnabled
(
mDocument
-
>
GetDocShell
(
)
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetFocusedDOMWindowInOurWindow
(
)
;
nsCOMPtr
<
nsIDocument
>
retargetEventDoc
=
window
?
window
-
>
GetExtantDoc
(
)
:
nullptr
;
nsCOMPtr
<
nsIPresShell
>
presShell
=
retargetEventDoc
?
retargetEventDoc
-
>
GetShell
(
)
:
nullptr
;
RefPtr
<
AccessibleCaretEventHub
>
eventHub
=
presShell
?
presShell
-
>
GetAccessibleCaretEventHub
(
)
:
nullptr
;
if
(
eventHub
&
&
*
aEventStatus
!
=
nsEventStatus_eConsumeNoDefault
)
{
*
aEventStatus
=
eventHub
-
>
HandleEvent
(
aEvent
)
;
if
(
*
aEventStatus
=
=
nsEventStatus_eConsumeNoDefault
)
{
aEvent
-
>
mFlags
.
mMultipleActionsPrevented
=
true
;
return
NS_OK
;
}
}
}
if
(
!
nsContentUtils
:
:
IsSafeToRunScript
(
)
&
&
aEvent
-
>
IsAllowedToDispatchDOMEvent
(
)
)
{
if
(
aEvent
-
>
mClass
=
=
eCompositionEventClass
)
{
IMEStateManager
:
:
OnCompositionEventDiscarded
(
aEvent
-
>
AsCompositionEvent
(
)
)
;
}
#
ifdef
DEBUG
if
(
aEvent
-
>
IsIMERelatedEvent
(
)
)
{
nsPrintfCString
warning
(
"
%
d
event
is
discarded
"
aEvent
-
>
mMessage
)
;
NS_WARNING
(
warning
.
get
(
)
)
;
}
#
endif
nsContentUtils
:
:
WarnScriptWasIgnored
(
GetDocument
(
)
)
;
return
NS_OK
;
}
nsIContent
*
capturingContent
=
(
(
aEvent
-
>
mClass
=
=
ePointerEventClass
|
|
aEvent
-
>
mClass
=
=
eWheelEventClass
|
|
aEvent
-
>
HasMouseEventMessage
(
)
)
?
GetCapturingContent
(
)
:
nullptr
)
;
nsCOMPtr
<
nsIDocument
>
retargetEventDoc
;
if
(
!
aDontRetargetEvents
)
{
if
(
aEvent
-
>
IsTargetedAtFocusedWindow
(
)
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
GetFocusedDOMWindowInOurWindow
(
)
;
if
(
!
window
)
{
return
NS_OK
;
}
retargetEventDoc
=
window
-
>
GetExtantDoc
(
)
;
if
(
!
retargetEventDoc
)
return
NS_OK
;
}
else
if
(
capturingContent
)
{
retargetEventDoc
=
capturingContent
-
>
GetComposedDoc
(
)
;
#
ifdef
ANDROID
}
else
if
(
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
|
|
(
aEvent
-
>
mClass
=
=
eMouseEventClass
)
|
|
(
aEvent
-
>
mClass
=
=
eWheelEventClass
)
)
{
retargetEventDoc
=
GetPrimaryContentDocument
(
)
;
#
endif
}
if
(
retargetEventDoc
)
{
nsCOMPtr
<
nsIPresShell
>
presShell
=
retargetEventDoc
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
if
(
!
aEvent
-
>
HasKeyEventMessage
(
)
)
{
return
NS_OK
;
}
while
(
!
presShell
)
{
retargetEventDoc
=
retargetEventDoc
-
>
GetParentDocument
(
)
;
if
(
!
retargetEventDoc
)
{
return
NS_OK
;
}
presShell
=
retargetEventDoc
-
>
GetShell
(
)
;
}
}
if
(
presShell
!
=
this
)
{
nsIFrame
*
frame
=
presShell
-
>
GetRootFrame
(
)
;
if
(
!
frame
)
{
if
(
aEvent
-
>
mMessage
=
=
eQueryTextContent
|
|
aEvent
-
>
IsContentCommandEvent
(
)
)
{
return
NS_OK
;
}
frame
=
GetNearestFrameContainingPresShell
(
presShell
)
;
}
if
(
!
frame
)
return
NS_OK
;
nsCOMPtr
<
nsIPresShell
>
shell
=
frame
-
>
PresContext
(
)
-
>
GetPresShell
(
)
;
return
shell
-
>
HandleEvent
(
frame
aEvent
true
aEventStatus
)
;
}
}
}
if
(
aEvent
-
>
mClass
=
=
eKeyboardEventClass
&
&
mDocument
&
&
mDocument
-
>
EventHandlingSuppressed
(
)
)
{
if
(
aEvent
-
>
mMessage
=
=
eKeyDown
)
{
mNoDelayedKeyEvents
=
true
;
}
else
if
(
!
mNoDelayedKeyEvents
)
{
DelayedEvent
*
event
=
new
DelayedKeyEvent
(
aEvent
-
>
AsKeyboardEvent
(
)
)
;
if
(
!
mDelayedEvents
.
AppendElement
(
event
)
)
{
delete
event
;
}
}
aEvent
-
>
mFlags
.
mIsSuppressedOrDelayed
=
true
;
return
NS_OK
;
}
nsIFrame
*
frame
=
aFrame
;
if
(
aEvent
-
>
IsUsingCoordinates
(
)
)
{
if
(
mDocument
)
{
if
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
{
nsIDocument
:
:
UnlockPointer
(
)
;
}
AutoWeakFrame
weakFrame
(
frame
)
;
{
nsAutoScriptBlocker
scriptBlocker
;
FlushThrottledStyles
(
GetRootPresShell
(
)
-
>
GetDocument
(
)
nullptr
)
;
}
if
(
!
weakFrame
.
IsAlive
(
)
)
{
frame
=
GetNearestFrameContainingPresShell
(
this
)
;
}
}
if
(
!
frame
)
{
NS_WARNING
(
"
Nothing
to
handle
this
event
!
"
)
;
return
NS_OK
;
}
nsPresContext
*
framePresContext
=
frame
-
>
PresContext
(
)
;
nsPresContext
*
rootPresContext
=
framePresContext
-
>
GetRootPresContext
(
)
;
NS_ASSERTION
(
rootPresContext
=
=
mPresContext
-
>
GetRootPresContext
(
)
"
How
did
we
end
up
outside
the
connected
prescontext
/
viewmanager
hierarchy
?
"
)
;
nsIFrame
*
popupFrame
=
nsLayoutUtils
:
:
GetPopupFrameForEventCoordinates
(
rootPresContext
aEvent
)
;
if
(
popupFrame
&
&
capturingContent
&
&
EventStateManager
:
:
IsRemoteTarget
(
capturingContent
)
)
{
capturingContent
=
nullptr
;
}
if
(
popupFrame
&
&
!
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
framePresContext
-
>
GetPresShell
(
)
-
>
GetDocument
(
)
popupFrame
-
>
GetContent
(
)
)
)
{
if
(
framePresContext
=
=
rootPresContext
&
&
frame
=
=
mFrameConstructor
-
>
GetRootFrame
(
)
)
{
frame
=
popupFrame
;
}
else
if
(
capturingContent
&
&
nsContentUtils
:
:
ContentIsDescendantOf
(
capturingContent
popupFrame
-
>
GetContent
(
)
)
)
{
frame
=
popupFrame
;
}
}
bool
captureRetarget
=
false
;
if
(
capturingContent
)
{
bool
vis
;
nsCOMPtr
<
nsIBaseWindow
>
baseWin
=
do_QueryInterface
(
mPresContext
-
>
GetContainerWeak
(
)
)
;
if
(
baseWin
&
&
NS_SUCCEEDED
(
baseWin
-
>
GetVisibility
(
&
vis
)
)
&
&
vis
)
{
captureRetarget
=
gCaptureInfo
.
mRetargetToElement
;
if
(
!
captureRetarget
)
{
NS_ASSERTION
(
capturingContent
-
>
GetComposedDoc
(
)
=
=
GetDocument
(
)
"
Unexpected
document
"
)
;
nsIFrame
*
captureFrame
=
capturingContent
-
>
GetPrimaryFrame
(
)
;
if
(
captureFrame
)
{
if
(
capturingContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
select
)
)
{
nsIFrame
*
childFrame
=
captureFrame
-
>
GetChildList
(
nsIFrame
:
:
kSelectPopupList
)
.
FirstChild
(
)
;
if
(
childFrame
)
{
captureFrame
=
childFrame
;
}
}
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
captureFrame
)
;
if
(
scrollFrame
)
{
frame
=
scrollFrame
-
>
GetScrolledFrame
(
)
;
}
}
}
}
else
{
ClearMouseCapture
(
nullptr
)
;
capturingContent
=
nullptr
;
}
}
{
AutoWeakFrame
frameKeeper
(
frame
)
;
PointerEventHandler
:
:
MaybeProcessPointerCapture
(
aEvent
)
;
if
(
!
frameKeeper
.
IsAlive
(
)
)
{
NS_WARNING
(
"
Nothing
to
handle
this
event
!
"
)
;
return
NS_OK
;
}
}
nsCOMPtr
<
nsIContent
>
pointerCapturingContent
=
PointerEventHandler
:
:
GetPointerCapturingContent
(
aEvent
)
;
if
(
pointerCapturingContent
)
{
frame
=
pointerCapturingContent
-
>
GetPrimaryFrame
(
)
;
if
(
!
frame
)
{
RefPtr
<
PresShell
>
shell
=
GetShellForEventTarget
(
nullptr
pointerCapturingContent
)
;
if
(
!
shell
)
{
PointerEventHandler
:
:
ReleaseIfCaptureByDescendant
(
pointerCapturingContent
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
overrideClickTarget
=
GetOverrideClickTarget
(
aEvent
aFrame
)
;
PointerEventHandler
:
:
DispatchPointerFromMouseOrTouch
(
shell
nullptr
pointerCapturingContent
aEvent
false
aEventStatus
nullptr
)
;
return
shell
-
>
HandleEventWithTarget
(
aEvent
nullptr
pointerCapturingContent
aEventStatus
true
nullptr
overrideClickTarget
)
;
}
}
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
bool
isWindowLevelMouseExit
=
(
aEvent
-
>
mMessage
=
=
eMouseExitFromWidget
)
&
&
(
mouseEvent
&
&
mouseEvent
-
>
mExitFrom
=
=
WidgetMouseEvent
:
:
eTopLevel
)
;
if
(
!
captureRetarget
&
&
!
isWindowLevelMouseExit
&
&
!
pointerCapturingContent
)
{
if
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
{
frame
=
TouchManager
:
:
SetupTarget
(
aEvent
-
>
AsTouchEvent
(
)
frame
)
;
}
else
{
uint32_t
flags
=
0
;
nsPoint
eventPoint
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
frame
)
;
if
(
mouseEvent
&
&
mouseEvent
-
>
mClass
=
=
eMouseEventClass
&
&
mouseEvent
-
>
mIgnoreRootScrollFrame
)
{
flags
|
=
INPUT_IGNORE_ROOT_SCROLL_FRAME
;
}
nsIFrame
*
target
=
FindFrameTargetedByInputEvent
(
aEvent
frame
eventPoint
flags
)
;
if
(
target
)
{
frame
=
target
;
}
}
}
if
(
capturingContent
&
&
!
pointerCapturingContent
&
&
(
gCaptureInfo
.
mRetargetToElement
|
|
!
frame
-
>
GetContent
(
)
|
|
!
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
frame
-
>
GetContent
(
)
capturingContent
)
)
)
{
NS_ASSERTION
(
capturingContent
-
>
GetComposedDoc
(
)
=
=
GetDocument
(
)
"
Unexpected
document
"
)
;
nsIFrame
*
capturingFrame
=
capturingContent
-
>
GetPrimaryFrame
(
)
;
if
(
capturingFrame
)
{
frame
=
capturingFrame
;
}
}
if
(
aEvent
-
>
mClass
=
=
eMouseEventClass
&
&
frame
-
>
PresContext
(
)
-
>
Document
(
)
-
>
EventHandlingSuppressed
(
)
)
{
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
mNoDelayedMouseEvents
=
true
;
}
else
if
(
!
mNoDelayedMouseEvents
&
&
(
aEvent
-
>
mMessage
=
=
eMouseUp
|
|
aEvent
-
>
mMessage
=
=
eContextMenu
)
)
{
DelayedEvent
*
event
=
new
DelayedMouseEvent
(
aEvent
-
>
AsMouseEvent
(
)
)
;
if
(
!
mDelayedEvents
.
AppendElement
(
event
)
)
{
delete
event
;
}
}
return
NS_OK
;
}
if
(
!
frame
)
{
NS_WARNING
(
"
Nothing
to
handle
this
event
!
"
)
;
return
NS_OK
;
}
RefPtr
<
PresShell
>
shell
=
static_cast
<
PresShell
*
>
(
frame
-
>
PresShell
(
)
)
;
if
(
EventStateManager
*
activeESM
=
EventStateManager
:
:
GetActiveEventStateManager
(
)
)
{
if
(
aEvent
-
>
mClass
=
=
ePointerEventClass
|
|
aEvent
-
>
HasMouseEventMessage
(
)
)
{
if
(
activeESM
!
=
shell
-
>
GetPresContext
(
)
-
>
EventStateManager
(
)
)
{
if
(
nsPresContext
*
activeContext
=
activeESM
-
>
GetPresContext
(
)
)
{
if
(
nsIPresShell
*
activeShell
=
activeContext
-
>
GetPresShell
(
)
)
{
if
(
nsContentUtils
:
:
ContentIsCrossDocDescendantOf
(
activeShell
-
>
GetDocument
(
)
shell
-
>
GetDocument
(
)
)
)
{
shell
=
static_cast
<
PresShell
*
>
(
activeShell
)
;
frame
=
shell
-
>
GetRootFrame
(
)
;
}
}
}
}
}
}
if
(
!
frame
)
{
NS_WARNING
(
"
Nothing
to
handle
this
event
!
"
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIContent
>
targetElement
;
frame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetElement
)
)
;
if
(
targetElement
)
{
while
(
targetElement
&
&
!
targetElement
-
>
IsElement
(
)
)
{
targetElement
=
targetElement
-
>
GetFlattenedTreeParent
(
)
;
}
if
(
!
targetElement
)
{
return
NS_OK
;
}
}
nsCOMPtr
<
nsIContent
>
overrideClickTarget
;
if
(
PointerEventHandler
:
:
IsPointerEventEnabled
(
)
)
{
nsIFrame
*
targetFrame
=
aEvent
-
>
mClass
=
=
eTouchEventClass
?
aFrame
:
frame
;
if
(
pointerCapturingContent
)
{
overrideClickTarget
=
GetOverrideClickTarget
(
aEvent
aFrame
)
;
shell
=
GetShellForEventTarget
(
nullptr
pointerCapturingContent
)
;
if
(
!
shell
)
{
PointerEventHandler
:
:
ReleaseIfCaptureByDescendant
(
pointerCapturingContent
)
;
return
NS_OK
;
}
targetFrame
=
pointerCapturingContent
-
>
GetPrimaryFrame
(
)
;
frame
=
targetFrame
;
}
AutoWeakFrame
weakTargetFrame
(
targetFrame
)
;
AutoWeakFrame
weakFrame
(
frame
)
;
nsCOMPtr
<
nsIContent
>
targetContent
;
PointerEventHandler
:
:
DispatchPointerFromMouseOrTouch
(
shell
targetFrame
targetElement
aEvent
aDontRetargetEvents
aEventStatus
getter_AddRefs
(
targetContent
)
)
;
if
(
!
weakTargetFrame
.
IsAlive
(
)
&
&
aEvent
-
>
mClass
=
=
eMouseEventClass
)
{
if
(
!
targetContent
)
{
return
NS_OK
;
}
frame
=
targetContent
-
>
GetPrimaryFrame
(
)
;
shell
=
GetShellForEventTarget
(
frame
targetContent
)
;
if
(
!
shell
)
{
return
NS_OK
;
}
}
else
if
(
!
weakFrame
.
IsAlive
(
)
)
{
return
NS_OK
;
}
}
if
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
{
if
(
aEvent
-
>
mMessage
=
=
eTouchStart
)
{
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
if
(
nsIFrame
*
newFrame
=
TouchManager
:
:
SuppressInvalidPointsAndGetTargetedFrame
(
touchEvent
)
)
{
frame
=
newFrame
;
frame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetElement
)
)
;
shell
=
static_cast
<
PresShell
*
>
(
frame
-
>
PresShell
(
)
)
;
}
}
else
if
(
PresShell
*
newShell
=
GetShellForTouchEvent
(
aEvent
)
)
{
shell
=
newShell
;
}
}
nsresult
rv
;
shell
-
>
PushCurrentEventInfo
(
frame
targetElement
)
;
rv
=
shell
-
>
HandleEventInternal
(
aEvent
aEventStatus
true
overrideClickTarget
)
;
#
ifdef
DEBUG
shell
-
>
ShowEventTargetDebug
(
)
;
#
endif
shell
-
>
PopCurrentEventInfo
(
)
;
return
rv
;
}
nsresult
rv
=
NS_OK
;
if
(
frame
)
{
PushCurrentEventInfo
(
nullptr
nullptr
)
;
if
(
aEvent
-
>
IsTargetedAtFocusedContent
(
)
)
{
mCurrentEventContent
=
nullptr
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
mDocument
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsCOMPtr
<
nsIContent
>
eventTarget
=
nsFocusManager
:
:
GetFocusedDescendant
(
window
nsFocusManager
:
:
eOnlyCurrentWindow
getter_AddRefs
(
focusedWindow
)
)
;
if
(
!
eventTarget
|
|
!
eventTarget
-
>
GetPrimaryFrame
(
)
)
{
eventTarget
=
mDocument
-
>
GetUnfocusedKeyEventTarget
(
)
;
}
if
(
aEvent
-
>
mMessage
=
=
eKeyDown
)
{
NS_IF_RELEASE
(
gKeyDownTarget
)
;
NS_IF_ADDREF
(
gKeyDownTarget
=
eventTarget
)
;
}
else
if
(
(
aEvent
-
>
mMessage
=
=
eKeyPress
|
|
aEvent
-
>
mMessage
=
=
eKeyUp
)
&
&
gKeyDownTarget
)
{
if
(
eventTarget
)
{
bool
keyDownIsChrome
=
nsContentUtils
:
:
IsChromeDoc
(
gKeyDownTarget
-
>
GetComposedDoc
(
)
)
;
if
(
keyDownIsChrome
!
=
nsContentUtils
:
:
IsChromeDoc
(
eventTarget
-
>
GetComposedDoc
(
)
)
|
|
(
keyDownIsChrome
&
&
TabParent
:
:
GetFrom
(
eventTarget
)
)
)
{
eventTarget
=
gKeyDownTarget
;
}
}
if
(
aEvent
-
>
mMessage
=
=
eKeyUp
)
{
NS_RELEASE
(
gKeyDownTarget
)
;
}
}
mCurrentEventFrame
=
nullptr
;
nsIDocument
*
targetDoc
=
eventTarget
?
eventTarget
-
>
OwnerDoc
(
)
:
nullptr
;
if
(
targetDoc
&
&
targetDoc
!
=
mDocument
)
{
PopCurrentEventInfo
(
)
;
nsCOMPtr
<
nsIPresShell
>
shell
=
targetDoc
-
>
GetShell
(
)
;
if
(
shell
)
{
rv
=
static_cast
<
PresShell
*
>
(
shell
.
get
(
)
)
-
>
HandleRetargetedEvent
(
aEvent
aEventStatus
eventTarget
)
;
}
return
rv
;
}
else
{
mCurrentEventContent
=
eventTarget
;
}
if
(
!
GetCurrentEventContent
(
)
|
|
!
GetCurrentEventFrame
(
)
|
|
InZombieDocument
(
mCurrentEventContent
)
)
{
rv
=
RetargetEventToParent
(
aEvent
aEventStatus
)
;
PopCurrentEventInfo
(
)
;
return
rv
;
}
}
else
{
mCurrentEventFrame
=
frame
;
}
if
(
GetCurrentEventFrame
(
)
)
{
rv
=
HandleEventInternal
(
aEvent
aEventStatus
true
)
;
}
#
ifdef
DEBUG
ShowEventTargetDebug
(
)
;
#
endif
PopCurrentEventInfo
(
)
;
}
else
{
if
(
!
NS_EVENT_NEEDS_FRAME
(
aEvent
)
)
{
mCurrentEventFrame
=
nullptr
;
return
HandleEventInternal
(
aEvent
aEventStatus
true
)
;
}
else
if
(
aEvent
-
>
HasKeyEventMessage
(
)
)
{
return
RetargetEventToParent
(
aEvent
aEventStatus
)
;
}
}
return
rv
;
}
nsIDocument
*
PresShell
:
:
GetPrimaryContentDocument
(
)
{
nsPresContext
*
context
=
GetPresContext
(
)
;
if
(
!
context
|
|
!
context
-
>
IsRoot
(
)
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
shellAsTreeItem
=
context
-
>
GetDocShell
(
)
;
if
(
!
shellAsTreeItem
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeOwner
>
owner
;
shellAsTreeItem
-
>
GetTreeOwner
(
getter_AddRefs
(
owner
)
)
;
if
(
!
owner
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
item
;
owner
-
>
GetPrimaryContentShell
(
getter_AddRefs
(
item
)
)
;
nsCOMPtr
<
nsIDocShell
>
childDocShell
=
do_QueryInterface
(
item
)
;
if
(
!
childDocShell
)
{
return
nullptr
;
}
return
childDocShell
-
>
GetDocument
(
)
;
}
#
ifdef
DEBUG
void
PresShell
:
:
ShowEventTargetDebug
(
)
{
if
(
nsFrame
:
:
GetShowEventTargetFrameBorder
(
)
&
&
GetCurrentEventFrame
(
)
)
{
if
(
mDrawEventTargetFrame
)
{
mDrawEventTargetFrame
-
>
InvalidateFrame
(
)
;
}
mDrawEventTargetFrame
=
mCurrentEventFrame
;
mDrawEventTargetFrame
-
>
InvalidateFrame
(
)
;
}
}
#
endif
nsresult
PresShell
:
:
HandleEventWithTarget
(
WidgetEvent
*
aEvent
nsIFrame
*
aFrame
nsIContent
*
aContent
nsEventStatus
*
aStatus
bool
aIsHandlingNativeEvent
nsIContent
*
*
aTargetContent
nsIContent
*
aOverrideClickTarget
)
{
#
if
DEBUG
MOZ_ASSERT
(
!
aFrame
|
|
aFrame
-
>
PresContext
(
)
-
>
GetPresShell
(
)
=
=
this
"
wrong
shell
"
)
;
if
(
aContent
)
{
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
NS_ASSERTION
(
doc
"
event
for
content
that
isn
'
t
in
a
document
"
)
;
}
#
endif
NS_ENSURE_STATE
(
!
aContent
|
|
aContent
-
>
GetComposedDoc
(
)
=
=
mDocument
)
;
AutoPointerEventTargetUpdater
updater
(
this
aEvent
aFrame
aTargetContent
)
;
PushCurrentEventInfo
(
aFrame
aContent
)
;
nsresult
rv
=
HandleEventInternal
(
aEvent
aStatus
false
aOverrideClickTarget
)
;
PopCurrentEventInfo
(
)
;
return
rv
;
}
nsresult
PresShell
:
:
HandleEventInternal
(
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
bool
aIsHandlingNativeEvent
nsIContent
*
aOverrideClickTarget
)
{
RefPtr
<
EventStateManager
>
manager
=
mPresContext
-
>
EventStateManager
(
)
;
nsresult
rv
=
NS_OK
;
if
(
!
NS_EVENT_NEEDS_FRAME
(
aEvent
)
|
|
GetCurrentEventFrame
(
)
|
|
GetCurrentEventContent
(
)
)
{
bool
touchIsNew
=
false
;
bool
isHandlingUserInput
=
false
;
if
(
mCurrentEventContent
&
&
aEvent
-
>
IsTargetedAtFocusedWindow
(
)
)
{
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
fm
-
>
FlushBeforeEventHandlingIfNeeded
(
mCurrentEventContent
)
;
}
}
if
(
aEvent
-
>
IsTrusted
(
)
)
{
if
(
aEvent
-
>
IsUserAction
(
)
)
{
mHasHandledUserInput
=
true
;
}
switch
(
aEvent
-
>
mMessage
)
{
case
eKeyPress
:
case
eKeyDown
:
case
eKeyUp
:
{
nsIDocument
*
doc
=
GetCurrentEventContent
(
)
?
mCurrentEventContent
-
>
OwnerDoc
(
)
:
nullptr
;
auto
keyCode
=
aEvent
-
>
AsKeyboardEvent
(
)
-
>
mKeyCode
;
if
(
keyCode
=
=
NS_VK_ESCAPE
)
{
nsIDocument
*
root
=
nsContentUtils
:
:
GetRootDocument
(
doc
)
;
if
(
root
&
&
root
-
>
GetFullscreenElement
(
)
)
{
aEvent
-
>
PreventDefaultBeforeDispatch
(
CrossProcessForwarding
:
:
eStop
)
;
aEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
if
(
!
mIsLastChromeOnlyEscapeKeyConsumed
&
&
aEvent
-
>
mMessage
=
=
eKeyUp
)
{
nsIDocument
:
:
AsyncExitFullscreen
(
nullptr
)
;
}
}
nsCOMPtr
<
nsIDocument
>
pointerLockedDoc
=
do_QueryReferent
(
EventStateManager
:
:
sPointerLockedDoc
)
;
if
(
!
mIsLastChromeOnlyEscapeKeyConsumed
&
&
pointerLockedDoc
)
{
aEvent
-
>
PreventDefaultBeforeDispatch
(
CrossProcessForwarding
:
:
eStop
)
;
aEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
if
(
aEvent
-
>
mMessage
=
=
eKeyUp
)
{
nsIDocument
:
:
UnlockPointer
(
)
;
}
}
}
if
(
keyCode
!
=
NS_VK_ESCAPE
&
&
keyCode
!
=
NS_VK_SHIFT
&
&
keyCode
!
=
NS_VK_CONTROL
&
&
keyCode
!
=
NS_VK_ALT
&
&
keyCode
!
=
NS_VK_WIN
&
&
keyCode
!
=
NS_VK_META
)
{
isHandlingUserInput
=
true
;
mPresContext
-
>
RecordInteractionTime
(
nsPresContext
:
:
InteractionType
:
:
eKeyInteraction
aEvent
-
>
mTimeStamp
)
;
}
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_QUEUED_KEYBOARD_MS
aEvent
-
>
mTimeStamp
)
;
break
;
}
case
eMouseDown
:
case
eMouseUp
:
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_QUEUED_CLICK_MS
aEvent
-
>
mTimeStamp
)
;
MOZ_FALLTHROUGH
;
case
ePointerDown
:
case
ePointerUp
:
isHandlingUserInput
=
true
;
mPresContext
-
>
RecordInteractionTime
(
nsPresContext
:
:
InteractionType
:
:
eClickInteraction
aEvent
-
>
mTimeStamp
)
;
break
;
case
eMouseMove
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_QUEUED_APZ_MOUSE_MOVE_MS
aEvent
-
>
mTimeStamp
)
;
}
break
;
case
eDrop
:
{
nsCOMPtr
<
nsIDragSession
>
session
=
nsContentUtils
:
:
GetDragSession
(
)
;
if
(
session
)
{
bool
onlyChromeDrop
=
false
;
session
-
>
GetOnlyChromeDrop
(
&
onlyChromeDrop
)
;
if
(
onlyChromeDrop
)
{
aEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
}
}
break
;
}
case
eWheel
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_QUEUED_APZ_WHEEL_MS
aEvent
-
>
mTimeStamp
)
;
}
break
;
case
eTouchMove
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_QUEUED_APZ_TOUCH_MOVE_MS
aEvent
-
>
mTimeStamp
)
;
}
break
;
default
:
break
;
}
if
(
!
mTouchManager
.
PreHandleEvent
(
aEvent
aStatus
touchIsNew
isHandlingUserInput
mCurrentEventContent
)
)
{
return
NS_OK
;
}
}
if
(
aEvent
-
>
mMessage
=
=
eContextMenu
)
{
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
-
>
IsContextMenuKeyEvent
(
)
&
&
!
AdjustContextMenuKeyEvent
(
mouseEvent
)
)
{
return
NS_OK
;
}
if
(
mouseEvent
-
>
IsShift
(
)
)
{
aEvent
-
>
mFlags
.
mOnlyChromeDispatch
=
true
;
aEvent
-
>
mFlags
.
mRetargetToNonNativeAnonymous
=
true
;
}
}
AutoHandlingUserInputStatePusher
userInpStatePusher
(
isHandlingUserInput
aEvent
mDocument
)
;
if
(
aEvent
-
>
IsTrusted
(
)
&
&
aEvent
-
>
mMessage
=
=
eMouseMove
)
{
nsIPresShell
:
:
AllowMouseCapture
(
EventStateManager
:
:
GetActiveEventStateManager
(
)
=
=
manager
)
;
mPresContext
-
>
RecordInteractionTime
(
nsPresContext
:
:
InteractionType
:
:
eMouseMoveInteraction
aEvent
-
>
mTimeStamp
)
;
}
nsAutoPopupStatePusher
popupStatePusher
(
Event
:
:
GetEventPopupControlState
(
aEvent
)
)
;
aEvent
-
>
mTarget
=
nullptr
;
TimeStamp
handlerStartTime
=
TimeStamp
:
:
Now
(
)
;
rv
=
manager
-
>
PreHandleEvent
(
mPresContext
aEvent
mCurrentEventFrame
mCurrentEventContent
aStatus
aOverrideClickTarget
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
bool
wasHandlingKeyBoardEvent
=
nsContentUtils
:
:
IsHandlingKeyBoardEvent
(
)
;
if
(
aEvent
-
>
mClass
=
=
eKeyboardEventClass
)
{
nsContentUtils
:
:
SetIsHandlingKeyBoardEvent
(
true
)
;
}
if
(
aEvent
-
>
IsAllowedToDispatchDOMEvent
(
)
&
&
!
(
aEvent
-
>
PropagationStopped
(
)
&
&
aEvent
-
>
IsWaitingReplyFromRemoteProcess
(
)
)
)
{
MOZ_ASSERT
(
nsContentUtils
:
:
IsSafeToRunScript
(
)
"
Somebody
changed
aEvent
to
cause
a
DOM
event
!
"
)
;
nsPresShellEventCB
eventCB
(
this
)
;
if
(
nsIFrame
*
target
=
GetCurrentEventFrame
(
)
)
{
if
(
target
-
>
OnlySystemGroupDispatch
(
aEvent
-
>
mMessage
)
)
{
aEvent
-
>
StopPropagation
(
)
;
}
}
if
(
aEvent
-
>
mClass
=
=
eTouchEventClass
)
{
DispatchTouchEventToDOM
(
aEvent
aStatus
&
eventCB
touchIsNew
)
;
}
else
{
DispatchEventToDOM
(
aEvent
aStatus
&
eventCB
)
;
}
}
nsContentUtils
:
:
SetIsHandlingKeyBoardEvent
(
wasHandlingKeyBoardEvent
)
;
if
(
aEvent
-
>
mMessage
=
=
ePointerUp
|
|
aEvent
-
>
mMessage
=
=
ePointerCancel
)
{
WidgetPointerEvent
*
pointerEvent
=
aEvent
-
>
AsPointerEvent
(
)
;
MOZ_ASSERT
(
pointerEvent
)
;
PointerEventHandler
:
:
ReleasePointerCaptureById
(
pointerEvent
-
>
pointerId
)
;
PointerEventHandler
:
:
CheckPointerCaptureState
(
pointerEvent
)
;
}
if
(
!
mIsDestroying
&
&
NS_SUCCEEDED
(
rv
)
)
{
rv
=
manager
-
>
PostHandleEvent
(
mPresContext
aEvent
GetCurrentEventFrame
(
)
aStatus
aOverrideClickTarget
)
;
}
}
if
(
!
mIsDestroying
&
&
aIsHandlingNativeEvent
)
{
manager
-
>
TryToFlushPendingNotificationsToIME
(
)
;
}
switch
(
aEvent
-
>
mMessage
)
{
case
eKeyPress
:
case
eKeyDown
:
case
eKeyUp
:
{
if
(
aEvent
-
>
AsKeyboardEvent
(
)
-
>
mKeyCode
=
=
NS_VK_ESCAPE
)
{
if
(
aEvent
-
>
mMessage
=
=
eKeyUp
)
{
mIsLastChromeOnlyEscapeKeyConsumed
=
false
;
}
else
{
if
(
aEvent
-
>
mFlags
.
mOnlyChromeDispatch
&
&
aEvent
-
>
mFlags
.
mDefaultPreventedByChrome
)
{
mIsLastChromeOnlyEscapeKeyConsumed
=
true
;
}
}
}
if
(
aEvent
-
>
mMessage
=
=
eKeyDown
)
{
mIsLastKeyDownCanceled
=
aEvent
-
>
mFlags
.
mDefaultPrevented
;
}
break
;
}
case
eMouseUp
:
SetCapturingContent
(
nullptr
0
)
;
break
;
case
eMouseMove
:
nsIPresShell
:
:
AllowMouseCapture
(
false
)
;
break
;
case
eDrag
:
case
eDragEnd
:
case
eDragEnter
:
case
eDragExit
:
case
eDragLeave
:
case
eDragOver
:
case
eDrop
:
{
DataTransfer
*
dataTransfer
=
aEvent
-
>
AsDragEvent
(
)
-
>
mDataTransfer
;
if
(
dataTransfer
)
{
dataTransfer
-
>
Disconnect
(
)
;
}
break
;
}
default
:
break
;
}
if
(
aEvent
-
>
IsTrusted
(
)
&
&
aEvent
-
>
mTimeStamp
>
mLastOSWake
)
{
switch
(
aEvent
-
>
mMessage
)
{
case
eKeyPress
:
case
eKeyDown
:
case
eKeyUp
:
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_KEYBOARD_MS
handlerStartTime
)
;
break
;
case
eMouseDown
:
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_MOUSE_DOWN_MS
handlerStartTime
)
;
break
;
case
eMouseUp
:
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_MOUSE_UP_MS
handlerStartTime
)
;
break
;
case
eMouseMove
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_APZ_MOUSE_MOVE_MS
handlerStartTime
)
;
}
break
;
case
eWheel
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_APZ_WHEEL_MS
handlerStartTime
)
;
}
break
;
case
eTouchMove
:
if
(
aEvent
-
>
mFlags
.
mHandledByAPZ
)
{
Telemetry
:
:
AccumulateTimeDelta
(
Telemetry
:
:
INPUT_EVENT_HANDLED_APZ_TOUCH_MOVE_MS
handlerStartTime
)
;
}
break
;
default
:
break
;
}
}
}
if
(
Telemetry
:
:
CanRecordBase
(
)
&
&
!
aEvent
-
>
mTimeStamp
.
IsNull
(
)
&
&
aEvent
-
>
mTimeStamp
>
mLastOSWake
&
&
aEvent
-
>
AsInputEvent
(
)
)
{
TimeStamp
now
=
TimeStamp
:
:
Now
(
)
;
double
millis
=
(
now
-
aEvent
-
>
mTimeStamp
)
.
ToMilliseconds
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INPUT_EVENT_RESPONSE_MS
millis
)
;
if
(
mDocument
&
&
mDocument
-
>
GetReadyStateEnum
(
)
!
=
nsIDocument
:
:
READYSTATE_COMPLETE
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
LOAD_INPUT_EVENT_RESPONSE_MS
millis
)
;
}
if
(
!
sLastInputProcessed
|
|
sLastInputProcessed
<
aEvent
-
>
mTimeStamp
)
{
if
(
sLastInputProcessed
)
{
double
lastMillis
=
(
sLastInputProcessed
-
sLastInputCreated
)
.
ToMilliseconds
(
)
;
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INPUT_EVENT_RESPONSE_COALESCED_MS
lastMillis
)
;
if
(
MOZ_UNLIKELY
(
!
sProcessInteractable
)
)
{
if
(
XRE_IsContentProcess
(
)
&
&
mDocument
&
&
mDocument
-
>
IsTopLevelContentDocument
(
)
)
{
switch
(
mDocument
-
>
GetReadyStateEnum
(
)
)
{
case
nsIDocument
:
:
READYSTATE_INTERACTIVE
:
case
nsIDocument
:
:
READYSTATE_COMPLETE
:
sProcessInteractable
=
true
;
break
;
default
:
break
;
}
}
}
if
(
MOZ_LIKELY
(
sProcessInteractable
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INPUT_EVENT_RESPONSE_POST_STARTUP_MS
lastMillis
)
;
}
else
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
INPUT_EVENT_RESPONSE_STARTUP_MS
lastMillis
)
;
}
}
sLastInputCreated
=
aEvent
-
>
mTimeStamp
;
}
else
if
(
aEvent
-
>
mTimeStamp
<
sLastInputCreated
)
{
sLastInputCreated
=
aEvent
-
>
mTimeStamp
;
}
sLastInputProcessed
=
now
;
}
return
rv
;
}
#
ifdef
NIGHTLY_BUILD
static
already_AddRefed
<
nsIURI
>
GetDocumentURIToCompareWithBlacklist
(
PresShell
&
aPresShell
)
{
nsPresContext
*
presContext
=
aPresShell
.
GetPresContext
(
)
;
if
(
NS_WARN_IF
(
!
presContext
)
)
{
return
nullptr
;
}
for
(
nsIDocument
*
document
=
presContext
-
>
Document
(
)
;
document
&
&
document
-
>
IsContentDocument
(
)
;
document
=
document
-
>
GetParentDocument
(
)
)
{
nsIPrincipal
*
principal
=
document
-
>
NodePrincipal
(
)
;
if
(
principal
-
>
GetIsNullPrincipal
(
)
)
{
continue
;
}
nsCOMPtr
<
nsIURI
>
uri
;
principal
-
>
GetURI
(
getter_AddRefs
(
uri
)
)
;
return
uri
.
forget
(
)
;
}
return
nullptr
;
}
static
bool
DispatchKeyPressEventsEvenForNonPrintableKeys
(
nsIURI
*
aURI
)
{
if
(
!
aURI
)
{
return
false
;
}
nsAutoCString
scheme
;
aURI
-
>
GetScheme
(
scheme
)
;
if
(
!
scheme
.
EqualsLiteral
(
"
http
"
)
&
&
!
scheme
.
EqualsLiteral
(
"
https
"
)
)
{
return
false
;
}
nsAutoCString
host
;
aURI
-
>
GetHost
(
host
)
;
if
(
host
.
IsEmpty
(
)
)
{
return
false
;
}
static
const
char
*
kPrefNameOfBlackList
=
"
dom
.
keyboardevent
.
keypress
.
hack
.
dispatch_non_printable_keys
"
;
nsAutoCString
blackList
;
Preferences
:
:
GetCString
(
kPrefNameOfBlackList
blackList
)
;
if
(
blackList
.
IsEmpty
(
)
)
{
return
false
;
}
for
(
;
;
)
{
int32_t
index
=
blackList
.
Find
(
host
false
)
;
if
(
index
>
=
0
&
&
static_cast
<
uint32_t
>
(
index
)
+
host
.
Length
(
)
<
=
blackList
.
Length
(
)
&
&
(
!
index
|
|
blackList
[
index
-
1
]
=
=
'
'
)
)
{
size_t
indexAfterHost
=
index
+
host
.
Length
(
)
;
if
(
indexAfterHost
=
=
blackList
.
Length
(
)
|
|
blackList
[
indexAfterHost
]
=
=
'
'
)
{
return
true
;
}
if
(
blackList
[
indexAfterHost
]
=
=
'
/
'
)
{
int32_t
endOfPath
=
blackList
.
Find
(
"
"
false
indexAfterHost
)
;
nsDependentCSubstring
:
:
size_type
length
=
endOfPath
<
0
?
static_cast
<
nsDependentCSubstring
:
:
size_type
>
(
-
1
)
:
endOfPath
-
indexAfterHost
;
nsDependentCSubstring
pathInBlackList
(
blackList
indexAfterHost
length
)
;
nsAutoCString
filePath
;
aURI
-
>
GetFilePath
(
filePath
)
;
if
(
StringBeginsWith
(
filePath
pathInBlackList
)
)
{
return
true
;
}
}
}
int32_t
startIndexOfCurrentLevel
=
host
[
0
]
=
=
'
*
'
?
1
:
0
;
int32_t
startIndexOfNextLevel
=
host
.
Find
(
"
.
"
false
startIndexOfCurrentLevel
+
1
)
;
if
(
startIndexOfNextLevel
<
=
0
)
{
return
false
;
}
host
=
NS_LITERAL_CSTRING
(
"
*
"
)
+
nsDependentCSubstring
(
host
startIndexOfNextLevel
)
;
}
}
#
endif
nsresult
PresShell
:
:
DispatchEventToDOM
(
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
nsPresShellEventCB
*
aEventCB
)
{
nsresult
rv
=
NS_OK
;
nsCOMPtr
<
nsINode
>
eventTarget
=
mCurrentEventContent
.
get
(
)
;
nsPresShellEventCB
*
eventCBPtr
=
aEventCB
;
if
(
!
eventTarget
)
{
nsCOMPtr
<
nsIContent
>
targetContent
;
if
(
mCurrentEventFrame
)
{
rv
=
mCurrentEventFrame
-
>
GetContentForEvent
(
aEvent
getter_AddRefs
(
targetContent
)
)
;
}
if
(
NS_SUCCEEDED
(
rv
)
&
&
targetContent
)
{
eventTarget
=
targetContent
;
}
else
if
(
mDocument
)
{
eventTarget
=
mDocument
;
eventCBPtr
=
nullptr
;
}
}
if
(
eventTarget
)
{
if
(
aEvent
-
>
IsBlockedForFingerprintingResistance
(
)
)
{
aEvent
-
>
mFlags
.
mOnlySystemGroupDispatchInContent
=
true
;
#
ifdef
NIGHTLY_BUILD
}
else
if
(
aEvent
-
>
mMessage
=
=
eKeyPress
&
&
aEvent
-
>
mFlags
.
mOnlySystemGroupDispatchInContent
)
{
if
(
!
mInitializedForceDispatchKeyPressEventsForNonPrintableKeys
)
{
mInitializedForceDispatchKeyPressEventsForNonPrintableKeys
=
true
;
nsCOMPtr
<
nsIURI
>
uri
=
GetDocumentURIToCompareWithBlacklist
(
*
this
)
;
mForceDispatchKeyPressEventsForNonPrintableKeys
=
DispatchKeyPressEventsEvenForNonPrintableKeys
(
uri
)
;
}
if
(
mForceDispatchKeyPressEventsForNonPrintableKeys
)
{
aEvent
-
>
mFlags
.
mOnlySystemGroupDispatchInContent
=
false
;
}
#
endif
}
if
(
aEvent
-
>
mClass
=
=
eCompositionEventClass
)
{
IMEStateManager
:
:
DispatchCompositionEvent
(
eventTarget
mPresContext
aEvent
-
>
AsCompositionEvent
(
)
aStatus
eventCBPtr
)
;
}
else
{
EventDispatcher
:
:
Dispatch
(
eventTarget
mPresContext
aEvent
nullptr
aStatus
eventCBPtr
)
;
}
}
return
rv
;
}
void
PresShell
:
:
DispatchTouchEventToDOM
(
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
nsPresShellEventCB
*
aEventCB
bool
aTouchIsNew
)
{
bool
canPrevent
=
(
aEvent
-
>
mMessage
=
=
eTouchStart
)
|
|
(
aEvent
-
>
mMessage
=
=
eTouchMove
&
&
aTouchIsNew
)
|
|
(
aEvent
-
>
mMessage
=
=
eTouchEnd
)
;
bool
preventDefault
=
false
;
nsEventStatus
tmpStatus
=
nsEventStatus_eIgnore
;
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
for
(
dom
:
:
Touch
*
touch
:
touchEvent
-
>
mTouches
)
{
MOZ_ASSERT
(
!
touch
-
>
mIsTouchEventSuppressed
)
;
if
(
!
touch
|
|
!
touch
-
>
mChanged
)
{
continue
;
}
nsCOMPtr
<
EventTarget
>
targetPtr
=
touch
-
>
mTarget
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
targetPtr
)
;
if
(
!
content
)
{
continue
;
}
nsIDocument
*
doc
=
content
-
>
OwnerDoc
(
)
;
nsIContent
*
capturingContent
=
GetCapturingContent
(
)
;
if
(
capturingContent
)
{
if
(
capturingContent
-
>
OwnerDoc
(
)
!
=
doc
)
{
continue
;
}
content
=
capturingContent
;
}
WidgetTouchEvent
newEvent
(
touchEvent
-
>
IsTrusted
(
)
touchEvent
-
>
mMessage
touchEvent
-
>
mWidget
)
;
newEvent
.
AssignTouchEventData
(
*
touchEvent
false
)
;
newEvent
.
mTarget
=
targetPtr
;
newEvent
.
mFlags
.
mHandledByAPZ
=
touchEvent
-
>
mFlags
.
mHandledByAPZ
;
RefPtr
<
PresShell
>
contentPresShell
;
if
(
doc
=
=
mDocument
)
{
contentPresShell
=
static_cast
<
PresShell
*
>
(
doc
-
>
GetShell
(
)
)
;
if
(
contentPresShell
)
{
contentPresShell
-
>
PushCurrentEventInfo
(
content
-
>
GetPrimaryFrame
(
)
content
)
;
}
}
nsPresContext
*
context
=
doc
-
>
GetPresContext
(
)
;
if
(
!
context
)
{
continue
;
}
tmpStatus
=
nsEventStatus_eIgnore
;
EventDispatcher
:
:
Dispatch
(
targetPtr
context
&
newEvent
nullptr
&
tmpStatus
aEventCB
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
tmpStatus
|
|
newEvent
.
mFlags
.
mMultipleActionsPrevented
)
{
preventDefault
=
true
;
}
if
(
newEvent
.
mFlags
.
mMultipleActionsPrevented
)
{
touchEvent
-
>
mFlags
.
mMultipleActionsPrevented
=
true
;
}
if
(
contentPresShell
)
{
contentPresShell
-
>
PopCurrentEventInfo
(
)
;
}
}
if
(
preventDefault
&
&
canPrevent
)
{
*
aStatus
=
nsEventStatus_eConsumeNoDefault
;
}
else
{
*
aStatus
=
nsEventStatus_eIgnore
;
}
}
nsresult
PresShell
:
:
HandleDOMEventWithTarget
(
nsIContent
*
aTargetContent
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
)
{
nsresult
rv
=
NS_OK
;
PushCurrentEventInfo
(
nullptr
aTargetContent
)
;
nsCOMPtr
<
nsISupports
>
container
=
mPresContext
-
>
GetContainerWeak
(
)
;
if
(
container
)
{
rv
=
EventDispatcher
:
:
Dispatch
(
aTargetContent
mPresContext
aEvent
nullptr
aStatus
)
;
}
PopCurrentEventInfo
(
)
;
return
rv
;
}
nsresult
PresShell
:
:
HandleDOMEventWithTarget
(
nsIContent
*
aTargetContent
Event
*
aEvent
nsEventStatus
*
aStatus
)
{
nsresult
rv
=
NS_OK
;
PushCurrentEventInfo
(
nullptr
aTargetContent
)
;
nsCOMPtr
<
nsISupports
>
container
=
mPresContext
-
>
GetContainerWeak
(
)
;
if
(
container
)
{
rv
=
EventDispatcher
:
:
DispatchDOMEvent
(
aTargetContent
nullptr
aEvent
mPresContext
aStatus
)
;
}
PopCurrentEventInfo
(
)
;
return
rv
;
}
bool
PresShell
:
:
AdjustContextMenuKeyEvent
(
WidgetMouseEvent
*
aEvent
)
{
#
ifdef
MOZ_XUL
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsIFrame
*
popupFrame
=
pm
-
>
GetTopPopup
(
ePopupTypeMenu
)
;
if
(
popupFrame
)
{
nsIFrame
*
itemFrame
=
(
static_cast
<
nsMenuPopupFrame
*
>
(
popupFrame
)
)
-
>
GetCurrentMenuItem
(
)
;
if
(
!
itemFrame
)
itemFrame
=
popupFrame
;
nsCOMPtr
<
nsIWidget
>
widget
=
popupFrame
-
>
GetNearestWidget
(
)
;
aEvent
-
>
mWidget
=
widget
;
LayoutDeviceIntPoint
widgetPoint
=
widget
-
>
WidgetToScreenOffset
(
)
;
aEvent
-
>
mRefPoint
=
LayoutDeviceIntPoint
:
:
FromAppUnitsToNearest
(
itemFrame
-
>
GetScreenRectInAppUnits
(
)
.
BottomLeft
(
)
itemFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
)
-
widgetPoint
;
mCurrentEventContent
=
itemFrame
-
>
GetContent
(
)
;
mCurrentEventFrame
=
itemFrame
;
return
true
;
}
}
#
endif
nsRootPresContext
*
rootPC
=
mPresContext
-
>
GetRootPresContext
(
)
;
aEvent
-
>
mRefPoint
=
LayoutDeviceIntPoint
(
0
0
)
;
if
(
rootPC
)
{
rootPC
-
>
PresShell
(
)
-
>
GetViewManager
(
)
-
>
GetRootWidget
(
getter_AddRefs
(
aEvent
-
>
mWidget
)
)
;
if
(
aEvent
-
>
mWidget
)
{
nsPoint
offset
(
0
0
)
;
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
rootFrame
)
{
nsView
*
view
=
rootFrame
-
>
GetClosestView
(
&
offset
)
;
offset
+
=
view
-
>
GetOffsetToWidget
(
aEvent
-
>
mWidget
)
;
aEvent
-
>
mRefPoint
=
LayoutDeviceIntPoint
:
:
FromAppUnitsToNearest
(
offset
mPresContext
-
>
AppUnitsPerDevPixel
(
)
)
;
}
}
}
else
{
aEvent
-
>
mWidget
=
nullptr
;
}
LayoutDeviceIntPoint
caretPoint
;
if
(
PrepareToUseCaretPosition
(
aEvent
-
>
mWidget
caretPoint
)
)
{
aEvent
-
>
mRefPoint
=
caretPoint
;
return
true
;
}
RefPtr
<
Element
>
currentFocus
;
nsFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
if
(
fm
)
{
currentFocus
=
fm
-
>
GetFocusedElement
(
)
;
}
if
(
currentFocus
)
{
nsCOMPtr
<
nsIContent
>
currentPointElement
;
GetCurrentItemAndPositionForElement
(
currentFocus
getter_AddRefs
(
currentPointElement
)
aEvent
-
>
mRefPoint
aEvent
-
>
mWidget
)
;
if
(
currentPointElement
)
{
mCurrentEventContent
=
currentPointElement
;
mCurrentEventFrame
=
nullptr
;
GetCurrentEventFrame
(
)
;
}
}
return
true
;
}
bool
PresShell
:
:
PrepareToUseCaretPosition
(
nsIWidget
*
aEventWidget
LayoutDeviceIntPoint
&
aTargetPt
)
{
nsresult
rv
;
RefPtr
<
nsCaret
>
caret
=
GetCaret
(
)
;
NS_ENSURE_TRUE
(
caret
false
)
;
bool
caretVisible
=
caret
-
>
IsVisible
(
)
;
if
(
!
caretVisible
)
return
false
;
Selection
*
domSelection
=
caret
-
>
GetSelection
(
)
;
NS_ENSURE_TRUE
(
domSelection
false
)
;
nsIFrame
*
frame
=
nullptr
;
nsINode
*
node
=
domSelection
-
>
GetFocusNode
(
)
;
NS_ENSURE_TRUE
(
node
false
)
;
nsCOMPtr
<
nsIContent
>
content
=
nsIContent
:
:
FromNode
(
node
)
;
if
(
content
)
{
nsIContent
*
nonNative
=
content
-
>
FindFirstNonChromeOnlyAccessContent
(
)
;
content
=
nonNative
;
}
if
(
content
)
{
rv
=
ScrollContentIntoView
(
content
nsIPresShell
:
:
ScrollAxis
(
nsIPresShell
:
:
SCROLL_MINIMUM
nsIPresShell
:
:
SCROLL_IF_NOT_VISIBLE
)
nsIPresShell
:
:
ScrollAxis
(
nsIPresShell
:
:
SCROLL_MINIMUM
nsIPresShell
:
:
SCROLL_IF_NOT_VISIBLE
)
nsIPresShell
:
:
SCROLL_OVERFLOW_HIDDEN
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
frame
=
content
-
>
GetPrimaryFrame
(
)
;
NS_WARNING_ASSERTION
(
frame
"
No
frame
for
focused
content
?
"
)
;
}
nsCOMPtr
<
nsISelectionController
>
selCon
;
if
(
frame
)
frame
-
>
GetSelectionController
(
GetPresContext
(
)
getter_AddRefs
(
selCon
)
)
;
else
selCon
=
static_cast
<
nsISelectionController
*
>
(
this
)
;
if
(
selCon
)
{
rv
=
selCon
-
>
ScrollSelectionIntoView
(
nsISelectionController
:
:
SELECTION_NORMAL
nsISelectionController
:
:
SELECTION_FOCUS_REGION
nsISelectionController
:
:
SCROLL_SYNCHRONOUS
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
}
nsPresContext
*
presContext
=
GetPresContext
(
)
;
nsRect
caretCoords
;
nsIFrame
*
caretFrame
=
caret
-
>
GetGeometry
(
&
caretCoords
)
;
if
(
!
caretFrame
)
return
false
;
nsPoint
viewOffset
;
nsView
*
view
=
caretFrame
-
>
GetClosestView
(
&
viewOffset
)
;
if
(
!
view
)
return
false
;
if
(
aEventWidget
)
{
viewOffset
+
=
view
-
>
GetOffsetToWidget
(
aEventWidget
)
;
}
caretCoords
.
MoveBy
(
viewOffset
)
;
aTargetPt
.
x
=
presContext
-
>
AppUnitsToDevPixels
(
caretCoords
.
x
+
caretCoords
.
width
)
;
aTargetPt
.
y
=
presContext
-
>
AppUnitsToDevPixels
(
caretCoords
.
y
+
caretCoords
.
height
)
;
aTargetPt
.
y
-
=
1
;
return
true
;
}
void
PresShell
:
:
GetCurrentItemAndPositionForElement
(
Element
*
aFocusedElement
nsIContent
*
*
aTargetToUse
LayoutDeviceIntPoint
&
aTargetPt
nsIWidget
*
aRootWidget
)
{
nsCOMPtr
<
nsIContent
>
focusedContent
=
aFocusedElement
;
ScrollContentIntoView
(
focusedContent
ScrollAxis
(
)
ScrollAxis
(
)
nsIPresShell
:
:
SCROLL_OVERFLOW_HIDDEN
)
;
nsPresContext
*
presContext
=
GetPresContext
(
)
;
bool
istree
=
false
checkLineHeight
=
true
;
nscoord
extraTreeY
=
0
;
#
ifdef
MOZ_XUL
nsCOMPtr
<
nsIDOMXULSelectControlItemElement
>
item
;
nsCOMPtr
<
nsIDOMXULMultiSelectControlElement
>
multiSelect
=
do_QueryInterface
(
aFocusedElement
)
;
if
(
multiSelect
)
{
checkLineHeight
=
false
;
int32_t
currentIndex
;
multiSelect
-
>
GetCurrentIndex
(
&
currentIndex
)
;
if
(
currentIndex
>
=
0
)
{
RefPtr
<
nsXULElement
>
xulElement
=
nsXULElement
:
:
FromNode
(
focusedContent
)
;
if
(
xulElement
)
{
nsCOMPtr
<
nsIBoxObject
>
box
=
xulElement
-
>
GetBoxObject
(
IgnoreErrors
(
)
)
;
nsCOMPtr
<
nsITreeBoxObject
>
treeBox
(
do_QueryInterface
(
box
)
)
;
if
(
treeBox
)
{
treeBox
-
>
EnsureRowIsVisible
(
currentIndex
)
;
int32_t
firstVisibleRow
rowHeight
;
treeBox
-
>
GetFirstVisibleRow
(
&
firstVisibleRow
)
;
treeBox
-
>
GetRowHeight
(
&
rowHeight
)
;
extraTreeY
+
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
(
currentIndex
-
firstVisibleRow
+
1
)
*
rowHeight
)
;
istree
=
true
;
RefPtr
<
nsTreeColumns
>
cols
;
treeBox
-
>
GetColumns
(
getter_AddRefs
(
cols
)
)
;
if
(
cols
)
{
nsTreeColumn
*
col
=
cols
-
>
GetFirstColumn
(
)
;
if
(
col
)
{
RefPtr
<
Element
>
colElement
=
col
-
>
Element
(
)
;
nsIFrame
*
frame
=
colElement
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
extraTreeY
+
=
frame
-
>
GetSize
(
)
.
height
;
}
}
}
}
else
{
multiSelect
-
>
GetCurrentItem
(
getter_AddRefs
(
item
)
)
;
}
}
}
}
else
{
nsCOMPtr
<
nsIDOMXULMenuListElement
>
menulist
=
do_QueryInterface
(
aFocusedElement
)
;
if
(
!
menulist
)
{
nsCOMPtr
<
nsIDOMXULSelectControlElement
>
select
=
do_QueryInterface
(
aFocusedElement
)
;
if
(
select
)
{
checkLineHeight
=
false
;
select
-
>
GetSelectedItem
(
getter_AddRefs
(
item
)
)
;
}
}
}
if
(
item
)
focusedContent
=
do_QueryInterface
(
item
)
;
#
endif
nsIFrame
*
frame
=
focusedContent
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
NS_ASSERTION
(
frame
-
>
PresContext
(
)
=
=
GetPresContext
(
)
"
handling
event
for
focused
content
that
is
not
in
our
document
?
"
)
;
nsPoint
frameOrigin
(
0
0
)
;
nsView
*
view
=
frame
-
>
GetClosestView
(
&
frameOrigin
)
;
NS_ASSERTION
(
view
"
No
view
for
frame
"
)
;
if
(
aRootWidget
)
{
frameOrigin
+
=
view
-
>
GetOffsetToWidget
(
aRootWidget
)
;
}
nscoord
extra
=
0
;
if
(
!
istree
)
{
extra
=
frame
-
>
GetSize
(
)
.
height
;
if
(
checkLineHeight
)
{
nsIScrollableFrame
*
scrollFrame
=
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
frame
)
;
if
(
scrollFrame
)
{
nsSize
scrollAmount
=
scrollFrame
-
>
GetLineScrollAmount
(
)
;
nsIFrame
*
f
=
do_QueryFrame
(
scrollFrame
)
;
int32_t
APD
=
presContext
-
>
AppUnitsPerDevPixel
(
)
;
int32_t
scrollAPD
=
f
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
scrollAmount
=
scrollAmount
.
ScaleToOtherAppUnits
(
scrollAPD
APD
)
;
if
(
extra
>
scrollAmount
.
height
)
{
extra
=
scrollAmount
.
height
;
}
}
}
}
aTargetPt
.
x
=
presContext
-
>
AppUnitsToDevPixels
(
frameOrigin
.
x
)
;
aTargetPt
.
y
=
presContext
-
>
AppUnitsToDevPixels
(
frameOrigin
.
y
+
extra
+
extraTreeY
)
;
}
NS_IF_ADDREF
(
*
aTargetToUse
=
focusedContent
)
;
}
bool
PresShell
:
:
ShouldIgnoreInvalidation
(
)
{
return
mPaintingSuppressed
|
|
!
mIsActive
|
|
mIsNeverPainting
;
}
void
PresShell
:
:
WillPaint
(
)
{
if
(
!
mIsActive
|
|
mPaintingSuppressed
|
|
!
IsVisible
(
)
)
{
return
;
}
nsRootPresContext
*
rootPresContext
=
mPresContext
-
>
GetRootPresContext
(
)
;
if
(
!
rootPresContext
)
{
return
;
}
rootPresContext
-
>
FlushWillPaintObservers
(
)
;
if
(
mIsDestroying
)
return
;
FlushPendingNotifications
(
ChangesToFlush
(
FlushType
:
:
InterruptibleLayout
false
)
)
;
}
void
PresShell
:
:
WillPaintWindow
(
)
{
nsRootPresContext
*
rootPresContext
=
mPresContext
-
>
GetRootPresContext
(
)
;
if
(
rootPresContext
!
=
mPresContext
)
{
return
;
}
#
ifndef
XP_MACOSX
rootPresContext
-
>
ApplyPluginGeometryUpdates
(
)
;
#
endif
}
void
PresShell
:
:
DidPaintWindow
(
)
{
nsRootPresContext
*
rootPresContext
=
mPresContext
-
>
GetRootPresContext
(
)
;
if
(
rootPresContext
!
=
mPresContext
)
{
return
;
}
if
(
!
mHasReceivedPaintMessage
)
{
mHasReceivedPaintMessage
=
true
;
nsCOMPtr
<
nsIObserverService
>
obsvc
=
services
:
:
GetObserverService
(
)
;
if
(
obsvc
&
&
mDocument
)
{
nsPIDOMWindowOuter
*
window
=
mDocument
-
>
GetWindow
(
)
;
nsCOMPtr
<
nsIDOMChromeWindow
>
chromeWin
(
do_QueryInterface
(
window
)
)
;
if
(
chromeWin
)
{
obsvc
-
>
NotifyObservers
(
chromeWin
"
widget
-
first
-
paint
"
nullptr
)
;
}
}
}
}
bool
PresShell
:
:
IsVisible
(
)
{
if
(
!
mIsActive
|
|
!
mViewManager
)
return
false
;
nsView
*
view
=
mViewManager
-
>
GetRootView
(
)
;
if
(
!
view
)
return
true
;
view
=
view
-
>
GetParent
(
)
;
if
(
!
view
)
return
true
;
view
=
view
-
>
GetParent
(
)
;
if
(
!
view
)
return
true
;
nsIFrame
*
frame
=
view
-
>
GetFrame
(
)
;
if
(
!
frame
)
return
true
;
return
frame
-
>
IsVisibleConsideringAncestors
(
nsIFrame
:
:
VISIBILITY_CROSS_CHROME_CONTENT_BOUNDARY
)
;
}
void
PresShell
:
:
SuppressDisplayport
(
bool
aEnabled
)
{
if
(
aEnabled
)
{
mActiveSuppressDisplayport
+
+
;
}
else
if
(
mActiveSuppressDisplayport
>
0
)
{
bool
isSuppressed
=
IsDisplayportSuppressed
(
)
;
mActiveSuppressDisplayport
-
-
;
if
(
isSuppressed
&
&
!
IsDisplayportSuppressed
(
)
)
{
if
(
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
)
{
rootFrame
-
>
SchedulePaint
(
)
;
}
}
}
}
static
bool
sDisplayPortSuppressionRespected
=
true
;
void
PresShell
:
:
RespectDisplayportSuppression
(
bool
aEnabled
)
{
bool
isSuppressed
=
IsDisplayportSuppressed
(
)
;
sDisplayPortSuppressionRespected
=
aEnabled
;
if
(
isSuppressed
&
&
!
IsDisplayportSuppressed
(
)
)
{
if
(
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
)
{
rootFrame
-
>
SchedulePaint
(
)
;
}
}
}
bool
PresShell
:
:
IsDisplayportSuppressed
(
)
{
return
sDisplayPortSuppressionRespected
&
&
mActiveSuppressDisplayport
>
0
;
}
nsresult
PresShell
:
:
GetAgentStyleSheets
(
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aSheets
)
{
aSheets
.
Clear
(
)
;
int32_t
sheetCount
=
mStyleSet
-
>
SheetCount
(
SheetType
:
:
Agent
)
;
if
(
!
aSheets
.
SetCapacity
(
sheetCount
fallible
)
)
{
return
NS_ERROR_OUT_OF_MEMORY
;
}
for
(
int32_t
i
=
0
;
i
<
sheetCount
;
+
+
i
)
{
StyleSheet
*
sheet
=
mStyleSet
-
>
StyleSheetAt
(
SheetType
:
:
Agent
i
)
;
aSheets
.
AppendElement
(
sheet
)
;
}
return
NS_OK
;
}
nsresult
PresShell
:
:
SetAgentStyleSheets
(
const
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aSheets
)
{
return
mStyleSet
-
>
ReplaceSheets
(
SheetType
:
:
Agent
aSheets
)
;
}
nsresult
PresShell
:
:
AddOverrideStyleSheet
(
StyleSheet
*
aSheet
)
{
return
mStyleSet
-
>
PrependStyleSheet
(
SheetType
:
:
Override
aSheet
)
;
}
nsresult
PresShell
:
:
RemoveOverrideStyleSheet
(
StyleSheet
*
aSheet
)
{
return
mStyleSet
-
>
RemoveStyleSheet
(
SheetType
:
:
Override
aSheet
)
;
}
static
void
FreezeElement
(
nsISupports
*
aSupports
void
*
)
{
nsCOMPtr
<
nsIObjectLoadingContent
>
olc
(
do_QueryInterface
(
aSupports
)
)
;
if
(
olc
)
{
olc
-
>
StopPluginInstance
(
)
;
}
}
static
bool
FreezeSubDocument
(
nsIDocument
*
aDocument
void
*
aData
)
{
nsIPresShell
*
shell
=
aDocument
-
>
GetShell
(
)
;
if
(
shell
)
shell
-
>
Freeze
(
)
;
return
true
;
}
void
PresShell
:
:
Freeze
(
)
{
mUpdateApproximateFrameVisibilityEvent
.
Revoke
(
)
;
MaybeReleaseCapturingContent
(
)
;
mDocument
-
>
EnumerateActivityObservers
(
FreezeElement
nullptr
)
;
if
(
mCaret
)
{
SetCaretEnabled
(
false
)
;
}
mPaintingSuppressed
=
true
;
if
(
mDocument
)
{
mDocument
-
>
EnumerateSubDocuments
(
FreezeSubDocument
nullptr
)
;
}
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
presContext
)
{
presContext
-
>
DisableInteractionTimeRecording
(
)
;
if
(
presContext
-
>
RefreshDriver
(
)
-
>
GetPresContext
(
)
=
=
presContext
)
{
presContext
-
>
RefreshDriver
(
)
-
>
Freeze
(
)
;
}
}
mFrozen
=
true
;
if
(
mDocument
)
{
UpdateImageLockingState
(
)
;
}
}
void
PresShell
:
:
FireOrClearDelayedEvents
(
bool
aFireEvents
)
{
mNoDelayedMouseEvents
=
false
;
mNoDelayedKeyEvents
=
false
;
if
(
!
aFireEvents
)
{
mDelayedEvents
.
Clear
(
)
;
return
;
}
if
(
mDocument
)
{
nsCOMPtr
<
nsIDocument
>
doc
=
mDocument
;
while
(
!
mIsDestroying
&
&
mDelayedEvents
.
Length
(
)
&
&
!
doc
-
>
EventHandlingSuppressed
(
)
)
{
nsAutoPtr
<
DelayedEvent
>
ev
(
mDelayedEvents
[
0
]
.
forget
(
)
)
;
mDelayedEvents
.
RemoveElementAt
(
0
)
;
if
(
ev
-
>
IsKeyPressEvent
(
)
&
&
mIsLastKeyDownCanceled
)
{
continue
;
}
ev
-
>
Dispatch
(
)
;
}
if
(
!
doc
-
>
EventHandlingSuppressed
(
)
)
{
mDelayedEvents
.
Clear
(
)
;
}
}
}
static
void
ThawElement
(
nsISupports
*
aSupports
void
*
aShell
)
{
nsCOMPtr
<
nsIObjectLoadingContent
>
olc
(
do_QueryInterface
(
aSupports
)
)
;
if
(
olc
)
{
olc
-
>
AsyncStartPluginInstance
(
)
;
}
}
static
bool
ThawSubDocument
(
nsIDocument
*
aDocument
void
*
aData
)
{
nsIPresShell
*
shell
=
aDocument
-
>
GetShell
(
)
;
if
(
shell
)
shell
-
>
Thaw
(
)
;
return
true
;
}
void
PresShell
:
:
Thaw
(
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
presContext
&
&
presContext
-
>
RefreshDriver
(
)
-
>
GetPresContext
(
)
=
=
presContext
)
{
presContext
-
>
RefreshDriver
(
)
-
>
Thaw
(
)
;
}
mDocument
-
>
EnumerateActivityObservers
(
ThawElement
this
)
;
if
(
mDocument
)
mDocument
-
>
EnumerateSubDocuments
(
ThawSubDocument
nullptr
)
;
QueryIsActive
(
)
;
mFrozen
=
false
;
UpdateImageLockingState
(
)
;
UnsuppressPainting
(
)
;
}
void
PresShell
:
:
MaybeScheduleReflow
(
)
{
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
if
(
mObservingLayoutFlushes
|
|
mIsDestroying
|
|
mIsReflowing
|
|
mDirtyRoots
.
IsEmpty
(
)
)
return
;
if
(
!
mPresContext
-
>
HasPendingInterrupt
(
)
|
|
!
ScheduleReflowOffTimer
(
)
)
{
ScheduleReflow
(
)
;
}
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
}
void
PresShell
:
:
ScheduleReflow
(
)
{
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
DoObserveLayoutFlushes
(
)
;
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
}
nsresult
PresShell
:
:
DidCauseReflow
(
)
{
NS_ASSERTION
(
mChangeNestCount
!
=
0
"
Unexpected
call
to
DidCauseReflow
(
)
"
)
;
-
-
mChangeNestCount
;
nsContentUtils
:
:
RemoveScriptBlocker
(
)
;
return
NS_OK
;
}
void
PresShell
:
:
WillDoReflow
(
)
{
mDocument
-
>
FlushUserFontSet
(
)
;
mPresContext
-
>
FlushCounterStyles
(
)
;
mPresContext
-
>
FlushFontFeatureValues
(
)
;
mLastReflowStart
=
GetPerformanceNowUnclamped
(
)
;
}
void
PresShell
:
:
DidDoReflow
(
bool
aInterruptible
)
{
HandlePostedReflowCallbacks
(
aInterruptible
)
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
mPresContext
-
>
GetDocShell
(
)
;
if
(
docShell
)
{
DOMHighResTimeStamp
now
=
GetPerformanceNowUnclamped
(
)
;
docShell
-
>
NotifyReflowObservers
(
aInterruptible
mLastReflowStart
now
)
;
}
if
(
sSynthMouseMove
)
{
SynthesizeMouseMove
(
false
)
;
}
mPresContext
-
>
NotifyMissingFonts
(
)
;
}
DOMHighResTimeStamp
PresShell
:
:
GetPerformanceNowUnclamped
(
)
{
DOMHighResTimeStamp
now
=
0
;
if
(
nsPIDOMWindowInner
*
window
=
mDocument
-
>
GetInnerWindow
(
)
)
{
Performance
*
perf
=
window
-
>
GetPerformance
(
)
;
if
(
perf
)
{
now
=
perf
-
>
NowUnclamped
(
)
;
}
}
return
now
;
}
void
PresShell
:
:
sReflowContinueCallback
(
nsITimer
*
aTimer
void
*
aPresShell
)
{
RefPtr
<
PresShell
>
self
=
static_cast
<
PresShell
*
>
(
aPresShell
)
;
MOZ_ASSERT
(
aTimer
=
=
self
-
>
mReflowContinueTimer
"
Unexpected
timer
"
)
;
self
-
>
mReflowContinueTimer
=
nullptr
;
self
-
>
ScheduleReflow
(
)
;
}
bool
PresShell
:
:
ScheduleReflowOffTimer
(
)
{
MOZ_ASSERT
(
!
mObservingLayoutFlushes
"
Shouldn
'
t
get
here
"
)
;
ASSERT_REFLOW_SCHEDULED_STATE
(
)
;
if
(
!
mReflowContinueTimer
)
{
nsresult
rv
=
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mReflowContinueTimer
)
sReflowContinueCallback
this
30
nsITimer
:
:
TYPE_ONE_SHOT
"
sReflowContinueCallback
"
mDocument
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
return
NS_SUCCEEDED
(
rv
)
;
}
return
true
;
}
bool
PresShell
:
:
DoReflow
(
nsIFrame
*
target
bool
aInterruptible
)
{
#
ifdef
MOZ_GECKO_PROFILER
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
AUTO_PROFILER_LABEL_DYNAMIC_NSCSTRING
(
"
PresShell
:
:
DoReflow
"
LAYOUT
uri
?
uri
-
>
GetSpecOrDefault
(
)
:
NS_LITERAL_CSTRING
(
"
N
/
A
"
)
)
;
#
endif
gfxTextPerfMetrics
*
tp
=
mPresContext
-
>
GetTextPerfMetrics
(
)
;
TimeStamp
timeStart
;
if
(
tp
)
{
tp
-
>
Accumulate
(
)
;
tp
-
>
reflowCount
+
+
;
timeStart
=
TimeStamp
:
:
Now
(
)
;
}
target
-
>
SchedulePaint
(
nsIFrame
:
:
PAINT_DEFAULT
false
)
;
nsDocShell
*
docShell
=
static_cast
<
nsDocShell
*
>
(
GetPresContext
(
)
-
>
GetDocShell
(
)
)
;
RefPtr
<
TimelineConsumers
>
timelines
=
TimelineConsumers
:
:
Get
(
)
;
bool
isTimelineRecording
=
timelines
&
&
timelines
-
>
HasConsumer
(
docShell
)
;
if
(
isTimelineRecording
)
{
timelines
-
>
AddMarkerForDocShell
(
docShell
"
Reflow
"
MarkerTracingType
:
:
START
)
;
}
#
ifdef
MOZ_GECKO_PROFILER
AutoProfilerTracing
tracingLayoutFlush
(
"
Paint
"
"
Reflow
"
std
:
:
move
(
mReflowCause
)
)
;
mReflowCause
=
nullptr
;
#
endif
if
(
mReflowContinueTimer
)
{
mReflowContinueTimer
-
>
Cancel
(
)
;
mReflowContinueTimer
=
nullptr
;
}
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
RefPtr
<
gfxContext
>
rcx
(
CreateReferenceRenderingContext
(
)
)
;
#
ifdef
DEBUG
mCurrentReflowRoot
=
target
;
#
endif
WritingMode
wm
=
target
-
>
GetWritingMode
(
)
;
LogicalSize
size
(
wm
)
;
if
(
target
=
=
rootFrame
)
{
size
=
LogicalSize
(
wm
mPresContext
-
>
GetVisibleArea
(
)
.
Size
(
)
)
;
}
else
{
size
=
target
-
>
GetLogicalSize
(
)
;
}
NS_ASSERTION
(
!
target
-
>
GetNextInFlow
(
)
&
&
!
target
-
>
GetPrevInFlow
(
)
"
reflow
roots
should
never
split
"
)
;
LogicalSize
reflowSize
(
wm
size
.
ISize
(
wm
)
NS_UNCONSTRAINEDSIZE
)
;
ReflowInput
reflowInput
(
mPresContext
target
rcx
reflowSize
ReflowInput
:
:
CALLER_WILL_INIT
)
;
reflowInput
.
mOrthogonalLimit
=
size
.
BSize
(
wm
)
;
if
(
rootFrame
=
=
target
)
{
reflowInput
.
Init
(
mPresContext
)
;
bool
hasUnconstrainedBSize
=
size
.
BSize
(
wm
)
=
=
NS_UNCONSTRAINEDSIZE
;
if
(
hasUnconstrainedBSize
|
|
mLastRootReflowHadUnconstrainedBSize
)
{
reflowInput
.
SetBResize
(
true
)
;
}
mLastRootReflowHadUnconstrainedBSize
=
hasUnconstrainedBSize
;
}
else
{
nsMargin
currentBorder
=
target
-
>
GetUsedBorder
(
)
;
nsMargin
currentPadding
=
target
-
>
GetUsedPadding
(
)
;
reflowInput
.
Init
(
mPresContext
nullptr
&
currentBorder
&
currentPadding
)
;
}
NS_ASSERTION
(
reflowInput
.
ComputedPhysicalMargin
(
)
=
=
nsMargin
(
0
0
0
0
)
"
reflow
state
should
not
set
margin
for
reflow
roots
"
)
;
if
(
size
.
BSize
(
wm
)
!
=
NS_UNCONSTRAINEDSIZE
)
{
nscoord
computedBSize
=
size
.
BSize
(
wm
)
-
reflowInput
.
ComputedLogicalBorderPadding
(
)
.
BStartEnd
(
wm
)
;
computedBSize
=
std
:
:
max
(
computedBSize
0
)
;
reflowInput
.
SetComputedBSize
(
computedBSize
)
;
}
NS_ASSERTION
(
reflowInput
.
ComputedISize
(
)
=
=
size
.
ISize
(
wm
)
-
reflowInput
.
ComputedLogicalBorderPadding
(
)
.
IStartEnd
(
wm
)
"
reflow
state
computed
incorrect
inline
size
"
)
;
mPresContext
-
>
ReflowStarted
(
aInterruptible
)
;
mIsReflowing
=
true
;
nsReflowStatus
status
;
ReflowOutput
desiredSize
(
reflowInput
)
;
target
-
>
Reflow
(
mPresContext
desiredSize
reflowInput
status
)
;
nsRect
boundsRelativeToTarget
=
nsRect
(
0
0
desiredSize
.
Width
(
)
desiredSize
.
Height
(
)
)
;
NS_ASSERTION
(
(
target
=
=
rootFrame
&
&
size
.
BSize
(
wm
)
=
=
NS_UNCONSTRAINEDSIZE
)
|
|
(
desiredSize
.
ISize
(
wm
)
=
=
size
.
ISize
(
wm
)
&
&
desiredSize
.
BSize
(
wm
)
=
=
size
.
BSize
(
wm
)
)
"
non
-
root
frame
'
s
desired
size
changed
during
an
"
"
incremental
reflow
"
)
;
NS_ASSERTION
(
target
=
=
rootFrame
|
|
desiredSize
.
VisualOverflow
(
)
.
IsEqualInterior
(
boundsRelativeToTarget
)
"
non
-
root
reflow
roots
must
not
have
visible
overflow
"
)
;
NS_ASSERTION
(
target
=
=
rootFrame
|
|
desiredSize
.
ScrollableOverflow
(
)
.
IsEqualEdges
(
boundsRelativeToTarget
)
"
non
-
root
reflow
roots
must
not
have
scrollable
overflow
"
)
;
NS_ASSERTION
(
status
.
IsEmpty
(
)
"
reflow
roots
should
never
split
"
)
;
target
-
>
SetSize
(
boundsRelativeToTarget
.
Size
(
)
)
;
nsContainerFrame
:
:
SyncFrameViewAfterReflow
(
mPresContext
target
target
-
>
GetView
(
)
boundsRelativeToTarget
)
;
nsContainerFrame
:
:
SyncWindowProperties
(
mPresContext
target
target
-
>
GetView
(
)
rcx
nsContainerFrame
:
:
SET_ASYNC
)
;
target
-
>
DidReflow
(
mPresContext
nullptr
)
;
if
(
target
=
=
rootFrame
&
&
size
.
BSize
(
wm
)
=
=
NS_UNCONSTRAINEDSIZE
)
{
mPresContext
-
>
SetVisibleArea
(
boundsRelativeToTarget
)
;
}
#
ifdef
DEBUG
mCurrentReflowRoot
=
nullptr
;
#
endif
NS_ASSERTION
(
mPresContext
-
>
HasPendingInterrupt
(
)
|
|
mFramesToDirty
.
Count
(
)
=
=
0
"
Why
do
we
need
to
dirty
anything
if
not
interrupted
?
"
)
;
mIsReflowing
=
false
;
bool
interrupted
=
mPresContext
-
>
HasPendingInterrupt
(
)
;
if
(
interrupted
)
{
for
(
auto
iter
=
mFramesToDirty
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsPtrHashKey
<
nsIFrame
>
*
p
=
iter
.
Get
(
)
;
for
(
nsIFrame
*
f
=
p
-
>
GetKey
(
)
;
f
&
&
!
NS_SUBTREE_DIRTY
(
f
)
;
f
=
f
-
>
GetParent
(
)
)
{
f
-
>
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
if
(
f
=
=
target
)
{
break
;
}
}
}
NS_ASSERTION
(
NS_SUBTREE_DIRTY
(
target
)
"
Why
is
the
target
not
dirty
?
"
)
;
mDirtyRoots
.
AppendElement
(
target
)
;
SetNeedLayoutFlush
(
)
;
#
ifdef
NOISY_INTERRUPTIBLE_REFLOW
printf
(
"
mFramesToDirty
.
Count
(
)
=
=
%
u
\
n
"
mFramesToDirty
.
Count
(
)
)
;
#
endif
mFramesToDirty
.
Clear
(
)
;
mWasLastReflowInterrupted
=
true
;
MaybeScheduleReflow
(
)
;
}
if
(
tp
)
{
if
(
tp
-
>
current
.
numChars
>
100
)
{
TimeDuration
reflowTime
=
TimeStamp
:
:
Now
(
)
-
timeStart
;
LogTextPerfStats
(
tp
this
tp
-
>
current
reflowTime
.
ToMilliseconds
(
)
eLog_reflow
nullptr
)
;
}
tp
-
>
Accumulate
(
)
;
}
if
(
isTimelineRecording
)
{
timelines
-
>
AddMarkerForDocShell
(
docShell
"
Reflow
"
MarkerTracingType
:
:
END
)
;
}
return
!
interrupted
;
}
#
ifdef
DEBUG
void
PresShell
:
:
DoVerifyReflow
(
)
{
if
(
GetVerifyReflowEnable
(
)
)
{
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
mViewManager
-
>
InvalidateView
(
rootView
)
;
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
mInVerifyReflow
=
true
;
bool
ok
=
VerifyIncrementalReflow
(
)
;
mInVerifyReflow
=
false
;
if
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
{
printf
(
"
ProcessReflowCommands
:
finished
(
%
s
)
\
n
"
ok
?
"
ok
"
:
"
failed
"
)
;
}
if
(
!
mDirtyRoots
.
IsEmpty
(
)
)
{
printf
(
"
XXX
yikes
!
reflow
commands
queued
during
verify
-
reflow
\
n
"
)
;
}
}
}
#
endif
#
define
NS_LONG_REFLOW_TIME_MS
5000
bool
PresShell
:
:
ProcessReflowCommands
(
bool
aInterruptible
)
{
if
(
mDirtyRoots
.
IsEmpty
(
)
&
&
!
mShouldUnsuppressPainting
)
{
return
true
;
}
mozilla
:
:
TimeStamp
timerStart
=
mozilla
:
:
TimeStamp
:
:
Now
(
)
;
bool
interrupted
=
false
;
if
(
!
mDirtyRoots
.
IsEmpty
(
)
)
{
#
ifdef
DEBUG
if
(
VERIFY_REFLOW_DUMP_COMMANDS
&
gVerifyReflowFlags
)
{
printf
(
"
ProcessReflowCommands
:
begin
incremental
reflow
\
n
"
)
;
}
#
endif
const
PRIntervalTime
deadline
=
aInterruptible
?
PR_IntervalNow
(
)
+
PR_MicrosecondsToInterval
(
gMaxRCProcessingTime
)
:
(
PRIntervalTime
)
0
;
{
nsAutoScriptBlocker
scriptBlocker
;
WillDoReflow
(
)
;
AUTO_LAYOUT_PHASE_ENTRY_POINT
(
GetPresContext
(
)
Reflow
)
;
nsViewManager
:
:
AutoDisableRefresh
refreshBlocker
(
mViewManager
)
;
do
{
int32_t
idx
=
mDirtyRoots
.
Length
(
)
-
1
;
nsIFrame
*
target
=
mDirtyRoots
[
idx
]
;
mDirtyRoots
.
RemoveElementAt
(
idx
)
;
if
(
!
NS_SUBTREE_DIRTY
(
target
)
)
{
continue
;
}
interrupted
=
!
DoReflow
(
target
aInterruptible
)
;
}
while
(
!
interrupted
&
&
!
mDirtyRoots
.
IsEmpty
(
)
&
&
(
!
aInterruptible
|
|
PR_IntervalNow
(
)
<
deadline
)
)
;
interrupted
=
!
mDirtyRoots
.
IsEmpty
(
)
;
}
if
(
!
mIsDestroying
)
{
DidDoReflow
(
aInterruptible
)
;
}
if
(
!
mIsDestroying
)
{
#
ifdef
DEBUG
if
(
VERIFY_REFLOW_DUMP_COMMANDS
&
gVerifyReflowFlags
)
{
printf
(
"
\
nPresShell
:
:
ProcessReflowCommands
(
)
finished
:
this
=
%
p
\
n
"
(
void
*
)
this
)
;
}
DoVerifyReflow
(
)
;
#
endif
if
(
!
mDirtyRoots
.
IsEmpty
(
)
)
{
MaybeScheduleReflow
(
)
;
SetNeedLayoutFlush
(
)
;
}
}
}
if
(
!
mIsDestroying
&
&
mShouldUnsuppressPainting
&
&
mDirtyRoots
.
IsEmpty
(
)
)
{
mShouldUnsuppressPainting
=
false
;
UnsuppressAndInvalidate
(
)
;
}
if
(
mDocument
-
>
GetRootElement
(
)
)
{
TimeDuration
elapsed
=
TimeStamp
:
:
Now
(
)
-
timerStart
;
int32_t
intElapsed
=
int32_t
(
elapsed
.
ToMilliseconds
(
)
)
;
if
(
intElapsed
>
NS_LONG_REFLOW_TIME_MS
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
LONG_REFLOW_INTERRUPTIBLE
aInterruptible
?
1
:
0
)
;
}
}
return
!
interrupted
;
}
void
PresShell
:
:
WindowSizeMoveDone
(
)
{
if
(
mPresContext
)
{
EventStateManager
:
:
ClearGlobalActiveContent
(
nullptr
)
;
ClearMouseCapture
(
nullptr
)
;
}
}
#
ifdef
MOZ_XUL
typedef
bool
(
*
frameWalkerFn
)
(
nsIFrame
*
aFrame
)
;
static
bool
ReResolveMenusAndTrees
(
nsIFrame
*
aFrame
)
{
nsTreeBodyFrame
*
treeBody
=
do_QueryFrame
(
aFrame
)
;
if
(
treeBody
)
treeBody
-
>
ClearStyleAndImageCaches
(
)
;
nsMenuFrame
*
menu
=
do_QueryFrame
(
aFrame
)
;
if
(
menu
)
menu
-
>
CloseMenu
(
true
)
;
return
true
;
}
static
bool
ReframeImageBoxes
(
nsIFrame
*
aFrame
)
{
if
(
aFrame
-
>
IsImageBoxFrame
(
)
)
{
aFrame
-
>
PresContext
(
)
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
aFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
nsRestyleHint
(
0
)
nsChangeHint_ReconstructFrame
)
;
return
false
;
}
return
true
;
}
static
void
WalkFramesThroughPlaceholders
(
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
frameWalkerFn
aFunc
)
{
bool
walkChildren
=
(
*
aFunc
)
(
aFrame
)
;
if
(
!
walkChildren
)
return
;
nsIFrame
:
:
ChildListIterator
lists
(
aFrame
)
;
for
(
;
!
lists
.
IsDone
(
)
;
lists
.
Next
(
)
)
{
nsFrameList
:
:
Enumerator
childFrames
(
lists
.
CurrentList
(
)
)
;
for
(
;
!
childFrames
.
AtEnd
(
)
;
childFrames
.
Next
(
)
)
{
nsIFrame
*
child
=
childFrames
.
get
(
)
;
if
(
!
(
child
-
>
GetStateBits
(
)
&
NS_FRAME_OUT_OF_FLOW
)
)
{
WalkFramesThroughPlaceholders
(
aPresContext
nsPlaceholderFrame
:
:
GetRealFrameFor
(
child
)
aFunc
)
;
}
}
}
}
#
endif
NS_IMETHODIMP
PresShell
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
mIsDestroying
)
{
NS_WARNING
(
"
our
observers
should
have
been
unregistered
by
now
"
)
;
return
NS_OK
;
}
#
ifdef
MOZ_XUL
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
chrome
-
flush
-
skin
-
caches
"
)
)
{
if
(
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
)
{
NS_ASSERTION
(
mViewManager
"
View
manager
must
exist
"
)
;
WalkFramesThroughPlaceholders
(
mPresContext
rootFrame
ReResolveMenusAndTrees
)
;
WalkFramesThroughPlaceholders
(
mPresContext
rootFrame
ReframeImageBoxes
)
;
}
return
NS_OK
;
}
#
endif
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
memory
-
pressure
"
)
)
{
if
(
!
AssumeAllFramesVisible
(
)
&
&
mPresContext
-
>
IsRootContentDocument
(
)
)
{
DoUpdateApproximateFrameVisibility
(
true
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
NS_WIDGET_WAKE_OBSERVER_TOPIC
)
)
{
mLastOSWake
=
TimeStamp
:
:
Now
(
)
;
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
sessionstore
-
one
-
or
-
no
-
tab
-
restored
"
)
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
sProcessInteractable
=
true
;
nsCOMPtr
<
nsIObserverService
>
os
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
if
(
os
)
{
os
-
>
RemoveObserver
(
this
"
sessionstore
-
one
-
or
-
no
-
tab
-
restored
"
)
;
}
return
NS_OK
;
}
if
(
!
nsCRT
:
:
strcmp
(
aTopic
"
font
-
info
-
updated
"
)
)
{
mPresContext
-
>
ForceReflowForFontInfoUpdate
(
)
;
return
NS_OK
;
}
NS_WARNING
(
"
unrecognized
topic
in
PresShell
:
:
Observe
"
)
;
return
NS_ERROR_FAILURE
;
}
bool
nsIPresShell
:
:
AddRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
MOZ_UNLIKELY
(
!
presContext
)
)
{
return
false
;
}
presContext
-
>
RefreshDriver
(
)
-
>
AddRefreshObserver
(
aObserver
aFlushType
)
;
return
true
;
}
bool
nsIPresShell
:
:
RemoveRefreshObserver
(
nsARefreshObserver
*
aObserver
FlushType
aFlushType
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
return
presContext
&
&
presContext
-
>
RefreshDriver
(
)
-
>
RemoveRefreshObserver
(
aObserver
aFlushType
)
;
}
bool
nsIPresShell
:
:
AddPostRefreshObserver
(
nsAPostRefreshObserver
*
aObserver
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
!
presContext
)
{
return
false
;
}
presContext
-
>
RefreshDriver
(
)
-
>
AddPostRefreshObserver
(
aObserver
)
;
return
true
;
}
bool
nsIPresShell
:
:
RemovePostRefreshObserver
(
nsAPostRefreshObserver
*
aObserver
)
{
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
!
presContext
)
{
return
false
;
}
presContext
-
>
RefreshDriver
(
)
-
>
RemovePostRefreshObserver
(
aObserver
)
;
return
true
;
}
void
nsIPresShell
:
:
DoObserveStyleFlushes
(
)
{
MOZ_ASSERT
(
!
ObservingStyleFlushes
(
)
)
;
mObservingStyleFlushes
=
true
;
if
(
MOZ_LIKELY
(
!
mDocument
-
>
GetBFCacheEntry
(
)
)
)
{
mPresContext
-
>
RefreshDriver
(
)
-
>
AddStyleFlushObserver
(
this
)
;
}
}
void
nsIPresShell
:
:
DoObserveLayoutFlushes
(
)
{
MOZ_ASSERT
(
!
ObservingLayoutFlushes
(
)
)
;
mObservingLayoutFlushes
=
true
;
if
(
MOZ_LIKELY
(
!
mDocument
-
>
GetBFCacheEntry
(
)
)
)
{
mPresContext
-
>
RefreshDriver
(
)
-
>
AddLayoutFlushObserver
(
this
)
;
}
}
PresShell
:
:
DelayedInputEvent
:
:
DelayedInputEvent
(
)
:
DelayedEvent
(
)
mEvent
(
nullptr
)
{
}
PresShell
:
:
DelayedInputEvent
:
:
~
DelayedInputEvent
(
)
{
delete
mEvent
;
}
void
PresShell
:
:
DelayedInputEvent
:
:
Dispatch
(
)
{
if
(
!
mEvent
|
|
!
mEvent
-
>
mWidget
)
{
return
;
}
nsCOMPtr
<
nsIWidget
>
widget
=
mEvent
-
>
mWidget
;
nsEventStatus
status
;
widget
-
>
DispatchEvent
(
mEvent
status
)
;
}
PresShell
:
:
DelayedMouseEvent
:
:
DelayedMouseEvent
(
WidgetMouseEvent
*
aEvent
)
:
DelayedInputEvent
(
)
{
WidgetMouseEvent
*
mouseEvent
=
new
WidgetMouseEvent
(
aEvent
-
>
IsTrusted
(
)
aEvent
-
>
mMessage
aEvent
-
>
mWidget
aEvent
-
>
mReason
aEvent
-
>
mContextMenuTrigger
)
;
mouseEvent
-
>
AssignMouseEventData
(
*
aEvent
false
)
;
mEvent
=
mouseEvent
;
}
PresShell
:
:
DelayedKeyEvent
:
:
DelayedKeyEvent
(
WidgetKeyboardEvent
*
aEvent
)
:
DelayedInputEvent
(
)
{
WidgetKeyboardEvent
*
keyEvent
=
new
WidgetKeyboardEvent
(
aEvent
-
>
IsTrusted
(
)
aEvent
-
>
mMessage
aEvent
-
>
mWidget
)
;
keyEvent
-
>
AssignKeyEventData
(
*
aEvent
false
)
;
keyEvent
-
>
mFlags
.
mIsSynthesizedForTests
=
aEvent
-
>
mFlags
.
mIsSynthesizedForTests
;
keyEvent
-
>
mFlags
.
mIsSuppressedOrDelayed
=
true
;
mEvent
=
keyEvent
;
}
bool
PresShell
:
:
DelayedKeyEvent
:
:
IsKeyPressEvent
(
)
{
return
mEvent
-
>
mMessage
=
=
eKeyPress
;
}
#
ifdef
DEBUG
static
void
LogVerifyMessage
(
nsIFrame
*
k1
nsIFrame
*
k2
const
char
*
aMsg
)
{
nsAutoString
n1
n2
;
if
(
k1
)
{
k1
-
>
GetFrameName
(
n1
)
;
}
else
{
n1
.
AssignLiteral
(
u
"
(
null
)
"
)
;
}
if
(
k2
)
{
k2
-
>
GetFrameName
(
n2
)
;
}
else
{
n2
.
AssignLiteral
(
u
"
(
null
)
"
)
;
}
printf
(
"
verifyreflow
:
%
s
%
p
!
=
%
s
%
p
%
s
\
n
"
NS_LossyConvertUTF16toASCII
(
n1
)
.
get
(
)
(
void
*
)
k1
NS_LossyConvertUTF16toASCII
(
n2
)
.
get
(
)
(
void
*
)
k2
aMsg
)
;
}
static
void
LogVerifyMessage
(
nsIFrame
*
k1
nsIFrame
*
k2
const
char
*
aMsg
const
nsRect
&
r1
const
nsRect
&
r2
)
{
printf
(
"
VerifyReflow
Error
:
\
n
"
)
;
nsAutoString
name
;
if
(
k1
)
{
k1
-
>
GetFrameName
(
name
)
;
printf
(
"
%
s
%
p
"
NS_LossyConvertUTF16toASCII
(
name
)
.
get
(
)
(
void
*
)
k1
)
;
}
printf
(
"
{
%
d
%
d
%
d
%
d
}
!
=
\
n
"
r1
.
x
r1
.
y
r1
.
width
r1
.
height
)
;
if
(
k2
)
{
k2
-
>
GetFrameName
(
name
)
;
printf
(
"
%
s
%
p
"
NS_LossyConvertUTF16toASCII
(
name
)
.
get
(
)
(
void
*
)
k2
)
;
}
printf
(
"
{
%
d
%
d
%
d
%
d
}
\
n
%
s
\
n
"
r2
.
x
r2
.
y
r2
.
width
r2
.
height
aMsg
)
;
}
static
void
LogVerifyMessage
(
nsIFrame
*
k1
nsIFrame
*
k2
const
char
*
aMsg
const
nsIntRect
&
r1
const
nsIntRect
&
r2
)
{
printf
(
"
VerifyReflow
Error
:
\
n
"
)
;
nsAutoString
name
;
if
(
k1
)
{
k1
-
>
GetFrameName
(
name
)
;
printf
(
"
%
s
%
p
"
NS_LossyConvertUTF16toASCII
(
name
)
.
get
(
)
(
void
*
)
k1
)
;
}
printf
(
"
{
%
d
%
d
%
d
%
d
}
!
=
\
n
"
r1
.
x
r1
.
y
r1
.
width
r1
.
height
)
;
if
(
k2
)
{
k2
-
>
GetFrameName
(
name
)
;
printf
(
"
%
s
%
p
"
NS_LossyConvertUTF16toASCII
(
name
)
.
get
(
)
(
void
*
)
k2
)
;
}
printf
(
"
{
%
d
%
d
%
d
%
d
}
\
n
%
s
\
n
"
r2
.
x
r2
.
y
r2
.
width
r2
.
height
aMsg
)
;
}
static
bool
CompareTrees
(
nsPresContext
*
aFirstPresContext
nsIFrame
*
aFirstFrame
nsPresContext
*
aSecondPresContext
nsIFrame
*
aSecondFrame
)
{
if
(
!
aFirstPresContext
|
|
!
aFirstFrame
|
|
!
aSecondPresContext
|
|
!
aSecondFrame
)
return
true
;
bool
ok
=
true
;
nsIFrame
:
:
ChildListIterator
lists1
(
aFirstFrame
)
;
nsIFrame
:
:
ChildListIterator
lists2
(
aSecondFrame
)
;
do
{
const
nsFrameList
&
kids1
=
!
lists1
.
IsDone
(
)
?
lists1
.
CurrentList
(
)
:
nsFrameList
(
)
;
const
nsFrameList
&
kids2
=
!
lists2
.
IsDone
(
)
?
lists2
.
CurrentList
(
)
:
nsFrameList
(
)
;
int32_t
l1
=
kids1
.
GetLength
(
)
;
int32_t
l2
=
kids2
.
GetLength
(
)
;
if
(
l1
!
=
l2
)
{
ok
=
false
;
LogVerifyMessage
(
kids1
.
FirstChild
(
)
kids2
.
FirstChild
(
)
"
child
counts
don
'
t
match
:
"
)
;
printf
(
"
%
d
!
=
%
d
\
n
"
l1
l2
)
;
if
(
0
=
=
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
)
{
break
;
}
}
LayoutDeviceIntRect
r1
r2
;
nsView
*
v1
;
nsView
*
v2
;
for
(
nsFrameList
:
:
Enumerator
e1
(
kids1
)
e2
(
kids2
)
;
;
e1
.
Next
(
)
e2
.
Next
(
)
)
{
nsIFrame
*
k1
=
e1
.
get
(
)
;
nsIFrame
*
k2
=
e2
.
get
(
)
;
if
(
(
(
nullptr
=
=
k1
)
&
&
(
nullptr
!
=
k2
)
)
|
|
(
(
nullptr
!
=
k1
)
&
&
(
nullptr
=
=
k2
)
)
)
{
ok
=
false
;
LogVerifyMessage
(
k1
k2
"
child
lists
are
different
\
n
"
)
;
break
;
}
else
if
(
nullptr
!
=
k1
)
{
if
(
!
k1
-
>
GetRect
(
)
.
IsEqualInterior
(
k2
-
>
GetRect
(
)
)
)
{
ok
=
false
;
LogVerifyMessage
(
k1
k2
"
(
frame
rects
)
"
k1
-
>
GetRect
(
)
k2
-
>
GetRect
(
)
)
;
}
v1
=
k1
-
>
GetView
(
)
;
v2
=
k2
-
>
GetView
(
)
;
if
(
(
(
nullptr
=
=
v1
)
&
&
(
nullptr
!
=
v2
)
)
|
|
(
(
nullptr
!
=
v1
)
&
&
(
nullptr
=
=
v2
)
)
)
{
ok
=
false
;
LogVerifyMessage
(
k1
k2
"
child
views
are
not
matched
\
n
"
)
;
}
else
if
(
nullptr
!
=
v1
)
{
if
(
!
v1
-
>
GetBounds
(
)
.
IsEqualInterior
(
v2
-
>
GetBounds
(
)
)
)
{
LogVerifyMessage
(
k1
k2
"
(
view
rects
)
"
v1
-
>
GetBounds
(
)
v2
-
>
GetBounds
(
)
)
;
}
nsIWidget
*
w1
=
v1
-
>
GetWidget
(
)
;
nsIWidget
*
w2
=
v2
-
>
GetWidget
(
)
;
if
(
(
(
nullptr
=
=
w1
)
&
&
(
nullptr
!
=
w2
)
)
|
|
(
(
nullptr
!
=
w1
)
&
&
(
nullptr
=
=
w2
)
)
)
{
ok
=
false
;
LogVerifyMessage
(
k1
k2
"
child
widgets
are
not
matched
\
n
"
)
;
}
else
if
(
nullptr
!
=
w1
)
{
r1
=
w1
-
>
GetBounds
(
)
;
r2
=
w2
-
>
GetBounds
(
)
;
if
(
!
r1
.
IsEqualEdges
(
r2
)
)
{
LogVerifyMessage
(
k1
k2
"
(
widget
rects
)
"
r1
.
ToUnknownRect
(
)
r2
.
ToUnknownRect
(
)
)
;
}
}
}
if
(
!
ok
&
&
(
0
=
=
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
)
)
{
break
;
}
if
(
!
CompareTrees
(
aFirstPresContext
k1
aSecondPresContext
k2
)
)
{
ok
=
false
;
if
(
0
=
=
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
)
{
break
;
}
}
}
else
{
break
;
}
}
if
(
!
ok
&
&
(
0
=
=
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
)
)
{
break
;
}
lists1
.
Next
(
)
;
lists2
.
Next
(
)
;
if
(
lists1
.
IsDone
(
)
!
=
lists2
.
IsDone
(
)
|
|
(
!
lists1
.
IsDone
(
)
&
&
lists1
.
CurrentID
(
)
!
=
lists2
.
CurrentID
(
)
)
)
{
if
(
0
=
=
(
VERIFY_REFLOW_ALL
&
gVerifyReflowFlags
)
)
{
ok
=
false
;
}
LogVerifyMessage
(
kids1
.
FirstChild
(
)
kids2
.
FirstChild
(
)
"
child
list
names
are
not
matched
:
"
)
;
fprintf
(
stdout
"
%
s
!
=
%
s
\
n
"
!
lists1
.
IsDone
(
)
?
mozilla
:
:
layout
:
:
ChildListName
(
lists1
.
CurrentID
(
)
)
:
"
(
null
)
"
!
lists2
.
IsDone
(
)
?
mozilla
:
:
layout
:
:
ChildListName
(
lists2
.
CurrentID
(
)
)
:
"
(
null
)
"
)
;
break
;
}
}
while
(
ok
&
&
!
lists1
.
IsDone
(
)
)
;
return
ok
;
}
#
endif
#
if
0
static
nsIFrame
*
FindTopFrame
(
nsIFrame
*
aRoot
)
{
if
(
aRoot
)
{
nsIContent
*
content
=
aRoot
-
>
GetContent
(
)
;
if
(
content
)
{
nsAtom
*
tag
;
content
-
>
GetTag
(
tag
)
;
if
(
nullptr
!
=
tag
)
{
NS_RELEASE
(
tag
)
;
return
aRoot
;
}
}
for
(
nsIFrame
*
kid
:
aRoot
-
>
PrincipalChildList
(
)
)
{
nsIFrame
*
result
=
FindTopFrame
(
kid
)
;
if
(
nullptr
!
=
result
)
{
return
result
;
}
}
}
return
nullptr
;
}
#
endif
#
ifdef
DEBUG
static
void
CopySheetsIntoClone
(
ServoStyleSet
*
aSet
ServoStyleSet
*
aClone
)
{
int32_t
i
n
=
aSet
-
>
SheetCount
(
SheetType
:
:
Override
)
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
StyleSheet
*
ss
=
aSet
-
>
StyleSheetAt
(
SheetType
:
:
Override
i
)
;
if
(
ss
)
aClone
-
>
AppendStyleSheet
(
SheetType
:
:
Override
ss
)
;
}
#
if
0
n
=
aSet
-
>
SheetCount
(
SheetType
:
:
Doc
)
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
StyleSheet
*
ss
=
aSet
-
>
StyleSheetAt
(
SheetType
:
:
Doc
i
)
;
if
(
ss
)
aClone
-
>
AddDocStyleSheet
(
ss
mDocument
)
;
}
#
endif
n
=
aSet
-
>
SheetCount
(
SheetType
:
:
User
)
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
StyleSheet
*
ss
=
aSet
-
>
StyleSheetAt
(
SheetType
:
:
User
i
)
;
if
(
ss
)
aClone
-
>
AppendStyleSheet
(
SheetType
:
:
User
ss
)
;
}
n
=
aSet
-
>
SheetCount
(
SheetType
:
:
Agent
)
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
StyleSheet
*
ss
=
aSet
-
>
StyleSheetAt
(
SheetType
:
:
Agent
i
)
;
if
(
ss
)
aClone
-
>
AppendStyleSheet
(
SheetType
:
:
Agent
ss
)
;
}
}
UniquePtr
<
ServoStyleSet
>
PresShell
:
:
CloneStyleSet
(
ServoStyleSet
*
aSet
)
{
auto
clone
=
MakeUnique
<
ServoStyleSet
>
(
)
;
CopySheetsIntoClone
(
aSet
clone
.
get
(
)
)
;
return
clone
;
}
bool
PresShell
:
:
VerifyIncrementalReflow
(
)
{
if
(
VERIFY_REFLOW_NOISY
&
gVerifyReflowFlags
)
{
printf
(
"
Building
Verification
Tree
.
.
.
\
n
"
)
;
}
RefPtr
<
nsPresContext
>
cx
=
new
nsRootPresContext
(
mDocument
mPresContext
-
>
IsPaginated
(
)
?
nsPresContext
:
:
eContext_PrintPreview
:
nsPresContext
:
:
eContext_Galley
)
;
NS_ENSURE_TRUE
(
cx
false
)
;
nsDeviceContext
*
dc
=
mPresContext
-
>
DeviceContext
(
)
;
nsresult
rv
=
cx
-
>
Init
(
dc
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
nsView
*
rootView
=
mViewManager
-
>
GetRootView
(
)
;
NS_ENSURE_TRUE
(
rootView
-
>
HasWidget
(
)
false
)
;
nsIWidget
*
parentWidget
=
rootView
-
>
GetWidget
(
)
;
RefPtr
<
nsViewManager
>
vm
=
new
nsViewManager
(
)
;
NS_ENSURE_TRUE
(
vm
false
)
;
rv
=
vm
-
>
Init
(
dc
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
nsRect
tbounds
=
mPresContext
-
>
GetVisibleArea
(
)
;
nsView
*
view
=
vm
-
>
CreateView
(
tbounds
nullptr
)
;
NS_ENSURE_TRUE
(
view
false
)
;
rv
=
view
-
>
CreateWidgetForParent
(
parentWidget
nullptr
true
)
;
NS_ENSURE_SUCCESS
(
rv
false
)
;
vm
-
>
SetRootView
(
view
)
;
cx
-
>
SetVisibleArea
(
mPresContext
-
>
GetVisibleArea
(
)
)
;
UniquePtr
<
ServoStyleSet
>
newSet
=
CloneStyleSet
(
StyleSet
(
)
)
;
nsCOMPtr
<
nsIPresShell
>
sh
=
mDocument
-
>
CreateShell
(
cx
vm
std
:
:
move
(
newSet
)
)
;
NS_ENSURE_TRUE
(
sh
false
)
;
sh
-
>
SetVerifyReflowEnable
(
false
)
;
vm
-
>
SetPresShell
(
sh
)
;
{
nsAutoCauseReflowNotifier
crNotifier
(
this
)
;
sh
-
>
Initialize
(
)
;
}
mDocument
-
>
BindingManager
(
)
-
>
ProcessAttachedQueue
(
)
;
sh
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
sh
-
>
SetVerifyReflowEnable
(
true
)
;
(
(
PresShell
*
)
sh
.
get
(
)
)
-
>
mPaintingSuppressed
=
false
;
if
(
VERIFY_REFLOW_NOISY
&
gVerifyReflowFlags
)
{
printf
(
"
Verification
Tree
built
comparing
.
.
.
\
n
"
)
;
}
nsIFrame
*
root1
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
nsIFrame
*
root2
=
sh
-
>
GetRootFrame
(
)
;
bool
ok
=
CompareTrees
(
mPresContext
root1
cx
root2
)
;
if
(
!
ok
&
&
(
VERIFY_REFLOW_NOISY
&
gVerifyReflowFlags
)
)
{
printf
(
"
Verify
reflow
failed
primary
tree
:
\
n
"
)
;
root1
-
>
List
(
stdout
0
)
;
printf
(
"
Verification
tree
:
\
n
"
)
;
root2
-
>
List
(
stdout
0
)
;
}
#
if
0
if
(
!
ok
)
{
nsString
stra
;
static
int
num
=
0
;
stra
.
AppendLiteral
(
"
C
:
\
\
mozilla
\
\
mozilla
\
\
debug
\
\
filea
"
)
;
stra
.
AppendInt
(
num
)
;
stra
.
AppendLiteral
(
"
.
png
"
)
;
gfxUtils
:
:
WriteAsPNG
(
sh
stra
)
;
nsString
strb
;
strb
.
AppendLiteral
(
"
C
:
\
\
mozilla
\
\
mozilla
\
\
debug
\
\
fileb
"
)
;
strb
.
AppendInt
(
num
)
;
strb
.
AppendLiteral
(
"
.
png
"
)
;
gfxUtils
:
:
WriteAsPNG
(
sh
strb
)
;
+
+
num
;
}
#
endif
sh
-
>
EndObservingDocument
(
)
;
sh
-
>
Destroy
(
)
;
if
(
VERIFY_REFLOW_NOISY
&
gVerifyReflowFlags
)
{
printf
(
"
Finished
Verifying
Reflow
.
.
.
\
n
"
)
;
}
return
ok
;
}
void
PresShell
:
:
ListComputedStyles
(
FILE
*
out
int32_t
aIndent
)
{
nsIFrame
*
rootFrame
=
GetRootFrame
(
)
;
if
(
rootFrame
)
{
rootFrame
-
>
Style
(
)
-
>
List
(
out
aIndent
)
;
}
Element
*
rootElement
=
mDocument
-
>
GetRootElement
(
)
;
if
(
rootElement
)
{
nsIFrame
*
rootElementFrame
=
rootElement
-
>
GetPrimaryFrame
(
)
;
if
(
rootElementFrame
)
{
rootElementFrame
-
>
Style
(
)
-
>
List
(
out
aIndent
)
;
}
}
}
void
PresShell
:
:
ListStyleSheets
(
FILE
*
out
int32_t
aIndent
)
{
int32_t
sheetCount
=
mStyleSet
-
>
SheetCount
(
SheetType
:
:
Doc
)
;
for
(
int32_t
i
=
0
;
i
<
sheetCount
;
+
+
i
)
{
mStyleSet
-
>
StyleSheetAt
(
SheetType
:
:
Doc
i
)
-
>
List
(
out
aIndent
)
;
fputs
(
"
\
n
"
out
)
;
}
}
#
endif
#
ifdef
MOZ_REFLOW_PERF
void
PresShell
:
:
DumpReflows
(
)
{
if
(
mReflowCountMgr
)
{
nsAutoCString
uriStr
;
if
(
mDocument
)
{
nsIURI
*
uri
=
mDocument
-
>
GetDocumentURI
(
)
;
if
(
uri
)
{
uri
-
>
GetPathQueryRef
(
uriStr
)
;
}
}
mReflowCountMgr
-
>
DisplayTotals
(
uriStr
.
get
(
)
)
;
mReflowCountMgr
-
>
DisplayHTMLTotals
(
uriStr
.
get
(
)
)
;
mReflowCountMgr
-
>
DisplayDiffsInTotals
(
)
;
}
}
void
PresShell
:
:
CountReflows
(
const
char
*
aName
nsIFrame
*
aFrame
)
{
if
(
mReflowCountMgr
)
{
mReflowCountMgr
-
>
Add
(
aName
aFrame
)
;
}
}
void
PresShell
:
:
PaintCount
(
const
char
*
aName
gfxContext
*
aRenderingContext
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
const
nsPoint
&
aOffset
uint32_t
aColor
)
{
if
(
mReflowCountMgr
)
{
mReflowCountMgr
-
>
PaintCount
(
aName
aRenderingContext
aPresContext
aFrame
aOffset
aColor
)
;
}
}
void
PresShell
:
:
SetPaintFrameCount
(
bool
aPaintFrameCounts
)
{
if
(
mReflowCountMgr
)
{
mReflowCountMgr
-
>
SetPaintFrameCounts
(
aPaintFrameCounts
)
;
}
}
bool
PresShell
:
:
IsPaintingFrameCounts
(
)
{
if
(
mReflowCountMgr
)
return
mReflowCountMgr
-
>
IsPaintingFrameCounts
(
)
;
return
false
;
}
ReflowCounter
:
:
ReflowCounter
(
ReflowCountMgr
*
aMgr
)
:
mMgr
(
aMgr
)
{
ClearTotals
(
)
;
SetTotalsCache
(
)
;
}
ReflowCounter
:
:
~
ReflowCounter
(
)
{
}
void
ReflowCounter
:
:
ClearTotals
(
)
{
mTotal
=
0
;
}
void
ReflowCounter
:
:
SetTotalsCache
(
)
{
mCacheTotal
=
mTotal
;
}
void
ReflowCounter
:
:
CalcDiffInTotals
(
)
{
mCacheTotal
=
mTotal
-
mCacheTotal
;
}
void
ReflowCounter
:
:
DisplayTotals
(
const
char
*
aStr
)
{
DisplayTotals
(
mTotal
aStr
?
aStr
:
"
Totals
"
)
;
}
void
ReflowCounter
:
:
DisplayDiffTotals
(
const
char
*
aStr
)
{
DisplayTotals
(
mCacheTotal
aStr
?
aStr
:
"
Diff
Totals
"
)
;
}
void
ReflowCounter
:
:
DisplayHTMLTotals
(
const
char
*
aStr
)
{
DisplayHTMLTotals
(
mTotal
aStr
?
aStr
:
"
Totals
"
)
;
}
void
ReflowCounter
:
:
DisplayTotals
(
uint32_t
aTotal
const
char
*
aTitle
)
{
if
(
aTotal
=
=
0
)
{
return
;
}
ReflowCounter
*
gTots
=
(
ReflowCounter
*
)
mMgr
-
>
LookUp
(
kGrandTotalsStr
)
;
printf
(
"
%
25s
\
t
"
aTitle
)
;
printf
(
"
%
d
\
t
"
aTotal
)
;
if
(
gTots
!
=
this
&
&
aTotal
>
0
)
{
gTots
-
>
Add
(
aTotal
)
;
}
}
void
ReflowCounter
:
:
DisplayHTMLTotals
(
uint32_t
aTotal
const
char
*
aTitle
)
{
if
(
aTotal
=
=
0
)
{
return
;
}
ReflowCounter
*
gTots
=
(
ReflowCounter
*
)
mMgr
-
>
LookUp
(
kGrandTotalsStr
)
;
FILE
*
fd
=
mMgr
-
>
GetOutFile
(
)
;
if
(
!
fd
)
{
return
;
}
fprintf
(
fd
"
<
tr
>
<
td
>
<
center
>
%
s
<
/
center
>
<
/
td
>
"
aTitle
)
;
fprintf
(
fd
"
<
td
>
<
center
>
%
d
<
/
center
>
<
/
td
>
<
/
tr
>
\
n
"
aTotal
)
;
if
(
gTots
!
=
this
&
&
aTotal
>
0
)
{
gTots
-
>
Add
(
aTotal
)
;
}
}
#
define
KEY_BUF_SIZE_FOR_PTR
24
/
/
adequate
char
[
]
buffer
to
sprintf
a
pointer
ReflowCountMgr
:
:
ReflowCountMgr
(
)
:
mCounts
(
10
)
mIndiFrameCounts
(
10
)
{
mCycledOnce
=
false
;
mDumpFrameCounts
=
false
;
mDumpFrameByFrameCounts
=
false
;
mPaintFrameByFrameCounts
=
false
;
}
ReflowCountMgr
:
:
~
ReflowCountMgr
(
)
{
}
ReflowCounter
*
ReflowCountMgr
:
:
LookUp
(
const
char
*
aName
)
{
return
mCounts
.
Get
(
aName
)
;
}
void
ReflowCountMgr
:
:
Add
(
const
char
*
aName
nsIFrame
*
aFrame
)
{
NS_ASSERTION
(
aName
!
=
nullptr
"
Name
shouldn
'
t
be
null
!
"
)
;
if
(
mDumpFrameCounts
)
{
ReflowCounter
*
counter
=
mCounts
.
LookupForAdd
(
aName
)
.
OrInsert
(
[
this
]
(
)
{
return
new
ReflowCounter
(
this
)
;
}
)
;
counter
-
>
Add
(
)
;
}
if
(
(
mDumpFrameByFrameCounts
|
|
mPaintFrameByFrameCounts
)
&
&
aFrame
!
=
nullptr
)
{
char
key
[
KEY_BUF_SIZE_FOR_PTR
]
;
SprintfLiteral
(
key
"
%
p
"
(
void
*
)
aFrame
)
;
IndiReflowCounter
*
counter
=
mIndiFrameCounts
.
LookupForAdd
(
key
)
.
OrInsert
(
[
&
aName
&
aFrame
this
]
(
)
{
auto
counter
=
new
IndiReflowCounter
(
this
)
;
counter
-
>
mFrame
=
aFrame
;
counter
-
>
mName
.
AssignASCII
(
aName
)
;
return
counter
;
}
)
;
if
(
counter
!
=
nullptr
&
&
counter
-
>
mName
.
EqualsASCII
(
aName
)
)
{
counter
-
>
mCount
+
+
;
counter
-
>
mCounter
.
Add
(
1
)
;
}
}
}
void
ReflowCountMgr
:
:
PaintCount
(
const
char
*
aName
gfxContext
*
aRenderingContext
nsPresContext
*
aPresContext
nsIFrame
*
aFrame
const
nsPoint
&
aOffset
uint32_t
aColor
)
{
if
(
mPaintFrameByFrameCounts
&
&
aFrame
!
=
nullptr
)
{
char
key
[
KEY_BUF_SIZE_FOR_PTR
]
;
SprintfLiteral
(
key
"
%
p
"
(
void
*
)
aFrame
)
;
IndiReflowCounter
*
counter
=
mIndiFrameCounts
.
Get
(
key
)
;
if
(
counter
!
=
nullptr
&
&
counter
-
>
mName
.
EqualsASCII
(
aName
)
)
{
DrawTarget
*
drawTarget
=
aRenderingContext
-
>
GetDrawTarget
(
)
;
int32_t
appUnitsPerDevPixel
=
aPresContext
-
>
AppUnitsPerDevPixel
(
)
;
aRenderingContext
-
>
Save
(
)
;
gfxPoint
devPixelOffset
=
nsLayoutUtils
:
:
PointToGfxPoint
(
aOffset
appUnitsPerDevPixel
)
;
aRenderingContext
-
>
SetMatrixDouble
(
aRenderingContext
-
>
CurrentMatrixDouble
(
)
.
PreTranslate
(
devPixelOffset
)
)
;
nsFont
font
(
eFamily_serif
nsPresContext
:
:
CSSPixelsToAppUnits
(
11
)
)
;
nsFontMetrics
:
:
Params
params
;
params
.
language
=
nsGkAtoms
:
:
x_western
;
params
.
textPerf
=
aPresContext
-
>
GetTextPerfMetrics
(
)
;
RefPtr
<
nsFontMetrics
>
fm
=
aPresContext
-
>
DeviceContext
(
)
-
>
GetMetricsFor
(
font
params
)
;
char
buf
[
16
]
;
int
len
=
SprintfLiteral
(
buf
"
%
d
"
counter
-
>
mCount
)
;
nscoord
x
=
0
y
=
fm
-
>
MaxAscent
(
)
;
nscoord
width
height
=
fm
-
>
MaxHeight
(
)
;
fm
-
>
SetTextRunRTL
(
false
)
;
width
=
fm
-
>
GetWidth
(
buf
len
drawTarget
)
;
Color
color
;
Color
color2
;
if
(
aColor
!
=
0
)
{
color
=
Color
:
:
FromABGR
(
aColor
)
;
color2
=
Color
(
0
.
f
0
.
f
0
.
f
)
;
}
else
{
gfx
:
:
Float
rc
=
0
.
f
gc
=
0
.
f
bc
=
0
.
f
;
if
(
counter
-
>
mCount
<
5
)
{
rc
=
1
.
f
;
gc
=
1
.
f
;
}
else
if
(
counter
-
>
mCount
<
11
)
{
gc
=
1
.
f
;
}
else
{
rc
=
1
.
f
;
}
color
=
Color
(
rc
gc
bc
)
;
color2
=
Color
(
rc
/
2
gc
/
2
bc
/
2
)
;
}
nsRect
rect
(
0
0
width
+
15
height
+
15
)
;
Rect
devPxRect
=
NSRectToSnappedRect
(
rect
appUnitsPerDevPixel
*
drawTarget
)
;
ColorPattern
black
(
ToDeviceColor
(
Color
(
0
.
f
0
.
f
0
.
f
1
.
f
)
)
)
;
drawTarget
-
>
FillRect
(
devPxRect
black
)
;
aRenderingContext
-
>
SetColor
(
color2
)
;
fm
-
>
DrawString
(
buf
len
x
+
15
y
+
15
aRenderingContext
)
;
aRenderingContext
-
>
SetColor
(
color
)
;
fm
-
>
DrawString
(
buf
len
x
y
aRenderingContext
)
;
aRenderingContext
-
>
Restore
(
)
;
}
}
}
void
ReflowCountMgr
:
:
DoGrandTotals
(
)
{
auto
entry
=
mCounts
.
LookupForAdd
(
kGrandTotalsStr
)
;
if
(
!
entry
)
{
entry
.
OrInsert
(
[
this
]
(
)
{
return
new
ReflowCounter
(
this
)
;
}
)
;
}
else
{
entry
.
Data
(
)
-
>
ClearTotals
(
)
;
}
printf
(
"
\
t
\
t
\
t
\
tTotal
\
n
"
)
;
for
(
uint32_t
i
=
0
;
i
<
78
;
i
+
+
)
{
printf
(
"
-
"
)
;
}
printf
(
"
\
n
"
)
;
for
(
auto
iter
=
mCounts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Data
(
)
-
>
DisplayTotals
(
iter
.
Key
(
)
)
;
}
}
static
void
RecurseIndiTotals
(
nsPresContext
*
aPresContext
nsClassHashtable
<
nsCharPtrHashKey
IndiReflowCounter
>
&
aHT
nsIFrame
*
aParentFrame
int32_t
aLevel
)
{
if
(
aParentFrame
=
=
nullptr
)
{
return
;
}
char
key
[
KEY_BUF_SIZE_FOR_PTR
]
;
SprintfLiteral
(
key
"
%
p
"
(
void
*
)
aParentFrame
)
;
IndiReflowCounter
*
counter
=
aHT
.
Get
(
key
)
;
if
(
counter
)
{
counter
-
>
mHasBeenOutput
=
true
;
char
*
name
=
ToNewCString
(
counter
-
>
mName
)
;
for
(
int32_t
i
=
0
;
i
<
aLevel
;
i
+
+
)
printf
(
"
"
)
;
printf
(
"
%
s
-
%
p
[
%
d
]
[
"
name
(
void
*
)
aParentFrame
counter
-
>
mCount
)
;
printf
(
"
%
d
"
counter
-
>
mCounter
.
GetTotal
(
)
)
;
printf
(
"
]
\
n
"
)
;
free
(
name
)
;
}
for
(
nsIFrame
*
child
:
aParentFrame
-
>
PrincipalChildList
(
)
)
{
RecurseIndiTotals
(
aPresContext
aHT
child
aLevel
+
1
)
;
}
}
void
ReflowCountMgr
:
:
DoIndiTotalsTree
(
)
{
printf
(
"
\
n
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
printf
(
"
-
-
Individual
Frame
Counts
\
n
"
)
;
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
if
(
mPresShell
)
{
nsIFrame
*
rootFrame
=
mPresShell
-
>
GetRootFrame
(
)
;
RecurseIndiTotals
(
mPresContext
mIndiFrameCounts
rootFrame
0
)
;
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
printf
(
"
-
-
Individual
Counts
of
Frames
not
in
Root
Tree
\
n
"
)
;
printf
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
for
(
auto
iter
=
mIndiFrameCounts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
IndiReflowCounter
*
counter
=
iter
.
Data
(
)
;
if
(
!
counter
-
>
mHasBeenOutput
)
{
char
*
name
=
ToNewCString
(
counter
-
>
mName
)
;
printf
(
"
%
s
-
%
p
[
%
d
]
[
"
name
(
void
*
)
counter
-
>
mFrame
counter
-
>
mCount
)
;
printf
(
"
%
d
"
counter
-
>
mCounter
.
GetTotal
(
)
)
;
printf
(
"
]
\
n
"
)
;
free
(
name
)
;
}
}
}
}
void
ReflowCountMgr
:
:
DoGrandHTMLTotals
(
)
{
auto
entry
=
mCounts
.
LookupForAdd
(
kGrandTotalsStr
)
;
if
(
!
entry
)
{
entry
.
OrInsert
(
[
this
]
(
)
{
return
new
ReflowCounter
(
this
)
;
}
)
;
}
else
{
entry
.
Data
(
)
-
>
ClearTotals
(
)
;
}
static
const
char
*
title
[
]
=
{
"
Class
"
"
Reflows
"
}
;
fprintf
(
mFD
"
<
tr
>
"
)
;
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
title
)
;
i
+
+
)
{
fprintf
(
mFD
"
<
td
>
<
center
>
<
b
>
%
s
<
b
>
<
/
center
>
<
/
td
>
"
title
[
i
]
)
;
}
fprintf
(
mFD
"
<
/
tr
>
\
n
"
)
;
for
(
auto
iter
=
mCounts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Data
(
)
-
>
DisplayHTMLTotals
(
iter
.
Key
(
)
)
;
}
}
void
ReflowCountMgr
:
:
DisplayTotals
(
const
char
*
aStr
)
{
#
ifdef
DEBUG_rods
printf
(
"
%
s
\
n
"
aStr
?
aStr
:
"
No
name
"
)
;
#
endif
if
(
mDumpFrameCounts
)
{
DoGrandTotals
(
)
;
}
if
(
mDumpFrameByFrameCounts
)
{
DoIndiTotalsTree
(
)
;
}
}
void
ReflowCountMgr
:
:
DisplayHTMLTotals
(
const
char
*
aStr
)
{
#
ifdef
WIN32x
char
name
[
1024
]
;
char
*
sptr
=
strrchr
(
aStr
'
/
'
)
;
if
(
sptr
)
{
sptr
+
+
;
strcpy
(
name
sptr
)
;
char
*
eptr
=
strrchr
(
name
'
.
'
)
;
if
(
eptr
)
{
*
eptr
=
0
;
}
strcat
(
name
"
_stats
.
html
"
)
;
}
mFD
=
fopen
(
name
"
w
"
)
;
if
(
mFD
)
{
fprintf
(
mFD
"
<
html
>
<
head
>
<
title
>
Reflow
Stats
<
/
title
>
<
/
head
>
<
body
>
\
n
"
)
;
const
char
*
title
=
aStr
?
aStr
:
"
No
name
"
;
fprintf
(
mFD
"
<
center
>
<
b
>
%
s
<
/
b
>
<
br
>
<
table
border
=
1
style
=
\
"
background
-
color
:
#
e0e0e0
\
"
>
"
title
)
;
DoGrandHTMLTotals
(
)
;
fprintf
(
mFD
"
<
/
center
>
<
/
table
>
\
n
"
)
;
fprintf
(
mFD
"
<
/
body
>
<
/
html
>
\
n
"
)
;
fclose
(
mFD
)
;
mFD
=
nullptr
;
}
#
endif
}
void
ReflowCountMgr
:
:
ClearTotals
(
)
{
for
(
auto
iter
=
mCounts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
iter
.
Data
(
)
-
>
ClearTotals
(
)
;
}
}
void
ReflowCountMgr
:
:
ClearGrandTotals
(
)
{
auto
entry
=
mCounts
.
LookupForAdd
(
kGrandTotalsStr
)
;
if
(
!
entry
)
{
entry
.
OrInsert
(
[
this
]
(
)
{
return
new
ReflowCounter
(
this
)
;
}
)
;
}
else
{
entry
.
Data
(
)
-
>
ClearTotals
(
)
;
entry
.
Data
(
)
-
>
SetTotalsCache
(
)
;
}
}
void
ReflowCountMgr
:
:
DisplayDiffsInTotals
(
)
{
if
(
mCycledOnce
)
{
printf
(
"
Differences
\
n
"
)
;
for
(
int32_t
i
=
0
;
i
<
78
;
i
+
+
)
{
printf
(
"
-
"
)
;
}
printf
(
"
\
n
"
)
;
ClearGrandTotals
(
)
;
}
for
(
auto
iter
=
mCounts
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
if
(
mCycledOnce
)
{
iter
.
Data
(
)
-
>
CalcDiffInTotals
(
)
;
iter
.
Data
(
)
-
>
DisplayDiffTotals
(
iter
.
Key
(
)
)
;
}
iter
.
Data
(
)
-
>
SetTotalsCache
(
)
;
}
mCycledOnce
=
true
;
}
#
endif
nsIFrame
*
nsIPresShell
:
:
GetAbsoluteContainingBlock
(
nsIFrame
*
aFrame
)
{
return
FrameConstructor
(
)
-
>
GetAbsoluteContainingBlock
(
aFrame
nsCSSFrameConstructor
:
:
ABS_POS
)
;
}
#
ifdef
ACCESSIBILITY
bool
nsIPresShell
:
:
IsAccessibilityActive
(
)
{
return
GetAccService
(
)
!
=
nullptr
;
}
nsAccessibilityService
*
nsIPresShell
:
:
AccService
(
)
{
return
GetAccService
(
)
;
}
#
endif
void
PresShell
:
:
QueryIsActive
(
)
{
nsCOMPtr
<
nsISupports
>
container
=
mPresContext
-
>
GetContainerWeak
(
)
;
if
(
mDocument
)
{
nsIDocument
*
displayDoc
=
mDocument
-
>
GetDisplayDocument
(
)
;
if
(
displayDoc
)
{
MOZ_ASSERT
(
!
container
"
external
resource
doc
shouldn
'
t
have
its
own
container
"
)
;
nsPresContext
*
displayPresContext
=
displayDoc
-
>
GetPresContext
(
)
;
if
(
displayPresContext
)
{
container
=
displayPresContext
-
>
GetContainerWeak
(
)
;
}
}
}
nsCOMPtr
<
nsIDocShell
>
docshell
(
do_QueryInterface
(
container
)
)
;
if
(
docshell
)
{
bool
isActive
;
nsresult
rv
=
docshell
-
>
GetIsActive
(
&
isActive
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
SetIsActive
(
isActive
)
;
}
}
static
bool
SetExternalResourceIsActive
(
nsIDocument
*
aDocument
void
*
aClosure
)
{
nsIPresShell
*
shell
=
aDocument
-
>
GetShell
(
)
;
if
(
shell
)
{
shell
-
>
SetIsActive
(
*
static_cast
<
bool
*
>
(
aClosure
)
)
;
}
return
true
;
}
static
void
SetPluginIsActive
(
nsISupports
*
aSupports
void
*
aClosure
)
{
nsCOMPtr
<
nsIContent
>
content
(
do_QueryInterface
(
aSupports
)
)
;
if
(
!
content
)
{
return
;
}
nsIFrame
*
frame
=
content
-
>
GetPrimaryFrame
(
)
;
nsIObjectFrame
*
objectFrame
=
do_QueryFrame
(
frame
)
;
if
(
objectFrame
)
{
objectFrame
-
>
SetIsDocumentActive
(
*
static_cast
<
bool
*
>
(
aClosure
)
)
;
}
}
nsresult
PresShell
:
:
SetIsActive
(
bool
aIsActive
)
{
MOZ_ASSERT
(
mDocument
"
should
only
be
called
with
a
document
"
)
;
mIsActive
=
aIsActive
;
nsPresContext
*
presContext
=
GetPresContext
(
)
;
if
(
presContext
&
&
presContext
-
>
RefreshDriver
(
)
-
>
GetPresContext
(
)
=
=
presContext
)
{
presContext
-
>
RefreshDriver
(
)
-
>
SetThrottled
(
!
mIsActive
)
;
}
mDocument
-
>
EnumerateExternalResources
(
SetExternalResourceIsActive
&
aIsActive
)
;
mDocument
-
>
EnumerateActivityObservers
(
SetPluginIsActive
&
aIsActive
)
;
nsresult
rv
=
UpdateImageLockingState
(
)
;
#
ifdef
ACCESSIBILITY
if
(
aIsActive
)
{
nsAccessibilityService
*
accService
=
AccService
(
)
;
if
(
accService
)
{
accService
-
>
PresShellActivated
(
this
)
;
}
}
#
endif
return
rv
;
}
void
PresShell
:
:
UpdateViewportOverridden
(
bool
aAfterInitialization
)
{
bool
needMVM
=
nsLayoutUtils
:
:
ShouldHandleMetaViewport
(
mDocument
)
|
|
gfxPrefs
:
:
APZAllowZooming
(
)
;
if
(
needMVM
=
=
!
!
mMobileViewportManager
)
{
return
;
}
if
(
needMVM
)
{
if
(
mPresContext
-
>
IsRootContentDocument
(
)
)
{
mMobileViewportManager
=
new
MobileViewportManager
(
this
mDocument
)
;
if
(
aAfterInitialization
)
{
mMobileViewportManager
-
>
SetInitialViewport
(
)
;
}
}
return
;
}
MOZ_ASSERT
(
mMobileViewportManager
"
Shouldn
'
t
reach
this
without
a
"
"
MobileViewportManager
.
"
)
;
mMobileViewportManager
-
>
Destroy
(
)
;
mMobileViewportManager
=
nullptr
;
if
(
aAfterInitialization
)
{
nsDocShell
*
docShell
=
static_cast
<
nsDocShell
*
>
(
GetPresContext
(
)
-
>
GetDocShell
(
)
)
;
int32_t
width
height
;
docShell
-
>
GetSize
(
&
width
&
height
)
;
docShell
-
>
SetSize
(
width
height
false
)
;
}
}
nsresult
PresShell
:
:
UpdateImageLockingState
(
)
{
bool
locked
=
!
mFrozen
&
&
mIsActive
;
nsresult
rv
=
mDocument
-
>
ImageTracker
(
)
-
>
SetLockingState
(
locked
)
;
if
(
locked
)
{
for
(
auto
iter
=
mApproximatelyVisibleFrames
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
nsImageFrame
*
imageFrame
=
do_QueryFrame
(
iter
.
Get
(
)
-
>
GetKey
(
)
)
;
if
(
imageFrame
)
{
imageFrame
-
>
MaybeDecodeForPredictedSize
(
)
;
}
}
}
return
rv
;
}
PresShell
*
PresShell
:
:
GetRootPresShell
(
)
{
if
(
mPresContext
)
{
nsPresContext
*
rootPresContext
=
mPresContext
-
>
GetRootPresContext
(
)
;
if
(
rootPresContext
)
{
return
static_cast
<
PresShell
*
>
(
rootPresContext
-
>
PresShell
(
)
)
;
}
}
return
nullptr
;
}
void
PresShell
:
:
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
{
MallocSizeOf
mallocSizeOf
=
aSizes
.
mState
.
mMallocSizeOf
;
mFrameArena
.
AddSizeOfExcludingThis
(
aSizes
)
;
aSizes
.
mLayoutPresShellSize
+
=
mallocSizeOf
(
this
)
;
if
(
mCaret
)
{
aSizes
.
mLayoutPresShellSize
+
=
mCaret
-
>
SizeOfIncludingThis
(
mallocSizeOf
)
;
}
aSizes
.
mLayoutPresShellSize
+
=
mApproximatelyVisibleFrames
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
+
mFramesToDirty
.
ShallowSizeOfExcludingThis
(
mallocSizeOf
)
;
StyleSet
(
)
-
>
AddSizeOfIncludingThis
(
aSizes
)
;
aSizes
.
mLayoutTextRunsSize
+
=
SizeOfTextRuns
(
mallocSizeOf
)
;
aSizes
.
mLayoutPresContextSize
+
=
mPresContext
-
>
SizeOfIncludingThis
(
mallocSizeOf
)
;
mFrameConstructor
-
>
AddSizeOfIncludingThis
(
aSizes
)
;
}
size_t
PresShell
:
:
SizeOfTextRuns
(
MallocSizeOf
aMallocSizeOf
)
const
{
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
!
rootFrame
)
{
return
0
;
}
nsLayoutUtils
:
:
SizeOfTextRunsForFrames
(
rootFrame
nullptr
true
)
;
return
nsLayoutUtils
:
:
SizeOfTextRunsForFrames
(
rootFrame
aMallocSizeOf
false
)
;
}
void
nsIPresShell
:
:
MarkFixedFramesForReflow
(
IntrinsicDirty
aIntrinsicDirty
)
{
nsIFrame
*
rootFrame
=
mFrameConstructor
-
>
GetRootFrame
(
)
;
if
(
rootFrame
)
{
const
nsFrameList
&
childList
=
rootFrame
-
>
GetChildList
(
nsIFrame
:
:
kFixedList
)
;
for
(
nsIFrame
*
childFrame
:
childList
)
{
FrameNeedsReflow
(
childFrame
aIntrinsicDirty
NS_FRAME_IS_DIRTY
)
;
}
}
}
void
nsIPresShell
:
:
SetVisualViewportSize
(
nscoord
aWidth
nscoord
aHeight
)
{
if
(
!
mVisualViewportSizeSet
|
|
mVisualViewportSize
.
width
!
=
aWidth
|
|
mVisualViewportSize
.
height
!
=
aHeight
)
{
mVisualViewportSizeSet
=
true
;
mVisualViewportSize
.
width
=
aWidth
;
mVisualViewportSize
.
height
=
aHeight
;
if
(
nsIScrollableFrame
*
rootScrollFrame
=
GetRootScrollFrameAsScrollable
(
)
)
{
rootScrollFrame
-
>
MarkScrollbarsDirtyForReflow
(
)
;
}
MarkFixedFramesForReflow
(
nsIPresShell
:
:
eResize
)
;
}
}
nsPoint
nsIPresShell
:
:
GetVisualViewportOffsetRelativeToLayoutViewport
(
)
const
{
nsPoint
result
;
if
(
nsIScrollableFrame
*
sf
=
GetRootScrollFrameAsScrollable
(
)
)
{
result
=
GetVisualViewportOffset
(
)
-
sf
-
>
GetScrollPosition
(
)
;
}
return
result
;
}
void
nsIPresShell
:
:
RecomputeFontSizeInflationEnabled
(
)
{
mFontSizeInflationEnabled
=
DetermineFontSizeInflationState
(
)
;
float
fontScale
=
nsLayoutUtils
:
:
SystemFontScale
(
)
;
if
(
fontScale
=
=
0
.
0f
)
{
return
;
}
MOZ_ASSERT
(
mDocument
)
;
MOZ_ASSERT
(
mPresContext
)
;
if
(
mFontSizeInflationEnabled
|
|
mDocument
-
>
IsSyntheticDocument
(
)
)
{
mPresContext
-
>
SetSystemFontScale
(
1
.
0f
)
;
}
else
{
mPresContext
-
>
SetSystemFontScale
(
fontScale
)
;
}
}
bool
nsIPresShell
:
:
DetermineFontSizeInflationState
(
)
{
MOZ_ASSERT
(
mPresContext
"
our
pres
context
should
not
be
null
"
)
;
if
(
mPresContext
-
>
IsChrome
(
)
)
{
return
false
;
}
if
(
FontSizeInflationEmPerLine
(
)
=
=
0
&
&
FontSizeInflationMinTwips
(
)
=
=
0
)
{
return
false
;
}
if
(
!
FontSizeInflationForceEnabled
(
)
)
{
if
(
TabChild
*
tab
=
TabChild
:
:
GetFrom
(
this
)
)
{
if
(
!
tab
-
>
AsyncPanZoomEnabled
(
)
)
{
return
false
;
}
}
else
if
(
XRE_IsParentProcess
(
)
)
{
if
(
FontSizeInflationDisabledInMasterProcess
(
)
)
{
return
false
;
}
}
}
nsresult
rv
;
nsCOMPtr
<
nsIScreenManager
>
screenMgr
=
do_GetService
(
"
mozilla
.
org
/
gfx
/
screenmanager
;
1
"
&
rv
)
;
if
(
!
NS_SUCCEEDED
(
rv
)
)
{
return
false
;
}
nsCOMPtr
<
nsIScreen
>
screen
;
screenMgr
-
>
GetPrimaryScreen
(
getter_AddRefs
(
screen
)
)
;
if
(
screen
)
{
int32_t
screenLeft
screenTop
screenWidth
screenHeight
;
screen
-
>
GetRect
(
&
screenLeft
&
screenTop
&
screenWidth
&
screenHeight
)
;
nsViewportInfo
vInf
=
GetDocument
(
)
-
>
GetViewportInfo
(
ScreenIntSize
(
screenWidth
screenHeight
)
)
;
if
(
vInf
.
GetDefaultZoom
(
)
>
=
CSSToScreenScale
(
1
.
0f
)
|
|
vInf
.
IsAutoSizeEnabled
(
)
)
{
return
false
;
}
}
return
true
;
}
void
PresShell
:
:
PausePainting
(
)
{
if
(
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
GetPresContext
(
)
!
=
GetPresContext
(
)
)
return
;
mPaintingIsFrozen
=
true
;
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
Freeze
(
)
;
}
void
PresShell
:
:
ResumePainting
(
)
{
if
(
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
GetPresContext
(
)
!
=
GetPresContext
(
)
)
return
;
mPaintingIsFrozen
=
false
;
GetPresContext
(
)
-
>
RefreshDriver
(
)
-
>
Thaw
(
)
;
}
void
nsIPresShell
:
:
SyncWindowProperties
(
nsView
*
aView
)
{
nsIFrame
*
frame
=
aView
-
>
GetFrame
(
)
;
if
(
frame
&
&
mPresContext
)
{
RefPtr
<
gfxContext
>
rcx
(
CreateReferenceRenderingContext
(
)
)
;
nsContainerFrame
:
:
SyncWindowProperties
(
mPresContext
frame
aView
rcx
0
)
;
}
}
static
SheetType
ToSheetType
(
uint32_t
aServiceSheetType
)
{
switch
(
aServiceSheetType
)
{
case
nsIStyleSheetService
:
:
AGENT_SHEET
:
return
SheetType
:
:
Agent
;
break
;
case
nsIStyleSheetService
:
:
USER_SHEET
:
return
SheetType
:
:
User
;
break
;
default
:
MOZ_FALLTHROUGH_ASSERT
(
"
unexpected
aSheetType
value
"
)
;
case
nsIStyleSheetService
:
:
AUTHOR_SHEET
:
return
SheetType
:
:
Doc
;
}
}
nsresult
nsIPresShell
:
:
HasRuleProcessorUsedByMultipleStyleSets
(
uint32_t
aSheetType
bool
*
aRetVal
)
{
*
aRetVal
=
false
;
return
NS_OK
;
}
void
PresShell
:
:
NotifyStyleSheetServiceSheetAdded
(
StyleSheet
*
aSheet
uint32_t
aSheetType
)
{
if
(
!
mStyleSet
)
{
return
;
}
switch
(
aSheetType
)
{
case
nsIStyleSheetService
:
:
AGENT_SHEET
:
AddAgentSheet
(
aSheet
)
;
break
;
case
nsIStyleSheetService
:
:
USER_SHEET
:
AddUserSheet
(
aSheet
)
;
break
;
case
nsIStyleSheetService
:
:
AUTHOR_SHEET
:
AddAuthorSheet
(
aSheet
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
aSheetType
value
"
)
;
break
;
}
}
void
PresShell
:
:
NotifyStyleSheetServiceSheetRemoved
(
StyleSheet
*
aSheet
uint32_t
aSheetType
)
{
if
(
!
mStyleSet
)
{
return
;
}
RemoveSheet
(
ToSheetType
(
aSheetType
)
aSheet
)
;
}
nsIContent
*
PresShell
:
:
GetOverrideClickTarget
(
WidgetGUIEvent
*
aEvent
nsIFrame
*
aFrame
)
{
if
(
aEvent
-
>
mMessage
!
=
eMouseUp
)
{
return
nullptr
;
}
MOZ_ASSERT
(
aEvent
-
>
mClass
=
=
eMouseEventClass
)
;
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
uint32_t
flags
=
0
;
nsPoint
eventPoint
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
aFrame
)
;
if
(
mouseEvent
-
>
mIgnoreRootScrollFrame
)
{
flags
|
=
INPUT_IGNORE_ROOT_SCROLL_FRAME
;
}
nsIFrame
*
target
=
FindFrameTargetedByInputEvent
(
aEvent
aFrame
eventPoint
flags
)
;
if
(
!
target
)
{
return
nullptr
;
}
nsIContent
*
overrideClickTarget
=
target
-
>
GetContent
(
)
;
while
(
overrideClickTarget
&
&
!
overrideClickTarget
-
>
IsElement
(
)
)
{
overrideClickTarget
=
overrideClickTarget
-
>
GetFlattenedTreeParent
(
)
;
}
return
overrideClickTarget
;
}
