#
ifndef
mozilla_DisplayPortUtils_h__
#
define
mozilla_DisplayPortUtils_h__
#
include
"
Units
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsRect
.
h
"
#
include
<
cstdint
>
#
include
<
iosfwd
>
class
nsIContent
;
class
nsIFrame
;
class
nsPresContext
;
namespace
mozilla
{
class
nsDisplayListBuilder
;
class
PresShell
;
enum
class
DisplayportRelativeTo
{
ScrollPort
ScrollFrame
}
;
enum
class
MaxSizeExceededBehaviour
{
Assert
Drop
}
;
enum
class
ContentGeometryType
{
Scrolled
Fixed
}
;
struct
DisplayPortOptions
{
DisplayportRelativeTo
mRelativeTo
=
DisplayportRelativeTo
:
:
ScrollPort
;
MaxSizeExceededBehaviour
mMaxSizeExceededBehaviour
=
MaxSizeExceededBehaviour
:
:
Assert
;
ContentGeometryType
mGeometryType
=
ContentGeometryType
:
:
Scrolled
;
DisplayPortOptions
With
(
DisplayportRelativeTo
aRelativeTo
)
const
{
DisplayPortOptions
result
=
*
this
;
result
.
mRelativeTo
=
aRelativeTo
;
return
result
;
}
DisplayPortOptions
With
(
MaxSizeExceededBehaviour
aMaxSizeExceededBehaviour
)
const
{
DisplayPortOptions
result
=
*
this
;
result
.
mMaxSizeExceededBehaviour
=
aMaxSizeExceededBehaviour
;
return
result
;
}
DisplayPortOptions
With
(
ContentGeometryType
aGeometryType
)
const
{
DisplayPortOptions
result
=
*
this
;
result
.
mGeometryType
=
aGeometryType
;
return
result
;
}
}
;
struct
DisplayPortPropertyData
{
DisplayPortPropertyData
(
const
nsRect
&
aRect
uint32_t
aPriority
bool
aPainted
)
:
mRect
(
aRect
)
mPriority
(
aPriority
)
mPainted
(
aPainted
)
{
}
nsRect
mRect
;
uint32_t
mPriority
;
bool
mPainted
;
}
;
struct
DisplayPortMargins
{
ScreenMargin
mMargins
;
CSSPoint
mVisualOffset
;
CSSPoint
mLayoutOffset
;
CSSToScreenScale2D
mScale
;
static
DisplayPortMargins
FromAPZ
(
const
ScreenMargin
&
aMargins
const
CSSPoint
&
aVisualOffset
const
CSSPoint
&
aLayoutOffset
const
CSSToScreenScale2D
&
aScale
)
;
static
DisplayPortMargins
ForScrollFrame
(
nsIScrollableFrame
*
aScrollFrame
const
ScreenMargin
&
aMargins
const
Maybe
<
CSSToScreenScale2D
>
&
aScale
=
Nothing
(
)
)
;
static
DisplayPortMargins
ForContent
(
nsIContent
*
aContent
const
ScreenMargin
&
aMargins
)
;
static
DisplayPortMargins
Empty
(
nsIContent
*
aContent
)
{
return
ForContent
(
aContent
ScreenMargin
(
)
)
;
}
ScreenMargin
GetRelativeToLayoutViewport
(
ContentGeometryType
aGeometryType
nsIScrollableFrame
*
aScrollableFrame
)
const
;
friend
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOs
const
DisplayPortMargins
&
aMargins
)
;
private
:
CSSPoint
ComputeAsyncTranslation
(
ContentGeometryType
aGeometryType
nsIScrollableFrame
*
aScrollableFrame
)
const
;
}
;
struct
DisplayPortMarginsPropertyData
{
DisplayPortMarginsPropertyData
(
const
DisplayPortMargins
&
aMargins
uint32_t
aPriority
bool
aPainted
)
:
mMargins
(
aMargins
)
mPriority
(
aPriority
)
mPainted
(
aPainted
)
{
}
DisplayPortMargins
mMargins
;
uint32_t
mPriority
;
bool
mPainted
;
}
;
class
DisplayPortUtils
{
public
:
static
bool
GetDisplayPort
(
nsIContent
*
aContent
nsRect
*
aResult
const
DisplayPortOptions
&
aOptions
=
DisplayPortOptions
(
)
)
;
static
bool
HasDisplayPort
(
nsIContent
*
aContent
)
;
static
bool
HasPaintedDisplayPort
(
nsIContent
*
aContent
)
;
static
void
MarkDisplayPortAsPainted
(
nsIContent
*
aContent
)
;
static
bool
FrameHasDisplayPort
(
nsIFrame
*
aFrame
const
nsIFrame
*
aScrolledFrame
=
nullptr
)
;
static
bool
HasNonMinimalDisplayPort
(
nsIContent
*
aContent
)
;
static
bool
HasNonMinimalNonZeroDisplayPort
(
nsIContent
*
aContent
)
;
static
bool
IsMissingDisplayPortBaseRect
(
nsIContent
*
aContent
)
;
static
bool
GetDisplayPortForVisibilityTesting
(
nsIContent
*
aContent
nsRect
*
aResult
)
;
enum
class
RepaintMode
:
uint8_t
{
Repaint
DoNotRepaint
}
;
static
void
InvalidateForDisplayPortChange
(
nsIContent
*
aContent
bool
aHadDisplayPort
const
nsRect
&
aOldDisplayPort
const
nsRect
&
aNewDisplayPort
RepaintMode
aRepaintMode
=
RepaintMode
:
:
Repaint
)
;
enum
class
ClearMinimalDisplayPortProperty
{
No
Yes
}
;
static
bool
SetDisplayPortMargins
(
nsIContent
*
aContent
PresShell
*
aPresShell
const
DisplayPortMargins
&
aMargins
ClearMinimalDisplayPortProperty
aClearMinimalDisplayPortProperty
uint32_t
aPriority
=
0
RepaintMode
aRepaintMode
=
RepaintMode
:
:
Repaint
)
;
static
void
SetDisplayPortBase
(
nsIContent
*
aContent
const
nsRect
&
aBase
)
;
static
void
SetDisplayPortBaseIfNotSet
(
nsIContent
*
aContent
const
nsRect
&
aBase
)
;
static
bool
GetCriticalDisplayPort
(
nsIContent
*
aContent
nsRect
*
aResult
const
DisplayPortOptions
&
aOptions
=
DisplayPortOptions
(
)
)
;
static
bool
HasCriticalDisplayPort
(
nsIContent
*
aContent
)
;
static
bool
GetHighResolutionDisplayPort
(
nsIContent
*
aContent
nsRect
*
aResult
const
DisplayPortOptions
&
aOptions
=
DisplayPortOptions
(
)
)
;
static
void
RemoveDisplayPort
(
nsIContent
*
aContent
)
;
static
bool
ViewportHasDisplayPort
(
nsPresContext
*
aPresContext
)
;
static
bool
IsFixedPosFrameInDisplayPort
(
const
nsIFrame
*
aFrame
)
;
static
bool
MaybeCreateDisplayPortInFirstScrollFrameEncountered
(
nsIFrame
*
aFrame
nsDisplayListBuilder
*
aBuilder
)
;
static
bool
CalculateAndSetDisplayPortMargins
(
nsIScrollableFrame
*
aScrollFrame
RepaintMode
aRepaintMode
)
;
static
bool
MaybeCreateDisplayPort
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aScrollFrame
RepaintMode
aRepaintMode
)
;
static
void
SetZeroMarginDisplayPortOnAsyncScrollableAncestors
(
nsIFrame
*
aFrame
)
;
static
void
ExpireDisplayPortOnAsyncScrollableAncestor
(
nsIFrame
*
aFrame
)
;
static
Maybe
<
nsRect
>
GetRootDisplayportBase
(
PresShell
*
aPresShell
)
;
}
;
}
#
endif
