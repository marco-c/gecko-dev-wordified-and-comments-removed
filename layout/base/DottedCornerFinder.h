#
ifndef
mozilla_DottedCornerFinder_h_
#
define
mozilla_DottedCornerFinder_h_
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
gfx
/
BezierUtils
.
h
"
#
include
"
gfxRect
.
h
"
namespace
mozilla
{
class
DottedCornerFinder
{
typedef
mozilla
:
:
gfx
:
:
Bezier
Bezier
;
typedef
mozilla
:
:
gfx
:
:
Float
Float
;
typedef
mozilla
:
:
gfx
:
:
Point
Point
;
typedef
mozilla
:
:
gfx
:
:
Size
Size
;
public
:
struct
Result
{
Point
C
;
Float
r
;
Result
(
const
Point
&
aC
Float
aR
)
:
C
(
aC
)
r
(
aR
)
{
}
}
;
DottedCornerFinder
(
const
Bezier
&
aOuterBezier
const
Bezier
&
aInnerBezier
mozilla
:
:
css
:
:
Corner
aCorner
Float
aBorderRadiusX
Float
aBorderRadiusY
const
Point
&
aC0
Float
aR0
const
Point
&
aCn
Float
aRn
const
Size
&
aCornerDim
)
;
bool
HasMore
(
void
)
const
;
Result
Next
(
void
)
;
private
:
static
const
size_t
MAX_LOOP
=
32
;
Bezier
mOuterBezier
;
Bezier
mInnerBezier
;
Bezier
mCenterBezier
;
mozilla
:
:
css
:
:
Corner
mCorner
;
Float
mNormalSign
;
Point
mC0
;
Point
mCn
;
Float
mR0
;
Float
mRn
;
Float
mMaxR
;
Point
mCurveOrigin
;
Float
mCenterCurveR
;
Float
mInnerWidth
;
Float
mInnerHeight
;
Point
mLastC
;
Float
mLastR
;
Float
mLastT
;
Float
mBestOverlap
;
bool
mHasZeroBorderWidth
;
bool
mHasMore
;
size_t
mMaxCount
;
enum
{
PERFECT
SINGLE_CURVE_AND_RADIUS
SINGLE_CURVE
OTHER
}
mType
;
size_t
mI
;
size_t
mCount
;
void
DetermineType
(
Float
aBorderRadiusX
Float
aBorderRadiusY
)
;
void
Reset
(
void
)
;
void
FindPointAndRadius
(
Point
&
C
Float
&
r
const
Point
&
innerTangent
const
Point
&
normal
Float
t
)
;
Float
FindNext
(
Float
overlap
)
;
void
FindBestOverlap
(
Float
aMinR
Float
aMinBorderRadius
Float
aMaxBorderRadius
)
;
bool
GetCountAndLastOverlap
(
Float
aOverlap
size_t
*
aCount
Float
*
aActualOverlap
)
;
}
;
}
#
endif
