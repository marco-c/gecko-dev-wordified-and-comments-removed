#
ifndef
mozilla_ViewportUtils_h
#
define
mozilla_ViewportUtils_h
#
include
"
Units
.
h
"
#
include
"
mozilla
/
layers
/
ScrollableLayerGuid
.
h
"
class
nsIFrame
;
class
nsPresContext
;
namespace
mozilla
{
class
PresShell
;
class
ViewportUtils
{
public
:
template
<
typename
Units
=
CSSPixel
>
static
gfx
:
:
Matrix4x4Typed
<
Units
Units
>
GetVisualToLayoutTransform
(
layers
:
:
ScrollableLayerGuid
:
:
ViewID
aScrollId
)
;
static
nsPoint
VisualToLayout
(
const
nsPoint
&
aPt
PresShell
*
aContext
)
;
static
nsRect
VisualToLayout
(
const
nsRect
&
aRect
PresShell
*
aContext
)
;
static
nsPoint
LayoutToVisual
(
const
nsPoint
&
aPt
PresShell
*
aContext
)
;
static
LayoutDevicePoint
DocumentRelativeLayoutToVisual
(
const
LayoutDevicePoint
&
aPoint
PresShell
*
aShell
)
;
static
LayoutDeviceRect
DocumentRelativeLayoutToVisual
(
const
LayoutDeviceRect
&
aRect
PresShell
*
aShell
)
;
static
LayoutDeviceRect
DocumentRelativeLayoutToVisual
(
const
LayoutDeviceIntRect
&
aRect
PresShell
*
aShell
)
;
static
CSSRect
DocumentRelativeLayoutToVisual
(
const
CSSRect
&
aRect
PresShell
*
aShell
)
;
static
LayoutDevicePoint
ToScreenRelativeVisual
(
const
LayoutDevicePoint
&
aPt
nsPresContext
*
aCtx
)
;
static
LayoutDeviceRect
ToScreenRelativeVisual
(
const
LayoutDeviceRect
&
aRect
nsPresContext
*
aCtx
)
;
static
const
nsIFrame
*
IsZoomedContentRoot
(
const
nsIFrame
*
aFrame
)
;
static
Scale2D
TryInferEnclosingResolution
(
PresShell
*
aShell
)
;
}
;
extern
template
CSSToCSSMatrix4x4
ViewportUtils
:
:
GetVisualToLayoutTransform
<
CSSPixel
>
(
layers
:
:
ScrollableLayerGuid
:
:
ViewID
)
;
extern
template
LayoutDeviceToLayoutDeviceMatrix4x4
ViewportUtils
:
:
GetVisualToLayoutTransform
<
LayoutDevicePixel
>
(
layers
:
:
ScrollableLayerGuid
:
:
ViewID
)
;
}
#
endif
