#
include
"
nsCaret
.
h
"
#
include
<
algorithm
>
#
include
"
gfxUtils
.
h
"
#
include
"
mozilla
/
gfx
/
2D
.
h
"
#
include
"
mozilla
/
intl
/
BidiEmbeddingLevel
.
h
"
#
include
"
mozilla
/
StaticPrefs_bidi
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsFrameSelection
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsBlockFrame
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
nsTextFrame
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsTextFragment
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
nsIBidiKeyboard
.
h
"
#
include
"
nsContentUtils
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
using
namespace
mozilla
:
:
gfx
;
using
BidiEmbeddingLevel
=
mozilla
:
:
intl
:
:
BidiEmbeddingLevel
;
static
const
int32_t
kMinBidiIndicatorPixels
=
2
;
static
nsIFrame
*
CheckForTrailingTextFrameRecursive
(
nsIFrame
*
aFrame
nsIFrame
*
aStopAtFrame
)
{
if
(
aFrame
=
=
aStopAtFrame
|
|
(
(
aFrame
-
>
IsTextFrame
(
)
&
&
(
static_cast
<
nsTextFrame
*
>
(
aFrame
)
)
-
>
IsAtEndOfLine
(
)
)
)
)
return
aFrame
;
if
(
!
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eLineParticipant
)
)
return
nullptr
;
for
(
nsIFrame
*
f
:
aFrame
-
>
PrincipalChildList
(
)
)
{
nsIFrame
*
r
=
CheckForTrailingTextFrameRecursive
(
f
aStopAtFrame
)
;
if
(
r
)
return
r
;
}
return
nullptr
;
}
static
nsLineBox
*
FindContainingLine
(
nsIFrame
*
aFrame
)
{
while
(
aFrame
&
&
aFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eLineParticipant
)
)
{
nsIFrame
*
parent
=
aFrame
-
>
GetParent
(
)
;
nsBlockFrame
*
blockParent
=
do_QueryFrame
(
parent
)
;
if
(
blockParent
)
{
bool
isValid
;
nsBlockInFlowLineIterator
iter
(
blockParent
aFrame
&
isValid
)
;
return
isValid
?
iter
.
GetLine
(
)
.
get
(
)
:
nullptr
;
}
aFrame
=
parent
;
}
return
nullptr
;
}
static
void
AdjustCaretFrameForLineEnd
(
nsIFrame
*
*
aFrame
int32_t
*
aOffset
)
{
nsLineBox
*
line
=
FindContainingLine
(
*
aFrame
)
;
if
(
!
line
)
{
return
;
}
int32_t
count
=
line
-
>
GetChildCount
(
)
;
for
(
nsIFrame
*
f
=
line
-
>
mFirstChild
;
count
>
0
;
-
-
count
f
=
f
-
>
GetNextSibling
(
)
)
{
nsIFrame
*
r
=
CheckForTrailingTextFrameRecursive
(
f
*
aFrame
)
;
if
(
r
=
=
*
aFrame
)
{
return
;
}
if
(
r
)
{
MOZ_ASSERT
(
r
-
>
IsTextFrame
(
)
"
Expected
text
frame
"
)
;
*
aFrame
=
r
;
*
aOffset
=
(
static_cast
<
nsTextFrame
*
>
(
r
)
)
-
>
GetContentEnd
(
)
;
return
;
}
}
}
static
bool
IsBidiUI
(
)
{
return
StaticPrefs
:
:
bidi_browser_ui
(
)
;
}
nsCaret
:
:
nsCaret
(
)
:
mOverrideOffset
(
0
)
mBlinkCount
(
-
1
)
mBlinkRate
(
0
)
mHideCount
(
0
)
mIsBlinkOn
(
false
)
mVisible
(
false
)
mReadOnly
(
false
)
mShowDuringSelection
(
false
)
mIgnoreUserModify
(
true
)
{
}
nsCaret
:
:
~
nsCaret
(
)
{
StopBlinking
(
)
;
}
nsresult
nsCaret
:
:
Init
(
PresShell
*
aPresShell
)
{
NS_ENSURE_ARG
(
aPresShell
)
;
mPresShell
=
do_GetWeakReference
(
aPresShell
)
;
NS_ASSERTION
(
mPresShell
"
Hey
pres
shell
should
support
weak
refs
"
)
;
mShowDuringSelection
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
IntID
:
:
ShowCaretDuringSelection
mShowDuringSelection
?
1
:
0
)
!
=
0
;
RefPtr
<
Selection
>
selection
=
aPresShell
-
>
GetSelection
(
nsISelectionController
:
:
SELECTION_NORMAL
)
;
if
(
!
selection
)
{
return
NS_ERROR_FAILURE
;
}
selection
-
>
AddSelectionListener
(
this
)
;
mDomSelectionWeak
=
selection
;
return
NS_OK
;
}
static
bool
DrawCJKCaret
(
nsIFrame
*
aFrame
int32_t
aOffset
)
{
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
const
nsTextFragment
*
frag
=
content
-
>
GetText
(
)
;
if
(
!
frag
)
{
return
false
;
}
if
(
aOffset
<
0
|
|
static_cast
<
uint32_t
>
(
aOffset
)
>
=
frag
-
>
GetLength
(
)
)
{
return
false
;
}
const
char16_t
ch
=
frag
-
>
CharAt
(
AssertedCast
<
uint32_t
>
(
aOffset
)
)
;
return
0x2e80
<
=
ch
&
&
ch
<
=
0xd7ff
;
}
nsCaret
:
:
Metrics
nsCaret
:
:
ComputeMetrics
(
nsIFrame
*
aFrame
int32_t
aOffset
nscoord
aCaretHeight
)
{
nscoord
caretWidth
=
(
aCaretHeight
*
LookAndFeel
:
:
GetFloat
(
LookAndFeel
:
:
FloatID
:
:
CaretAspectRatio
0
.
0f
)
)
+
nsPresContext
:
:
CSSPixelsToAppUnits
(
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
IntID
:
:
CaretWidth
1
)
)
;
if
(
DrawCJKCaret
(
aFrame
aOffset
)
)
{
caretWidth
+
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
1
)
;
}
nscoord
bidiIndicatorSize
=
nsPresContext
:
:
CSSPixelsToAppUnits
(
kMinBidiIndicatorPixels
)
;
bidiIndicatorSize
=
std
:
:
max
(
caretWidth
bidiIndicatorSize
)
;
int32_t
tpp
=
aFrame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
Metrics
result
;
result
.
mCaretWidth
=
NS_ROUND_BORDER_TO_PIXELS
(
caretWidth
tpp
)
;
result
.
mBidiIndicatorSize
=
NS_ROUND_BORDER_TO_PIXELS
(
bidiIndicatorSize
tpp
)
;
return
result
;
}
void
nsCaret
:
:
Terminate
(
)
{
StopBlinking
(
)
;
mBlinkTimer
=
nullptr
;
if
(
mDomSelectionWeak
)
{
mDomSelectionWeak
-
>
RemoveSelectionListener
(
this
)
;
}
mDomSelectionWeak
=
nullptr
;
mPresShell
=
nullptr
;
mOverrideContent
=
nullptr
;
}
NS_IMPL_ISUPPORTS
(
nsCaret
nsISelectionListener
)
Selection
*
nsCaret
:
:
GetSelection
(
)
{
return
mDomSelectionWeak
;
}
void
nsCaret
:
:
SetSelection
(
Selection
*
aDOMSel
)
{
MOZ_ASSERT
(
aDOMSel
)
;
mDomSelectionWeak
=
aDOMSel
;
ResetBlinking
(
)
;
SchedulePaint
(
aDOMSel
)
;
}
void
nsCaret
:
:
SetVisible
(
bool
inMakeVisible
)
{
mVisible
=
inMakeVisible
;
mIgnoreUserModify
=
mVisible
;
ResetBlinking
(
)
;
SchedulePaint
(
)
;
}
void
nsCaret
:
:
AddForceHide
(
)
{
MOZ_ASSERT
(
mHideCount
<
UINT32_MAX
)
;
if
(
+
+
mHideCount
>
1
)
{
return
;
}
ResetBlinking
(
)
;
SchedulePaint
(
)
;
}
void
nsCaret
:
:
RemoveForceHide
(
)
{
if
(
!
mHideCount
|
|
-
-
mHideCount
)
{
return
;
}
ResetBlinking
(
)
;
SchedulePaint
(
)
;
}
void
nsCaret
:
:
SetCaretReadOnly
(
bool
inMakeReadonly
)
{
mReadOnly
=
inMakeReadonly
;
ResetBlinking
(
)
;
SchedulePaint
(
)
;
}
nsRect
nsCaret
:
:
GetGeometryForFrame
(
nsIFrame
*
aFrame
int32_t
aFrameOffset
nscoord
*
aBidiIndicatorSize
)
{
nsPoint
framePos
(
0
0
)
;
nsRect
rect
;
nsresult
rv
=
aFrame
-
>
GetPointFromOffset
(
aFrameOffset
&
framePos
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
aBidiIndicatorSize
)
{
*
aBidiIndicatorSize
=
0
;
}
return
rect
;
}
nsIFrame
*
frame
=
aFrame
-
>
GetContentInsertionFrame
(
)
;
if
(
!
frame
)
{
frame
=
aFrame
;
}
NS_ASSERTION
(
!
frame
-
>
HasAnyStateBits
(
NS_FRAME_IN_REFLOW
)
"
We
should
not
be
in
the
middle
of
reflow
"
)
;
WritingMode
wm
=
aFrame
-
>
GetWritingMode
(
)
;
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetInflatedFontMetricsForFrame
(
aFrame
)
;
const
auto
caretBlockAxisMetrics
=
frame
-
>
GetCaretBlockAxisMetrics
(
wm
*
fm
)
;
nscoord
inlineOffset
=
0
;
bool
vertical
=
wm
.
IsVertical
(
)
;
Metrics
caretMetrics
=
ComputeMetrics
(
aFrame
aFrameOffset
caretBlockAxisMetrics
.
mExtent
)
;
nsTextFrame
*
textFrame
=
do_QueryFrame
(
aFrame
)
;
if
(
textFrame
)
{
gfxTextRun
*
textRun
=
textFrame
-
>
GetTextRun
(
nsTextFrame
:
:
TextRunType
:
:
eInflated
)
;
if
(
textRun
)
{
bool
textRunDirIsReverseOfFrame
=
wm
.
IsInlineReversed
(
)
!
=
textRun
-
>
IsInlineReversed
(
)
;
if
(
textRunDirIsReverseOfFrame
!
=
textRun
-
>
IsSidewaysLeft
(
)
)
{
inlineOffset
=
wm
.
IsBidiLTR
(
)
?
-
caretMetrics
.
mCaretWidth
:
caretMetrics
.
mCaretWidth
;
}
}
}
if
(
vertical
)
{
framePos
.
x
=
caretBlockAxisMetrics
.
mOffset
;
framePos
.
y
+
=
inlineOffset
;
}
else
{
framePos
.
x
+
=
inlineOffset
;
framePos
.
y
=
caretBlockAxisMetrics
.
mOffset
;
}
rect
=
nsRect
(
framePos
vertical
?
nsSize
(
caretBlockAxisMetrics
.
mExtent
caretMetrics
.
mCaretWidth
)
:
nsSize
(
caretMetrics
.
mCaretWidth
caretBlockAxisMetrics
.
mExtent
)
)
;
bool
hasTransform
=
false
;
nsIFrame
*
scrollFrame
=
nullptr
;
for
(
nsIFrame
*
f
=
aFrame
;
f
;
f
=
f
-
>
GetParent
(
)
)
{
if
(
f
-
>
IsScrollFrame
(
)
)
{
scrollFrame
=
f
;
break
;
}
if
(
f
-
>
IsTransformed
(
)
)
{
hasTransform
=
true
;
}
}
if
(
scrollFrame
&
&
!
hasTransform
)
{
nsIScrollableFrame
*
sf
=
do_QueryFrame
(
scrollFrame
)
;
nsIFrame
*
scrolled
=
sf
-
>
GetScrolledFrame
(
)
;
nsRect
caretInScroll
=
rect
+
aFrame
-
>
GetOffsetTo
(
scrolled
)
;
if
(
vertical
)
{
nscoord
overflow
=
caretInScroll
.
YMost
(
)
-
scrolled
-
>
InkOverflowRectRelativeToSelf
(
)
.
height
;
if
(
overflow
>
0
)
{
rect
.
y
-
=
overflow
;
}
}
else
{
nscoord
overflow
=
caretInScroll
.
XMost
(
)
-
scrolled
-
>
InkOverflowRectRelativeToSelf
(
)
.
width
;
if
(
overflow
>
0
)
{
rect
.
x
-
=
overflow
;
}
}
}
if
(
aBidiIndicatorSize
)
{
*
aBidiIndicatorSize
=
caretMetrics
.
mBidiIndicatorSize
;
}
return
rect
;
}
nsIFrame
*
nsCaret
:
:
GetFrameAndOffset
(
const
Selection
*
aSelection
nsINode
*
aOverrideNode
int32_t
aOverrideOffset
int32_t
*
aFrameOffset
nsIFrame
*
*
aUnadjustedFrame
)
{
if
(
aUnadjustedFrame
)
{
*
aUnadjustedFrame
=
nullptr
;
}
nsINode
*
focusNode
;
int32_t
focusOffset
;
if
(
aOverrideNode
)
{
focusNode
=
aOverrideNode
;
focusOffset
=
aOverrideOffset
;
}
else
if
(
aSelection
)
{
focusNode
=
aSelection
-
>
GetFocusNode
(
)
;
focusOffset
=
aSelection
-
>
FocusOffset
(
)
;
}
else
{
return
nullptr
;
}
if
(
!
focusNode
|
|
!
focusNode
-
>
IsContent
(
)
|
|
!
aSelection
)
{
return
nullptr
;
}
nsIContent
*
contentNode
=
focusNode
-
>
AsContent
(
)
;
nsFrameSelection
*
frameSelection
=
aSelection
-
>
GetFrameSelection
(
)
;
BidiEmbeddingLevel
bidiLevel
=
frameSelection
-
>
GetCaretBidiLevel
(
)
;
return
nsCaret
:
:
GetCaretFrameForNodeOffset
(
frameSelection
contentNode
focusOffset
frameSelection
-
>
GetHint
(
)
bidiLevel
aUnadjustedFrame
aFrameOffset
)
;
}
nsIFrame
*
nsCaret
:
:
GetGeometry
(
const
Selection
*
aSelection
nsRect
*
aRect
)
{
int32_t
frameOffset
;
nsIFrame
*
frame
=
GetFrameAndOffset
(
aSelection
nullptr
0
&
frameOffset
)
;
if
(
frame
)
{
*
aRect
=
GetGeometryForFrame
(
frame
frameOffset
nullptr
)
;
}
return
frame
;
}
[
[
nodiscard
]
]
static
nsIFrame
*
GetContainingBlockIfNeeded
(
nsIFrame
*
aFrame
)
{
if
(
aFrame
-
>
IsBlockOutside
(
)
|
|
aFrame
-
>
IsBlockFrameOrSubclass
(
)
)
{
return
nullptr
;
}
return
aFrame
-
>
GetContainingBlock
(
)
;
}
void
nsCaret
:
:
SchedulePaint
(
Selection
*
aSelection
)
{
Selection
*
selection
;
if
(
aSelection
)
{
selection
=
aSelection
;
}
else
{
selection
=
GetSelection
(
)
;
}
int32_t
frameOffset
;
nsIFrame
*
frame
=
GetFrameAndOffset
(
selection
mOverrideContent
mOverrideOffset
&
frameOffset
)
;
if
(
!
frame
)
{
return
;
}
if
(
nsIFrame
*
cb
=
GetContainingBlockIfNeeded
(
frame
)
)
{
cb
-
>
SchedulePaint
(
)
;
}
else
{
frame
-
>
SchedulePaint
(
)
;
}
}
void
nsCaret
:
:
SetVisibilityDuringSelection
(
bool
aVisibility
)
{
mShowDuringSelection
=
aVisibility
;
SchedulePaint
(
)
;
}
void
nsCaret
:
:
SetCaretPosition
(
nsINode
*
aNode
int32_t
aOffset
)
{
mOverrideContent
=
aNode
;
mOverrideOffset
=
aOffset
;
ResetBlinking
(
)
;
SchedulePaint
(
)
;
}
void
nsCaret
:
:
CheckSelectionLanguageChange
(
)
{
if
(
!
IsBidiUI
(
)
)
{
return
;
}
bool
isKeyboardRTL
=
false
;
nsIBidiKeyboard
*
bidiKeyboard
=
nsContentUtils
:
:
GetBidiKeyboard
(
)
;
if
(
bidiKeyboard
)
{
bidiKeyboard
-
>
IsLangRTL
(
&
isKeyboardRTL
)
;
}
Selection
*
selection
=
GetSelection
(
)
;
if
(
selection
)
{
selection
-
>
SelectionLanguageChange
(
isKeyboardRTL
)
;
}
}
[
[
nodiscard
]
]
static
nsIFrame
*
MapToContainingBlock
(
nsIFrame
*
aFrame
nsRect
*
aCaretRect
nsRect
*
aHookRect
)
{
nsIFrame
*
containingBlock
=
GetContainingBlockIfNeeded
(
aFrame
)
;
if
(
!
containingBlock
)
{
return
aFrame
;
}
*
aCaretRect
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
aFrame
*
aCaretRect
containingBlock
)
;
*
aHookRect
=
nsLayoutUtils
:
:
TransformFrameRectToAncestor
(
aFrame
*
aHookRect
containingBlock
)
;
return
containingBlock
;
}
nsIFrame
*
nsCaret
:
:
GetPaintGeometry
(
nsRect
*
aCaretRect
nsRect
*
aHookRect
nscolor
*
aCaretColor
)
{
if
(
!
IsVisible
(
)
|
|
!
mIsBlinkOn
)
{
return
nullptr
;
}
CheckSelectionLanguageChange
(
)
;
int32_t
frameOffset
;
nsIFrame
*
unadjustedFrame
=
nullptr
;
nsIFrame
*
frame
=
GetFrameAndOffset
(
GetSelection
(
)
mOverrideContent
mOverrideOffset
&
frameOffset
&
unadjustedFrame
)
;
MOZ_ASSERT
(
!
!
frame
=
=
!
!
unadjustedFrame
)
;
if
(
!
frame
)
{
return
nullptr
;
}
const
nsStyleUI
*
ui
=
unadjustedFrame
-
>
StyleUI
(
)
;
if
(
(
!
mIgnoreUserModify
&
&
ui
-
>
UserModify
(
)
=
=
StyleUserModify
:
:
ReadOnly
)
|
|
unadjustedFrame
-
>
IsContentDisabled
(
)
)
{
return
nullptr
;
}
if
(
frame
-
>
IsTextFrame
(
)
)
{
auto
[
startOffset
endOffset
]
=
frame
-
>
GetOffsets
(
)
;
if
(
startOffset
>
frameOffset
|
|
endOffset
<
frameOffset
)
{
return
nullptr
;
}
}
if
(
aCaretColor
)
{
*
aCaretColor
=
frame
-
>
GetCaretColorAt
(
frameOffset
)
;
}
ComputeCaretRects
(
frame
frameOffset
aCaretRect
aHookRect
)
;
return
MapToContainingBlock
(
frame
aCaretRect
aHookRect
)
;
}
nsIFrame
*
nsCaret
:
:
GetPaintGeometry
(
nsRect
*
aRect
)
{
nsRect
caretRect
;
nsRect
hookRect
;
nsIFrame
*
frame
=
GetPaintGeometry
(
&
caretRect
&
hookRect
)
;
aRect
-
>
UnionRect
(
caretRect
hookRect
)
;
return
frame
;
}
void
nsCaret
:
:
PaintCaret
(
DrawTarget
&
aDrawTarget
nsIFrame
*
aForFrame
const
nsPoint
&
aOffset
)
{
nsRect
caretRect
;
nsRect
hookRect
;
nscolor
color
;
nsIFrame
*
frame
=
GetPaintGeometry
(
&
caretRect
&
hookRect
&
color
)
;
MOZ_ASSERT
(
frame
=
=
aForFrame
"
We
'
re
referring
different
frame
"
)
;
if
(
!
frame
)
{
return
;
}
int32_t
appUnitsPerDevPixel
=
frame
-
>
PresContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
Rect
devPxCaretRect
=
NSRectToSnappedRect
(
caretRect
+
aOffset
appUnitsPerDevPixel
aDrawTarget
)
;
Rect
devPxHookRect
=
NSRectToSnappedRect
(
hookRect
+
aOffset
appUnitsPerDevPixel
aDrawTarget
)
;
ColorPattern
pattern
(
ToDeviceColor
(
color
)
)
;
aDrawTarget
.
FillRect
(
devPxCaretRect
pattern
)
;
if
(
!
hookRect
.
IsEmpty
(
)
)
{
aDrawTarget
.
FillRect
(
devPxHookRect
pattern
)
;
}
}
NS_IMETHODIMP
nsCaret
:
:
NotifySelectionChanged
(
Document
*
Selection
*
aDomSel
int16_t
aReason
int32_t
aAmount
)
{
if
(
(
aReason
&
nsISelectionListener
:
:
MOUSEUP_REASON
)
|
|
!
IsVisible
(
aDomSel
)
)
return
NS_OK
;
if
(
mDomSelectionWeak
!
=
aDomSel
)
return
NS_OK
;
ResetBlinking
(
)
;
SchedulePaint
(
aDomSel
)
;
return
NS_OK
;
}
void
nsCaret
:
:
ResetBlinking
(
)
{
using
IntID
=
LookAndFeel
:
:
IntID
;
constexpr
uint32_t
kDefaultBlinkRate
=
500
;
constexpr
int32_t
kDefaultBlinkCount
=
-
1
;
mIsBlinkOn
=
true
;
if
(
mReadOnly
|
|
!
mVisible
|
|
mHideCount
)
{
StopBlinking
(
)
;
return
;
}
auto
blinkRate
=
LookAndFeel
:
:
GetInt
(
IntID
:
:
CaretBlinkTime
kDefaultBlinkRate
)
;
if
(
blinkRate
>
0
)
{
mBlinkCount
=
LookAndFeel
:
:
GetInt
(
IntID
:
:
CaretBlinkCount
kDefaultBlinkCount
)
;
}
if
(
mBlinkRate
=
=
blinkRate
)
{
return
;
}
mBlinkRate
=
blinkRate
;
if
(
mBlinkTimer
)
{
mBlinkTimer
-
>
Cancel
(
)
;
}
else
{
nsIEventTarget
*
target
=
nullptr
;
if
(
RefPtr
<
PresShell
>
presShell
=
do_QueryReferent
(
mPresShell
)
)
{
if
(
nsCOMPtr
<
Document
>
doc
=
presShell
-
>
GetDocument
(
)
)
{
target
=
doc
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
;
}
}
mBlinkTimer
=
NS_NewTimer
(
target
)
;
if
(
!
mBlinkTimer
)
{
return
;
}
}
if
(
blinkRate
>
0
)
{
mBlinkTimer
-
>
InitWithNamedFuncCallback
(
CaretBlinkCallback
this
blinkRate
nsITimer
:
:
TYPE_REPEATING_SLACK
"
nsCaret
:
:
CaretBlinkCallback_timer
"
)
;
}
}
void
nsCaret
:
:
StopBlinking
(
)
{
if
(
mBlinkTimer
)
{
mBlinkTimer
-
>
Cancel
(
)
;
mBlinkRate
=
0
;
}
}
nsIFrame
*
nsCaret
:
:
GetCaretFrameForNodeOffset
(
nsFrameSelection
*
aFrameSelection
nsIContent
*
aContentNode
int32_t
aOffset
CaretAssociationHint
aFrameHint
BidiEmbeddingLevel
aBidiLevel
nsIFrame
*
*
aReturnUnadjustedFrame
int32_t
*
aReturnOffset
)
{
if
(
!
aFrameSelection
)
{
return
nullptr
;
}
PresShell
*
presShell
=
aFrameSelection
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
if
(
!
aContentNode
|
|
!
aContentNode
-
>
IsInComposedDoc
(
)
|
|
presShell
-
>
GetDocument
(
)
!
=
aContentNode
-
>
GetComposedDoc
(
)
)
{
return
nullptr
;
}
nsIFrame
*
theFrame
=
nullptr
;
int32_t
theFrameOffset
=
0
;
theFrame
=
nsFrameSelection
:
:
GetFrameForNodeOffset
(
aContentNode
aOffset
aFrameHint
&
theFrameOffset
)
;
if
(
!
theFrame
)
{
return
nullptr
;
}
if
(
aReturnUnadjustedFrame
)
{
*
aReturnUnadjustedFrame
=
theFrame
;
}
if
(
nsFrameSelection
:
:
AdjustFrameForLineStart
(
theFrame
theFrameOffset
)
)
{
aFrameSelection
-
>
SetHint
(
CARET_ASSOCIATE_AFTER
)
;
}
else
{
AdjustCaretFrameForLineEnd
(
&
theFrame
&
theFrameOffset
)
;
}
if
(
theFrame
-
>
PresContext
(
)
-
>
BidiEnabled
(
)
)
{
if
(
aBidiLevel
&
BIDI_LEVEL_UNDEFINED
)
{
aBidiLevel
=
theFrame
-
>
GetEmbeddingLevel
(
)
;
}
nsIFrame
*
frameBefore
;
nsIFrame
*
frameAfter
;
BidiEmbeddingLevel
levelBefore
;
BidiEmbeddingLevel
levelAfter
;
auto
[
start
end
]
=
theFrame
-
>
GetOffsets
(
)
;
if
(
start
=
=
0
|
|
end
=
=
0
|
|
start
=
=
theFrameOffset
|
|
end
=
=
theFrameOffset
)
{
nsPrevNextBidiLevels
levels
=
aFrameSelection
-
>
GetPrevNextBidiLevels
(
aContentNode
aOffset
false
)
;
if
(
levels
.
mFrameBefore
|
|
levels
.
mFrameAfter
)
{
frameBefore
=
levels
.
mFrameBefore
;
frameAfter
=
levels
.
mFrameAfter
;
levelBefore
=
levels
.
mLevelBefore
;
levelAfter
=
levels
.
mLevelAfter
;
if
(
(
levelBefore
!
=
levelAfter
)
|
|
(
aBidiLevel
!
=
levelBefore
)
)
{
aBidiLevel
=
std
:
:
max
(
aBidiLevel
std
:
:
min
(
levelBefore
levelAfter
)
)
;
aBidiLevel
=
std
:
:
min
(
aBidiLevel
std
:
:
max
(
levelBefore
levelAfter
)
)
;
if
(
aBidiLevel
=
=
levelBefore
|
|
(
aBidiLevel
>
levelBefore
&
&
aBidiLevel
<
levelAfter
&
&
aBidiLevel
.
IsSameDirection
(
levelBefore
)
)
|
|
(
aBidiLevel
<
levelBefore
&
&
aBidiLevel
>
levelAfter
&
&
aBidiLevel
.
IsSameDirection
(
levelBefore
)
)
)
{
if
(
theFrame
!
=
frameBefore
)
{
if
(
frameBefore
)
{
theFrame
=
frameBefore
;
std
:
:
tie
(
start
end
)
=
theFrame
-
>
GetOffsets
(
)
;
theFrameOffset
=
end
;
}
else
{
BidiEmbeddingLevel
baseLevel
=
frameAfter
-
>
GetBaseLevel
(
)
;
if
(
baseLevel
!
=
levelAfter
)
{
PeekOffsetStruct
pos
(
eSelectBeginLine
eDirPrevious
0
nsPoint
(
0
0
)
{
PeekOffsetOption
:
:
ScrollViewStop
PeekOffsetOption
:
:
Visual
}
)
;
if
(
NS_SUCCEEDED
(
frameAfter
-
>
PeekOffset
(
&
pos
)
)
)
{
theFrame
=
pos
.
mResultFrame
;
theFrameOffset
=
pos
.
mContentOffset
;
}
}
}
}
}
else
if
(
aBidiLevel
=
=
levelAfter
|
|
(
aBidiLevel
>
levelBefore
&
&
aBidiLevel
<
levelAfter
&
&
aBidiLevel
.
IsSameDirection
(
levelAfter
)
)
|
|
(
aBidiLevel
<
levelBefore
&
&
aBidiLevel
>
levelAfter
&
&
aBidiLevel
.
IsSameDirection
(
levelAfter
)
)
)
{
if
(
theFrame
!
=
frameAfter
)
{
if
(
frameAfter
)
{
theFrame
=
frameAfter
;
std
:
:
tie
(
start
end
)
=
theFrame
-
>
GetOffsets
(
)
;
theFrameOffset
=
start
;
}
else
{
BidiEmbeddingLevel
baseLevel
=
frameBefore
-
>
GetBaseLevel
(
)
;
if
(
baseLevel
!
=
levelBefore
)
{
PeekOffsetStruct
pos
(
eSelectEndLine
eDirNext
0
nsPoint
(
0
0
)
{
PeekOffsetOption
:
:
ScrollViewStop
PeekOffsetOption
:
:
Visual
}
)
;
if
(
NS_SUCCEEDED
(
frameBefore
-
>
PeekOffset
(
&
pos
)
)
)
{
theFrame
=
pos
.
mResultFrame
;
theFrameOffset
=
pos
.
mContentOffset
;
}
}
}
}
}
else
if
(
aBidiLevel
>
levelBefore
&
&
aBidiLevel
<
levelAfter
&
&
levelBefore
.
IsSameDirection
(
levelAfter
)
&
&
!
aBidiLevel
.
IsSameDirection
(
levelAfter
)
)
{
if
(
NS_SUCCEEDED
(
aFrameSelection
-
>
GetFrameFromLevel
(
frameAfter
eDirNext
aBidiLevel
&
theFrame
)
)
)
{
std
:
:
tie
(
start
end
)
=
theFrame
-
>
GetOffsets
(
)
;
levelAfter
=
theFrame
-
>
GetEmbeddingLevel
(
)
;
if
(
aBidiLevel
.
IsRTL
(
)
)
{
theFrameOffset
=
levelAfter
.
IsRTL
(
)
?
start
:
end
;
}
else
{
theFrameOffset
=
levelAfter
.
IsRTL
(
)
?
end
:
start
;
}
}
}
else
if
(
aBidiLevel
<
levelBefore
&
&
aBidiLevel
>
levelAfter
&
&
levelBefore
.
IsSameDirection
(
levelAfter
)
&
&
!
aBidiLevel
.
IsSameDirection
(
levelAfter
)
)
{
if
(
NS_SUCCEEDED
(
aFrameSelection
-
>
GetFrameFromLevel
(
frameBefore
eDirPrevious
aBidiLevel
&
theFrame
)
)
)
{
std
:
:
tie
(
start
end
)
=
theFrame
-
>
GetOffsets
(
)
;
levelBefore
=
theFrame
-
>
GetEmbeddingLevel
(
)
;
if
(
aBidiLevel
.
IsRTL
(
)
)
{
theFrameOffset
=
levelBefore
.
IsRTL
(
)
?
end
:
start
;
}
else
{
theFrameOffset
=
levelBefore
.
IsRTL
(
)
?
start
:
end
;
}
}
}
}
}
}
}
*
aReturnOffset
=
theFrameOffset
;
return
theFrame
;
}
size_t
nsCaret
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
total
=
aMallocSizeOf
(
this
)
;
if
(
mPresShell
)
{
total
+
=
mPresShell
-
>
SizeOfOnlyThis
(
aMallocSizeOf
)
;
}
if
(
mBlinkTimer
)
{
total
+
=
mBlinkTimer
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
return
total
;
}
bool
nsCaret
:
:
IsMenuPopupHidingCaret
(
)
{
nsXULPopupManager
*
popMgr
=
nsXULPopupManager
:
:
GetInstance
(
)
;
nsTArray
<
nsIFrame
*
>
popups
;
popMgr
-
>
GetVisiblePopups
(
popups
)
;
if
(
popups
.
Length
(
)
=
=
0
)
return
false
;
if
(
!
mDomSelectionWeak
)
{
return
true
;
}
nsCOMPtr
<
nsIContent
>
caretContent
=
nsIContent
:
:
FromNodeOrNull
(
mDomSelectionWeak
-
>
GetFocusNode
(
)
)
;
if
(
!
caretContent
)
return
true
;
for
(
uint32_t
i
=
0
;
i
<
popups
.
Length
(
)
;
i
+
+
)
{
nsMenuPopupFrame
*
popupFrame
=
static_cast
<
nsMenuPopupFrame
*
>
(
popups
[
i
]
)
;
nsIContent
*
popupContent
=
popupFrame
-
>
GetContent
(
)
;
if
(
caretContent
-
>
IsInclusiveDescendantOf
(
popupContent
)
)
{
return
false
;
}
if
(
popupFrame
-
>
GetPopupType
(
)
=
=
widget
:
:
PopupType
:
:
Menu
&
&
!
popupFrame
-
>
IsContextMenu
(
)
)
{
return
true
;
}
}
return
false
;
}
void
nsCaret
:
:
ComputeCaretRects
(
nsIFrame
*
aFrame
int32_t
aFrameOffset
nsRect
*
aCaretRect
nsRect
*
aHookRect
)
{
NS_ASSERTION
(
aFrame
"
Should
have
a
frame
here
"
)
;
WritingMode
wm
=
aFrame
-
>
GetWritingMode
(
)
;
bool
isVertical
=
wm
.
IsVertical
(
)
;
nscoord
bidiIndicatorSize
;
*
aCaretRect
=
GetGeometryForFrame
(
aFrame
aFrameOffset
&
bidiIndicatorSize
)
;
const
nsStyleVisibility
*
vis
=
aFrame
-
>
StyleVisibility
(
)
;
if
(
StyleDirection
:
:
Rtl
=
=
vis
-
>
mDirection
)
{
if
(
isVertical
)
{
aCaretRect
-
>
y
-
=
aCaretRect
-
>
height
;
}
else
{
aCaretRect
-
>
x
-
=
aCaretRect
-
>
width
;
}
}
aHookRect
-
>
SetEmpty
(
)
;
if
(
!
IsBidiUI
(
)
)
{
return
;
}
bool
isCaretRTL
;
nsIBidiKeyboard
*
bidiKeyboard
=
nsContentUtils
:
:
GetBidiKeyboard
(
)
;
if
(
bidiKeyboard
&
&
NS_SUCCEEDED
(
bidiKeyboard
-
>
IsLangRTL
(
&
isCaretRTL
)
)
)
{
if
(
isVertical
)
{
if
(
wm
.
IsSidewaysLR
(
)
)
{
aHookRect
-
>
SetRect
(
aCaretRect
-
>
x
+
bidiIndicatorSize
aCaretRect
-
>
y
+
(
!
isCaretRTL
?
bidiIndicatorSize
*
-
1
:
aCaretRect
-
>
height
)
aCaretRect
-
>
height
bidiIndicatorSize
)
;
}
else
{
aHookRect
-
>
SetRect
(
aCaretRect
-
>
XMost
(
)
-
bidiIndicatorSize
aCaretRect
-
>
y
+
(
isCaretRTL
?
bidiIndicatorSize
*
-
1
:
aCaretRect
-
>
height
)
aCaretRect
-
>
height
bidiIndicatorSize
)
;
}
}
else
{
aHookRect
-
>
SetRect
(
aCaretRect
-
>
x
+
(
isCaretRTL
?
bidiIndicatorSize
*
-
1
:
aCaretRect
-
>
width
)
aCaretRect
-
>
y
+
bidiIndicatorSize
bidiIndicatorSize
aCaretRect
-
>
width
)
;
}
}
}
void
nsCaret
:
:
CaretBlinkCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
{
nsCaret
*
theCaret
=
reinterpret_cast
<
nsCaret
*
>
(
aClosure
)
;
if
(
!
theCaret
)
{
return
;
}
theCaret
-
>
mIsBlinkOn
=
!
theCaret
-
>
mIsBlinkOn
;
theCaret
-
>
SchedulePaint
(
)
;
if
(
theCaret
-
>
mBlinkCount
=
=
-
1
)
{
return
;
}
if
(
theCaret
-
>
mIsBlinkOn
)
{
if
(
-
-
theCaret
-
>
mBlinkCount
<
=
0
)
{
theCaret
-
>
StopBlinking
(
)
;
}
}
}
void
nsCaret
:
:
SetIgnoreUserModify
(
bool
aIgnoreUserModify
)
{
mIgnoreUserModify
=
aIgnoreUserModify
;
SchedulePaint
(
)
;
}
