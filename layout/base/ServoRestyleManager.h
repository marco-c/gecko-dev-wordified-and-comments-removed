#
ifndef
mozilla_ServoRestyleManager_h
#
define
mozilla_ServoRestyleManager_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ServoElementSnapshot
.
h
"
#
include
"
mozilla
/
ServoElementSnapshotTable
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsPresContext
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
}
class
nsAttrValue
;
class
nsIAtom
;
class
nsIContent
;
class
nsIFrame
;
class
nsStyleChangeList
;
namespace
mozilla
{
class
ServoRestyleState
{
public
:
ServoRestyleState
(
ServoStyleSet
&
aStyleSet
nsStyleChangeList
&
aChangeList
)
:
mStyleSet
(
aStyleSet
)
mChangeList
(
aChangeList
)
mChangesHandled
(
nsChangeHint
(
0
)
)
{
}
enum
class
Type
{
InFlow
OutOfFlow
}
;
ServoRestyleState
(
const
nsIFrame
&
aOwner
ServoRestyleState
&
aParentState
nsChangeHint
aHintForThisFrame
Type
aType
)
:
mStyleSet
(
aParentState
.
mStyleSet
)
mChangeList
(
aParentState
.
mChangeList
)
mChangesHandled
(
aType
=
=
Type
:
:
InFlow
?
aParentState
.
mChangesHandled
|
aHintForThisFrame
:
aHintForThisFrame
)
#
ifdef
DEBUG
mOwner
(
&
aOwner
)
#
endif
{
if
(
aType
=
=
Type
:
:
InFlow
)
{
AssertOwner
(
aParentState
)
;
}
}
nsStyleChangeList
&
ChangeList
(
)
{
return
mChangeList
;
}
ServoStyleSet
&
StyleSet
(
)
{
return
mStyleSet
;
}
#
ifdef
DEBUG
void
AssertOwner
(
const
ServoRestyleState
&
aParentState
)
const
;
nsChangeHint
ChangesHandledFor
(
const
nsIFrame
&
)
const
;
#
else
void
AssertOwner
(
const
ServoRestyleState
&
)
const
{
}
nsChangeHint
ChangesHandledFor
(
const
nsIFrame
&
)
const
{
return
mChangesHandled
;
}
#
endif
private
:
ServoStyleSet
&
mStyleSet
;
nsStyleChangeList
&
mChangeList
;
const
nsChangeHint
mChangesHandled
;
#
ifdef
DEBUG
const
nsIFrame
*
mOwner
{
nullptr
}
;
#
endif
}
;
class
ServoRestyleManager
:
public
RestyleManager
{
friend
class
ServoStyleSet
;
public
:
typedef
ServoElementSnapshotTable
SnapshotTable
;
typedef
RestyleManager
base_type
;
explicit
ServoRestyleManager
(
nsPresContext
*
aPresContext
)
;
void
PostRestyleEvent
(
dom
:
:
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
;
void
PostRestyleEventForCSSRuleChanges
(
)
;
void
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
void
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
void
ProcessPendingRestyles
(
)
;
void
UpdateOnlyAnimationStyles
(
)
;
void
ContentInserted
(
nsINode
*
aContainer
nsIContent
*
aChild
)
;
void
ContentAppended
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
;
void
ContentRemoved
(
nsINode
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
;
void
RestyleForInsertOrChange
(
nsINode
*
aContainer
nsIContent
*
aChild
)
;
void
RestyleForAppend
(
nsIContent
*
aContainer
nsIContent
*
aFirstNewContent
)
;
void
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aStateMask
)
;
void
AttributeWillChange
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
;
void
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
;
nsresult
ReparentStyleContext
(
nsIFrame
*
aFrame
)
;
static
nsIFrame
*
FrameForPseudoElement
(
const
Element
*
aElement
nsIAtom
*
aPseudoTagOrNull
)
;
static
void
ClearServoDataFromSubtree
(
Element
*
aElement
)
;
static
void
ClearRestyleStateFromSubtree
(
Element
*
aElement
)
;
static
void
PostRestyleEventForAnimations
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsRestyleHint
aRestyleHint
)
;
protected
:
~
ServoRestyleManager
(
)
override
{
MOZ_ASSERT
(
!
mReentrantChanges
)
;
}
private
:
bool
ProcessPostTraversal
(
Element
*
aElement
nsStyleContext
*
aParentContext
ServoRestyleState
&
aRestyleState
)
;
struct
TextPostTraversalState
;
bool
ProcessPostTraversalForText
(
nsIContent
*
aTextNode
TextPostTraversalState
&
aState
)
;
inline
ServoStyleSet
*
StyleSet
(
)
const
{
MOZ_ASSERT
(
PresContext
(
)
-
>
StyleSet
(
)
-
>
IsServo
(
)
"
ServoRestyleManager
should
only
be
used
with
a
Servo
-
flavored
"
"
style
backend
"
)
;
return
PresContext
(
)
-
>
StyleSet
(
)
-
>
AsServo
(
)
;
}
const
SnapshotTable
&
Snapshots
(
)
const
{
return
mSnapshots
;
}
void
ClearSnapshots
(
)
;
ServoElementSnapshot
&
SnapshotFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
void
DoProcessPendingRestyles
(
TraversalRestyleBehavior
aRestyleBehavior
)
;
struct
ReentrantChange
{
nsCOMPtr
<
nsIContent
>
mContent
;
nsChangeHint
mHint
;
}
;
typedef
AutoTArray
<
ReentrantChange
10
>
ReentrantChangeList
;
ReentrantChangeList
*
mReentrantChanges
;
bool
mHaveNonAnimationRestyles
=
false
;
bool
mRestyleForCSSRuleChanges
=
false
;
SnapshotTable
mSnapshots
;
}
;
}
#
endif
