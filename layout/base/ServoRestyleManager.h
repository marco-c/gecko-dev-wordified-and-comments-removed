#
ifndef
mozilla_ServoRestyleManager_h
#
define
mozilla_ServoRestyleManager_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsISupportsImpl
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
}
class
nsAttrValue
;
class
nsIAtom
;
class
nsIContent
;
class
nsIFrame
;
namespace
mozilla
{
class
ServoRestyleManager
{
public
:
NS_INLINE_DECL_REFCOUNTING
(
ServoRestyleManager
)
void
Disconnect
(
)
;
void
PostRestyleEvent
(
dom
:
:
Element
*
aElement
nsRestyleHint
aRestyleHint
nsChangeHint
aMinChangeHint
)
;
void
PostRestyleEventForLazyConstruction
(
)
;
void
RebuildAllStyleData
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
void
PostRebuildAllStyleDataEvent
(
nsChangeHint
aExtraHint
nsRestyleHint
aRestyleHint
)
;
void
ProcessPendingRestyles
(
)
;
void
RestyleForInsertOrChange
(
dom
:
:
Element
*
aContainer
nsIContent
*
aChild
)
;
void
RestyleForAppend
(
dom
:
:
Element
*
aContainer
nsIContent
*
aFirstNewContent
)
;
void
RestyleForRemove
(
dom
:
:
Element
*
aContainer
nsIContent
*
aOldChild
nsIContent
*
aFollowingSibling
)
;
nsresult
ContentStateChanged
(
nsIContent
*
aContent
EventStates
aStateMask
)
;
void
AttributeWillChange
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aNewValue
)
;
void
AttributeChanged
(
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
const
nsAttrValue
*
aOldValue
)
;
nsresult
ReparentStyleContext
(
nsIFrame
*
aFrame
)
;
bool
HasPendingRestyles
(
)
;
uint64_t
GetRestyleGeneration
(
)
const
;
protected
:
~
ServoRestyleManager
(
)
{
}
}
;
}
#
endif
