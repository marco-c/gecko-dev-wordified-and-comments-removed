#
ifndef
nsBidi_h__
#
define
nsBidi_h__
#
include
"
unicode
/
ubidi
.
h
"
#
include
"
ICUUtils
.
h
"
#
include
"
nsIFrame
.
h
"
class
nsBidi
{
public
:
nsBidi
(
)
{
mBiDi
=
ubidi_open
(
)
;
}
~
nsBidi
(
)
{
ubidi_close
(
mBiDi
)
;
}
nsresult
SetPara
(
const
char16_t
*
aText
int32_t
aLength
nsBidiLevel
aParaLevel
)
{
UErrorCode
error
=
U_ZERO_ERROR
;
ubidi_setPara
(
mBiDi
reinterpret_cast
<
const
UChar
*
>
(
aText
)
aLength
aParaLevel
nullptr
&
error
)
;
return
ICUUtils
:
:
UErrorToNsResult
(
error
)
;
}
nsBidiDirection
GetDirection
(
)
{
return
nsBidiDirection
(
ubidi_getDirection
(
mBiDi
)
)
;
}
nsBidiLevel
GetParaLevel
(
)
{
return
ubidi_getParaLevel
(
mBiDi
)
;
}
void
GetLogicalRun
(
int32_t
aLogicalStart
int32_t
*
aLogicalLimit
nsBidiLevel
*
aLevel
)
;
nsresult
CountRuns
(
int32_t
*
aRunCount
)
;
nsBidiDirection
GetVisualRun
(
int32_t
aRunIndex
int32_t
*
aLogicalStart
int32_t
*
aLength
)
{
return
nsBidiDirection
(
ubidi_getVisualRun
(
mBiDi
aRunIndex
aLogicalStart
aLength
)
)
;
}
static
void
ReorderVisual
(
const
nsBidiLevel
*
aLevels
int32_t
aLength
int32_t
*
aIndexMap
)
{
ubidi_reorderVisual
(
aLevels
aLength
aIndexMap
)
;
}
private
:
nsBidi
(
const
nsBidi
&
)
=
delete
;
void
operator
=
(
const
nsBidi
&
)
=
delete
;
UBiDi
*
mBiDi
;
const
nsBidiLevel
*
mLevels
=
nullptr
;
int32_t
mLength
=
0
;
}
;
#
endif
