#
include
"
Baseline
.
h
"
#
include
"
nsIFrame
.
h
"
namespace
mozilla
{
nscoord
Baseline
:
:
SynthesizeBOffsetFromMarginBox
(
const
nsIFrame
*
aFrame
WritingMode
aWM
BaselineSharingGroup
aGroup
)
{
MOZ_ASSERT
(
!
aWM
.
IsOrthogonalTo
(
aFrame
-
>
GetWritingMode
(
)
)
)
;
auto
margin
=
aFrame
-
>
GetLogicalUsedMargin
(
aWM
)
;
if
(
aGroup
=
=
BaselineSharingGroup
:
:
First
)
{
if
(
aWM
.
IsAlphabeticalBaseline
(
)
)
{
return
MOZ_UNLIKELY
(
aWM
.
IsLineInverted
(
)
)
?
-
margin
.
BStart
(
aWM
)
:
aFrame
-
>
BSize
(
aWM
)
+
margin
.
BEnd
(
aWM
)
;
}
nscoord
marginBoxCenter
=
(
aFrame
-
>
BSize
(
aWM
)
+
margin
.
BStartEnd
(
aWM
)
)
/
2
;
return
marginBoxCenter
-
margin
.
BStart
(
aWM
)
;
}
MOZ_ASSERT
(
aGroup
=
=
BaselineSharingGroup
:
:
Last
)
;
if
(
aWM
.
IsAlphabeticalBaseline
(
)
)
{
return
MOZ_UNLIKELY
(
aWM
.
IsLineInverted
(
)
)
?
aFrame
-
>
BSize
(
aWM
)
+
margin
.
BStart
(
aWM
)
:
-
margin
.
BEnd
(
aWM
)
;
}
nscoord
marginBoxSize
=
aFrame
-
>
BSize
(
aWM
)
+
margin
.
BStartEnd
(
aWM
)
;
nscoord
marginBoxCenter
=
(
marginBoxSize
/
2
)
+
(
marginBoxSize
%
2
)
;
return
marginBoxCenter
-
margin
.
BEnd
(
aWM
)
;
}
enum
class
BoxType
{
Border
Padding
Content
}
;
template
<
BoxType
aType
>
static
nscoord
SynthesizeBOffsetFromInnerBox
(
const
nsIFrame
*
aFrame
WritingMode
aWM
BaselineSharingGroup
aGroup
)
{
WritingMode
wm
=
aFrame
-
>
GetWritingMode
(
)
;
MOZ_ASSERT_IF
(
aType
!
=
BoxType
:
:
Border
!
aWM
.
IsOrthogonalTo
(
wm
)
)
;
const
nscoord
borderBoxSize
=
MOZ_UNLIKELY
(
aWM
.
IsOrthogonalTo
(
wm
)
)
?
aFrame
-
>
ISize
(
aWM
)
:
aFrame
-
>
BSize
(
aWM
)
;
const
LogicalMargin
bp
=
(
[
&
]
{
switch
(
aType
)
{
case
BoxType
:
:
Border
:
return
LogicalMargin
(
wm
)
;
case
BoxType
:
:
Padding
:
return
aFrame
-
>
GetLogicalUsedBorder
(
wm
)
.
ApplySkipSides
(
aFrame
-
>
GetLogicalSkipSides
(
)
)
.
ConvertTo
(
aWM
wm
)
;
case
BoxType
:
:
Content
:
return
aFrame
-
>
GetLogicalUsedBorderAndPadding
(
wm
)
.
ApplySkipSides
(
aFrame
-
>
GetLogicalSkipSides
(
)
)
.
ConvertTo
(
aWM
wm
)
;
}
MOZ_CRASH
(
)
;
}
)
(
)
;
if
(
MOZ_UNLIKELY
(
aWM
.
IsCentralBaseline
(
)
)
)
{
nscoord
boxBSize
=
borderBoxSize
-
bp
.
BStartEnd
(
aWM
)
;
if
(
aGroup
=
=
BaselineSharingGroup
:
:
First
)
{
return
boxBSize
/
2
+
bp
.
BStart
(
aWM
)
;
}
nscoord
halfBoxBSize
=
(
boxBSize
/
2
)
+
(
boxBSize
%
2
)
;
return
halfBoxBSize
+
bp
.
BEnd
(
aWM
)
;
}
if
(
aGroup
=
=
BaselineSharingGroup
:
:
First
)
{
return
MOZ_UNLIKELY
(
aWM
.
IsLineInverted
(
)
)
?
bp
.
BStart
(
aWM
)
:
borderBoxSize
-
bp
.
BEnd
(
aWM
)
;
}
return
MOZ_UNLIKELY
(
aWM
.
IsLineInverted
(
)
)
?
borderBoxSize
-
bp
.
BStart
(
aWM
)
:
bp
.
BEnd
(
aWM
)
;
}
nscoord
Baseline
:
:
SynthesizeBOffsetFromContentBox
(
const
nsIFrame
*
aFrame
WritingMode
aWM
BaselineSharingGroup
aGroup
)
{
return
SynthesizeBOffsetFromInnerBox
<
BoxType
:
:
Content
>
(
aFrame
aWM
aGroup
)
;
}
nscoord
Baseline
:
:
SynthesizeBOffsetFromPaddingBox
(
const
nsIFrame
*
aFrame
WritingMode
aWM
BaselineSharingGroup
aGroup
)
{
return
SynthesizeBOffsetFromInnerBox
<
BoxType
:
:
Padding
>
(
aFrame
aWM
aGroup
)
;
}
nscoord
Baseline
:
:
SynthesizeBOffsetFromBorderBox
(
const
nsIFrame
*
aFrame
WritingMode
aWM
BaselineSharingGroup
aGroup
)
{
return
SynthesizeBOffsetFromInnerBox
<
BoxType
:
:
Border
>
(
aFrame
aWM
aGroup
)
;
}
}
