#
include
"
AnchorPositioningUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
{
bool
IsAnchorInScopeForPositionedElement
(
const
nsIFrame
*
const
nsIFrame
*
)
{
return
true
;
}
;
bool
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
const
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
Style
(
)
-
>
IsPseudoElement
(
)
)
{
return
true
;
}
const
PseudoStyleType
pseudoElementType
=
aFrame
-
>
Style
(
)
-
>
GetPseudoType
(
)
;
return
pseudoElementType
=
=
PseudoStyleType
:
:
before
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
after
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
marker
;
}
bool
IsAnchorLaidOutStrictlyBeforeElement
(
const
nsIFrame
*
const
nsIFrame
*
)
{
return
true
;
}
bool
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
const
nsIFrame
*
const
nsIFrame
*
)
{
return
true
;
}
bool
IsAcceptableAnchorElement
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
MOZ_ASSERT
(
aPossibleAnchorFrame
)
;
MOZ_ASSERT
(
aPositionedFrame
)
;
return
(
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
aPossibleAnchorFrame
)
&
&
IsAnchorInScopeForPositionedElement
(
aPossibleAnchorFrame
aPositionedFrame
)
&
&
IsAnchorLaidOutStrictlyBeforeElement
(
aPossibleAnchorFrame
aPositionedFrame
)
&
&
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
aPossibleAnchorFrame
aPositionedFrame
)
)
;
}
}
nsIFrame
*
AnchorPositioningUtils
:
:
FindFirstAcceptableAnchor
(
const
nsIFrame
*
aPositionedFrame
const
nsTArray
<
nsIFrame
*
>
&
aPossibleAnchorFrames
)
{
for
(
auto
it
=
aPossibleAnchorFrames
.
rbegin
(
)
;
it
!
=
aPossibleAnchorFrames
.
rend
(
)
;
+
+
it
)
{
if
(
IsAcceptableAnchorElement
(
*
it
aPositionedFrame
)
)
{
return
*
it
;
}
}
return
nullptr
;
}
}
