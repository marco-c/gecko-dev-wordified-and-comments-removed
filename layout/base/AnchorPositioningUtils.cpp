#
include
"
AnchorPositioningUtils
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
{
bool
IsAnchorInScopeForPositionedElement
(
const
nsIFrame
*
const
nsIFrame
*
)
{
return
true
;
}
;
bool
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
const
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
Style
(
)
-
>
IsPseudoElement
(
)
)
{
return
true
;
}
const
PseudoStyleType
pseudoElementType
=
aFrame
-
>
Style
(
)
-
>
GetPseudoType
(
)
;
return
pseudoElementType
=
=
PseudoStyleType
:
:
before
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
after
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
marker
;
}
size_t
GetTopLayerIndex
(
const
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
aFrame
)
;
const
nsIContent
*
frameContent
=
aFrame
-
>
GetContent
(
)
;
if
(
!
frameContent
)
{
return
0
;
}
const
nsTArray
<
dom
:
:
Element
*
>
&
topLayers
=
frameContent
-
>
OwnerDoc
(
)
-
>
GetTopLayer
(
)
;
for
(
size_t
index
=
0
;
index
<
topLayers
.
Length
(
)
;
+
+
index
)
{
const
auto
&
topLayer
=
topLayers
.
ElementAt
(
index
)
;
if
(
nsContentUtils
:
:
ContentIsFlattenedTreeDescendantOfForStyle
(
frameContent
topLayer
)
)
{
return
1
+
index
;
}
}
return
0
;
}
bool
IsInitialContainingBlock
(
const
nsIFrame
*
aContainingBlock
)
{
return
aContainingBlock
=
=
aContainingBlock
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
GetDocElementContainingBlock
(
)
;
}
bool
IsContainingBlockGeneratedByElement
(
const
nsIFrame
*
aContainingBlock
)
{
return
!
(
!
aContainingBlock
|
|
aContainingBlock
-
>
IsViewportFrame
(
)
|
|
IsInitialContainingBlock
(
aContainingBlock
)
)
;
}
bool
IsAnchorLaidOutStrictlyBeforeElement
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
const
size_t
positionedTopLayerIndex
=
GetTopLayerIndex
(
aPositionedFrame
)
;
const
size_t
anchorTopLayerIndex
=
GetTopLayerIndex
(
aPossibleAnchorFrame
)
;
if
(
anchorTopLayerIndex
!
=
positionedTopLayerIndex
)
{
return
anchorTopLayerIndex
<
positionedTopLayerIndex
;
}
const
nsIFrame
*
positionedContainingBlock
=
aPositionedFrame
-
>
GetParent
(
)
;
const
nsIFrame
*
anchorContainingBlock
=
aPossibleAnchorFrame
-
>
GetContainingBlock
(
)
;
if
(
anchorContainingBlock
!
=
positionedContainingBlock
)
{
if
(
positionedContainingBlock
-
>
IsViewportFrame
(
)
&
&
!
anchorContainingBlock
-
>
IsViewportFrame
(
)
)
{
return
true
;
}
auto
isLastContainingBlockOrderable
=
[
&
aPositionedFrame
&
anchorContainingBlock
&
positionedContainingBlock
]
(
)
-
>
bool
{
const
nsIFrame
*
it
=
anchorContainingBlock
;
while
(
it
)
{
const
nsIFrame
*
parentContainingBlock
=
it
-
>
GetContainingBlock
(
)
;
if
(
!
parentContainingBlock
)
{
return
false
;
}
if
(
parentContainingBlock
=
=
positionedContainingBlock
)
{
return
!
parentContainingBlock
-
>
IsAbsPosContainingBlock
(
)
|
|
nsLayoutUtils
:
:
CompareTreePosition
(
parentContainingBlock
aPositionedFrame
nullptr
)
<
0
;
}
it
=
parentContainingBlock
;
}
return
false
;
}
;
const
bool
isAnchorContainingBlockGenerated
=
IsContainingBlockGeneratedByElement
(
anchorContainingBlock
)
;
if
(
isAnchorContainingBlockGenerated
&
&
IsInitialContainingBlock
(
positionedContainingBlock
)
)
{
return
isLastContainingBlockOrderable
(
)
;
}
if
(
isAnchorContainingBlockGenerated
&
&
IsContainingBlockGeneratedByElement
(
positionedContainingBlock
)
)
{
return
isLastContainingBlockOrderable
(
)
;
}
return
false
;
}
const
bool
isAnchorAbsolutelyPositioned
=
aPossibleAnchorFrame
-
>
IsAbsolutelyPositioned
(
)
;
if
(
isAnchorAbsolutelyPositioned
)
{
return
nsLayoutUtils
:
:
CompareTreePosition
(
aPossibleAnchorFrame
aPositionedFrame
nullptr
)
<
0
;
}
return
!
isAnchorAbsolutelyPositioned
;
}
bool
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
if
(
aPossibleAnchorFrame
-
>
HidesContentForLayout
(
)
)
{
return
false
;
}
const
nsIFrame
*
visibilityAncestor
=
aPossibleAnchorFrame
-
>
GetParent
(
)
;
while
(
visibilityAncestor
)
{
if
(
visibilityAncestor
-
>
HidesContentForLayout
(
)
)
{
break
;
}
visibilityAncestor
=
visibilityAncestor
-
>
GetParent
(
)
;
}
if
(
aPositionedFrame
-
>
HidesContentForLayout
(
)
)
{
return
false
;
}
const
nsIFrame
*
ancestor
=
aPositionedFrame
;
while
(
ancestor
)
{
if
(
ancestor
-
>
HidesContentForLayout
(
)
)
{
return
ancestor
=
=
visibilityAncestor
;
}
ancestor
=
ancestor
-
>
GetParent
(
)
;
}
return
true
;
}
bool
IsAcceptableAnchorElement
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
MOZ_ASSERT
(
aPossibleAnchorFrame
)
;
MOZ_ASSERT
(
aPositionedFrame
)
;
return
(
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
aPossibleAnchorFrame
)
&
&
IsAnchorInScopeForPositionedElement
(
aPossibleAnchorFrame
aPositionedFrame
)
&
&
IsAnchorLaidOutStrictlyBeforeElement
(
aPossibleAnchorFrame
aPositionedFrame
)
&
&
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
aPossibleAnchorFrame
aPositionedFrame
)
)
;
}
}
nsIFrame
*
AnchorPositioningUtils
:
:
FindFirstAcceptableAnchor
(
const
nsIFrame
*
aPositionedFrame
const
nsTArray
<
nsIFrame
*
>
&
aPossibleAnchorFrames
)
{
for
(
auto
it
=
aPossibleAnchorFrames
.
rbegin
(
)
;
it
!
=
aPossibleAnchorFrames
.
rend
(
)
;
+
+
it
)
{
if
(
IsAcceptableAnchorElement
(
*
it
aPositionedFrame
)
)
{
return
*
it
;
}
}
return
nullptr
;
}
}
