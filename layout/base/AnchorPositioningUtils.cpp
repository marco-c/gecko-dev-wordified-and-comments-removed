#
include
"
AnchorPositioningUtils
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsCanvasFrame
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIFrameInlines
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
{
bool
DoTreeScopedPropertiesOfElementApplyToContent
(
const
nsINode
*
aStylePropertyElement
const
nsINode
*
aStyledContent
)
{
return
aStylePropertyElement
-
>
GetContainingDocumentOrShadowRoot
(
)
=
=
aStyledContent
-
>
GetContainingDocumentOrShadowRoot
(
)
;
}
bool
IsAnchorInScopeForPositionedElement
(
const
nsAtom
*
aName
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
const
auto
*
positionedContainingBlockContent
=
aPositionedFrame
-
>
GetParent
(
)
-
>
GetContent
(
)
;
auto
getAnchorPosNearestScope
=
[
&
positionedContainingBlockContent
]
(
const
nsAtom
*
aName
const
nsIFrame
*
aFrame
)
-
>
const
nsIContent
*
{
for
(
const
nsIContent
*
cp
=
aFrame
-
>
GetContent
(
)
;
cp
&
&
cp
!
=
positionedContainingBlockContent
;
cp
=
cp
-
>
GetFlattenedTreeParentElementForStyle
(
)
)
{
const
nsIFrame
*
f
=
cp
-
>
GetPrimaryFrame
(
)
;
if
(
!
f
)
{
continue
;
}
const
StyleAnchorScope
&
anchorScope
=
f
-
>
StyleDisplay
(
)
-
>
mAnchorScope
;
if
(
anchorScope
.
IsNone
(
)
)
{
continue
;
}
if
(
anchorScope
.
IsAll
(
)
)
{
return
cp
;
}
MOZ_ASSERT
(
anchorScope
.
IsIdents
(
)
)
;
for
(
const
StyleAtom
&
ident
:
anchorScope
.
AsIdents
(
)
.
AsSpan
(
)
)
{
const
auto
*
id
=
ident
.
AsAtom
(
)
;
if
(
aName
-
>
Equals
(
id
-
>
GetUTF16String
(
)
id
-
>
GetLength
(
)
)
)
{
return
cp
;
}
}
}
return
nullptr
;
}
;
const
nsIContent
*
nearestScopeForAnchor
=
getAnchorPosNearestScope
(
aName
aPossibleAnchorFrame
)
;
const
nsIContent
*
nearestScopeForPositioned
=
getAnchorPosNearestScope
(
aName
aPositionedFrame
)
;
if
(
!
nearestScopeForAnchor
)
{
return
!
nearestScopeForPositioned
|
|
aPossibleAnchorFrame
-
>
GetContent
(
)
=
=
nearestScopeForPositioned
;
}
return
nearestScopeForAnchor
=
=
nearestScopeForPositioned
;
}
;
bool
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
const
nsIFrame
*
aFrame
)
{
if
(
!
aFrame
-
>
Style
(
)
-
>
IsPseudoElement
(
)
)
{
return
true
;
}
const
PseudoStyleType
pseudoElementType
=
aFrame
-
>
Style
(
)
-
>
GetPseudoType
(
)
;
return
pseudoElementType
=
=
PseudoStyleType
:
:
before
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
after
|
|
pseudoElementType
=
=
PseudoStyleType
:
:
marker
;
}
size_t
GetTopLayerIndex
(
const
nsIFrame
*
aFrame
)
{
MOZ_ASSERT
(
aFrame
)
;
const
nsIContent
*
frameContent
=
aFrame
-
>
GetContent
(
)
;
if
(
!
frameContent
)
{
return
0
;
}
const
nsTArray
<
dom
:
:
Element
*
>
&
topLayers
=
frameContent
-
>
OwnerDoc
(
)
-
>
GetTopLayer
(
)
;
for
(
size_t
index
=
0
;
index
<
topLayers
.
Length
(
)
;
+
+
index
)
{
const
auto
&
topLayer
=
topLayers
.
ElementAt
(
index
)
;
if
(
nsContentUtils
:
:
ContentIsFlattenedTreeDescendantOfForStyle
(
frameContent
topLayer
)
)
{
return
1
+
index
;
}
}
return
0
;
}
bool
IsInitialContainingBlock
(
const
nsIFrame
*
aContainingBlock
)
{
return
aContainingBlock
=
=
aContainingBlock
-
>
PresShell
(
)
-
>
FrameConstructor
(
)
-
>
GetDocElementContainingBlock
(
)
;
}
bool
IsContainingBlockGeneratedByElement
(
const
nsIFrame
*
aContainingBlock
)
{
return
!
(
!
aContainingBlock
|
|
aContainingBlock
-
>
IsViewportFrame
(
)
|
|
IsInitialContainingBlock
(
aContainingBlock
)
)
;
}
bool
IsAnchorLaidOutStrictlyBeforeElement
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
const
nsTArray
<
const
nsIFrame
*
>
&
aPositionedFrameAncestors
)
{
const
size_t
positionedTopLayerIndex
=
GetTopLayerIndex
(
aPositionedFrame
)
;
const
size_t
anchorTopLayerIndex
=
GetTopLayerIndex
(
aPossibleAnchorFrame
)
;
if
(
anchorTopLayerIndex
!
=
positionedTopLayerIndex
)
{
return
anchorTopLayerIndex
<
positionedTopLayerIndex
;
}
const
nsIFrame
*
positionedContainingBlock
=
aPositionedFrame
-
>
GetParent
(
)
;
const
nsIFrame
*
anchorContainingBlock
=
aPossibleAnchorFrame
-
>
GetParent
(
)
;
if
(
anchorContainingBlock
!
=
positionedContainingBlock
)
{
if
(
positionedContainingBlock
-
>
IsViewportFrame
(
)
&
&
!
anchorContainingBlock
-
>
IsViewportFrame
(
)
)
{
return
true
;
}
auto
isLastContainingBlockOrderable
=
[
&
aPositionedFrame
&
aPositionedFrameAncestors
&
anchorContainingBlock
&
positionedContainingBlock
]
(
)
-
>
bool
{
const
nsIFrame
*
it
=
anchorContainingBlock
;
while
(
it
)
{
const
nsIFrame
*
parentContainingBlock
=
it
-
>
GetParent
(
)
;
if
(
!
parentContainingBlock
)
{
return
false
;
}
if
(
parentContainingBlock
=
=
positionedContainingBlock
)
{
return
!
it
-
>
IsAbsolutelyPositioned
(
)
|
|
nsLayoutUtils
:
:
CompareTreePosition
(
it
aPositionedFrame
aPositionedFrameAncestors
nullptr
)
<
0
;
}
it
=
parentContainingBlock
;
}
return
false
;
}
;
const
bool
isAnchorContainingBlockGenerated
=
IsContainingBlockGeneratedByElement
(
anchorContainingBlock
)
;
if
(
isAnchorContainingBlockGenerated
&
&
IsInitialContainingBlock
(
positionedContainingBlock
)
)
{
return
isLastContainingBlockOrderable
(
)
;
}
if
(
isAnchorContainingBlockGenerated
&
&
IsContainingBlockGeneratedByElement
(
positionedContainingBlock
)
)
{
return
isLastContainingBlockOrderable
(
)
;
}
return
false
;
}
const
bool
isAnchorAbsolutelyPositioned
=
aPossibleAnchorFrame
-
>
IsAbsolutelyPositioned
(
)
;
if
(
isAnchorAbsolutelyPositioned
)
{
return
nsLayoutUtils
:
:
CompareTreePosition
(
aPossibleAnchorFrame
aPositionedFrame
aPositionedFrameAncestors
nullptr
)
<
0
;
}
return
!
isAnchorAbsolutelyPositioned
;
}
bool
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsIFrame
*
aPositionedFrame
)
{
if
(
aPossibleAnchorFrame
-
>
HidesContentForLayout
(
)
)
{
return
false
;
}
const
nsIFrame
*
visibilityAncestor
=
aPossibleAnchorFrame
-
>
GetParent
(
)
;
while
(
visibilityAncestor
)
{
if
(
visibilityAncestor
-
>
HidesContentForLayout
(
)
)
{
break
;
}
visibilityAncestor
=
visibilityAncestor
-
>
GetParent
(
)
;
}
if
(
aPositionedFrame
-
>
HidesContentForLayout
(
)
)
{
return
false
;
}
const
nsIFrame
*
ancestor
=
aPositionedFrame
;
while
(
ancestor
)
{
if
(
ancestor
-
>
HidesContentForLayout
(
)
)
{
return
ancestor
=
=
visibilityAncestor
;
}
ancestor
=
ancestor
-
>
GetParent
(
)
;
}
return
true
;
}
struct
LazyAncestorHolder
{
const
nsIFrame
*
mFrame
;
Maybe
<
nsTArray
<
const
nsIFrame
*
>
>
mAncestors
;
explicit
LazyAncestorHolder
(
const
nsIFrame
*
aFrame
)
:
mFrame
(
aFrame
)
{
}
const
nsTArray
<
const
nsIFrame
*
>
&
GetAncestors
(
)
{
if
(
!
mAncestors
)
{
AutoTArray
<
const
nsIFrame
*
8
>
ancestors
;
nsLayoutUtils
:
:
FillAncestors
(
mFrame
nullptr
&
ancestors
)
;
mAncestors
.
emplace
(
std
:
:
move
(
ancestors
)
)
;
}
return
*
mAncestors
;
}
}
;
bool
IsAcceptableAnchorElement
(
const
nsIFrame
*
aPossibleAnchorFrame
const
nsAtom
*
aName
const
nsIFrame
*
aPositionedFrame
LazyAncestorHolder
&
aPositionedFrameAncestorHolder
)
{
MOZ_ASSERT
(
aPossibleAnchorFrame
)
;
MOZ_ASSERT
(
aPositionedFrame
)
;
return
(
IsFullyStyleableTreeAbidingOrNotPseudoElement
(
aPossibleAnchorFrame
)
&
&
IsAnchorLaidOutStrictlyBeforeElement
(
aPossibleAnchorFrame
aPositionedFrame
aPositionedFrameAncestorHolder
.
GetAncestors
(
)
)
&
&
IsAnchorInScopeForPositionedElement
(
aName
aPossibleAnchorFrame
aPositionedFrame
)
&
&
IsPositionedElementAlsoSkippedWhenAnchorIsSkipped
(
aPossibleAnchorFrame
aPositionedFrame
)
)
;
}
}
AnchorPosReferenceData
:
:
Result
AnchorPosReferenceData
:
:
InsertOrModify
(
const
nsAtom
*
aAnchorName
bool
aNeedOffset
)
{
bool
exists
=
true
;
auto
*
result
=
&
mMap
.
LookupOrInsertWith
(
aAnchorName
[
&
exists
]
(
)
{
exists
=
false
;
return
Nothing
{
}
;
}
)
;
if
(
!
exists
)
{
return
{
false
result
}
;
}
if
(
result
-
>
isNothing
(
)
)
{
return
{
true
result
}
;
}
if
(
!
aNeedOffset
)
{
return
{
true
result
}
;
}
return
{
result
-
>
ref
(
)
.
mOrigin
.
isSome
(
)
result
}
;
}
const
AnchorPosReferenceData
:
:
Value
*
AnchorPosReferenceData
:
:
Lookup
(
const
nsAtom
*
aAnchorName
)
const
{
return
mMap
.
Lookup
(
aAnchorName
)
.
DataPtrOrNull
(
)
;
}
nsIFrame
*
AnchorPositioningUtils
:
:
FindFirstAcceptableAnchor
(
const
nsAtom
*
aName
const
nsIFrame
*
aPositionedFrame
const
nsTArray
<
nsIFrame
*
>
&
aPossibleAnchorFrames
)
{
LazyAncestorHolder
positionedFrameAncestorHolder
(
aPositionedFrame
)
;
const
auto
*
positionedContent
=
aPositionedFrame
-
>
GetContent
(
)
;
for
(
auto
it
=
aPossibleAnchorFrames
.
rbegin
(
)
;
it
!
=
aPossibleAnchorFrames
.
rend
(
)
;
+
+
it
)
{
const
nsIFrame
*
possibleAnchorFrame
=
*
it
;
if
(
!
DoTreeScopedPropertiesOfElementApplyToContent
(
possibleAnchorFrame
-
>
GetContent
(
)
positionedContent
)
)
{
continue
;
}
if
(
IsAcceptableAnchorElement
(
*
it
aName
aPositionedFrame
positionedFrameAncestorHolder
)
)
{
return
*
it
;
}
}
return
nullptr
;
}
static
const
nsIFrame
*
TraverseUpToContainerChild
(
const
nsIFrame
*
aContainer
const
nsIFrame
*
aDescendant
)
{
const
auto
*
current
=
aDescendant
;
while
(
true
)
{
const
auto
*
parent
=
current
-
>
GetParent
(
)
;
if
(
!
parent
)
{
return
nullptr
;
}
if
(
parent
=
=
aContainer
)
{
return
current
;
}
current
=
parent
;
}
}
Maybe
<
AnchorPosInfo
>
AnchorPositioningUtils
:
:
GetAnchorPosRect
(
const
nsIFrame
*
aAbsoluteContainingBlock
const
nsIFrame
*
aAnchor
bool
aCBRectIsvalid
Maybe
<
AnchorPosResolutionData
>
*
aReferencedAnchorsEntry
)
{
auto
rect
=
[
&
]
(
)
-
>
Maybe
<
nsRect
>
{
if
(
aCBRectIsvalid
)
{
const
nsRect
result
=
nsLayoutUtils
:
:
GetCombinedFragmentRects
(
aAnchor
true
)
;
const
auto
offset
=
aAnchor
-
>
GetOffsetTo
(
aAbsoluteContainingBlock
)
;
return
Some
(
result
+
offset
)
;
}
const
auto
*
containerChild
=
TraverseUpToContainerChild
(
aAbsoluteContainingBlock
aAnchor
)
;
if
(
!
containerChild
)
{
return
Nothing
{
}
;
}
if
(
aAnchor
=
=
containerChild
)
{
return
Some
(
nsLayoutUtils
:
:
GetCombinedFragmentRects
(
aAnchor
false
)
)
;
}
const
nsRect
rectToContainerChild
=
nsLayoutUtils
:
:
GetCombinedFragmentRects
(
aAnchor
true
)
;
const
auto
offset
=
aAnchor
-
>
GetOffsetTo
(
containerChild
)
;
return
Some
(
rectToContainerChild
+
offset
+
containerChild
-
>
GetPosition
(
)
)
;
}
(
)
;
return
rect
.
map
(
[
&
]
(
const
nsRect
&
aRect
)
{
const
auto
border
=
aAbsoluteContainingBlock
-
>
GetUsedBorder
(
)
;
const
nsPoint
borderTopLeft
{
border
.
left
border
.
top
}
;
const
auto
rect
=
aRect
-
borderTopLeft
;
if
(
aReferencedAnchorsEntry
)
{
MOZ_ASSERT_IF
(
*
aReferencedAnchorsEntry
aReferencedAnchorsEntry
-
>
ref
(
)
.
mSize
=
=
rect
.
Size
(
)
)
;
*
aReferencedAnchorsEntry
=
Some
(
AnchorPosResolutionData
{
rect
.
Size
(
)
Some
(
rect
.
TopLeft
(
)
)
}
)
;
}
return
AnchorPosInfo
{
.
mRect
=
rect
.
mContainingBlock
=
aAbsoluteContainingBlock
}
;
}
)
;
}
static
inline
StylePositionAreaKeyword
StripSpanAndSelfWMFlags
(
StylePositionAreaKeyword
aValue
)
{
return
StylePositionAreaKeyword
(
uint8_t
(
aValue
)
&
~
(
uint8_t
(
StylePositionAreaKeyword
:
:
Span
)
|
uint8_t
(
StylePositionAreaKeyword
:
:
SelfWM
)
)
)
;
}
static
inline
uint8_t
SpanAndSelfWM
(
StylePositionAreaKeyword
aValue
)
{
return
uint8_t
(
aValue
)
&
(
uint8_t
(
StylePositionAreaKeyword
:
:
Span
)
|
uint8_t
(
StylePositionAreaKeyword
:
:
SelfWM
)
)
;
}
static
inline
StylePositionArea
MakeMissingSecondExplicit
(
StylePositionArea
aPositionArea
)
{
auto
first
=
aPositionArea
.
first
;
if
(
aPositionArea
.
second
=
=
StylePositionAreaKeyword
:
:
None
)
{
switch
(
StripSpanAndSelfWMFlags
(
first
)
)
{
case
StylePositionAreaKeyword
:
:
Center
:
case
StylePositionAreaKeyword
:
:
SpanAll
:
case
StylePositionAreaKeyword
:
:
Start
:
case
StylePositionAreaKeyword
:
:
End
:
return
{
first
first
}
;
default
:
return
{
first
StylePositionAreaKeyword
:
:
SpanAll
}
;
}
}
return
aPositionArea
;
}
static
StylePositionAreaKeyword
FlipInAxis
(
StylePositionAreaKeyword
aKw
PhysicalAxis
aAxis
)
{
auto
bits
=
SpanAndSelfWM
(
aKw
)
;
auto
stripped
=
StripSpanAndSelfWMFlags
(
aKw
)
;
switch
(
stripped
)
{
case
StylePositionAreaKeyword
:
:
Top
:
case
StylePositionAreaKeyword
:
:
Bottom
:
if
(
aAxis
!
=
PhysicalAxis
:
:
Vertical
)
{
break
;
}
return
StylePositionAreaKeyword
(
uint8_t
(
stripped
=
=
StylePositionAreaKeyword
:
:
Top
?
StylePositionAreaKeyword
:
:
Bottom
:
StylePositionAreaKeyword
:
:
Top
)
|
bits
)
;
case
StylePositionAreaKeyword
:
:
Left
:
case
StylePositionAreaKeyword
:
:
Right
:
if
(
aAxis
!
=
PhysicalAxis
:
:
Horizontal
)
{
break
;
}
return
StylePositionAreaKeyword
(
uint8_t
(
stripped
=
=
StylePositionAreaKeyword
:
:
Left
?
StylePositionAreaKeyword
:
:
Right
:
StylePositionAreaKeyword
:
:
Left
)
|
bits
)
;
case
StylePositionAreaKeyword
:
:
Center
:
case
StylePositionAreaKeyword
:
:
SpanAll
:
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Expected
a
physical
position
area
"
)
;
break
;
}
return
aKw
;
}
static
void
FlipInAxis
(
StylePositionArea
&
aArea
PhysicalAxis
aAxis
)
{
aArea
.
first
=
FlipInAxis
(
aArea
.
first
aAxis
)
;
aArea
.
second
=
FlipInAxis
(
aArea
.
second
aAxis
)
;
}
static
void
FlipStartsAndEnds
(
StylePositionArea
&
aArea
WritingMode
aWM
)
{
auto
flipAxes
=
[
]
(
StylePositionAreaKeyword
aKw
WritingMode
aWM
)
-
>
StylePositionAreaKeyword
{
auto
bits
=
SpanAndSelfWM
(
aKw
)
;
auto
stripped
=
StripSpanAndSelfWMFlags
(
aKw
)
;
Maybe
<
LogicalSide
>
logicalSide
;
switch
(
stripped
)
{
case
StylePositionAreaKeyword
:
:
Top
:
logicalSide
=
Some
(
aWM
.
LogicalSideForPhysicalSide
(
Side
:
:
eSideTop
)
)
;
break
;
case
StylePositionAreaKeyword
:
:
Bottom
:
logicalSide
=
Some
(
aWM
.
LogicalSideForPhysicalSide
(
Side
:
:
eSideBottom
)
)
;
break
;
case
StylePositionAreaKeyword
:
:
Left
:
logicalSide
=
Some
(
aWM
.
LogicalSideForPhysicalSide
(
Side
:
:
eSideLeft
)
)
;
break
;
case
StylePositionAreaKeyword
:
:
Right
:
logicalSide
=
Some
(
aWM
.
LogicalSideForPhysicalSide
(
Side
:
:
eSideRight
)
)
;
break
;
case
StylePositionAreaKeyword
:
:
Center
:
case
StylePositionAreaKeyword
:
:
SpanAll
:
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
expected
a
physical
positon
-
area
"
)
;
break
;
}
if
(
logicalSide
)
{
mozilla
:
:
Side
side
;
switch
(
*
logicalSide
)
{
case
LogicalSide
:
:
IStart
:
side
=
aWM
.
PhysicalSide
(
LogicalSide
:
:
BStart
)
;
break
;
case
LogicalSide
:
:
IEnd
:
side
=
aWM
.
PhysicalSide
(
LogicalSide
:
:
BEnd
)
;
break
;
case
LogicalSide
:
:
BStart
:
side
=
aWM
.
PhysicalSide
(
LogicalSide
:
:
IStart
)
;
break
;
case
LogicalSide
:
:
BEnd
:
side
=
aWM
.
PhysicalSide
(
LogicalSide
:
:
IEnd
)
;
break
;
}
switch
(
side
)
{
case
eSideTop
:
stripped
=
StylePositionAreaKeyword
:
:
Top
;
break
;
case
eSideBottom
:
stripped
=
StylePositionAreaKeyword
:
:
Bottom
;
break
;
case
eSideLeft
:
stripped
=
StylePositionAreaKeyword
:
:
Left
;
break
;
case
eSideRight
:
stripped
=
StylePositionAreaKeyword
:
:
Right
;
break
;
}
}
return
StylePositionAreaKeyword
(
uint8_t
(
stripped
)
|
bits
)
;
}
;
aArea
.
first
=
flipAxes
(
aArea
.
first
aWM
)
;
aArea
.
second
=
flipAxes
(
aArea
.
second
aWM
)
;
std
:
:
swap
(
aArea
.
first
aArea
.
second
)
;
}
static
void
ApplyFallbackTactic
(
StylePositionArea
&
aPhysicalArea
StylePositionTryFallbacksTryTacticKeyword
aTactic
WritingMode
aWM
)
{
switch
(
aTactic
)
{
case
StylePositionTryFallbacksTryTacticKeyword
:
:
None
:
return
;
case
StylePositionTryFallbacksTryTacticKeyword
:
:
FlipBlock
:
FlipInAxis
(
aPhysicalArea
aWM
.
PhysicalAxis
(
LogicalAxis
:
:
Block
)
)
;
return
;
case
StylePositionTryFallbacksTryTacticKeyword
:
:
FlipInline
:
FlipInAxis
(
aPhysicalArea
aWM
.
PhysicalAxis
(
LogicalAxis
:
:
Inline
)
)
;
return
;
case
StylePositionTryFallbacksTryTacticKeyword
:
:
FlipStart
:
FlipStartsAndEnds
(
aPhysicalArea
aWM
)
;
return
;
}
}
static
void
ApplyFallbackTactic
(
StylePositionArea
&
aArea
StylePositionTryFallbacksTryTactic
aTactic
WritingMode
aWM
)
{
ApplyFallbackTactic
(
aArea
aTactic
.
_0
aWM
)
;
ApplyFallbackTactic
(
aArea
aTactic
.
_1
aWM
)
;
ApplyFallbackTactic
(
aArea
aTactic
.
_2
aWM
)
;
}
static
StylePositionArea
ToPhysicalPositionArea
(
StylePositionArea
aPosArea
WritingMode
aCbWM
WritingMode
aPosWM
)
{
aPosArea
=
MakeMissingSecondExplicit
(
aPosArea
)
;
auto
toPhysical
=
[
=
]
(
StylePositionAreaKeyword
aValue
bool
aImplicitIsBlock
)
-
>
StylePositionAreaKeyword
{
if
(
aValue
<
StylePositionAreaKeyword
:
:
Left
)
{
return
aValue
;
}
uint8_t
span
=
uint8_t
(
aValue
)
&
uint8_t
(
StylePositionAreaKeyword
:
:
Span
)
;
uint8_t
selfWM
=
uint8_t
(
aValue
)
&
uint8_t
(
StylePositionAreaKeyword
:
:
SelfWM
)
;
aValue
=
StripSpanAndSelfWMFlags
(
aValue
)
;
Maybe
<
LogicalSide
>
ls
;
WritingMode
wm
=
selfWM
?
aPosWM
:
aCbWM
;
switch
(
aValue
)
{
case
StylePositionAreaKeyword
:
:
Start
:
ls
=
Some
(
aImplicitIsBlock
?
LogicalSide
:
:
BStart
:
LogicalSide
:
:
IStart
)
;
break
;
case
StylePositionAreaKeyword
:
:
End
:
ls
=
Some
(
aImplicitIsBlock
?
LogicalSide
:
:
BEnd
:
LogicalSide
:
:
IEnd
)
;
break
;
case
StylePositionAreaKeyword
:
:
BlockStart
:
ls
=
Some
(
LogicalSide
:
:
BStart
)
;
break
;
case
StylePositionAreaKeyword
:
:
BlockEnd
:
ls
=
Some
(
LogicalSide
:
:
BEnd
)
;
break
;
case
StylePositionAreaKeyword
:
:
InlineStart
:
ls
=
Some
(
LogicalSide
:
:
IStart
)
;
break
;
case
StylePositionAreaKeyword
:
:
InlineEnd
:
ls
=
Some
(
LogicalSide
:
:
IEnd
)
;
break
;
case
StylePositionAreaKeyword
:
:
XStart
:
ls
=
Some
(
wm
.
IsVertical
(
)
?
LogicalSide
:
:
BStart
:
LogicalSide
:
:
IStart
)
;
break
;
case
StylePositionAreaKeyword
:
:
XEnd
:
ls
=
Some
(
wm
.
IsVertical
(
)
?
LogicalSide
:
:
BEnd
:
LogicalSide
:
:
IEnd
)
;
break
;
case
StylePositionAreaKeyword
:
:
YStart
:
ls
=
Some
(
wm
.
IsVertical
(
)
?
LogicalSide
:
:
IStart
:
LogicalSide
:
:
BStart
)
;
break
;
case
StylePositionAreaKeyword
:
:
YEnd
:
ls
=
Some
(
wm
.
IsVertical
(
)
?
LogicalSide
:
:
IEnd
:
LogicalSide
:
:
BEnd
)
;
break
;
default
:
break
;
}
if
(
ls
.
isSome
(
)
)
{
switch
(
wm
.
PhysicalSide
(
ls
.
ref
(
)
)
)
{
case
Side
:
:
eSideLeft
:
aValue
=
StylePositionAreaKeyword
:
:
Left
;
break
;
case
Side
:
:
eSideRight
:
aValue
=
StylePositionAreaKeyword
:
:
Right
;
break
;
case
Side
:
:
eSideTop
:
aValue
=
StylePositionAreaKeyword
:
:
Top
;
break
;
case
Side
:
:
eSideBottom
:
aValue
=
StylePositionAreaKeyword
:
:
Bottom
;
break
;
}
}
return
StylePositionAreaKeyword
(
uint8_t
(
aValue
)
|
span
)
;
}
;
aPosArea
.
first
=
toPhysical
(
aPosArea
.
first
true
)
;
aPosArea
.
second
=
toPhysical
(
aPosArea
.
second
false
)
;
switch
(
StripSpanAndSelfWMFlags
(
aPosArea
.
first
)
)
{
case
StylePositionAreaKeyword
:
:
Top
:
case
StylePositionAreaKeyword
:
:
Bottom
:
std
:
:
swap
(
aPosArea
.
first
aPosArea
.
second
)
;
break
;
case
StylePositionAreaKeyword
:
:
Center
:
case
StylePositionAreaKeyword
:
:
SpanAll
:
switch
(
StripSpanAndSelfWMFlags
(
aPosArea
.
second
)
)
{
case
StylePositionAreaKeyword
:
:
Left
:
case
StylePositionAreaKeyword
:
:
Right
:
std
:
:
swap
(
aPosArea
.
first
aPosArea
.
second
)
;
break
;
default
:
break
;
}
break
;
default
:
break
;
}
return
aPosArea
;
}
nsRect
AnchorPositioningUtils
:
:
AdjustAbsoluteContainingBlockRectForPositionArea
(
nsIFrame
*
aPositionedFrame
nsIFrame
*
aContainingBlock
const
nsRect
&
aCBRect
AnchorPosReferenceData
*
aAnchorPosReferenceData
const
StylePositionArea
&
aPosArea
const
StylePositionTryFallbacksTryTactic
*
aFallbackTactic
)
{
const
auto
&
defaultAnchor
=
aPositionedFrame
-
>
StylePosition
(
)
-
>
mPositionAnchor
;
if
(
!
defaultAnchor
.
IsIdent
(
)
)
{
return
aCBRect
;
}
const
nsAtom
*
anchorName
=
defaultAnchor
.
AsIdent
(
)
.
AsAtom
(
)
;
nsRect
anchorRect
;
const
auto
result
=
aAnchorPosReferenceData
-
>
InsertOrModify
(
anchorName
true
)
;
if
(
result
.
mAlreadyResolved
)
{
MOZ_ASSERT
(
result
.
mEntry
"
Entry
exists
but
null
?
"
)
;
if
(
result
.
mEntry
-
>
isNothing
(
)
)
{
return
aCBRect
;
}
const
auto
&
data
=
result
.
mEntry
-
>
value
(
)
;
MOZ_ASSERT
(
data
.
mOrigin
"
Missing
anchor
offset
resolution
.
"
)
;
anchorRect
=
nsRect
{
data
.
mOrigin
.
ref
(
)
data
.
mSize
}
;
}
else
{
Maybe
<
AnchorPosResolutionData
>
*
entry
=
result
.
mEntry
;
PresShell
*
presShell
=
aPositionedFrame
-
>
PresShell
(
)
;
const
auto
*
anchor
=
presShell
-
>
GetAnchorPosAnchor
(
anchorName
aPositionedFrame
)
;
if
(
!
anchor
)
{
MOZ_ASSERT_IF
(
entry
entry
-
>
isNothing
(
)
)
;
return
aCBRect
;
}
const
auto
info
=
AnchorPositioningUtils
:
:
GetAnchorPosRect
(
aContainingBlock
anchor
false
entry
)
;
if
(
info
.
isNothing
(
)
)
{
return
aCBRect
;
}
anchorRect
=
info
.
ref
(
)
.
mRect
;
}
nscoord
ltrEdges
[
4
]
=
{
aCBRect
.
x
anchorRect
.
x
anchorRect
.
x
+
anchorRect
.
width
aCBRect
.
x
+
aCBRect
.
width
}
;
nscoord
ttbEdges
[
4
]
=
{
aCBRect
.
y
anchorRect
.
y
anchorRect
.
y
+
anchorRect
.
height
aCBRect
.
y
+
aCBRect
.
height
}
;
ltrEdges
[
1
]
=
std
:
:
clamp
(
ltrEdges
[
1
]
ltrEdges
[
0
]
ltrEdges
[
3
]
)
;
ltrEdges
[
2
]
=
std
:
:
clamp
(
ltrEdges
[
2
]
ltrEdges
[
0
]
ltrEdges
[
3
]
)
;
ttbEdges
[
1
]
=
std
:
:
clamp
(
ttbEdges
[
1
]
ttbEdges
[
0
]
ttbEdges
[
3
]
)
;
ttbEdges
[
2
]
=
std
:
:
clamp
(
ttbEdges
[
2
]
ttbEdges
[
0
]
ttbEdges
[
3
]
)
;
WritingMode
cbWM
=
aContainingBlock
-
>
GetWritingMode
(
)
;
WritingMode
posWM
=
aPositionedFrame
-
>
GetWritingMode
(
)
;
nsRect
res
=
aCBRect
;
StylePositionArea
posArea
=
ToPhysicalPositionArea
(
aPosArea
cbWM
posWM
)
;
if
(
aFallbackTactic
)
{
ApplyFallbackTactic
(
posArea
*
aFallbackTactic
posWM
)
;
}
nscoord
right
=
ltrEdges
[
3
]
;
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
Left
)
{
right
=
ltrEdges
[
1
]
;
}
else
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
SpanLeft
)
{
right
=
ltrEdges
[
2
]
;
}
else
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
Center
)
{
res
.
x
=
ltrEdges
[
1
]
;
right
=
ltrEdges
[
2
]
;
}
else
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
SpanRight
)
{
res
.
x
=
ltrEdges
[
1
]
;
}
else
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
Right
)
{
res
.
x
=
ltrEdges
[
2
]
;
}
else
if
(
posArea
.
first
=
=
StylePositionAreaKeyword
:
:
SpanAll
)
{
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Bad
value
from
ToPhysicalPositionArea
"
)
;
}
res
.
width
=
right
-
res
.
x
;
nscoord
bottom
=
ttbEdges
[
3
]
;
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
Top
)
{
bottom
=
ttbEdges
[
1
]
;
}
else
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
SpanTop
)
{
bottom
=
ttbEdges
[
2
]
;
}
else
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
Center
)
{
res
.
y
=
ttbEdges
[
1
]
;
bottom
=
ttbEdges
[
2
]
;
}
else
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
SpanBottom
)
{
res
.
y
=
ttbEdges
[
1
]
;
}
else
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
Bottom
)
{
res
.
y
=
ttbEdges
[
2
]
;
}
else
if
(
posArea
.
second
=
=
StylePositionAreaKeyword
:
:
SpanAll
)
{
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Bad
value
from
ToPhysicalPositionArea
"
)
;
}
res
.
height
=
bottom
-
res
.
y
;
return
res
;
}
void
DeleteAnchorPosReferenceData
(
AnchorPosReferenceData
*
aData
)
{
delete
aData
;
}
}
