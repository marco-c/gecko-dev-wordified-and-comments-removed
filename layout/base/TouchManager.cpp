#
include
"
TouchManager
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsPresShell
.
h
"
#
include
"
nsView
.
h
"
namespace
mozilla
{
nsRefPtrHashtable
<
nsUint32HashKey
dom
:
:
Touch
>
*
TouchManager
:
:
sCaptureTouchList
;
void
TouchManager
:
:
InitializeStatics
(
)
{
NS_ASSERTION
(
!
sCaptureTouchList
"
InitializeStatics
called
multiple
times
!
"
)
;
sCaptureTouchList
=
new
nsRefPtrHashtable
<
nsUint32HashKey
dom
:
:
Touch
>
;
}
void
TouchManager
:
:
ReleaseStatics
(
)
{
NS_ASSERTION
(
sCaptureTouchList
"
ReleaseStatics
called
without
Initialize
!
"
)
;
delete
sCaptureTouchList
;
sCaptureTouchList
=
nullptr
;
}
void
TouchManager
:
:
Init
(
PresShell
*
aPresShell
nsIDocument
*
aDocument
)
{
mPresShell
=
aPresShell
;
mDocument
=
aDocument
;
}
void
TouchManager
:
:
Destroy
(
)
{
EvictTouches
(
)
;
mDocument
=
nullptr
;
mPresShell
=
nullptr
;
}
void
TouchManager
:
:
EvictTouchPoint
(
RefPtr
<
dom
:
:
Touch
>
&
aTouch
nsIDocument
*
aLimitToDocument
)
{
nsCOMPtr
<
nsINode
>
node
(
do_QueryInterface
(
aTouch
-
>
mTarget
)
)
;
if
(
node
)
{
nsIDocument
*
doc
=
node
-
>
GetUncomposedDoc
(
)
;
if
(
doc
&
&
(
!
aLimitToDocument
|
|
aLimitToDocument
=
=
doc
)
)
{
nsIPresShell
*
presShell
=
doc
-
>
GetShell
(
)
;
if
(
presShell
)
{
nsIFrame
*
frame
=
presShell
-
>
GetRootFrame
(
)
;
if
(
frame
)
{
nsPoint
pt
(
aTouch
-
>
mRefPoint
.
x
aTouch
-
>
mRefPoint
.
y
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
frame
-
>
GetView
(
)
-
>
GetNearestWidget
(
&
pt
)
;
if
(
widget
)
{
WidgetTouchEvent
event
(
true
eTouchEnd
widget
)
;
event
.
mTime
=
PR_IntervalNow
(
)
;
event
.
mTouches
.
AppendElement
(
aTouch
)
;
nsEventStatus
status
;
widget
-
>
DispatchEvent
(
&
event
status
)
;
}
}
}
}
}
if
(
!
node
|
|
!
aLimitToDocument
|
|
node
-
>
OwnerDoc
(
)
=
=
aLimitToDocument
)
{
sCaptureTouchList
-
>
Remove
(
aTouch
-
>
Identifier
(
)
)
;
}
}
void
TouchManager
:
:
AppendToTouchList
(
WidgetTouchEvent
:
:
TouchArray
*
aTouchList
)
{
for
(
auto
iter
=
sCaptureTouchList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
dom
:
:
Touch
>
&
touch
=
iter
.
Data
(
)
;
touch
-
>
mChanged
=
false
;
aTouchList
-
>
AppendElement
(
touch
)
;
}
}
void
TouchManager
:
:
EvictTouches
(
)
{
WidgetTouchEvent
:
:
AutoTouchArray
touches
;
AppendToTouchList
(
&
touches
)
;
for
(
uint32_t
i
=
0
;
i
<
touches
.
Length
(
)
;
+
+
i
)
{
EvictTouchPoint
(
touches
[
i
]
mDocument
)
;
}
}
bool
TouchManager
:
:
PreHandleEvent
(
WidgetEvent
*
aEvent
nsEventStatus
*
aStatus
bool
&
aTouchIsNew
bool
&
aIsHandlingUserInput
nsCOMPtr
<
nsIContent
>
&
aCurrentEventContent
)
{
switch
(
aEvent
-
>
mMessage
)
{
case
eTouchStart
:
{
aIsHandlingUserInput
=
true
;
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
if
(
touchEvent
-
>
mTouches
.
Length
(
)
=
=
1
)
{
WidgetTouchEvent
:
:
AutoTouchArray
touches
;
AppendToTouchList
(
&
touches
)
;
for
(
uint32_t
i
=
0
;
i
<
touches
.
Length
(
)
;
+
+
i
)
{
EvictTouchPoint
(
touches
[
i
]
)
;
}
}
for
(
uint32_t
i
=
0
;
i
<
touchEvent
-
>
mTouches
.
Length
(
)
;
+
+
i
)
{
dom
:
:
Touch
*
touch
=
touchEvent
-
>
mTouches
[
i
]
;
int32_t
id
=
touch
-
>
Identifier
(
)
;
if
(
!
sCaptureTouchList
-
>
Get
(
id
nullptr
)
)
{
touch
-
>
mChanged
=
true
;
}
touch
-
>
mMessage
=
aEvent
-
>
mMessage
;
sCaptureTouchList
-
>
Put
(
id
touch
)
;
}
break
;
}
case
eTouchMove
:
{
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
WidgetTouchEvent
:
:
TouchArray
&
touches
=
touchEvent
-
>
mTouches
;
bool
haveChanged
=
false
;
for
(
int32_t
i
=
touches
.
Length
(
)
;
i
;
)
{
-
-
i
;
dom
:
:
Touch
*
touch
=
touches
[
i
]
;
if
(
!
touch
)
{
continue
;
}
int32_t
id
=
touch
-
>
Identifier
(
)
;
touch
-
>
mMessage
=
aEvent
-
>
mMessage
;
RefPtr
<
dom
:
:
Touch
>
oldTouch
=
sCaptureTouchList
-
>
GetWeak
(
id
)
;
if
(
!
oldTouch
)
{
touches
.
RemoveElementAt
(
i
)
;
continue
;
}
if
(
!
touch
-
>
Equals
(
oldTouch
)
)
{
touch
-
>
mChanged
=
true
;
haveChanged
=
true
;
}
nsCOMPtr
<
dom
:
:
EventTarget
>
targetPtr
=
oldTouch
-
>
mTarget
;
if
(
!
targetPtr
)
{
touches
.
RemoveElementAt
(
i
)
;
continue
;
}
touch
-
>
SetTarget
(
targetPtr
)
;
sCaptureTouchList
-
>
Put
(
id
touch
)
;
if
(
oldTouch
-
>
mMessage
!
=
touch
-
>
mMessage
)
{
aTouchIsNew
=
true
;
}
}
if
(
!
haveChanged
)
{
if
(
aTouchIsNew
)
{
for
(
uint32_t
i
=
0
;
i
<
touchEvent
-
>
mTouches
.
Length
(
)
;
+
+
i
)
{
if
(
touchEvent
-
>
mTouches
[
i
]
)
{
touchEvent
-
>
mTouches
[
i
]
-
>
mChanged
=
true
;
break
;
}
}
}
else
{
return
false
;
}
}
break
;
}
case
eTouchEnd
:
aIsHandlingUserInput
=
true
;
MOZ_FALLTHROUGH
;
case
eTouchCancel
:
{
WidgetTouchEvent
*
touchEvent
=
aEvent
-
>
AsTouchEvent
(
)
;
WidgetTouchEvent
:
:
TouchArray
&
touches
=
touchEvent
-
>
mTouches
;
for
(
uint32_t
i
=
0
;
i
<
touches
.
Length
(
)
;
+
+
i
)
{
dom
:
:
Touch
*
touch
=
touches
[
i
]
;
if
(
!
touch
)
{
continue
;
}
touch
-
>
mMessage
=
aEvent
-
>
mMessage
;
touch
-
>
mChanged
=
true
;
int32_t
id
=
touch
-
>
Identifier
(
)
;
RefPtr
<
dom
:
:
Touch
>
oldTouch
=
sCaptureTouchList
-
>
GetWeak
(
id
)
;
if
(
!
oldTouch
)
{
continue
;
}
nsCOMPtr
<
EventTarget
>
targetPtr
=
oldTouch
-
>
mTarget
;
aCurrentEventContent
=
do_QueryInterface
(
targetPtr
)
;
touch
-
>
SetTarget
(
targetPtr
)
;
sCaptureTouchList
-
>
Remove
(
id
)
;
}
AppendToTouchList
(
&
touches
)
;
break
;
}
default
:
break
;
}
return
true
;
}
already_AddRefed
<
nsIContent
>
TouchManager
:
:
GetAnyCapturedTouchTarget
(
)
{
nsCOMPtr
<
nsIContent
>
result
=
nullptr
;
if
(
sCaptureTouchList
-
>
Count
(
)
=
=
0
)
{
return
result
.
forget
(
)
;
}
for
(
auto
iter
=
sCaptureTouchList
-
>
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
RefPtr
<
dom
:
:
Touch
>
&
touch
=
iter
.
Data
(
)
;
if
(
touch
)
{
dom
:
:
EventTarget
*
target
=
touch
-
>
GetTarget
(
)
;
if
(
target
)
{
result
=
do_QueryInterface
(
target
)
;
break
;
}
}
}
return
result
.
forget
(
)
;
}
bool
TouchManager
:
:
HasCapturedTouch
(
int32_t
aId
)
{
return
sCaptureTouchList
-
>
Contains
(
aId
)
;
}
already_AddRefed
<
dom
:
:
Touch
>
TouchManager
:
:
GetCapturedTouch
(
int32_t
aId
)
{
RefPtr
<
dom
:
:
Touch
>
touch
=
sCaptureTouchList
-
>
GetWeak
(
aId
)
;
return
touch
.
forget
(
)
;
}
}
