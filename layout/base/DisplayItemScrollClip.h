#
ifndef
DISPLAYITEMSCROLLCLIP_H_
#
define
DISPLAYITEMSCROLLCLIP_H_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
nsString
.
h
"
class
nsIScrollableFrame
;
namespace
mozilla
{
class
DisplayItemClip
;
class
DisplayItemScrollClip
{
public
:
DisplayItemScrollClip
(
const
DisplayItemScrollClip
*
aParent
nsIScrollableFrame
*
aScrollableFrame
const
DisplayItemClip
*
aClip
bool
aIsAsyncScrollable
)
:
mParent
(
aParent
)
mScrollableFrame
(
aScrollableFrame
)
mClip
(
aClip
)
mIsAsyncScrollable
(
aIsAsyncScrollable
)
mDepth
(
aParent
?
aParent
-
>
mDepth
+
1
:
1
)
{
MOZ_ASSERT
(
mScrollableFrame
)
;
}
static
const
DisplayItemScrollClip
*
PickDescendant
(
const
DisplayItemScrollClip
*
aClip1
const
DisplayItemScrollClip
*
aClip2
)
{
MOZ_ASSERT
(
IsAncestor
(
aClip1
aClip2
)
|
|
IsAncestor
(
aClip2
aClip1
)
"
one
of
the
scroll
clips
must
be
an
ancestor
of
the
other
"
)
;
return
Depth
(
aClip1
)
>
Depth
(
aClip2
)
?
aClip1
:
aClip2
;
}
static
const
DisplayItemScrollClip
*
PickAncestor
(
const
DisplayItemScrollClip
*
aClip1
const
DisplayItemScrollClip
*
aClip2
)
{
MOZ_ASSERT
(
IsAncestor
(
aClip1
aClip2
)
|
|
IsAncestor
(
aClip2
aClip1
)
"
one
of
the
scroll
clips
must
be
an
ancestor
of
the
other
"
)
;
return
Depth
(
aClip1
)
<
Depth
(
aClip2
)
?
aClip1
:
aClip2
;
}
static
bool
IsAncestor
(
const
DisplayItemScrollClip
*
aAncestor
const
DisplayItemScrollClip
*
aDescendant
)
;
static
nsCString
ToString
(
const
DisplayItemScrollClip
*
aScrollClip
)
;
bool
HasRoundedCorners
(
)
const
;
const
DisplayItemScrollClip
*
mParent
;
nsIScrollableFrame
*
mScrollableFrame
;
const
DisplayItemClip
*
mClip
;
bool
mIsAsyncScrollable
;
private
:
static
uint32_t
Depth
(
const
DisplayItemScrollClip
*
aSC
)
{
return
aSC
?
aSC
-
>
mDepth
:
0
;
}
const
uint32_t
mDepth
;
}
;
}
#
endif
