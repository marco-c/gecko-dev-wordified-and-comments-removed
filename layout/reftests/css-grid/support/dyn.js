function
loadURL
(
url
callback
)
{
var
xhttp
=
new
XMLHttpRequest
(
)
;
xhttp
.
onreadystatechange
=
function
(
)
{
if
(
xhttp
.
readyState
=
=
4
&
&
xhttp
.
status
=
=
200
)
{
callback
(
xhttp
.
responseText
)
;
}
}
;
xhttp
.
open
(
"
GET
"
url
true
)
;
xhttp
.
send
(
)
;
}
function
dyn1
(
selector
)
{
var
elems
=
Array
.
prototype
.
slice
.
call
(
document
.
querySelectorAll
(
selector
)
)
var
removed
=
elems
.
map
(
function
(
e
)
{
var
child
=
e
.
children
[
0
]
;
if
(
child
)
{
var
next
=
child
.
nextSibling
;
e
.
removeChild
(
child
)
;
return
[
e
child
next
]
;
}
else
{
return
null
;
}
}
)
;
document
.
body
.
style
.
display
=
'
block
'
;
document
.
body
.
offsetHeight
;
removed
.
map
(
function
(
a
)
{
if
(
a
)
{
a
[
0
]
.
insertBefore
(
a
[
1
]
a
[
2
]
)
;
}
}
)
;
}
function
dyn2
(
selector
)
{
var
elems
=
Array
.
prototype
.
slice
.
call
(
document
.
querySelectorAll
(
selector
)
)
var
inserted
=
elems
.
map
(
function
(
e
)
{
var
child
=
document
.
createElement
(
'
span
'
)
;
e
.
insertBefore
(
child
e
.
firstChild
)
;
return
[
e
child
]
;
}
)
;
document
.
body
.
style
.
display
=
'
block
'
;
document
.
body
.
offsetHeight
;
inserted
.
map
(
function
(
a
)
{
a
[
0
]
.
removeChild
(
a
[
1
]
)
;
}
)
;
}
function
dyn3
(
selector
)
{
var
elems
=
Array
.
prototype
.
slice
.
call
(
document
.
querySelectorAll
(
selector
)
)
var
removed
=
elems
.
map
(
function
(
e
)
{
var
child
=
e
.
children
[
1
]
;
if
(
child
)
{
var
next
=
child
.
nextSibling
;
e
.
removeChild
(
child
)
;
return
[
e
child
next
]
;
}
else
{
return
null
;
}
}
)
;
document
.
body
.
style
.
display
=
'
block
'
;
document
.
body
.
offsetHeight
;
removed
.
map
(
function
(
a
)
{
if
(
a
)
{
a
[
0
]
.
insertBefore
(
a
[
1
]
a
[
2
]
)
;
}
}
)
;
}
function
dyn4
(
selector
)
{
dyn3
(
selector
)
;
dyn2
(
selector
)
;
}
function
dyn5
(
selector
)
{
var
elems
=
Array
.
prototype
.
slice
.
call
(
document
.
querySelectorAll
(
selector
)
)
var
inserted
=
elems
.
map
(
function
(
e
)
{
var
a
=
new
Array
;
for
(
var
i
=
0
;
i
<
20
;
+
+
i
)
{
var
child
=
document
.
createElement
(
'
span
'
)
;
e
.
insertBefore
(
child
e
.
firstChild
)
;
a
.
push
(
child
)
;
}
return
[
e
a
]
;
}
)
;
document
.
body
.
style
.
display
=
'
block
'
;
document
.
body
.
offsetHeight
;
inserted
.
map
(
function
(
a
)
{
a
[
1
]
.
forEach
(
function
(
child
)
{
a
[
0
]
.
removeChild
(
child
)
;
}
)
;
}
)
;
}
function
dynamicTest
(
url
callback
)
{
document
.
body
.
style
.
display
=
'
'
;
document
.
body
.
offsetHeight
;
loadURL
(
url
callback
)
;
}
