const
SVG_DATA_URI_PREFIX
=
'
data
:
image
/
svg
+
xml
<
svg
xmlns
=
"
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
"
'
;
const
SVG_DATA_URI_SUFFIX
=
'
>
<
rect
fill
=
"
brown
"
x
=
"
-
2000
"
y
=
"
-
2000
"
width
=
"
4000
"
height
=
"
4000
"
>
<
/
rect
>
<
rect
fill
=
"
green
"
height
=
"
50
"
width
=
"
50
"
>
<
/
rect
>
<
rect
fill
=
"
yellow
"
x
=
"
10
"
y
=
"
10
"
height
=
"
30
"
width
=
"
30
"
>
<
/
rect
>
<
/
svg
>
'
;
function
generateSVGDataURI
(
aWidth
aHeight
aViewBox
)
{
let
datauri
=
SVG_DATA_URI_PREFIX
;
if
(
aWidth
)
{
datauri
+
=
"
width
=
\
"
"
+
aWidth
+
"
\
"
"
}
if
(
aHeight
)
{
datauri
+
=
"
height
=
\
"
"
+
aHeight
+
"
\
"
"
;
}
if
(
aViewBox
)
{
datauri
+
=
"
viewBox
=
\
"
"
+
aViewBox
+
"
\
"
"
;
}
datauri
+
=
SVG_DATA_URI_SUFFIX
;
return
datauri
;
}
async
function
generateCanvasDrawImageSVG
(
aCanvasWidth
aCanvasHeight
aSVGWidth
aSVGHeight
aSVGViewBox
)
{
let
canvas
=
document
.
createElement
(
"
canvas
"
)
;
let
ctx
=
canvas
.
getContext
(
"
2d
"
)
;
document
.
body
.
appendChild
(
canvas
)
;
canvas
.
setAttribute
(
"
width
"
aCanvasWidth
)
;
canvas
.
setAttribute
(
"
height
"
aCanvasHeight
)
;
let
img
=
document
.
createElement
(
"
img
"
)
;
let
promise
=
new
Promise
(
resolve
=
>
{
img
.
onload
=
(
)
=
>
{
ctx
.
drawImage
(
img
0
0
)
;
resolve
(
)
;
}
;
}
)
;
let
uri
=
generateSVGDataURI
(
aSVGWidth
aSVGHeight
aSVGViewBox
)
;
img
.
src
=
uri
;
return
promise
;
}
