#
include
"
nsStackLayout
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsBoxLayoutState
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
using
namespace
mozilla
;
nsBoxLayout
*
nsStackLayout
:
:
gInstance
=
nullptr
;
nsresult
NS_NewStackLayout
(
nsCOMPtr
<
nsBoxLayout
>
&
aNewLayout
)
{
if
(
!
nsStackLayout
:
:
gInstance
)
{
nsStackLayout
:
:
gInstance
=
new
nsStackLayout
(
)
;
NS_IF_ADDREF
(
nsStackLayout
:
:
gInstance
)
;
}
aNewLayout
=
nsStackLayout
:
:
gInstance
;
return
NS_OK
;
}
void
nsStackLayout
:
:
Shutdown
(
)
{
NS_IF_RELEASE
(
gInstance
)
;
}
nsStackLayout
:
:
nsStackLayout
(
)
=
default
;
nsSize
nsStackLayout
:
:
GetXULPrefSize
(
nsIFrame
*
aBox
nsBoxLayoutState
&
aState
)
{
nsSize
prefSize
(
0
0
)
;
nsIFrame
*
child
=
nsIFrame
:
:
GetChildXULBox
(
aBox
)
;
while
(
child
)
{
nsSize
pref
=
child
-
>
GetXULPrefSize
(
aState
)
;
AddXULMargin
(
child
pref
)
;
if
(
pref
.
width
>
prefSize
.
width
)
{
prefSize
.
width
=
pref
.
width
;
}
if
(
pref
.
height
>
prefSize
.
height
)
{
prefSize
.
height
=
pref
.
height
;
}
child
=
nsIFrame
:
:
GetNextXULBox
(
child
)
;
}
AddXULBorderAndPadding
(
aBox
prefSize
)
;
return
prefSize
;
}
nsSize
nsStackLayout
:
:
GetXULMinSize
(
nsIFrame
*
aBox
nsBoxLayoutState
&
aState
)
{
nsSize
minSize
(
0
0
)
;
nsIFrame
*
child
=
nsIFrame
:
:
GetChildXULBox
(
aBox
)
;
while
(
child
)
{
nsSize
min
=
child
-
>
GetXULMinSize
(
aState
)
;
AddXULMargin
(
child
min
)
;
if
(
min
.
width
>
minSize
.
width
)
{
minSize
.
width
=
min
.
width
;
}
if
(
min
.
height
>
minSize
.
height
)
{
minSize
.
height
=
min
.
height
;
}
child
=
nsIFrame
:
:
GetNextXULBox
(
child
)
;
}
AddXULBorderAndPadding
(
aBox
minSize
)
;
return
minSize
;
}
nsSize
nsStackLayout
:
:
GetXULMaxSize
(
nsIFrame
*
aBox
nsBoxLayoutState
&
aState
)
{
nsSize
maxSize
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
;
nsIFrame
*
child
=
nsIFrame
:
:
GetChildXULBox
(
aBox
)
;
while
(
child
)
{
nsSize
min
=
child
-
>
GetXULMinSize
(
aState
)
;
nsSize
max
=
child
-
>
GetXULMaxSize
(
aState
)
;
max
=
nsIFrame
:
:
XULBoundsCheckMinMax
(
min
max
)
;
AddXULMargin
(
child
max
)
;
if
(
max
.
width
<
maxSize
.
width
)
{
maxSize
.
width
=
max
.
width
;
}
if
(
max
.
height
<
maxSize
.
height
)
{
maxSize
.
height
=
max
.
height
;
}
child
=
nsIFrame
:
:
GetNextXULBox
(
child
)
;
}
AddXULBorderAndPadding
(
aBox
maxSize
)
;
return
maxSize
;
}
nscoord
nsStackLayout
:
:
GetAscent
(
nsIFrame
*
aBox
nsBoxLayoutState
&
aState
)
{
nscoord
vAscent
=
0
;
nsIFrame
*
child
=
nsIFrame
:
:
GetChildXULBox
(
aBox
)
;
while
(
child
)
{
nscoord
ascent
=
child
-
>
GetXULBoxAscent
(
aState
)
;
nsMargin
margin
;
child
-
>
GetXULMargin
(
margin
)
;
ascent
+
=
margin
.
top
;
if
(
ascent
>
vAscent
)
vAscent
=
ascent
;
child
=
nsIFrame
:
:
GetNextXULBox
(
child
)
;
}
return
vAscent
;
}
NS_IMETHODIMP
nsStackLayout
:
:
XULLayout
(
nsIFrame
*
aBox
nsBoxLayoutState
&
aState
)
{
nsRect
clientRect
;
aBox
-
>
GetXULClientRect
(
clientRect
)
;
bool
grow
;
do
{
nsIFrame
*
child
=
nsIFrame
:
:
GetChildXULBox
(
aBox
)
;
grow
=
false
;
while
(
child
)
{
nsMargin
margin
;
child
-
>
GetXULMargin
(
margin
)
;
nsRect
childRect
(
clientRect
)
;
childRect
.
Deflate
(
margin
)
;
if
(
childRect
.
width
<
0
)
childRect
.
width
=
0
;
if
(
childRect
.
height
<
0
)
childRect
.
height
=
0
;
nsRect
oldRect
(
child
-
>
GetRect
(
)
)
;
bool
sizeChanged
=
!
oldRect
.
IsEqualEdges
(
childRect
)
;
if
(
sizeChanged
|
|
child
-
>
IsSubtreeDirty
(
)
)
{
nsMargin
margin
;
child
-
>
GetXULMargin
(
margin
)
;
child
-
>
SetXULBounds
(
aState
childRect
)
;
child
-
>
XULLayout
(
aState
)
;
childRect
=
child
-
>
GetRect
(
)
;
childRect
.
Inflate
(
margin
)
;
if
(
childRect
.
width
>
clientRect
.
width
)
{
clientRect
.
width
=
childRect
.
width
;
grow
=
true
;
}
if
(
childRect
.
height
>
clientRect
.
height
)
{
clientRect
.
height
=
childRect
.
height
;
grow
=
true
;
}
}
child
=
nsIFrame
:
:
GetNextXULBox
(
child
)
;
}
}
while
(
grow
)
;
nsRect
bounds
(
aBox
-
>
GetRect
(
)
)
;
nsMargin
bp
;
aBox
-
>
GetXULBorderAndPadding
(
bp
)
;
clientRect
.
Inflate
(
bp
)
;
if
(
clientRect
.
width
>
bounds
.
width
|
|
clientRect
.
height
>
bounds
.
height
)
{
if
(
clientRect
.
width
>
bounds
.
width
)
bounds
.
width
=
clientRect
.
width
;
if
(
clientRect
.
height
>
bounds
.
height
)
bounds
.
height
=
clientRect
.
height
;
aBox
-
>
SetXULBounds
(
aState
bounds
)
;
}
return
NS_OK
;
}
