#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
FromParser
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsPageFrame
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsStackLayout
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
class
nsDocElementBoxFrame
final
:
public
nsBoxFrame
{
public
:
friend
nsIFrame
*
NS_NewBoxFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
explicit
nsDocElementBoxFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
true
)
{
}
NS_DECL_FRAMEARENA_HELPERS
(
nsDocElementBoxFrame
)
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
(
nsIFrame
:
:
eReplacedContainsBlock
|
nsIFrame
:
:
eReplaced
)
)
return
false
;
return
nsBoxFrame
:
:
IsFrameOfType
(
aFlags
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
}
;
nsContainerFrame
*
NS_NewDocElementBoxFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsDocElementBoxFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsDocElementBoxFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsDocElementBoxFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
u
"
DocElementBox
"
_ns
aResult
)
;
}
#
endif
