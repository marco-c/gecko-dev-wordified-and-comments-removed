#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
FromParser
.
h
"
#
include
"
mozilla
/
dom
/
NodeInfo
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsPageFrame
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsContentCreatorFunctions
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
class
nsDocElementBoxFrame
final
:
public
nsBoxFrame
public
nsIAnonymousContentCreator
{
public
:
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
friend
nsIFrame
*
NS_NewBoxFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
explicit
nsDocElementBoxFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
true
)
{
}
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsDocElementBoxFrame
)
virtual
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
virtual
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
(
nsIFrame
:
:
eReplacedContainsBlock
|
nsIFrame
:
:
eReplaced
)
)
return
false
;
return
nsBoxFrame
:
:
IsFrameOfType
(
aFlags
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
private
:
nsCOMPtr
<
Element
>
mPopupgroupContent
;
nsCOMPtr
<
Element
>
mTooltipContent
;
}
;
nsContainerFrame
*
NS_NewDocElementBoxFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsDocElementBoxFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsDocElementBoxFrame
)
void
nsDocElementBoxFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
aPostDestroyData
.
AddAnonymousContent
(
mPopupgroupContent
.
forget
(
)
)
;
aPostDestroyData
.
AddAnonymousContent
(
mTooltipContent
.
forget
(
)
)
;
nsBoxFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
nsresult
nsDocElementBoxFrame
:
:
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
{
Document
*
doc
=
mContent
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
NS_ERROR_FAILURE
;
}
nsNodeInfoManager
*
nodeInfoManager
=
doc
-
>
NodeInfoManager
(
)
;
RefPtr
<
NodeInfo
>
nodeInfo
;
nodeInfo
=
nodeInfoManager
-
>
GetNodeInfo
(
nsGkAtoms
:
:
popupgroup
nullptr
kNameSpaceID_XUL
nsINode
:
:
ELEMENT_NODE
)
;
NS_ENSURE_TRUE
(
nodeInfo
NS_ERROR_OUT_OF_MEMORY
)
;
nsresult
rv
=
NS_NewXULElement
(
getter_AddRefs
(
mPopupgroupContent
)
nodeInfo
.
forget
(
)
dom
:
:
NOT_FROM_PARSER
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aElements
.
AppendElement
(
mPopupgroupContent
)
;
nodeInfo
=
nodeInfoManager
-
>
GetNodeInfo
(
nsGkAtoms
:
:
tooltip
nullptr
kNameSpaceID_XUL
nsINode
:
:
ELEMENT_NODE
)
;
NS_ENSURE_TRUE
(
nodeInfo
NS_ERROR_OUT_OF_MEMORY
)
;
rv
=
NS_NewXULElement
(
getter_AddRefs
(
mTooltipContent
)
nodeInfo
.
forget
(
)
dom
:
:
NOT_FROM_PARSER
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
mTooltipContent
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
_default
u
"
true
"
_ns
false
)
;
aElements
.
AppendElement
(
mTooltipContent
)
;
return
NS_OK
;
}
void
nsDocElementBoxFrame
:
:
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
{
if
(
mPopupgroupContent
)
{
aElements
.
AppendElement
(
mPopupgroupContent
)
;
}
if
(
mTooltipContent
)
{
aElements
.
AppendElement
(
mTooltipContent
)
;
}
}
NS_QUERYFRAME_HEAD
(
nsDocElementBoxFrame
)
NS_QUERYFRAME_ENTRY
(
nsIAnonymousContentCreator
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBoxFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsDocElementBoxFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
u
"
DocElementBox
"
_ns
aResult
)
;
}
#
endif
