#
ifndef
nsScrollbarFrame_h__
#
define
nsScrollbarFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
ScrollTypes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
class
nsIScrollbarMediator
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Element
;
}
}
nsIFrame
*
NS_NewScrollbarFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsScrollbarFrame
final
:
public
nsContainerFrame
public
nsIAnonymousContentCreator
{
using
Element
=
mozilla
:
:
dom
:
:
Element
;
public
:
explicit
nsScrollbarFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsContainerFrame
(
aStyle
aPresContext
kClassID
)
{
}
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsScrollbarFrame
)
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
ScrollbarFrame
"
_ns
aResult
)
;
}
#
endif
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
NS_IMETHOD
HandlePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleMultiplePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aControlHeld
)
override
;
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
HandleDrag
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleRelease
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
mozilla
:
:
StyleScrollbarWidth
ScrollbarWidth
(
)
const
;
nscoord
ScrollbarTrackSize
(
)
const
;
nsSize
ScrollbarMinSize
(
)
const
;
bool
IsHorizontal
(
)
const
;
void
Destroy
(
DestroyContext
&
)
override
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
SetScrollbarMediatorContent
(
nsIContent
*
aMediator
)
;
nsIScrollbarMediator
*
GetScrollbarMediator
(
)
;
void
WillBecomeActive
(
)
;
void
SetIncrementToLine
(
int32_t
aDirection
)
;
void
SetIncrementToPage
(
int32_t
aDirection
)
;
void
SetIncrementToWhole
(
int32_t
aDirection
)
;
enum
class
ImplementsScrollByUnit
{
Yes
No
}
;
int32_t
MoveToNewPosition
(
ImplementsScrollByUnit
aImplementsScrollByUnit
)
;
int32_t
GetIncrement
(
)
const
{
return
mIncrement
;
}
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
void
UpdateChildrenAttributeValue
(
nsAtom
*
aAttribute
bool
aNotify
)
;
void
ElementStateChanged
(
mozilla
:
:
dom
:
:
ElementState
)
override
;
bool
HasBeenHovered
(
)
const
{
return
mHasBeenHovered
;
}
nsScrollbarFrame
*
GetOppositeScrollbar
(
)
const
;
protected
:
int32_t
mDirection
=
0
;
int32_t
mIncrement
=
0
;
mozilla
:
:
ScrollUnit
mScrollUnit
=
mozilla
:
:
ScrollUnit
:
:
DEVICE_PIXELS
;
bool
mSmoothScroll
=
false
;
bool
mHasBeenHovered
=
false
;
private
:
nsCOMPtr
<
nsIContent
>
mScrollbarMediator
;
nsCOMPtr
<
Element
>
mUpTopButton
;
nsCOMPtr
<
Element
>
mDownTopButton
;
nsCOMPtr
<
Element
>
mSlider
;
nsCOMPtr
<
Element
>
mThumb
;
nsCOMPtr
<
Element
>
mUpBottomButton
;
nsCOMPtr
<
Element
>
mDownBottomButton
;
}
;
#
endif
