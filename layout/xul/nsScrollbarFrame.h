#
ifndef
nsScrollbarFrame_h__
#
define
nsScrollbarFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsIAnonymousContentCreator
.
h
"
#
include
"
nsBoxFrame
.
h
"
class
nsIScrollbarMediator
;
nsIFrame
*
NS_NewScrollbarFrame
(
nsIPresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsScrollbarFrame
final
:
public
nsBoxFrame
public
nsIAnonymousContentCreator
{
public
:
explicit
nsScrollbarFrame
(
ComputedStyle
*
aStyle
)
:
nsBoxFrame
(
aStyle
kClassID
)
mIncrement
(
0
)
mSmoothScroll
(
false
)
mScrollbarMediator
(
nullptr
)
mUpTopButton
(
nullptr
)
mDownTopButton
(
nullptr
)
mSlider
(
nullptr
)
mThumb
(
nullptr
)
mUpBottomButton
(
nullptr
)
mDownBottomButton
(
nullptr
)
{
}
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsScrollbarFrame
)
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
ScrollbarFrame
"
)
aResult
)
;
}
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
NS_IMETHOD
HandlePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleMultiplePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aControlHeld
)
override
;
NS_IMETHOD
HandleDrag
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleRelease
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
SetScrollbarMediatorContent
(
nsIContent
*
aMediator
)
;
nsIScrollbarMediator
*
GetScrollbarMediator
(
)
;
virtual
bool
DoesClipChildren
(
)
override
{
return
true
;
}
virtual
nsresult
GetXULMargin
(
nsMargin
&
aMargin
)
override
;
void
SetIncrementToLine
(
int32_t
aDirection
)
;
void
SetIncrementToPage
(
int32_t
aDirection
)
;
void
SetIncrementToWhole
(
int32_t
aDirection
)
;
int32_t
MoveToNewPosition
(
)
;
int32_t
GetIncrement
(
)
{
return
mIncrement
;
}
virtual
nsresult
CreateAnonymousContent
(
nsTArray
<
ContentInfo
>
&
aElements
)
override
;
virtual
void
AppendAnonymousContentTo
(
nsTArray
<
nsIContent
*
>
&
aElements
uint32_t
aFilter
)
override
;
void
UpdateChildrenAttributeValue
(
nsAtom
*
aAttribute
bool
aNotify
)
;
protected
:
int32_t
mIncrement
;
bool
mSmoothScroll
;
private
:
nsCOMPtr
<
nsIContent
>
mScrollbarMediator
;
nsCOMPtr
<
Element
>
mUpTopButton
;
nsCOMPtr
<
Element
>
mDownTopButton
;
nsCOMPtr
<
Element
>
mSlider
;
nsCOMPtr
<
Element
>
mThumb
;
nsCOMPtr
<
Element
>
mUpBottomButton
;
nsCOMPtr
<
Element
>
mDownBottomButton
;
}
;
#
endif
