#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
nsXULLabelFrame
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
using
namespace
mozilla
;
nsIFrame
*
NS_NewXULLabelFrame
(
nsIPresShell
*
aPresShell
nsStyleContext
*
aContext
)
{
nsXULLabelFrame
*
it
=
new
(
aPresShell
)
nsXULLabelFrame
(
aContext
)
;
it
-
>
AddStateBits
(
NS_BLOCK_FORMATTING_CONTEXT_STATE_BITS
)
;
return
it
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsXULLabelFrame
)
nsresult
nsXULLabelFrame
:
:
RegUnregAccessKey
(
bool
aDoReg
)
{
if
(
!
mContent
)
return
NS_ERROR_FAILURE
;
if
(
!
mContent
-
>
HasAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
control
)
)
return
NS_OK
;
nsAutoString
accessKey
;
mContent
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
accesskey
accessKey
)
;
if
(
accessKey
.
IsEmpty
(
)
)
return
NS_OK
;
EventStateManager
*
esm
=
PresContext
(
)
-
>
EventStateManager
(
)
;
uint32_t
key
=
accessKey
.
First
(
)
;
if
(
aDoReg
)
esm
-
>
RegisterAccessKey
(
mContent
key
)
;
else
esm
-
>
UnregisterAccessKey
(
mContent
key
)
;
return
NS_OK
;
}
void
nsXULLabelFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsBlockFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
RegUnregAccessKey
(
true
)
;
}
void
nsXULLabelFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
)
{
RegUnregAccessKey
(
false
)
;
nsBlockFrame
:
:
DestroyFrom
(
aDestructRoot
)
;
}
nsresult
nsXULLabelFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
)
{
nsresult
rv
=
nsBlockFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
accesskey
|
|
aAttribute
=
=
nsGkAtoms
:
:
control
)
RegUnregAccessKey
(
true
)
;
return
rv
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
nsXULLabelFrame
:
:
GetFrameName
(
nsAString
&
aResult
)
const
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
XULLabel
"
)
aResult
)
;
}
#
endif
