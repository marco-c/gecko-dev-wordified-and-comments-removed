#
ifndef
nsXULTooltipListener_h__
#
define
nsXULTooltipListener_h__
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsString
.
h
"
#
include
"
Units
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsIContent
;
class
nsTreeColumn
;
namespace
mozilla
{
namespace
dom
{
class
Event
;
class
MouseEvent
;
class
XULTreeElement
;
}
class
WidgetKeyboardEvent
;
}
class
nsXULTooltipListener
final
:
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
void
MouseOut
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
void
MouseMove
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
void
AddTooltipSupport
(
nsIContent
*
aNode
)
;
void
RemoveTooltipSupport
(
nsIContent
*
aNode
)
;
static
nsXULTooltipListener
*
GetInstance
(
)
{
if
(
!
sInstance
)
sInstance
=
new
nsXULTooltipListener
(
)
;
return
sInstance
;
}
static
bool
KeyEventHidesTooltip
(
const
mozilla
:
:
WidgetKeyboardEvent
&
)
;
static
bool
ShowTooltips
(
)
;
protected
:
nsXULTooltipListener
(
)
;
~
nsXULTooltipListener
(
)
;
void
KillTooltipTimer
(
)
;
void
CheckTreeBodyMove
(
mozilla
:
:
dom
:
:
MouseEvent
*
aMouseEvent
)
;
mozilla
:
:
dom
:
:
XULTreeElement
*
GetSourceTree
(
)
;
nsresult
ShowTooltip
(
)
;
void
LaunchTooltip
(
)
;
nsresult
HideTooltip
(
)
;
nsresult
DestroyTooltip
(
)
;
nsresult
FindTooltip
(
nsIContent
*
aTarget
nsIContent
*
*
aTooltip
)
;
nsresult
GetTooltipFor
(
nsIContent
*
aTarget
nsIContent
*
*
aTooltip
)
;
static
nsXULTooltipListener
*
sInstance
;
nsWeakPtr
mSourceNode
;
nsWeakPtr
mTargetNode
;
nsWeakPtr
mCurrentTooltip
;
nsWeakPtr
mPreviousMouseMoveTarget
;
nsCOMPtr
<
nsITimer
>
mTooltipTimer
;
static
void
sTooltipCallback
(
nsITimer
*
aTimer
void
*
aListener
)
;
mozilla
:
:
LayoutDeviceIntPoint
mMouseScreenPoint
;
static
constexpr
mozilla
:
:
LayoutDeviceIntCoord
kTooltipMouseMoveTolerance
=
7
;
bool
mTooltipShownOnce
;
bool
mIsSourceTree
;
bool
mNeedTitletip
;
int32_t
mLastTreeRow
;
RefPtr
<
nsTreeColumn
>
mLastTreeCol
;
}
;
#
endif
