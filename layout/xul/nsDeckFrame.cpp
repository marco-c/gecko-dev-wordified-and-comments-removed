#
include
"
nsDeckFrame
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsBoxLayoutState
.
h
"
#
include
"
nsStackLayout
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsXULPopupManager
.
h
"
#
include
"
nsImageBoxFrame
.
h
"
#
include
"
nsImageFrame
.
h
"
#
ifdef
ACCESSIBILITY
#
include
"
nsAccessibilityService
.
h
"
#
endif
using
namespace
mozilla
;
nsIFrame
*
NS_NewDeckFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsDeckFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsDeckFrame
)
NS_QUERYFRAME_HEAD
(
nsDeckFrame
)
NS_QUERYFRAME_ENTRY
(
nsDeckFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBoxFrame
)
nsDeckFrame
:
:
nsDeckFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
)
{
nsCOMPtr
<
nsBoxLayout
>
layout
;
NS_NewStackLayout
(
layout
)
;
SetXULLayoutManager
(
layout
)
;
}
nsresult
nsDeckFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
nsresult
rv
=
nsBoxFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
selectedIndex
)
{
IndexChanged
(
)
;
}
return
rv
;
}
void
nsDeckFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsBoxFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mIndex
=
GetSelectedIndex
(
)
;
}
void
nsDeckFrame
:
:
ShowBox
(
nsIFrame
*
aBox
)
{
Animate
(
aBox
true
)
;
}
void
nsDeckFrame
:
:
HideBox
(
nsIFrame
*
aBox
)
{
PresShell
:
:
ClearMouseCapture
(
aBox
)
;
Animate
(
aBox
false
)
;
}
void
nsDeckFrame
:
:
IndexChanged
(
)
{
int32_t
index
=
GetSelectedIndex
(
)
;
if
(
index
=
=
mIndex
)
return
;
InvalidateFrame
(
)
;
nsIFrame
*
currentBox
=
GetSelectedBox
(
)
;
if
(
currentBox
)
HideBox
(
currentBox
)
;
mSelectedBoxCache
=
nullptr
;
mIndex
=
index
;
ShowBox
(
GetSelectedBox
(
)
)
;
#
ifdef
ACCESSIBILITY
nsAccessibilityService
*
accService
=
GetAccService
(
)
;
if
(
accService
)
{
accService
-
>
DeckPanelSwitched
(
PresContext
(
)
-
>
GetPresShell
(
)
mContent
currentBox
GetSelectedBox
(
)
)
;
}
#
endif
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
&
&
currentBox
)
{
pm
-
>
UpdatePopupPositions
(
currentBox
-
>
PresContext
(
)
-
>
RefreshDriver
(
)
)
;
}
}
int32_t
nsDeckFrame
:
:
GetSelectedIndex
(
)
{
int32_t
index
=
0
;
nsAutoString
value
;
if
(
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
selectedIndex
value
)
)
{
nsresult
error
;
index
=
value
.
ToInteger
(
&
error
)
;
}
return
index
;
}
nsIFrame
*
nsDeckFrame
:
:
GetSelectedBox
(
)
{
if
(
!
mSelectedBoxCache
&
&
mIndex
>
=
0
)
{
mSelectedBoxCache
=
(
mIndex
>
=
0
)
?
mFrames
.
FrameAt
(
mIndex
)
:
nullptr
;
}
return
mSelectedBoxCache
;
}
void
nsDeckFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
StyleVisibility
(
)
-
>
mVisible
=
=
StyleVisibility
:
:
Hidden
)
{
return
;
}
nsBoxFrame
:
:
BuildDisplayList
(
aBuilder
aLists
)
;
}
void
nsDeckFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
nsIFrame
*
currentFrame
=
GetSelectedBox
(
)
;
if
(
aOldFrame
=
=
currentFrame
)
{
mSelectedBoxCache
=
nullptr
;
}
if
(
currentFrame
&
&
aOldFrame
&
&
currentFrame
!
=
aOldFrame
)
{
int32_t
removedIndex
=
mFrames
.
IndexOf
(
aOldFrame
)
;
MOZ_ASSERT
(
removedIndex
>
=
0
"
A
deck
child
was
removed
that
was
not
in
mFrames
.
"
)
;
if
(
removedIndex
<
mIndex
)
{
mSelectedBoxCache
=
nullptr
;
mIndex
-
-
;
nsContentUtils
:
:
AddScriptRunner
(
new
nsSetAttrRunnable
(
mContent
-
>
AsElement
(
)
nsGkAtoms
:
:
selectedIndex
mIndex
)
)
;
}
}
nsBoxFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
void
nsDeckFrame
:
:
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
nsIFrame
*
box
=
GetSelectedBox
(
)
;
if
(
!
box
)
return
;
nsDisplayListSet
set
(
aLists
aLists
.
BlockBorderBackgrounds
(
)
)
;
BuildDisplayListForChild
(
aBuilder
box
set
)
;
}
void
nsDeckFrame
:
:
Animate
(
nsIFrame
*
aParentBox
bool
start
)
{
if
(
!
aParentBox
)
return
;
nsImageBoxFrame
*
imgBoxFrame
=
do_QueryFrame
(
aParentBox
)
;
nsImageFrame
*
imgFrame
=
do_QueryFrame
(
aParentBox
)
;
if
(
imgBoxFrame
)
{
if
(
start
)
imgBoxFrame
-
>
RestartAnimation
(
)
;
else
imgBoxFrame
-
>
StopAnimation
(
)
;
}
if
(
imgFrame
)
{
if
(
start
)
imgFrame
-
>
RestartAnimation
(
)
;
else
imgFrame
-
>
StopAnimation
(
)
;
}
for
(
const
auto
&
childList
:
aParentBox
-
>
ChildLists
(
)
)
{
for
(
nsIFrame
*
child
:
childList
.
mList
)
{
Animate
(
child
start
)
;
}
}
}
NS_IMETHODIMP
nsDeckFrame
:
:
DoXULLayout
(
nsBoxLayoutState
&
aState
)
{
ReflowChildFlags
oldFlags
=
aState
.
LayoutFlags
(
)
;
aState
.
SetLayoutFlags
(
ReflowChildFlags
:
:
NoSizeView
)
;
nsresult
rv
=
nsBoxFrame
:
:
DoXULLayout
(
aState
)
;
MOZ_ASSERT
(
(
mContent
-
>
IsXULElement
(
nsGkAtoms
:
:
tabpanels
)
&
&
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
id
#
ifdef
MOZ_THUNDERBIRD
u
"
tabpanelcontainer
"
_ns
#
else
u
"
tabbrowser
-
tabpanels
"
_ns
#
endif
eCaseMatters
)
)
|
|
!
HasPossiblyRemoteContents
(
)
)
;
nsIFrame
*
box
=
nsIFrame
:
:
GetChildXULBox
(
this
)
;
nscoord
count
=
0
;
while
(
box
)
{
if
(
count
!
=
mIndex
)
{
HideBox
(
box
)
;
}
else
{
ShowBox
(
box
)
;
}
box
=
GetNextXULBox
(
box
)
;
count
+
+
;
}
aState
.
SetLayoutFlags
(
oldFlags
)
;
return
rv
;
}
bool
nsDeckFrame
:
:
HasPossiblyRemoteContents
(
)
const
{
auto
hasRemoteOrMayChangeRemoteNessAttribute
=
[
]
(
dom
:
:
Element
&
aElement
)
-
>
bool
{
return
(
aElement
.
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
remote
nsGkAtoms
:
:
_true
eCaseMatters
)
|
|
aElement
.
HasAttribute
(
u
"
maychangeremoteness
"
_ns
)
)
;
}
;
for
(
nsIContent
*
node
=
mContent
;
node
;
node
=
node
-
>
GetNextNode
(
mContent
)
)
{
if
(
(
node
-
>
IsXULElement
(
nsGkAtoms
:
:
browser
)
|
|
node
-
>
IsHTMLElement
(
nsGkAtoms
:
:
iframe
)
)
&
&
hasRemoteOrMayChangeRemoteNessAttribute
(
*
(
node
-
>
AsElement
(
)
)
)
)
{
return
true
;
}
}
return
false
;
}
