#
ifndef
nsTreeStyleCache_h__
#
define
nsTreeStyleCache_h__
#
include
"
mozilla
/
AtomArray
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
class
nsIContent
;
class
nsTreeStyleCache
{
public
:
nsTreeStyleCache
(
)
:
mNextState
(
0
)
{
}
~
nsTreeStyleCache
(
)
{
Clear
(
)
;
}
void
Clear
(
)
{
mTransitionTable
=
nullptr
;
mCache
=
nullptr
;
mNextState
=
0
;
}
mozilla
:
:
ComputedStyle
*
GetComputedStyle
(
nsPresContext
*
aPresContext
nsIContent
*
aContent
mozilla
:
:
ComputedStyle
*
aStyle
nsCSSAnonBoxPseudoStaticAtom
*
aPseudoElement
const
mozilla
:
:
AtomArray
&
aInputWord
)
;
protected
:
typedef
uint32_t
DFAState
;
class
Transition
final
{
public
:
Transition
(
DFAState
aState
nsAtom
*
aSymbol
)
;
bool
operator
=
=
(
const
Transition
&
aOther
)
const
;
uint32_t
Hash
(
)
const
;
private
:
DFAState
mState
;
RefPtr
<
nsAtom
>
mInputSymbol
;
}
;
typedef
nsDataHashtable
<
nsGenericHashKey
<
Transition
>
DFAState
>
TransitionTable
;
mozilla
:
:
UniquePtr
<
TransitionTable
>
mTransitionTable
;
typedef
nsRefPtrHashtable
<
nsUint32HashKey
mozilla
:
:
ComputedStyle
>
ComputedStyleCache
;
mozilla
:
:
UniquePtr
<
ComputedStyleCache
>
mCache
;
DFAState
mNextState
;
}
;
#
endif
