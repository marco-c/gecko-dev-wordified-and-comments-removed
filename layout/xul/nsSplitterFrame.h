#
ifndef
nsSplitterFrame_h__
#
define
nsSplitterFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsBoxFrame
.
h
"
class
nsSplitterFrameInner
;
nsIFrame
*
NS_NewSplitterFrame
(
nsIPresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsSplitterFrame
final
:
public
nsBoxFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSplitterFrame
)
explicit
nsSplitterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
NS_LITERAL_STRING
(
"
SplitterFrame
"
)
aResult
)
;
}
#
endif
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
NS_IMETHOD
DoXULLayout
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
NS_IMETHOD
HandlePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleMultiplePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aControlHeld
)
override
;
NS_IMETHOD
HandleDrag
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleRelease
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
virtual
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
virtual
void
GetInitialOrientation
(
bool
&
aIsHorizontal
)
override
;
private
:
friend
class
nsSplitterFrameInner
;
nsSplitterFrameInner
*
mInner
;
}
;
#
endif
