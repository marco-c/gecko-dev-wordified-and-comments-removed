#
ifndef
nsBoxFrame_h___
#
define
nsBoxFrame_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsBoxLayout
.
h
"
class
nsBoxLayoutState
;
namespace
mozilla
{
class
PresShell
;
namespace
gfx
{
class
DrawTarget
;
}
}
nsContainerFrame
*
NS_NewBoxFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsBoxFrame
:
public
nsContainerFrame
{
protected
:
typedef
mozilla
:
:
gfx
:
:
DrawTarget
DrawTarget
;
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsBoxFrame
)
#
ifdef
DEBUG
NS_DECL_QUERYFRAME
#
endif
friend
nsContainerFrame
*
NS_NewBoxFrame
(
mozilla
:
:
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
;
virtual
void
SetXULLayoutManager
(
nsBoxLayout
*
aLayout
)
override
{
mLayoutManager
=
aLayout
;
}
virtual
nsBoxLayout
*
GetXULLayoutManager
(
)
override
{
return
mLayoutManager
;
}
virtual
nsSize
GetXULPrefSize
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
virtual
nsSize
GetXULMinSize
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
virtual
nsSize
GetXULMaxSize
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
virtual
nscoord
GetXULBoxAscent
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
virtual
Valignment
GetXULVAlign
(
)
const
override
{
return
mValign
;
}
virtual
Halignment
GetXULHAlign
(
)
const
override
{
return
mHalign
;
}
NS_IMETHOD
DoXULLayout
(
nsBoxLayoutState
&
aBoxLayoutState
)
override
;
virtual
bool
XULComputesOwnOverflowArea
(
)
override
{
return
false
;
}
virtual
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
virtual
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
virtual
void
MarkIntrinsicISizesDirty
(
)
override
;
virtual
nscoord
GetMinISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
nscoord
GetPrefISize
(
gfxContext
*
aRenderingContext
)
override
;
virtual
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
override
;
virtual
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
virtual
void
DidSetComputedStyle
(
ComputedStyle
*
aOldComputedStyle
)
override
;
virtual
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
return
nsContainerFrame
:
:
IsFrameOfType
(
aFlags
&
~
(
nsIFrame
:
:
eReplaced
|
nsIFrame
:
:
eReplacedContainsBlock
|
eXULBox
)
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
virtual
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
;
#
endif
virtual
void
DidReflow
(
nsPresContext
*
aPresContext
const
ReflowInput
*
aReflowInput
)
override
;
virtual
void
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
;
virtual
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
static
nsresult
LayoutChildAt
(
nsBoxLayoutState
&
aState
nsIFrame
*
aBox
const
nsRect
&
aRect
)
;
static
nsIFrame
*
SlowOrdinalGroupAwareSibling
(
nsIFrame
*
bool
aNext
)
;
private
:
explicit
nsBoxFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
)
{
}
protected
:
nsBoxFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
;
virtual
~
nsBoxFrame
(
)
;
virtual
void
GetInitialOrientation
(
bool
&
aIsHorizontal
)
;
virtual
void
GetInitialDirection
(
bool
&
aIsNormal
)
;
virtual
bool
GetInitialHAlignment
(
Halignment
&
aHalign
)
;
virtual
bool
GetInitialVAlignment
(
Valignment
&
aValign
)
;
virtual
bool
GetInitialAutoStretch
(
bool
&
aStretch
)
;
virtual
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
nsSize
mPrefSize
;
nsSize
mMinSize
;
nsSize
mMaxSize
;
nscoord
mAscent
;
nsCOMPtr
<
nsBoxLayout
>
mLayoutManager
;
bool
GetEventPoint
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsPoint
&
aPoint
)
;
bool
GetEventPoint
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
mozilla
:
:
LayoutDeviceIntPoint
&
aPoint
)
;
private
:
void
CacheAttributes
(
)
;
Halignment
mHalign
;
Valignment
mValign
;
}
;
#
endif
