#
ifndef
nsMenuBarFrame_h__
#
define
nsMenuBarFrame_h__
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsMenuBarListener
.
h
"
class
nsIContent
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
KeyboardEvent
;
class
XULMenuParentElement
;
}
}
nsIFrame
*
NS_NewMenuBarFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsMenuBarFrame
final
:
public
nsBoxFrame
{
public
:
NS_DECL_QUERYFRAME
NS_DECL_FRAMEARENA_HELPERS
(
nsMenuBarFrame
)
explicit
nsMenuBarFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
void
InstallKeyboardNavigator
(
)
;
void
RemoveKeyboardNavigator
(
)
;
MOZ_CAN_RUN_SCRIPT
void
MenuClosed
(
)
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
void
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
override
;
bool
IsActiveByKeyboard
(
)
{
return
mActiveByKeyboard
;
}
void
SetActiveByKeyboard
(
)
{
mActiveByKeyboard
=
true
;
}
MOZ_CAN_RUN_SCRIPT
void
SetActive
(
bool
aActive
)
;
bool
IsActive
(
)
const
{
return
mIsActive
;
}
mozilla
:
:
dom
:
:
XULMenuParentElement
&
MenubarElement
(
)
const
;
MOZ_CAN_RUN_SCRIPT
void
HandleEnterKeyPress
(
mozilla
:
:
WidgetEvent
&
)
;
bool
IsFrameOfType
(
uint32_t
aFlags
)
const
override
{
if
(
aFlags
&
(
nsIFrame
:
:
eReplacedContainsBlock
|
nsIFrame
:
:
eReplaced
)
)
return
false
;
return
nsBoxFrame
:
:
IsFrameOfType
(
aFlags
)
;
}
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
MenuBar
"
_ns
aResult
)
;
}
#
endif
protected
:
RefPtr
<
nsMenuBarListener
>
mMenuBarListener
;
bool
mIsActive
=
false
;
bool
mActiveByKeyboard
=
false
;
}
;
#
endif
