#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTitleBarFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
using
namespace
mozilla
;
nsIFrame
*
NS_NewTitleBarFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsTitleBarFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsTitleBarFrame
)
nsTitleBarFrame
:
:
nsTitleBarFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
:
nsBoxFrame
(
aStyle
aPresContext
aID
false
)
{
mTrackingMouseMove
=
false
;
}
void
nsTitleBarFrame
:
:
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
aBuilder
-
>
IsForEventDelivery
(
)
)
{
if
(
!
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
allowevents
nsGkAtoms
:
:
_true
eCaseMatters
)
)
return
;
}
nsBoxFrame
:
:
BuildDisplayListForChildren
(
aBuilder
aLists
)
;
}
nsresult
nsTitleBarFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
NS_ENSURE_ARG_POINTER
(
aEventStatus
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aEventStatus
)
{
return
NS_OK
;
}
bool
doDefault
=
true
;
switch
(
aEvent
-
>
mMessage
)
{
case
eMouseDown
:
{
if
(
aEvent
-
>
AsMouseEvent
(
)
-
>
mButton
=
=
MouseButton
:
:
eLeft
)
{
if
(
aPresContext
-
>
IsChrome
(
)
)
{
mTrackingMouseMove
=
true
;
PresShell
:
:
SetCapturingContent
(
GetContent
(
)
CaptureFlags
:
:
IgnoreAllowedState
)
;
mLastPoint
=
aEvent
-
>
mRefPoint
;
}
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
doDefault
=
false
;
}
}
break
;
case
eMouseUp
:
{
if
(
mTrackingMouseMove
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
mButton
=
=
MouseButton
:
:
eLeft
)
{
mTrackingMouseMove
=
false
;
PresShell
:
:
ReleaseCapturingContent
(
)
;
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
doDefault
=
false
;
}
}
break
;
case
eMouseMove
:
{
if
(
mTrackingMouseMove
)
{
LayoutDeviceIntPoint
nsMoveBy
=
aEvent
-
>
mRefPoint
-
mLastPoint
;
nsIFrame
*
parent
=
GetParent
(
)
;
while
(
parent
)
{
nsMenuPopupFrame
*
popupFrame
=
do_QueryFrame
(
parent
)
;
if
(
popupFrame
)
break
;
parent
=
parent
-
>
GetParent
(
)
;
}
if
(
parent
)
{
nsMenuPopupFrame
*
menuPopupFrame
=
static_cast
<
nsMenuPopupFrame
*
>
(
parent
)
;
nsCOMPtr
<
nsIWidget
>
widget
=
menuPopupFrame
-
>
GetWidget
(
)
;
LayoutDeviceIntRect
bounds
=
widget
-
>
GetScreenBounds
(
)
;
CSSPoint
cssPos
=
(
bounds
.
TopLeft
(
)
+
nsMoveBy
)
/
aPresContext
-
>
CSSToDevPixelScale
(
)
;
menuPopupFrame
-
>
MoveTo
(
RoundedToInt
(
cssPos
)
false
)
;
}
else
{
mozilla
:
:
PresShell
*
presShell
=
aPresContext
-
>
PresShell
(
)
;
nsPIDOMWindowOuter
*
window
=
presShell
-
>
GetDocument
(
)
-
>
GetWindow
(
)
;
if
(
window
)
{
window
-
>
MoveBy
(
nsMoveBy
.
x
nsMoveBy
.
y
)
;
}
}
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
doDefault
=
false
;
}
}
break
;
case
eMouseClick
:
{
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
-
>
IsLeftClickEvent
(
)
#
ifdef
XP_MACOSX
&
&
!
mouseEvent
-
>
IsControl
(
)
#
endif
)
{
MouseClicked
(
mouseEvent
)
;
}
break
;
}
default
:
break
;
}
if
(
doDefault
)
return
nsBoxFrame
:
:
HandleEvent
(
aPresContext
aEvent
aEventStatus
)
;
else
return
NS_OK
;
}
void
nsTitleBarFrame
:
:
MouseClicked
(
WidgetMouseEvent
*
aEvent
)
{
nsCOMPtr
<
nsIContent
>
content
=
mContent
;
nsContentUtils
:
:
DispatchXULCommand
(
content
false
nullptr
nullptr
aEvent
-
>
IsControl
(
)
aEvent
-
>
IsAlt
(
)
aEvent
-
>
IsShift
(
)
aEvent
-
>
IsMeta
(
)
aEvent
-
>
mInputSource
)
;
}
