#
include
"
nsGkAtoms
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
nsMenuFrame
.
h
"
#
include
"
nsBoxFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsMenuBarFrame
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIComponentManager
.
h
"
#
include
"
nsBoxLayoutState
.
h
"
#
include
"
nsIScrollableFrame
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsIReflowCallback
.
h
"
#
include
"
nsISound
.
h
"
#
include
"
nsIDOMXULMenuListElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
Likely
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
<
algorithm
>
using
namespace
mozilla
;
#
define
NS_MENU_POPUP_LIST_INDEX
0
#
if
defined
(
XP_WIN
)
#
define
NSCONTEXTMENUISMOUSEUP
1
#
endif
NS_DECLARE_FRAME_PROPERTY_FRAMELIST
(
PopupListProperty
)
static
int32_t
gMenuJustOpenedOrClosed
=
false
;
const
int32_t
kBlinkDelay
=
67
;
class
nsMenuActivateEvent
:
public
Runnable
{
public
:
nsMenuActivateEvent
(
Element
*
aMenu
nsPresContext
*
aPresContext
bool
aIsActivate
)
:
mozilla
:
:
Runnable
(
"
nsMenuActivateEvent
"
)
mMenu
(
aMenu
)
mPresContext
(
aPresContext
)
mIsActivate
(
aIsActivate
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsAutoString
domEventToFire
;
if
(
mIsActivate
)
{
mMenu
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
NS_LITERAL_STRING
(
"
true
"
)
true
)
;
domEventToFire
.
AssignLiteral
(
"
DOMMenuItemActive
"
)
;
}
else
{
mMenu
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
true
)
;
domEventToFire
.
AssignLiteral
(
"
DOMMenuItemInactive
"
)
;
}
RefPtr
<
dom
:
:
Event
>
event
=
NS_NewDOMEvent
(
mMenu
mPresContext
nullptr
)
;
event
-
>
InitEvent
(
domEventToFire
true
true
)
;
event
-
>
SetTrusted
(
true
)
;
EventDispatcher
:
:
DispatchDOMEvent
(
mMenu
nullptr
event
mPresContext
nullptr
)
;
return
NS_OK
;
}
private
:
RefPtr
<
Element
>
mMenu
;
RefPtr
<
nsPresContext
>
mPresContext
;
bool
mIsActivate
;
}
;
class
nsMenuAttributeChangedEvent
:
public
Runnable
{
public
:
nsMenuAttributeChangedEvent
(
nsIFrame
*
aFrame
nsAtom
*
aAttr
)
:
mozilla
:
:
Runnable
(
"
nsMenuAttributeChangedEvent
"
)
mFrame
(
aFrame
)
mAttr
(
aAttr
)
{
}
NS_IMETHOD
Run
(
)
override
{
nsMenuFrame
*
frame
=
static_cast
<
nsMenuFrame
*
>
(
mFrame
.
GetFrame
(
)
)
;
NS_ENSURE_STATE
(
frame
)
;
if
(
mAttr
=
=
nsGkAtoms
:
:
checked
)
{
frame
-
>
UpdateMenuSpecialState
(
)
;
}
else
if
(
mAttr
=
=
nsGkAtoms
:
:
acceltext
)
{
frame
-
>
RemoveStateBits
(
NS_STATE_ACCELTEXT_IS_DERIVED
)
;
frame
-
>
BuildAcceleratorText
(
true
)
;
}
else
if
(
mAttr
=
=
nsGkAtoms
:
:
key
)
{
frame
-
>
BuildAcceleratorText
(
true
)
;
}
else
if
(
mAttr
=
=
nsGkAtoms
:
:
type
|
|
mAttr
=
=
nsGkAtoms
:
:
name
)
{
frame
-
>
UpdateMenuType
(
)
;
}
return
NS_OK
;
}
protected
:
WeakFrame
mFrame
;
RefPtr
<
nsAtom
>
mAttr
;
}
;
nsIFrame
*
NS_NewMenuFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
nsMenuFrame
*
it
=
new
(
aPresShell
)
nsMenuFrame
(
aStyle
)
;
it
-
>
SetIsMenu
(
true
)
;
return
it
;
}
nsIFrame
*
NS_NewMenuItemFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
nsMenuFrame
*
it
=
new
(
aPresShell
)
nsMenuFrame
(
aStyle
)
;
it
-
>
SetIsMenu
(
false
)
;
return
it
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMenuFrame
)
NS_QUERYFRAME_HEAD
(
nsMenuFrame
)
NS_QUERYFRAME_ENTRY
(
nsMenuFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBoxFrame
)
nsMenuFrame
:
:
nsMenuFrame
(
ComputedStyle
*
aStyle
)
:
nsBoxFrame
(
aStyle
kClassID
)
mIsMenu
(
false
)
mChecked
(
false
)
mIgnoreAccelTextChange
(
false
)
mReflowCallbackPosted
(
false
)
mType
(
eMenuType_Normal
)
mBlinkState
(
0
)
{
}
nsMenuParent
*
nsMenuFrame
:
:
GetMenuParent
(
)
const
{
nsContainerFrame
*
parent
=
GetParent
(
)
;
for
(
;
parent
;
parent
=
parent
-
>
GetParent
(
)
)
{
nsMenuPopupFrame
*
popup
=
do_QueryFrame
(
parent
)
;
if
(
popup
)
{
return
popup
;
}
nsMenuBarFrame
*
menubar
=
do_QueryFrame
(
parent
)
;
if
(
menubar
)
{
return
menubar
;
}
}
return
nullptr
;
}
bool
nsMenuFrame
:
:
ReflowFinished
(
)
{
mReflowCallbackPosted
=
false
;
UpdateMenuType
(
)
;
return
true
;
}
void
nsMenuFrame
:
:
ReflowCallbackCanceled
(
)
{
mReflowCallbackPosted
=
false
;
}
void
nsMenuFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsBoxFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mTimerMediator
=
new
nsMenuTimerMediator
(
this
)
;
BuildAcceleratorText
(
false
)
;
if
(
!
mReflowCallbackPosted
)
{
mReflowCallbackPosted
=
true
;
PresShell
(
)
-
>
PostReflowCallback
(
this
)
;
}
}
const
nsFrameList
&
nsMenuFrame
:
:
GetChildList
(
ChildListID
aListID
)
const
{
if
(
kPopupList
=
=
aListID
)
{
nsFrameList
*
list
=
GetPopupList
(
)
;
return
list
?
*
list
:
nsFrameList
:
:
EmptyList
(
)
;
}
return
nsBoxFrame
:
:
GetChildList
(
aListID
)
;
}
void
nsMenuFrame
:
:
GetChildLists
(
nsTArray
<
ChildList
>
*
aLists
)
const
{
nsBoxFrame
:
:
GetChildLists
(
aLists
)
;
nsFrameList
*
list
=
GetPopupList
(
)
;
if
(
list
)
{
list
-
>
AppendIfNonempty
(
aLists
kPopupList
)
;
}
}
nsMenuPopupFrame
*
nsMenuFrame
:
:
GetPopup
(
)
{
nsFrameList
*
popupList
=
GetPopupList
(
)
;
return
popupList
?
static_cast
<
nsMenuPopupFrame
*
>
(
popupList
-
>
FirstChild
(
)
)
:
nullptr
;
}
nsFrameList
*
nsMenuFrame
:
:
GetPopupList
(
)
const
{
if
(
!
HasPopup
(
)
)
{
return
nullptr
;
}
nsFrameList
*
prop
=
GetProperty
(
PopupListProperty
(
)
)
;
NS_ASSERTION
(
prop
&
&
prop
-
>
GetLength
(
)
=
=
1
&
&
prop
-
>
FirstChild
(
)
-
>
IsMenuPopupFrame
(
)
"
popup
list
should
have
exactly
one
nsMenuPopupFrame
"
)
;
return
prop
;
}
void
nsMenuFrame
:
:
DestroyPopupList
(
)
{
NS_ASSERTION
(
HasPopup
(
)
"
huh
?
"
)
;
nsFrameList
*
prop
=
RemoveProperty
(
PopupListProperty
(
)
)
;
NS_ASSERTION
(
prop
&
&
prop
-
>
IsEmpty
(
)
"
popup
list
must
exist
and
be
empty
when
destroying
"
)
;
RemoveStateBits
(
NS_STATE_MENU_HAS_POPUP_LIST
)
;
prop
-
>
Delete
(
PresShell
(
)
)
;
}
void
nsMenuFrame
:
:
SetPopupFrame
(
nsFrameList
&
aFrameList
)
{
for
(
nsFrameList
:
:
Enumerator
e
(
aFrameList
)
;
!
e
.
AtEnd
(
)
;
e
.
Next
(
)
)
{
nsMenuPopupFrame
*
popupFrame
=
do_QueryFrame
(
e
.
get
(
)
)
;
if
(
popupFrame
)
{
aFrameList
.
RemoveFrame
(
popupFrame
)
;
nsFrameList
*
popupList
=
new
(
PresShell
(
)
)
nsFrameList
(
popupFrame
popupFrame
)
;
SetProperty
(
PopupListProperty
(
)
popupList
)
;
AddStateBits
(
NS_STATE_MENU_HAS_POPUP_LIST
)
;
break
;
}
}
}
void
nsMenuFrame
:
:
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
aChildList
)
{
if
(
aListID
=
=
kPrincipalList
|
|
aListID
=
=
kPopupList
)
{
NS_ASSERTION
(
!
HasPopup
(
)
"
SetInitialChildList
called
twice
?
"
)
;
SetPopupFrame
(
aChildList
)
;
}
nsBoxFrame
:
:
SetInitialChildList
(
aListID
aChildList
)
;
}
void
nsMenuFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
if
(
mReflowCallbackPosted
)
{
PresShell
(
)
-
>
CancelReflowCallback
(
this
)
;
mReflowCallbackPosted
=
false
;
}
if
(
mOpenTimer
)
{
mOpenTimer
-
>
Cancel
(
)
;
}
StopBlinking
(
)
;
mTimerMediator
-
>
ClearFrame
(
)
;
mContent
-
>
AsElement
(
)
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
false
)
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
&
&
menuParent
-
>
GetCurrentMenuItem
(
)
=
=
this
)
{
menuParent
-
>
CurrentMenuIsBeingDestroyed
(
)
;
}
nsFrameList
*
popupList
=
GetPopupList
(
)
;
if
(
popupList
)
{
popupList
-
>
DestroyFramesFrom
(
aDestructRoot
aPostDestroyData
)
;
DestroyPopupList
(
)
;
}
nsBoxFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
void
nsMenuFrame
:
:
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
!
aBuilder
-
>
IsForEventDelivery
(
)
)
{
nsBoxFrame
:
:
BuildDisplayListForChildren
(
aBuilder
aLists
)
;
return
;
}
nsDisplayListCollection
set
(
aBuilder
)
;
nsBoxFrame
:
:
BuildDisplayListForChildren
(
aBuilder
set
)
;
WrapListsInRedirector
(
aBuilder
set
aLists
)
;
}
nsresult
nsMenuFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
NS_ENSURE_ARG_POINTER
(
aEventStatus
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aEventStatus
)
{
return
NS_OK
;
}
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
&
&
menuParent
-
>
IsMenuLocked
(
)
)
{
return
NS_OK
;
}
AutoWeakFrame
weakFrame
(
this
)
;
if
(
*
aEventStatus
=
=
nsEventStatus_eIgnore
)
*
aEventStatus
=
nsEventStatus_eConsumeDoDefault
;
if
(
gMenuJustOpenedOrClosed
)
{
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
)
{
gMenuJustOpenedOrClosed
=
false
;
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseUp
)
{
return
NS_OK
;
}
}
bool
onmenu
=
IsOnMenu
(
)
;
if
(
aEvent
-
>
mMessage
=
=
eKeyPress
&
&
!
IsDisabled
(
)
)
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
uint32_t
keyCode
=
keyEvent
-
>
mKeyCode
;
#
ifdef
XP_MACOSX
if
(
!
IsOpen
(
)
&
&
(
(
keyEvent
-
>
mCharCode
=
=
'
'
&
&
!
keyEvent
-
>
IsMeta
(
)
)
|
|
(
keyCode
=
=
NS_VK_UP
|
|
keyCode
=
=
NS_VK_DOWN
)
)
)
{
if
(
keyEvent
-
>
mCharCode
!
=
'
'
|
|
!
nsMenuPopupFrame
:
:
IsWithinIncrementalTime
(
keyEvent
-
>
mTime
)
)
{
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
OpenMenu
(
false
)
;
}
}
#
else
if
(
(
keyCode
=
=
NS_VK_F4
&
&
!
keyEvent
-
>
IsAlt
(
)
)
|
|
(
(
keyCode
=
=
NS_VK_UP
|
|
keyCode
=
=
NS_VK_DOWN
)
&
&
keyEvent
-
>
IsAlt
(
)
)
)
{
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
ToggleMenuState
(
)
;
}
#
endif
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseDown
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
button
=
=
WidgetMouseEvent
:
:
eLeftButton
&
&
!
IsDisabled
(
)
&
&
IsMenu
(
)
)
{
if
(
!
menuParent
|
|
menuParent
-
>
IsMenuBar
(
)
)
{
ToggleMenuState
(
)
;
}
else
{
if
(
!
IsOpen
(
)
)
{
menuParent
-
>
ChangeMenuItem
(
this
false
false
)
;
OpenMenu
(
false
)
;
}
}
}
else
if
(
#
ifndef
NSCONTEXTMENUISMOUSEUP
(
aEvent
-
>
mMessage
=
=
eMouseUp
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
button
=
=
WidgetMouseEvent
:
:
eRightButton
)
&
&
#
else
aEvent
-
>
mMessage
=
=
eContextMenu
&
&
#
endif
onmenu
&
&
!
IsMenu
(
)
&
&
!
IsDisabled
(
)
)
{
if
(
menuParent
-
>
IsContextMenu
(
)
)
{
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
Execute
(
aEvent
)
;
}
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseUp
&
&
aEvent
-
>
AsMouseEvent
(
)
-
>
button
=
=
WidgetMouseEvent
:
:
eLeftButton
&
&
!
IsMenu
(
)
&
&
!
IsDisabled
(
)
)
{
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
Execute
(
aEvent
)
;
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseOut
)
{
if
(
mOpenTimer
)
{
mOpenTimer
-
>
Cancel
(
)
;
mOpenTimer
=
nullptr
;
}
if
(
menuParent
)
{
bool
onmenubar
=
menuParent
-
>
IsMenuBar
(
)
;
if
(
!
(
onmenubar
&
&
menuParent
-
>
IsActive
(
)
)
)
{
if
(
IsMenu
(
)
&
&
!
onmenubar
&
&
IsOpen
(
)
)
{
}
else
if
(
this
=
=
menuParent
-
>
GetCurrentMenuItem
(
)
#
ifdef
XP_WIN
&
&
GetParentMenuListType
(
)
=
=
eNotMenuList
#
endif
)
{
menuParent
-
>
ChangeMenuItem
(
nullptr
false
false
)
;
}
}
}
}
else
if
(
aEvent
-
>
mMessage
=
=
eMouseMove
&
&
(
onmenu
|
|
(
menuParent
&
&
menuParent
-
>
IsMenuBar
(
)
)
)
)
{
if
(
gMenuJustOpenedOrClosed
)
{
gMenuJustOpenedOrClosed
=
false
;
return
NS_OK
;
}
if
(
IsDisabled
(
)
&
&
GetParentMenuListType
(
)
!
=
eNotMenuList
)
{
return
NS_OK
;
}
menuParent
-
>
ChangeMenuItem
(
this
false
false
)
;
NS_ENSURE_TRUE
(
weakFrame
.
IsAlive
(
)
NS_OK
)
;
NS_ENSURE_TRUE
(
menuParent
NS_OK
)
;
nsMenuFrame
*
realCurrentItem
=
menuParent
-
>
GetCurrentMenuItem
(
)
;
if
(
realCurrentItem
!
=
this
)
{
return
NS_OK
;
}
if
(
!
IsDisabled
(
)
&
&
IsMenu
(
)
&
&
!
IsOpen
(
)
&
&
!
mOpenTimer
&
&
!
menuParent
-
>
IsMenuBar
(
)
)
{
int32_t
menuDelay
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_SubmenuDelay
300
)
;
NS_NewTimerWithCallback
(
getter_AddRefs
(
mOpenTimer
)
mTimerMediator
menuDelay
nsITimer
:
:
TYPE_ONE_SHOT
mContent
-
>
OwnerDoc
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
}
}
return
NS_OK
;
}
void
nsMenuFrame
:
:
ToggleMenuState
(
)
{
if
(
IsOpen
(
)
)
CloseMenu
(
false
)
;
else
OpenMenu
(
false
)
;
}
void
nsMenuFrame
:
:
PopupOpened
(
)
{
gMenuJustOpenedOrClosed
=
true
;
AutoWeakFrame
weakFrame
(
this
)
;
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
open
NS_LITERAL_STRING
(
"
true
"
)
true
)
;
if
(
!
weakFrame
.
IsAlive
(
)
)
return
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
)
{
menuParent
-
>
SetActive
(
true
)
;
menuParent
-
>
SetCurrentMenuItem
(
this
)
;
}
}
void
nsMenuFrame
:
:
PopupClosed
(
bool
aDeselectMenu
)
{
AutoWeakFrame
weakFrame
(
this
)
;
nsContentUtils
:
:
AddScriptRunner
(
new
nsUnsetAttrRunnable
(
mContent
-
>
AsElement
(
)
nsGkAtoms
:
:
open
)
)
;
if
(
!
weakFrame
.
IsAlive
(
)
)
return
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
&
&
menuParent
-
>
MenuClosed
(
)
)
{
if
(
aDeselectMenu
)
{
SelectMenu
(
false
)
;
}
else
{
nsMenuFrame
*
current
=
menuParent
-
>
GetCurrentMenuItem
(
)
;
if
(
current
)
{
nsIFrame
*
parent
=
current
;
while
(
parent
)
{
nsMenuBarFrame
*
menubar
=
do_QueryFrame
(
parent
)
;
if
(
menubar
&
&
menubar
-
>
GetStayActive
(
)
)
return
;
parent
=
parent
-
>
GetParent
(
)
;
}
nsCOMPtr
<
nsIRunnable
>
event
=
new
nsMenuActivateEvent
(
current
-
>
GetContent
(
)
-
>
AsElement
(
)
PresContext
(
)
true
)
;
mContent
-
>
OwnerDoc
(
)
-
>
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
}
}
}
}
NS_IMETHODIMP
nsMenuFrame
:
:
SelectMenu
(
bool
aActivateFlag
)
{
if
(
mContent
)
{
if
(
aActivateFlag
)
{
nsIFrame
*
parent
=
GetParent
(
)
;
while
(
parent
)
{
nsMenuPopupFrame
*
menupopup
=
do_QueryFrame
(
parent
)
;
if
(
menupopup
)
{
nsMenuFrame
*
menu
=
do_QueryFrame
(
menupopup
-
>
GetParent
(
)
)
;
if
(
menu
)
{
nsIFrame
*
popupParent
=
menu
-
>
GetParent
(
)
;
while
(
popupParent
)
{
menupopup
=
do_QueryFrame
(
popupParent
)
;
if
(
menupopup
)
{
menupopup
-
>
SetCurrentMenuItem
(
menu
)
;
break
;
}
popupParent
=
popupParent
-
>
GetParent
(
)
;
}
}
break
;
}
parent
=
parent
-
>
GetParent
(
)
;
}
}
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
pm
-
>
CancelMenuTimer
(
menuParent
)
;
}
nsCOMPtr
<
nsIRunnable
>
event
=
new
nsMenuActivateEvent
(
mContent
-
>
AsElement
(
)
PresContext
(
)
aActivateFlag
)
;
mContent
-
>
OwnerDoc
(
)
-
>
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
;
}
return
NS_OK
;
}
nsresult
nsMenuFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
acceltext
&
&
mIgnoreAccelTextChange
)
{
mIgnoreAccelTextChange
=
false
;
return
NS_OK
;
}
if
(
aAttribute
=
=
nsGkAtoms
:
:
checked
|
|
aAttribute
=
=
nsGkAtoms
:
:
acceltext
|
|
aAttribute
=
=
nsGkAtoms
:
:
key
|
|
aAttribute
=
=
nsGkAtoms
:
:
type
|
|
aAttribute
=
=
nsGkAtoms
:
:
name
)
{
nsCOMPtr
<
nsIRunnable
>
event
=
new
nsMenuAttributeChangedEvent
(
this
aAttribute
)
;
nsContentUtils
:
:
AddScriptRunner
(
event
)
;
}
return
NS_OK
;
}
nsIContent
*
nsMenuFrame
:
:
GetAnchor
(
)
{
mozilla
:
:
dom
:
:
Element
*
anchor
=
nullptr
;
nsAutoString
id
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
anchor
id
)
;
if
(
!
id
.
IsEmpty
(
)
)
{
nsIDocument
*
doc
=
mContent
-
>
OwnerDoc
(
)
;
anchor
=
doc
-
>
GetAnonymousElementByAttribute
(
mContent
nsGkAtoms
:
:
anonid
id
)
;
if
(
!
anchor
)
{
anchor
=
doc
-
>
GetElementById
(
id
)
;
}
}
return
anchor
&
&
anchor
-
>
GetPrimaryFrame
(
)
?
anchor
:
GetContent
(
)
;
}
void
nsMenuFrame
:
:
OpenMenu
(
bool
aSelectFirstItem
)
{
if
(
!
mContent
)
return
;
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
pm
-
>
KillMenuTimer
(
)
;
pm
-
>
ShowMenu
(
mContent
aSelectFirstItem
true
)
;
}
}
void
nsMenuFrame
:
:
CloseMenu
(
bool
aDeselectMenu
)
{
gMenuJustOpenedOrClosed
=
true
;
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
&
&
HasPopup
(
)
)
pm
-
>
HidePopup
(
GetPopup
(
)
-
>
GetContent
(
)
false
aDeselectMenu
true
false
)
;
}
bool
nsMenuFrame
:
:
IsSizedToPopup
(
nsIContent
*
aContent
bool
aRequireAlways
)
{
MOZ_ASSERT
(
aContent
-
>
IsElement
(
)
)
;
nsAutoString
sizedToPopup
;
aContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
sizetopopup
sizedToPopup
)
;
return
sizedToPopup
.
EqualsLiteral
(
"
always
"
)
|
|
(
!
aRequireAlways
&
&
sizedToPopup
.
EqualsLiteral
(
"
pref
"
)
)
;
}
nsSize
nsMenuFrame
:
:
GetXULMinSize
(
nsBoxLayoutState
&
aBoxLayoutState
)
{
nsSize
size
=
nsBoxFrame
:
:
GetXULMinSize
(
aBoxLayoutState
)
;
DISPLAY_MIN_SIZE
(
this
size
)
;
if
(
IsSizedToPopup
(
mContent
true
)
)
SizeToPopup
(
aBoxLayoutState
size
)
;
return
size
;
}
NS_IMETHODIMP
nsMenuFrame
:
:
DoXULLayout
(
nsBoxLayoutState
&
aState
)
{
nsresult
rv
=
nsBoxFrame
:
:
DoXULLayout
(
aState
)
;
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
if
(
popupFrame
)
{
bool
sizeToPopup
=
IsSizedToPopup
(
mContent
false
)
;
popupFrame
-
>
LayoutPopup
(
aState
this
GetAnchor
(
)
-
>
GetPrimaryFrame
(
)
sizeToPopup
)
;
}
return
rv
;
}
nsMenuFrame
*
nsMenuFrame
:
:
Enter
(
WidgetGUIEvent
*
aEvent
)
{
if
(
IsDisabled
(
)
)
{
#
ifdef
XP_WIN
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsIFrame
*
popup
=
pm
-
>
GetTopPopup
(
ePopupTypeAny
)
;
if
(
popup
)
pm
-
>
HidePopup
(
popup
-
>
GetContent
(
)
true
true
true
false
)
;
}
}
#
endif
return
nullptr
;
}
if
(
!
IsOpen
(
)
)
{
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
!
IsMenu
(
)
&
&
menuParent
)
Execute
(
aEvent
)
;
else
return
this
;
}
return
nullptr
;
}
bool
nsMenuFrame
:
:
IsOpen
(
)
{
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
return
popupFrame
&
&
popupFrame
-
>
IsOpen
(
)
;
}
bool
nsMenuFrame
:
:
IsMenu
(
)
{
return
mIsMenu
;
}
nsMenuListType
nsMenuFrame
:
:
GetParentMenuListType
(
)
{
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
&
&
menuParent
-
>
IsMenu
(
)
)
{
nsMenuPopupFrame
*
popupFrame
=
static_cast
<
nsMenuPopupFrame
*
>
(
menuParent
)
;
nsIFrame
*
parentMenu
=
popupFrame
-
>
GetParent
(
)
;
if
(
parentMenu
)
{
nsCOMPtr
<
nsIDOMXULMenuListElement
>
menulist
=
do_QueryInterface
(
parentMenu
-
>
GetContent
(
)
)
;
if
(
menulist
)
{
return
eReadonlyMenuList
;
}
}
}
return
eNotMenuList
;
}
nsresult
nsMenuFrame
:
:
Notify
(
nsITimer
*
aTimer
)
{
if
(
aTimer
=
=
mOpenTimer
.
get
(
)
)
{
mOpenTimer
=
nullptr
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
!
IsOpen
(
)
&
&
menuParent
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
if
(
(
!
pm
-
>
HasContextMenu
(
nullptr
)
|
|
menuParent
-
>
IsContextMenu
(
)
)
&
&
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
OpenMenu
(
false
)
;
}
}
}
}
else
if
(
aTimer
=
=
mBlinkTimer
)
{
switch
(
mBlinkState
+
+
)
{
case
0
:
NS_ASSERTION
(
false
"
Blink
timer
fired
while
not
blinking
"
)
;
StopBlinking
(
)
;
break
;
case
1
:
{
AutoWeakFrame
weakFrame
(
this
)
;
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
NS_LITERAL_STRING
(
"
true
"
)
true
)
;
if
(
weakFrame
.
IsAlive
(
)
)
{
aTimer
-
>
InitWithCallback
(
mTimerMediator
kBlinkDelay
nsITimer
:
:
TYPE_ONE_SHOT
)
;
}
}
break
;
default
:
{
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
)
{
menuParent
-
>
LockMenuUntilClosed
(
false
)
;
}
PassMenuCommandEventToPopupManager
(
)
;
StopBlinking
(
)
;
break
;
}
}
}
return
NS_OK
;
}
bool
nsMenuFrame
:
:
IsDisabled
(
)
{
return
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
disabled
nsGkAtoms
:
:
_true
eCaseMatters
)
;
}
void
nsMenuFrame
:
:
UpdateMenuType
(
)
{
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
nsGkAtoms
:
:
checkbox
nsGkAtoms
:
:
radio
nullptr
}
;
switch
(
mContent
-
>
AsElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
type
strings
eCaseMatters
)
)
{
case
0
:
mType
=
eMenuType_Checkbox
;
break
;
case
1
:
mType
=
eMenuType_Radio
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
name
mGroupName
)
;
break
;
default
:
if
(
mType
!
=
eMenuType_Normal
)
{
AutoWeakFrame
weakFrame
(
this
)
;
mContent
-
>
AsElement
(
)
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
checked
true
)
;
NS_ENSURE_TRUE_VOID
(
weakFrame
.
IsAlive
(
)
)
;
}
mType
=
eMenuType_Normal
;
break
;
}
UpdateMenuSpecialState
(
)
;
}
void
nsMenuFrame
:
:
UpdateMenuSpecialState
(
)
{
bool
newChecked
=
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
checked
nsGkAtoms
:
:
_true
eCaseMatters
)
;
if
(
newChecked
=
=
mChecked
)
{
if
(
mType
!
=
eMenuType_Radio
)
return
;
if
(
!
mChecked
|
|
mGroupName
.
IsEmpty
(
)
)
return
;
}
else
{
mChecked
=
newChecked
;
if
(
mType
!
=
eMenuType_Radio
|
|
!
mChecked
)
return
;
}
nsIFrame
*
firstMenuItem
=
nsXULPopupManager
:
:
GetNextMenuItem
(
GetParent
(
)
nullptr
true
false
)
;
nsIFrame
*
sib
=
firstMenuItem
;
while
(
sib
)
{
nsMenuFrame
*
menu
=
do_QueryFrame
(
sib
)
;
if
(
sib
!
=
this
)
{
if
(
menu
&
&
menu
-
>
GetMenuType
(
)
=
=
eMenuType_Radio
&
&
menu
-
>
IsChecked
(
)
&
&
menu
-
>
GetRadioGroupName
(
)
=
=
mGroupName
)
{
sib
-
>
GetContent
(
)
-
>
AsElement
(
)
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
checked
true
)
;
return
;
}
}
sib
=
nsXULPopupManager
:
:
GetNextMenuItem
(
GetParent
(
)
menu
true
true
)
;
if
(
sib
=
=
firstMenuItem
)
{
break
;
}
}
}
void
nsMenuFrame
:
:
BuildAcceleratorText
(
bool
aNotify
)
{
nsAutoString
accelText
;
if
(
(
GetStateBits
(
)
&
NS_STATE_ACCELTEXT_IS_DERIVED
)
=
=
0
)
{
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
acceltext
accelText
)
;
if
(
!
accelText
.
IsEmpty
(
)
)
return
;
}
AddStateBits
(
NS_STATE_ACCELTEXT_IS_DERIVED
)
;
AutoWeakFrame
weakFrame
(
this
)
;
mContent
-
>
AsElement
(
)
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
acceltext
aNotify
)
;
NS_ENSURE_TRUE_VOID
(
weakFrame
.
IsAlive
(
)
)
;
nsAutoString
keyValue
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
key
keyValue
)
;
if
(
keyValue
.
IsEmpty
(
)
)
return
;
nsIDocument
*
document
=
mContent
-
>
GetUncomposedDoc
(
)
;
if
(
!
document
)
return
;
Element
*
keyElement
=
document
-
>
GetElementById
(
keyValue
)
;
if
(
!
keyElement
)
{
#
ifdef
DEBUG
nsAutoString
label
;
mContent
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
label
label
)
;
nsAutoString
msg
=
NS_LITERAL_STRING
(
"
Key
'
"
)
+
keyValue
+
NS_LITERAL_STRING
(
"
'
of
menu
item
'
"
)
+
label
+
NS_LITERAL_STRING
(
"
'
could
not
be
found
"
)
;
NS_WARNING
(
NS_ConvertUTF16toUTF8
(
msg
)
.
get
(
)
)
;
#
endif
return
;
}
nsAutoString
accelString
;
keyElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
keytext
accelString
)
;
if
(
accelString
.
IsEmpty
(
)
)
{
keyElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
key
accelString
)
;
if
(
!
accelString
.
IsEmpty
(
)
)
{
ToUpperCase
(
accelString
)
;
}
else
{
nsAutoString
keyCode
;
keyElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
keycode
keyCode
)
;
ToUpperCase
(
keyCode
)
;
nsresult
rv
;
nsCOMPtr
<
nsIStringBundleService
>
bundleService
=
mozilla
:
:
services
:
:
GetStringBundleService
(
)
;
if
(
bundleService
)
{
nsCOMPtr
<
nsIStringBundle
>
bundle
;
rv
=
bundleService
-
>
CreateBundle
(
keyCode
.
EqualsLiteral
(
"
VK_RETURN
"
)
?
"
chrome
:
/
/
global
-
platform
/
locale
/
platformKeys
.
properties
"
:
"
chrome
:
/
/
global
/
locale
/
keys
.
properties
"
getter_AddRefs
(
bundle
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
bundle
)
{
nsAutoString
keyName
;
rv
=
bundle
-
>
GetStringFromName
(
NS_ConvertUTF16toUTF8
(
keyCode
)
.
get
(
)
keyName
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
accelString
=
keyName
;
}
}
}
if
(
accelString
.
IsEmpty
(
)
)
return
;
}
}
nsAutoString
modifiers
;
keyElement
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
modifiers
modifiers
)
;
char
*
str
=
ToNewCString
(
modifiers
)
;
char
*
newStr
;
char
*
token
=
nsCRT
:
:
strtok
(
str
"
\
t
"
&
newStr
)
;
nsAutoString
shiftText
;
nsAutoString
altText
;
nsAutoString
metaText
;
nsAutoString
controlText
;
nsAutoString
osText
;
nsAutoString
modifierSeparator
;
nsContentUtils
:
:
GetShiftText
(
shiftText
)
;
nsContentUtils
:
:
GetAltText
(
altText
)
;
nsContentUtils
:
:
GetMetaText
(
metaText
)
;
nsContentUtils
:
:
GetControlText
(
controlText
)
;
nsContentUtils
:
:
GetOSText
(
osText
)
;
nsContentUtils
:
:
GetModifierSeparatorText
(
modifierSeparator
)
;
while
(
token
)
{
if
(
PL_strcmp
(
token
"
shift
"
)
=
=
0
)
accelText
+
=
shiftText
;
else
if
(
PL_strcmp
(
token
"
alt
"
)
=
=
0
)
accelText
+
=
altText
;
else
if
(
PL_strcmp
(
token
"
meta
"
)
=
=
0
)
accelText
+
=
metaText
;
else
if
(
PL_strcmp
(
token
"
os
"
)
=
=
0
)
accelText
+
=
osText
;
else
if
(
PL_strcmp
(
token
"
control
"
)
=
=
0
)
accelText
+
=
controlText
;
else
if
(
PL_strcmp
(
token
"
accel
"
)
=
=
0
)
{
switch
(
WidgetInputEvent
:
:
AccelModifier
(
)
)
{
case
MODIFIER_META
:
accelText
+
=
metaText
;
break
;
case
MODIFIER_OS
:
accelText
+
=
osText
;
break
;
case
MODIFIER_ALT
:
accelText
+
=
altText
;
break
;
case
MODIFIER_CONTROL
:
accelText
+
=
controlText
;
break
;
default
:
MOZ_CRASH
(
"
Handle
the
new
result
of
WidgetInputEvent
:
:
AccelModifier
(
)
"
)
;
break
;
}
}
accelText
+
=
modifierSeparator
;
token
=
nsCRT
:
:
strtok
(
newStr
"
\
t
"
&
newStr
)
;
}
free
(
str
)
;
accelText
+
=
accelString
;
mIgnoreAccelTextChange
=
true
;
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
acceltext
accelText
aNotify
)
;
NS_ENSURE_TRUE_VOID
(
weakFrame
.
IsAlive
(
)
)
;
mIgnoreAccelTextChange
=
false
;
}
void
nsMenuFrame
:
:
Execute
(
WidgetGUIEvent
*
aEvent
)
{
bool
needToFlipChecked
=
false
;
if
(
mType
=
=
eMenuType_Checkbox
|
|
(
mType
=
=
eMenuType_Radio
&
&
!
mChecked
)
)
{
needToFlipChecked
=
!
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
autocheck
nsGkAtoms
:
:
_false
eCaseMatters
)
;
}
nsCOMPtr
<
nsISound
>
sound
(
do_CreateInstance
(
"
mozilla
.
org
/
sound
;
1
"
)
)
;
if
(
sound
)
sound
-
>
PlayEventSound
(
nsISound
:
:
EVENT_MENU_EXECUTE
)
;
StartBlinking
(
aEvent
needToFlipChecked
)
;
}
bool
nsMenuFrame
:
:
ShouldBlink
(
)
{
int32_t
shouldBlink
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ChosenMenuItemsShouldBlink
0
)
;
if
(
!
shouldBlink
)
return
false
;
return
true
;
}
void
nsMenuFrame
:
:
StartBlinking
(
WidgetGUIEvent
*
aEvent
bool
aFlipChecked
)
{
StopBlinking
(
)
;
CreateMenuCommandEvent
(
aEvent
aFlipChecked
)
;
if
(
!
ShouldBlink
(
)
)
{
PassMenuCommandEventToPopupManager
(
)
;
return
;
}
AutoWeakFrame
weakFrame
(
this
)
;
mContent
-
>
AsElement
(
)
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
menuactive
true
)
;
if
(
!
weakFrame
.
IsAlive
(
)
)
return
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
menuParent
)
{
menuParent
-
>
LockMenuUntilClosed
(
true
)
;
}
NS_NewTimerWithCallback
(
getter_AddRefs
(
mBlinkTimer
)
mTimerMediator
kBlinkDelay
nsITimer
:
:
TYPE_ONE_SHOT
mContent
-
>
OwnerDoc
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
mBlinkState
=
1
;
}
void
nsMenuFrame
:
:
StopBlinking
(
)
{
mBlinkState
=
0
;
if
(
mBlinkTimer
)
{
mBlinkTimer
-
>
Cancel
(
)
;
mBlinkTimer
=
nullptr
;
}
mDelayedMenuCommandEvent
=
nullptr
;
}
void
nsMenuFrame
:
:
CreateMenuCommandEvent
(
WidgetGUIEvent
*
aEvent
bool
aFlipChecked
)
{
bool
isTrusted
=
aEvent
?
aEvent
-
>
IsTrusted
(
)
:
nsContentUtils
:
:
IsCallerChrome
(
)
;
bool
shift
=
false
control
=
false
alt
=
false
meta
=
false
;
WidgetInputEvent
*
inputEvent
=
aEvent
?
aEvent
-
>
AsInputEvent
(
)
:
nullptr
;
if
(
inputEvent
)
{
shift
=
inputEvent
-
>
IsShift
(
)
;
control
=
inputEvent
-
>
IsControl
(
)
;
alt
=
inputEvent
-
>
IsAlt
(
)
;
meta
=
inputEvent
-
>
IsMeta
(
)
;
}
bool
userinput
=
EventStateManager
:
:
IsHandlingUserInput
(
)
;
mDelayedMenuCommandEvent
=
new
nsXULMenuCommandEvent
(
mContent
-
>
AsElement
(
)
isTrusted
shift
control
alt
meta
userinput
aFlipChecked
)
;
}
void
nsMenuFrame
:
:
PassMenuCommandEventToPopupManager
(
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
nsMenuParent
*
menuParent
=
GetMenuParent
(
)
;
if
(
pm
&
&
menuParent
&
&
mDelayedMenuCommandEvent
)
{
pm
-
>
ExecuteMenu
(
mContent
mDelayedMenuCommandEvent
)
;
}
mDelayedMenuCommandEvent
=
nullptr
;
}
void
nsMenuFrame
:
:
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
{
nsFrameList
*
popupList
=
GetPopupList
(
)
;
if
(
popupList
&
&
popupList
-
>
FirstChild
(
)
=
=
aOldFrame
)
{
popupList
-
>
RemoveFirstChild
(
)
;
aOldFrame
-
>
Destroy
(
)
;
DestroyPopupList
(
)
;
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
return
;
}
nsBoxFrame
:
:
RemoveFrame
(
aListID
aOldFrame
)
;
}
void
nsMenuFrame
:
:
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
nsFrameList
&
aFrameList
)
{
if
(
!
HasPopup
(
)
&
&
(
aListID
=
=
kPrincipalList
|
|
aListID
=
=
kPopupList
)
)
{
SetPopupFrame
(
aFrameList
)
;
if
(
HasPopup
(
)
)
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
if
(
aFrameList
.
IsEmpty
(
)
)
return
;
if
(
MOZ_UNLIKELY
(
aPrevFrame
&
&
aPrevFrame
=
=
GetPopup
(
)
)
)
{
aPrevFrame
=
nullptr
;
}
nsBoxFrame
:
:
InsertFrames
(
aListID
aPrevFrame
aFrameList
)
;
}
void
nsMenuFrame
:
:
AppendFrames
(
ChildListID
aListID
nsFrameList
&
aFrameList
)
{
if
(
!
HasPopup
(
)
&
&
(
aListID
=
=
kPrincipalList
|
|
aListID
=
=
kPopupList
)
)
{
SetPopupFrame
(
aFrameList
)
;
if
(
HasPopup
(
)
)
{
PresShell
(
)
-
>
FrameNeedsReflow
(
this
nsIPresShell
:
:
eTreeChange
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
}
if
(
aFrameList
.
IsEmpty
(
)
)
return
;
nsBoxFrame
:
:
AppendFrames
(
aListID
aFrameList
)
;
}
bool
nsMenuFrame
:
:
SizeToPopup
(
nsBoxLayoutState
&
aState
nsSize
&
aSize
)
{
if
(
!
IsXULCollapsed
(
)
)
{
bool
widthSet
heightSet
;
nsSize
tmpSize
(
-
1
0
)
;
nsIFrame
:
:
AddXULPrefSize
(
this
tmpSize
widthSet
heightSet
)
;
if
(
!
widthSet
&
&
GetXULFlex
(
)
=
=
0
)
{
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
if
(
!
popupFrame
)
return
false
;
tmpSize
=
popupFrame
-
>
GetXULPrefSize
(
aState
)
;
nsMargin
borderPadding
;
GetXULBorderAndPadding
(
borderPadding
)
;
nsIScrollableFrame
*
scrollFrame
=
do_QueryFrame
(
popupFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
)
;
nscoord
scrollbarWidth
=
0
;
if
(
scrollFrame
)
{
scrollbarWidth
=
scrollFrame
-
>
GetDesiredScrollbarSizes
(
&
aState
)
.
LeftRight
(
)
;
}
aSize
.
width
=
tmpSize
.
width
+
std
:
:
max
(
borderPadding
.
LeftRight
(
)
scrollbarWidth
)
;
return
true
;
}
}
return
false
;
}
nsSize
nsMenuFrame
:
:
GetXULPrefSize
(
nsBoxLayoutState
&
aState
)
{
nsSize
size
=
nsBoxFrame
:
:
GetXULPrefSize
(
aState
)
;
DISPLAY_PREF_SIZE
(
this
size
)
;
if
(
!
IsSizedToPopup
(
mContent
true
)
&
&
IsSizedToPopup
(
mContent
false
)
&
&
SizeToPopup
(
aState
size
)
)
{
nsSize
minSize
=
nsBoxFrame
:
:
GetXULMinSize
(
aState
)
;
nsSize
maxSize
=
GetXULMaxSize
(
aState
)
;
size
=
BoundsCheck
(
minSize
size
maxSize
)
;
}
return
size
;
}
NS_IMETHODIMP
nsMenuFrame
:
:
GetActiveChild
(
dom
:
:
Element
*
*
aResult
)
{
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
if
(
!
popupFrame
)
return
NS_ERROR_FAILURE
;
nsMenuFrame
*
menuFrame
=
popupFrame
-
>
GetCurrentMenuItem
(
)
;
if
(
!
menuFrame
)
{
*
aResult
=
nullptr
;
}
else
{
RefPtr
<
dom
:
:
Element
>
elt
=
menuFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
elt
.
forget
(
aResult
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsMenuFrame
:
:
SetActiveChild
(
dom
:
:
Element
*
aChild
)
{
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
if
(
!
popupFrame
)
return
NS_ERROR_FAILURE
;
if
(
!
aChild
)
{
popupFrame
-
>
ChangeMenuItem
(
nullptr
false
false
)
;
return
NS_OK
;
}
nsMenuFrame
*
menu
=
do_QueryFrame
(
aChild
-
>
GetPrimaryFrame
(
)
)
;
if
(
menu
)
popupFrame
-
>
ChangeMenuItem
(
menu
false
false
)
;
return
NS_OK
;
}
nsIScrollableFrame
*
nsMenuFrame
:
:
GetScrollTargetFrame
(
)
{
nsMenuPopupFrame
*
popupFrame
=
GetPopup
(
)
;
if
(
!
popupFrame
)
return
nullptr
;
nsIFrame
*
childFrame
=
popupFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
if
(
childFrame
)
return
popupFrame
-
>
GetScrollFrame
(
childFrame
)
;
return
nullptr
;
}
NS_IMPL_ISUPPORTS
(
nsMenuTimerMediator
nsITimerCallback
)
nsMenuTimerMediator
:
:
nsMenuTimerMediator
(
nsMenuFrame
*
aFrame
)
:
mFrame
(
aFrame
)
{
NS_ASSERTION
(
mFrame
"
Must
have
frame
"
)
;
}
nsMenuTimerMediator
:
:
~
nsMenuTimerMediator
(
)
{
}
NS_IMETHODIMP
nsMenuTimerMediator
:
:
Notify
(
nsITimer
*
aTimer
)
{
if
(
!
mFrame
)
return
NS_ERROR_FAILURE
;
return
mFrame
-
>
Notify
(
aTimer
)
;
}
void
nsMenuTimerMediator
:
:
ClearFrame
(
)
{
mFrame
=
nullptr
;
}
NS_IMETHODIMP
nsMenuTimerMediator
:
:
GetName
(
nsACString
&
aName
)
{
aName
.
AssignLiteral
(
"
nsMenuTimerMediator
"
)
;
return
NS_OK
;
}
