#
include
"
nsMenuBarFrame
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsCSSRendering
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsUnicharUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsCSSFrameConstructor
.
h
"
#
ifdef
XP_WIN
#
include
"
nsISound
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
endif
#
include
"
nsUTF8Utils
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
XULMenuParentElement
.
h
"
#
include
"
mozilla
/
dom
/
XULButtonElement
.
h
"
using
namespace
mozilla
;
nsIFrame
*
NS_NewMenuBarFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsMenuBarFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsMenuBarFrame
)
NS_QUERYFRAME_HEAD
(
nsMenuBarFrame
)
NS_QUERYFRAME_ENTRY
(
nsMenuBarFrame
)
NS_QUERYFRAME_TAIL_INHERITING
(
nsBoxFrame
)
nsMenuBarFrame
:
:
nsMenuBarFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
)
{
}
void
nsMenuBarFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsBoxFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mMenuBarListener
=
new
nsMenuBarListener
(
this
aContent
)
;
}
dom
:
:
XULMenuParentElement
&
nsMenuBarFrame
:
:
MenubarElement
(
)
const
{
auto
*
content
=
dom
:
:
XULMenuParentElement
:
:
FromNode
(
GetContent
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
content
)
;
return
*
content
;
}
MOZ_CAN_RUN_SCRIPT
void
nsMenuBarFrame
:
:
SetActive
(
bool
aActiveFlag
)
{
if
(
mIsActive
=
=
aActiveFlag
)
{
return
;
}
if
(
!
aActiveFlag
)
{
if
(
auto
*
activeChild
=
MenubarElement
(
)
.
GetActiveMenuChild
(
)
)
{
if
(
activeChild
-
>
IsMenuPopupOpen
(
)
)
{
return
;
}
}
}
mIsActive
=
aActiveFlag
;
if
(
mIsActive
)
{
InstallKeyboardNavigator
(
)
;
}
else
{
mActiveByKeyboard
=
false
;
RemoveKeyboardNavigator
(
)
;
}
RefPtr
menubar
=
&
MenubarElement
(
)
;
if
(
!
aActiveFlag
)
{
menubar
-
>
SetActiveMenuChild
(
nullptr
)
;
}
constexpr
auto
active
=
u
"
DOMMenuBarActive
"
_ns
;
constexpr
auto
inactive
=
u
"
DOMMenuBarInactive
"
_ns
;
FireDOMEvent
(
aActiveFlag
?
active
:
inactive
menubar
)
;
}
void
nsMenuBarFrame
:
:
InstallKeyboardNavigator
(
)
{
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
SetActiveMenuBar
(
this
true
)
;
}
}
void
nsMenuBarFrame
:
:
MenuClosed
(
)
{
SetActive
(
false
)
;
}
void
nsMenuBarFrame
:
:
HandleEnterKeyPress
(
WidgetEvent
&
aEvent
)
{
if
(
RefPtr
<
dom
:
:
XULButtonElement
>
activeChild
=
MenubarElement
(
)
.
GetActiveMenuChild
(
)
)
{
activeChild
-
>
HandleEnterKeyPress
(
aEvent
)
;
}
}
void
nsMenuBarFrame
:
:
RemoveKeyboardNavigator
(
)
{
if
(
!
mIsActive
)
{
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
SetActiveMenuBar
(
this
false
)
;
}
}
}
void
nsMenuBarFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
pm
-
>
SetActiveMenuBar
(
this
false
)
;
mMenuBarListener
-
>
OnDestroyMenuBarFrame
(
)
;
mMenuBarListener
=
nullptr
;
nsBoxFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
