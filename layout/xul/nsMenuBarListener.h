#
ifndef
nsMenuBarListener_h
#
define
nsMenuBarListener_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventForwards
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
ifdef
KeyPress
#
undef
KeyPress
#
endif
class
nsMenuFrame
;
class
nsMenuBarFrame
;
namespace
mozilla
{
namespace
dom
{
class
EventTarget
;
class
KeyboardEvent
;
}
}
class
nsMenuBarListener
final
:
public
nsIDOMEventListener
{
public
:
explicit
nsMenuBarListener
(
nsMenuBarFrame
*
aMenuBarFrame
nsIContent
*
aMenuBarContent
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
void
OnDestroyMenuBarFrame
(
)
;
static
void
InitializeStatics
(
)
;
static
nsresult
GetMenuAccessKey
(
int32_t
*
aAccessKey
)
;
static
bool
IsAccessKeyPressed
(
mozilla
:
:
dom
:
:
KeyboardEvent
*
aEvent
)
;
protected
:
virtual
~
nsMenuBarListener
(
)
;
nsresult
KeyUp
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nsresult
KeyDown
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nsresult
KeyPress
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nsresult
Blur
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
nsresult
OnWindowDeactivated
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
nsresult
MouseDown
(
mozilla
:
:
dom
:
:
Event
*
aMouseEvent
)
;
nsresult
Fullscreen
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
static
void
InitAccessKey
(
)
;
static
mozilla
:
:
Modifiers
GetModifiersForAccessKey
(
mozilla
:
:
dom
:
:
KeyboardEvent
*
event
)
;
nsMenuFrame
*
GetMenuForKeyEvent
(
mozilla
:
:
dom
:
:
KeyboardEvent
*
aKeyEvent
bool
aPeek
)
;
void
ReserveKeyIfNeeded
(
mozilla
:
:
dom
:
:
Event
*
aKeyEvent
)
;
void
ToggleMenuActiveState
(
)
;
bool
Destroyed
(
)
const
{
return
!
mMenuBarFrame
;
}
nsMenuBarFrame
*
mMenuBarFrame
;
mozilla
:
:
dom
:
:
EventTarget
*
mEventTarget
;
mozilla
:
:
dom
:
:
EventTarget
*
mTopWindowEventTarget
;
bool
mAccessKeyDown
;
bool
mAccessKeyDownCanceled
;
static
bool
mAccessKeyFocuses
;
static
int32_t
mAccessKey
;
static
mozilla
:
:
Modifiers
mAccessKeyMask
;
}
;
#
endif
