const
{
CustomizableUITestUtils
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
testing
-
common
/
CustomizableUITestUtils
.
sys
.
mjs
"
)
;
let
gCUITestUtils
=
new
CustomizableUITestUtils
(
window
)
;
let
searchBar
;
add_task
(
async
function
test_setup
(
)
{
searchBar
=
await
gCUITestUtils
.
addSearchBar
(
)
;
registerCleanupFunction
(
(
)
=
>
{
gCUITestUtils
.
removeSearchBar
(
)
;
}
)
;
}
)
;
add_task
(
async
function
(
)
{
const
promiseFocusInSearchBar
=
BrowserTestUtils
.
waitForEvent
(
searchBar
.
textbox
"
focus
"
)
;
searchBar
.
focus
(
)
;
await
promiseFocusInSearchBar
;
let
DOMWindowUtils
=
EventUtils
.
_getDOMWindowUtils
(
)
;
is
(
DOMWindowUtils
.
IMEStatus
DOMWindowUtils
.
IME_STATUS_ENABLED
"
IME
should
be
available
when
searchbar
has
focus
"
)
;
let
searchPopup
=
document
.
getElementById
(
"
PopupSearchAutoComplete
"
)
;
await
(
async
(
)
=
>
{
async
function
tryToOpen
(
)
{
try
{
searchBar
.
focus
(
)
;
EventUtils
.
synthesizeKey
(
"
KEY_F4
"
)
;
await
TestUtils
.
waitForCondition
(
(
)
=
>
searchPopup
.
state
=
=
"
open
"
"
The
popup
isn
'
t
opened
"
5
100
)
;
}
catch
(
e
)
{
return
false
;
}
return
true
;
}
for
(
let
i
=
0
;
i
<
5
;
i
+
+
)
{
if
(
await
tryToOpen
(
)
)
{
return
;
}
}
ok
(
false
"
Failed
to
open
the
popup
of
searchbar
"
)
;
}
)
(
)
;
is
(
DOMWindowUtils
.
IMEStatus
DOMWindowUtils
.
IME_STATUS_ENABLED
"
IME
should
be
available
even
when
the
popup
of
searchbar
is
open
"
)
;
is
(
searchPopup
.
state
"
open
"
"
The
popup
of
searchbar
shouldn
'
t
be
closed
"
)
;
let
hiddenPromise
=
BrowserTestUtils
.
waitForEvent
(
searchPopup
"
popuphidden
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Alt
"
)
;
await
hiddenPromise
;
await
new
Promise
(
r
=
>
setTimeout
(
r
0
)
)
;
is
(
DOMWindowUtils
.
IMEStatus
DOMWindowUtils
.
IME_STATUS_DISABLED
"
IME
should
not
be
available
when
menubar
is
active
"
)
;
EventUtils
.
synthesizeKey
(
"
KEY_Escape
"
)
;
is
(
DOMWindowUtils
.
IMEStatus
DOMWindowUtils
.
IME_STATUS_ENABLED
"
IME
should
be
available
after
focus
is
back
to
the
searchbar
"
)
;
}
)
;
