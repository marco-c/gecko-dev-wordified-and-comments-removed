#
include
"
nsCOMPtr
.
h
"
#
include
"
nsButtonBoxFrame
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsIDOMXULButtonElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
MouseEventBinding
.
h
"
#
include
"
mozilla
/
EventStateManager
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
NS_IMPL_ISUPPORTS
(
nsButtonBoxFrame
:
:
nsButtonBoxListener
nsIDOMEventListener
)
nsresult
nsButtonBoxFrame
:
:
nsButtonBoxListener
:
:
HandleEvent
(
dom
:
:
Event
*
aEvent
)
{
if
(
!
mButtonBoxFrame
)
{
return
NS_OK
;
}
nsAutoString
eventType
;
aEvent
-
>
GetType
(
eventType
)
;
if
(
eventType
.
EqualsLiteral
(
"
blur
"
)
)
{
mButtonBoxFrame
-
>
Blurred
(
)
;
return
NS_OK
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
eventType
"
)
;
return
NS_OK
;
}
nsIFrame
*
NS_NewButtonBoxFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsButtonBoxFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsButtonBoxFrame
)
nsButtonBoxFrame
:
:
nsButtonBoxFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
ClassID
aID
)
:
nsBoxFrame
(
aStyle
aPresContext
aID
false
)
mButtonBoxListener
(
nullptr
)
mIsHandlingKeyEvent
(
false
)
{
}
void
nsButtonBoxFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
nsBoxFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mButtonBoxListener
=
new
nsButtonBoxListener
(
this
)
;
mContent
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
blur
"
)
mButtonBoxListener
false
)
;
}
void
nsButtonBoxFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
mContent
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
blur
"
)
mButtonBoxListener
false
)
;
mButtonBoxListener
-
>
mButtonBoxFrame
=
nullptr
;
mButtonBoxListener
=
nullptr
;
nsBoxFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
void
nsButtonBoxFrame
:
:
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
aBuilder
-
>
IsForEventDelivery
(
)
)
return
;
nsBoxFrame
:
:
BuildDisplayListForChildren
(
aBuilder
aLists
)
;
}
nsresult
nsButtonBoxFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
NS_ENSURE_ARG_POINTER
(
aEventStatus
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aEventStatus
)
{
return
NS_OK
;
}
switch
(
aEvent
-
>
mMessage
)
{
case
eKeyDown
:
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
NS_VK_SPACE
=
=
keyEvent
-
>
mKeyCode
)
{
EventStateManager
*
esm
=
aPresContext
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
mContent
NS_EVENT_STATE_HOVER
)
;
esm
-
>
SetContentState
(
mContent
NS_EVENT_STATE_ACTIVE
)
;
mIsHandlingKeyEvent
=
true
;
}
break
;
}
#
ifndef
XP_MACOSX
case
eKeyPress
:
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
NS_VK_RETURN
=
=
keyEvent
-
>
mKeyCode
)
{
RefPtr
<
nsIDOMXULButtonElement
>
button
=
mContent
-
>
AsElement
(
)
-
>
AsXULButton
(
)
;
if
(
button
)
{
MouseClicked
(
aEvent
)
;
*
aEventStatus
=
nsEventStatus_eConsumeNoDefault
;
}
}
break
;
}
#
endif
case
eKeyUp
:
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
break
;
}
if
(
NS_VK_SPACE
=
=
keyEvent
-
>
mKeyCode
)
{
mIsHandlingKeyEvent
=
false
;
NS_ASSERTION
(
mContent
-
>
IsElement
(
)
"
How
do
we
have
a
non
-
element
?
"
)
;
EventStates
buttonState
=
mContent
-
>
AsElement
(
)
-
>
State
(
)
;
if
(
buttonState
.
HasAllStates
(
NS_EVENT_STATE_ACTIVE
|
NS_EVENT_STATE_HOVER
)
)
{
EventStateManager
*
esm
=
aPresContext
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_ACTIVE
)
;
esm
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_HOVER
)
;
MouseClicked
(
aEvent
)
;
}
}
break
;
}
case
eMouseClick
:
{
WidgetMouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
mouseEvent
-
>
IsLeftClickEvent
(
)
)
{
MouseClicked
(
mouseEvent
)
;
}
break
;
}
default
:
break
;
}
return
nsBoxFrame
:
:
HandleEvent
(
aPresContext
aEvent
aEventStatus
)
;
}
void
nsButtonBoxFrame
:
:
Blurred
(
)
{
NS_ASSERTION
(
mContent
-
>
IsElement
(
)
"
How
do
we
have
a
non
-
element
?
"
)
;
EventStates
buttonState
=
mContent
-
>
AsElement
(
)
-
>
State
(
)
;
if
(
mIsHandlingKeyEvent
&
&
buttonState
.
HasAllStates
(
NS_EVENT_STATE_ACTIVE
|
NS_EVENT_STATE_HOVER
)
)
{
EventStateManager
*
esm
=
PresContext
(
)
-
>
EventStateManager
(
)
;
esm
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_ACTIVE
)
;
esm
-
>
SetContentState
(
nullptr
NS_EVENT_STATE_HOVER
)
;
}
mIsHandlingKeyEvent
=
false
;
}
void
nsButtonBoxFrame
:
:
MouseClicked
(
WidgetGUIEvent
*
aEvent
)
{
if
(
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
disabled
nsGkAtoms
:
:
_true
eCaseMatters
)
)
return
;
RefPtr
<
mozilla
:
:
PresShell
>
presShell
=
PresContext
(
)
-
>
GetPresShell
(
)
;
if
(
!
presShell
)
{
return
;
}
nsCOMPtr
<
nsIContent
>
content
=
mContent
;
WidgetInputEvent
*
inputEvent
=
aEvent
-
>
AsInputEvent
(
)
;
WidgetMouseEventBase
*
mouseEvent
=
aEvent
-
>
AsMouseEventBase
(
)
;
nsContentUtils
:
:
DispatchXULCommand
(
content
aEvent
-
>
IsTrusted
(
)
nullptr
presShell
inputEvent
-
>
IsControl
(
)
inputEvent
-
>
IsAlt
(
)
inputEvent
-
>
IsShift
(
)
inputEvent
-
>
IsMeta
(
)
mouseEvent
?
mouseEvent
-
>
mInputSource
:
MouseEvent_Binding
:
:
MOZ_SOURCE_UNKNOWN
)
;
}
