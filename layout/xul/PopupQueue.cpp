#
include
"
PopupQueue
.
h
"
#
include
"
mozilla
/
ClearOnShutdown
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsThreadUtils
.
h
"
using
namespace
mozilla
;
StaticRefPtr
<
PopupQueue
>
gPopupQueue
;
already_AddRefed
<
PopupQueue
>
PopupQueue
:
:
GetInstance
(
)
{
if
(
!
gPopupQueue
)
{
gPopupQueue
=
new
PopupQueue
(
)
;
ClearOnShutdown
(
&
gPopupQueue
)
;
}
return
do_AddRef
(
gPopupQueue
)
;
}
void
PopupQueue
:
:
Enqueue
(
Element
*
aPopup
MoveOnlyFunction
<
void
(
Element
*
)
>
&
&
aCallback
)
{
if
(
!
aCallback
)
{
return
;
}
if
(
Store
(
aPopup
false
std
:
:
move
(
aCallback
)
)
&
&
!
mShowing
)
{
MaybeShowNext
(
)
;
}
}
void
PopupQueue
:
:
Show
(
Element
*
aPopup
MoveOnlyFunction
<
void
(
Element
*
)
>
&
&
aCallback
)
{
if
(
!
aCallback
)
{
return
;
}
MoveOnlyFunction
<
void
(
Element
*
)
>
callback
=
std
:
:
move
(
aCallback
)
;
if
(
Store
(
aPopup
true
nullptr
)
)
{
+
+
mShowing
;
callback
(
aPopup
)
;
}
}
bool
PopupQueue
:
:
Store
(
Element
*
aPopup
bool
aShown
MoveOnlyFunction
<
void
(
Element
*
)
>
&
&
aCallback
)
{
if
(
!
aShown
)
{
for
(
const
PendingPopup
&
popup
:
mQueue
)
{
if
(
popup
.
mPopup
=
=
aPopup
)
{
return
false
;
}
}
}
mQueue
.
AppendElement
(
PendingPopup
{
aPopup
!
aShown
aShown
std
:
:
move
(
aCallback
)
}
)
;
return
true
;
}
void
PopupQueue
:
:
NotifyDismissed
(
Element
*
aPopup
bool
aRemoveAll
)
{
if
(
mQueue
.
IsEmpty
(
)
)
{
return
;
}
for
(
uint32_t
i
=
0
;
i
<
mQueue
.
Length
(
)
;
+
+
i
)
{
if
(
mQueue
[
i
]
.
mPopup
=
=
aPopup
)
{
if
(
mShowing
&
&
mQueue
[
i
]
.
mShown
)
{
-
-
mShowing
;
}
mQueue
.
RemoveElementAt
(
i
)
;
if
(
!
aRemoveAll
)
{
break
;
}
}
}
if
(
!
mQueue
.
IsEmpty
(
)
&
&
!
mShowing
)
{
NS_DispatchToMainThread
(
NewRunnableMethod
(
"
PopupQueue
:
:
MaybeShowNext
"
this
&
PopupQueue
:
:
MaybeShowNext
)
)
;
}
}
void
PopupQueue
:
:
MaybeShowNext
(
)
{
if
(
mQueue
.
IsEmpty
(
)
|
|
mShowing
)
{
return
;
}
PendingPopup
&
popup
=
mQueue
[
0
]
;
+
+
mShowing
;
MOZ_ASSERT
(
!
popup
.
mShown
)
;
popup
.
mShown
=
true
;
MoveOnlyFunction
<
void
(
Element
*
)
>
callback
=
std
:
:
move
(
popup
.
mCallback
)
;
MOZ_ASSERT
(
!
popup
.
mCallback
)
;
callback
(
mQueue
[
0
]
.
mPopup
)
;
}
PopupQueue
:
:
Element
*
PopupQueue
:
:
RetrieveQueueableShownPopup
(
)
const
{
for
(
auto
&
popup
:
mQueue
)
{
if
(
popup
.
mQueueable
&
&
popup
.
mShown
)
{
return
popup
.
mPopup
;
}
}
return
nullptr
;
}
