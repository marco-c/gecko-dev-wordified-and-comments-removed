#
include
"
nsMenuBarListener
.
h
"
#
include
"
XULButtonElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
dom
/
XULButtonElement
.
h
"
#
include
"
nsMenuBarFrame
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsPIWindowRoot
.
h
"
#
include
"
nsISound
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
BasicEvents
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_ui
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
EventBinding
.
h
"
#
include
"
mozilla
/
dom
/
KeyboardEvent
.
h
"
#
include
"
mozilla
/
dom
/
KeyboardEventBinding
.
h
"
#
include
"
mozilla
/
dom
/
XULMenuParentElement
.
h
"
#
include
"
nsXULPopupManager
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
Event
;
using
mozilla
:
:
dom
:
:
KeyboardEvent
;
NS_IMPL_ISUPPORTS
(
nsMenuBarListener
nsIDOMEventListener
)
nsMenuBarListener
:
:
nsMenuBarListener
(
nsMenuBarFrame
*
aMenuBarFrame
nsIContent
*
aMenuBarContent
)
:
mMenuBarFrame
(
aMenuBarFrame
)
mContent
(
dom
:
:
XULMenuParentElement
:
:
FromNode
(
aMenuBarContent
)
)
mEventTarget
(
aMenuBarContent
-
>
GetComposedDoc
(
)
)
mTopWindowEventTarget
(
nullptr
)
mAccessKeyDown
(
false
)
mAccessKeyDownCanceled
(
false
)
{
MOZ_ASSERT
(
mEventTarget
)
;
MOZ_ASSERT
(
mContent
)
;
mEventTarget
-
>
AddSystemEventListener
(
u
"
keypress
"
_ns
this
false
)
;
mEventTarget
-
>
AddSystemEventListener
(
u
"
keydown
"
_ns
this
false
)
;
mEventTarget
-
>
AddSystemEventListener
(
u
"
keyup
"
_ns
this
false
)
;
mEventTarget
-
>
AddSystemEventListener
(
u
"
mozaccesskeynotfound
"
_ns
this
false
)
;
mEventTarget
-
>
AddEventListener
(
u
"
keydown
"
_ns
this
true
)
;
mEventTarget
-
>
AddEventListener
(
u
"
mousedown
"
_ns
this
true
)
;
mEventTarget
-
>
AddEventListener
(
u
"
mousedown
"
_ns
this
false
)
;
mEventTarget
-
>
AddEventListener
(
u
"
blur
"
_ns
this
true
)
;
mEventTarget
-
>
AddEventListener
(
u
"
MozDOMFullscreen
:
Entered
"
_ns
this
false
)
;
RefPtr
<
dom
:
:
EventTarget
>
topWindowEventTarget
=
nsContentUtils
:
:
GetWindowRoot
(
aMenuBarContent
-
>
GetComposedDoc
(
)
)
;
mTopWindowEventTarget
=
topWindowEventTarget
.
get
(
)
;
mTopWindowEventTarget
-
>
AddSystemEventListener
(
u
"
deactivate
"
_ns
this
true
)
;
}
nsMenuBarListener
:
:
~
nsMenuBarListener
(
)
{
MOZ_ASSERT
(
!
mEventTarget
"
OnDestroyMenuBarFrame
(
)
should
'
ve
alreay
been
called
"
)
;
}
void
nsMenuBarListener
:
:
OnDestroyMenuBarFrame
(
)
{
mEventTarget
-
>
RemoveSystemEventListener
(
u
"
keypress
"
_ns
this
false
)
;
mEventTarget
-
>
RemoveSystemEventListener
(
u
"
keydown
"
_ns
this
false
)
;
mEventTarget
-
>
RemoveSystemEventListener
(
u
"
keyup
"
_ns
this
false
)
;
mEventTarget
-
>
RemoveSystemEventListener
(
u
"
mozaccesskeynotfound
"
_ns
this
false
)
;
mEventTarget
-
>
RemoveEventListener
(
u
"
keydown
"
_ns
this
true
)
;
mEventTarget
-
>
RemoveEventListener
(
u
"
mousedown
"
_ns
this
true
)
;
mEventTarget
-
>
RemoveEventListener
(
u
"
mousedown
"
_ns
this
false
)
;
mEventTarget
-
>
RemoveEventListener
(
u
"
blur
"
_ns
this
true
)
;
mEventTarget
-
>
RemoveEventListener
(
u
"
MozDOMFullscreen
:
Entered
"
_ns
this
false
)
;
mTopWindowEventTarget
-
>
RemoveSystemEventListener
(
u
"
deactivate
"
_ns
this
true
)
;
mMenuBarFrame
=
nullptr
;
mEventTarget
=
nullptr
;
mTopWindowEventTarget
=
nullptr
;
}
void
nsMenuBarListener
:
:
ToggleMenuActiveState
(
)
{
if
(
mMenuBarFrame
-
>
IsActive
(
)
)
{
mMenuBarFrame
-
>
SetActive
(
false
)
;
}
else
{
RefPtr
content
=
mContent
;
mMenuBarFrame
-
>
SetActive
(
true
)
;
content
-
>
SelectFirstItem
(
)
;
}
}
nsresult
nsMenuBarListener
:
:
KeyUp
(
Event
*
aKeyEvent
)
{
WidgetKeyboardEvent
*
nativeKeyEvent
=
aKeyEvent
-
>
WidgetEventPtr
(
)
-
>
AsKeyboardEvent
(
)
;
if
(
!
nativeKeyEvent
)
{
return
NS_OK
;
}
if
(
!
nativeKeyEvent
-
>
IsTrusted
(
)
)
{
return
NS_OK
;
}
const
auto
accessKey
=
LookAndFeel
:
:
GetMenuAccessKey
(
)
;
if
(
!
accessKey
|
|
!
StaticPrefs
:
:
ui_key_menuAccessKeyFocuses
(
)
)
{
return
NS_OK
;
}
if
(
!
nativeKeyEvent
-
>
DefaultPrevented
(
)
&
&
mAccessKeyDown
&
&
!
mAccessKeyDownCanceled
&
&
nativeKeyEvent
-
>
mKeyCode
=
=
accessKey
)
{
bool
toggleMenuActiveState
=
true
;
if
(
!
mMenuBarFrame
-
>
IsActive
(
)
)
{
if
(
nativeKeyEvent
-
>
WillBeSentToRemoteProcess
(
)
)
{
nativeKeyEvent
-
>
StopImmediatePropagation
(
)
;
nativeKeyEvent
-
>
MarkAsWaitingReplyFromRemoteProcess
(
)
;
return
NS_OK
;
}
if
(
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
)
{
pm
-
>
Rollup
(
{
}
)
;
}
toggleMenuActiveState
=
!
Destroyed
(
)
&
&
!
mMenuBarFrame
-
>
IsActive
(
)
;
}
if
(
toggleMenuActiveState
)
{
if
(
!
mMenuBarFrame
-
>
IsActive
(
)
)
{
mMenuBarFrame
-
>
SetActiveByKeyboard
(
)
;
}
ToggleMenuActiveState
(
)
;
}
}
mAccessKeyDown
=
false
;
mAccessKeyDownCanceled
=
false
;
if
(
!
Destroyed
(
)
&
&
mMenuBarFrame
-
>
IsActive
(
)
)
{
nativeKeyEvent
-
>
StopPropagation
(
)
;
nativeKeyEvent
-
>
PreventDefault
(
)
;
}
return
NS_OK
;
}
nsresult
nsMenuBarListener
:
:
KeyPress
(
Event
*
aKeyEvent
)
{
if
(
!
aKeyEvent
|
|
aKeyEvent
-
>
DefaultPrevented
(
)
)
{
return
NS_OK
;
}
if
(
!
aKeyEvent
-
>
IsTrusted
(
)
)
{
return
NS_OK
;
}
auto
accessKey
=
LookAndFeel
:
:
GetMenuAccessKey
(
)
;
if
(
!
accessKey
)
{
return
NS_OK
;
}
WidgetKeyboardEvent
*
nativeKeyEvent
=
aKeyEvent
-
>
WidgetEventPtr
(
)
-
>
AsKeyboardEvent
(
)
;
if
(
!
nativeKeyEvent
)
{
return
NS_OK
;
}
RefPtr
<
KeyboardEvent
>
keyEvent
=
aKeyEvent
-
>
AsKeyboardEvent
(
)
;
uint32_t
keyCode
=
keyEvent
-
>
KeyCode
(
)
;
if
(
keyCode
!
=
accessKey
)
{
mAccessKeyDownCanceled
=
true
;
}
#
ifndef
XP_MACOSX
if
(
nativeKeyEvent
-
>
mMessage
=
=
eKeyPress
&
&
keyCode
=
=
NS_VK_F10
)
{
if
(
(
keyEvent
-
>
GetModifiersForMenuAccessKey
(
)
&
~
MODIFIER_CONTROL
)
=
=
0
)
{
if
(
nativeKeyEvent
-
>
WillBeSentToRemoteProcess
(
)
)
{
nativeKeyEvent
-
>
StopImmediatePropagation
(
)
;
nativeKeyEvent
-
>
MarkAsWaitingReplyFromRemoteProcess
(
)
;
return
NS_OK
;
}
mMenuBarFrame
-
>
SetActiveByKeyboard
(
)
;
ToggleMenuActiveState
(
)
;
if
(
mMenuBarFrame
-
>
IsActive
(
)
)
{
#
ifdef
MOZ_WIDGET_GTK
RefPtr
child
=
mContent
-
>
GetActiveMenuChild
(
)
;
child
-
>
OpenMenuPopup
(
false
)
;
#
endif
aKeyEvent
-
>
StopPropagation
(
)
;
aKeyEvent
-
>
PreventDefault
(
)
;
}
}
return
NS_OK
;
}
#
endif
RefPtr
menuForKey
=
GetMenuForKeyEvent
(
*
keyEvent
)
;
if
(
!
menuForKey
)
{
#
ifdef
XP_WIN
if
(
mMenuBarFrame
-
>
IsActive
(
)
)
{
if
(
nsCOMPtr
<
nsISound
>
sound
=
do_GetService
(
"
mozilla
.
org
/
sound
;
1
"
)
)
{
sound
-
>
Beep
(
)
;
}
mMenuBarFrame
-
>
SetActive
(
false
)
;
}
#
endif
return
NS_OK
;
}
if
(
nativeKeyEvent
-
>
WillBeSentToRemoteProcess
(
)
)
{
nativeKeyEvent
-
>
StopImmediatePropagation
(
)
;
nativeKeyEvent
-
>
MarkAsWaitingReplyFromRemoteProcess
(
)
;
return
NS_OK
;
}
mMenuBarFrame
-
>
SetActiveByKeyboard
(
)
;
mMenuBarFrame
-
>
SetActive
(
true
)
;
menuForKey
-
>
OpenMenuPopup
(
true
)
;
mAccessKeyDown
=
mAccessKeyDownCanceled
=
false
;
aKeyEvent
-
>
StopPropagation
(
)
;
aKeyEvent
-
>
PreventDefault
(
)
;
return
NS_OK
;
}
dom
:
:
XULButtonElement
*
nsMenuBarListener
:
:
GetMenuForKeyEvent
(
KeyboardEvent
&
aKeyEvent
)
{
if
(
!
aKeyEvent
.
IsMenuAccessKeyPressed
(
)
)
{
return
nullptr
;
}
uint32_t
charCode
=
aKeyEvent
.
CharCode
(
)
;
bool
hasAccessKeyCandidates
=
charCode
!
=
0
;
if
(
!
hasAccessKeyCandidates
)
{
WidgetKeyboardEvent
*
nativeKeyEvent
=
aKeyEvent
.
WidgetEventPtr
(
)
-
>
AsKeyboardEvent
(
)
;
AutoTArray
<
uint32_t
10
>
keys
;
nativeKeyEvent
-
>
GetAccessKeyCandidates
(
keys
)
;
hasAccessKeyCandidates
=
!
keys
.
IsEmpty
(
)
;
}
if
(
!
hasAccessKeyCandidates
)
{
return
nullptr
;
}
return
mMenuBarFrame
-
>
MenubarElement
(
)
.
FindMenuWithShortcut
(
aKeyEvent
)
;
}
void
nsMenuBarListener
:
:
ReserveKeyIfNeeded
(
Event
*
aKeyEvent
)
{
WidgetKeyboardEvent
*
nativeKeyEvent
=
aKeyEvent
-
>
WidgetEventPtr
(
)
-
>
AsKeyboardEvent
(
)
;
if
(
nsContentUtils
:
:
ShouldBlockReservedKeys
(
nativeKeyEvent
)
)
{
nativeKeyEvent
-
>
MarkAsReservedByChrome
(
)
;
}
}
nsresult
nsMenuBarListener
:
:
KeyDown
(
Event
*
aKeyEvent
)
{
if
(
!
aKeyEvent
|
|
!
aKeyEvent
-
>
IsTrusted
(
)
)
{
return
NS_OK
;
}
RefPtr
<
KeyboardEvent
>
keyEvent
=
aKeyEvent
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
)
{
return
NS_OK
;
}
uint32_t
theChar
=
keyEvent
-
>
KeyCode
(
)
;
uint16_t
eventPhase
=
keyEvent
-
>
EventPhase
(
)
;
bool
capturing
=
(
eventPhase
=
=
dom
:
:
Event_Binding
:
:
CAPTURING_PHASE
)
;
#
ifndef
XP_MACOSX
if
(
capturing
&
&
!
mAccessKeyDown
&
&
theChar
=
=
NS_VK_F10
&
&
(
keyEvent
-
>
GetModifiersForMenuAccessKey
(
)
&
~
MODIFIER_CONTROL
)
=
=
0
)
{
ReserveKeyIfNeeded
(
aKeyEvent
)
;
}
#
endif
const
auto
accessKey
=
LookAndFeel
:
:
GetMenuAccessKey
(
)
;
if
(
accessKey
&
&
StaticPrefs
:
:
ui_key_menuAccessKeyFocuses
(
)
)
{
bool
defaultPrevented
=
aKeyEvent
-
>
DefaultPrevented
(
)
;
bool
isAccessKeyDownEvent
=
theChar
=
=
accessKey
&
&
(
keyEvent
-
>
GetModifiersForMenuAccessKey
(
)
&
~
LookAndFeel
:
:
GetMenuAccessKeyModifiers
(
)
)
=
=
0
;
if
(
!
capturing
&
&
!
mAccessKeyDown
)
{
if
(
!
isAccessKeyDownEvent
)
{
return
NS_OK
;
}
mAccessKeyDown
=
true
;
mAccessKeyDownCanceled
=
defaultPrevented
;
return
NS_OK
;
}
if
(
mAccessKeyDownCanceled
|
|
defaultPrevented
)
{
return
NS_OK
;
}
mAccessKeyDownCanceled
=
!
isAccessKeyDownEvent
;
}
if
(
capturing
&
&
LookAndFeel
:
:
GetMenuAccessKey
(
)
)
{
if
(
GetMenuForKeyEvent
(
*
keyEvent
)
)
{
ReserveKeyIfNeeded
(
aKeyEvent
)
;
}
}
return
NS_OK
;
}
nsresult
nsMenuBarListener
:
:
Blur
(
Event
*
aEvent
)
{
if
(
!
IsMenuOpen
(
)
&
&
mMenuBarFrame
-
>
IsActive
(
)
)
{
ToggleMenuActiveState
(
)
;
mAccessKeyDown
=
false
;
mAccessKeyDownCanceled
=
false
;
}
return
NS_OK
;
}
nsresult
nsMenuBarListener
:
:
OnWindowDeactivated
(
Event
*
aEvent
)
{
mAccessKeyDown
=
false
;
mAccessKeyDownCanceled
=
false
;
return
NS_OK
;
}
bool
nsMenuBarListener
:
:
IsMenuOpen
(
)
const
{
auto
*
activeChild
=
mContent
-
>
GetActiveMenuChild
(
)
;
return
activeChild
&
&
activeChild
-
>
IsMenuPopupOpen
(
)
;
}
nsresult
nsMenuBarListener
:
:
MouseDown
(
Event
*
aMouseEvent
)
{
if
(
mAccessKeyDown
)
{
mAccessKeyDownCanceled
=
true
;
}
if
(
aMouseEvent
-
>
EventPhase
(
)
=
=
dom
:
:
Event_Binding
:
:
CAPTURING_PHASE
)
{
return
NS_OK
;
}
if
(
!
IsMenuOpen
(
)
&
&
mMenuBarFrame
-
>
IsActive
(
)
)
{
ToggleMenuActiveState
(
)
;
}
return
NS_OK
;
}
nsresult
nsMenuBarListener
:
:
Fullscreen
(
Event
*
aEvent
)
{
if
(
mMenuBarFrame
-
>
IsActive
(
)
)
{
ToggleMenuActiveState
(
)
;
}
return
NS_OK
;
}
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
nsMenuBarListener
:
:
HandleEvent
(
Event
*
aEvent
)
{
if
(
!
mMenuBarFrame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
)
{
return
NS_OK
;
}
nsAutoString
eventType
;
aEvent
-
>
GetType
(
eventType
)
;
if
(
eventType
.
EqualsLiteral
(
"
keyup
"
)
)
{
return
KeyUp
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
keydown
"
)
)
{
return
KeyDown
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
keypress
"
)
)
{
return
KeyPress
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
mozaccesskeynotfound
"
)
)
{
return
KeyPress
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
blur
"
)
)
{
return
Blur
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
deactivate
"
)
)
{
return
OnWindowDeactivated
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
mousedown
"
)
)
{
return
MouseDown
(
aEvent
)
;
}
if
(
eventType
.
EqualsLiteral
(
"
MozDOMFullscreen
:
Entered
"
)
)
{
return
Fullscreen
(
aEvent
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
eventType
"
)
;
return
NS_OK
;
}
