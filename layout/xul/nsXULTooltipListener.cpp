#
include
"
nsXULTooltipListener
.
h
"
#
include
"
nsXULElement
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsMenuPopupFrame
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsIDragService
.
h
"
#
include
"
nsIDragSession
.
h
"
#
ifdef
MOZ_XUL
#
include
"
nsITreeView
.
h
"
#
endif
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
ifdef
MOZ_XUL
#
include
"
nsXULPopupManager
.
h
"
#
endif
#
include
"
nsIPopupContainer
.
h
"
#
include
"
nsIBoxObject
.
h
"
#
include
"
nsTreeColumns
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
BoxObject
.
h
"
#
include
"
mozilla
/
dom
/
MouseEvent
.
h
"
#
include
"
mozilla
/
dom
/
TreeColumnBinding
.
h
"
#
include
"
mozilla
/
TextEvents
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsXULTooltipListener
*
nsXULTooltipListener
:
:
sInstance
=
nullptr
;
nsXULTooltipListener
:
:
nsXULTooltipListener
(
)
:
mMouseScreenX
(
0
)
mMouseScreenY
(
0
)
mTooltipShownOnce
(
false
)
#
ifdef
MOZ_XUL
mIsSourceTree
(
false
)
mNeedTitletip
(
false
)
mLastTreeRow
(
-
1
)
#
endif
{
Preferences
:
:
RegisterCallback
(
ToolbarTipsPrefChanged
"
browser
.
chrome
.
toolbar_tips
"
)
;
ToolbarTipsPrefChanged
(
"
browser
.
chrome
.
toolbar_tips
"
nullptr
)
;
}
nsXULTooltipListener
:
:
~
nsXULTooltipListener
(
)
{
MOZ_ASSERT
(
sInstance
=
=
this
)
;
sInstance
=
nullptr
;
HideTooltip
(
)
;
Preferences
:
:
UnregisterCallback
(
ToolbarTipsPrefChanged
"
browser
.
chrome
.
toolbar_tips
"
)
;
}
NS_IMPL_ISUPPORTS
(
nsXULTooltipListener
nsIDOMEventListener
)
void
nsXULTooltipListener
:
:
MouseOut
(
Event
*
aEvent
)
{
mTooltipShownOnce
=
false
;
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
mTooltipTimer
&
&
!
currentTooltip
)
{
mTooltipTimer
-
>
Cancel
(
)
;
mTooltipTimer
=
nullptr
;
return
;
}
#
ifdef
DEBUG_crap
if
(
mNeedTitletip
)
return
;
#
endif
#
ifdef
MOZ_XUL
if
(
currentTooltip
)
{
EventTarget
*
eventTarget
=
aEvent
-
>
GetComposedTarget
(
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
eventTarget
)
;
if
(
content
&
&
!
content
-
>
GetContainingShadow
(
)
)
{
eventTarget
=
aEvent
-
>
GetTarget
(
)
;
}
nsCOMPtr
<
nsINode
>
targetNode
=
do_QueryInterface
(
eventTarget
)
;
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsCOMPtr
<
nsINode
>
tooltipNode
=
pm
-
>
GetLastTriggerTooltipNode
(
currentTooltip
-
>
GetComposedDoc
(
)
)
;
if
(
tooltipNode
=
=
targetNode
)
{
HideTooltip
(
)
;
if
(
mIsSourceTree
)
{
mLastTreeRow
=
-
1
;
mLastTreeCol
=
nullptr
;
}
}
}
}
#
endif
}
void
nsXULTooltipListener
:
:
MouseMove
(
Event
*
aEvent
)
{
if
(
!
sShowTooltips
)
return
;
MouseEvent
*
mouseEvent
=
aEvent
-
>
AsMouseEvent
(
)
;
if
(
!
mouseEvent
)
{
return
;
}
int32_t
newMouseX
=
mouseEvent
-
>
ScreenX
(
CallerType
:
:
System
)
;
int32_t
newMouseY
=
mouseEvent
-
>
ScreenY
(
CallerType
:
:
System
)
;
if
(
mMouseScreenX
=
=
newMouseX
&
&
mMouseScreenY
=
=
newMouseY
)
return
;
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
(
currentTooltip
)
&
&
(
abs
(
mMouseScreenX
-
newMouseX
)
<
=
kTooltipMouseMoveTolerance
)
&
&
(
abs
(
mMouseScreenY
-
newMouseY
)
<
=
kTooltipMouseMoveTolerance
)
)
return
;
mMouseScreenX
=
newMouseX
;
mMouseScreenY
=
newMouseY
;
nsCOMPtr
<
nsIContent
>
sourceContent
=
do_QueryInterface
(
aEvent
-
>
GetCurrentTarget
(
)
)
;
mSourceNode
=
do_GetWeakReference
(
sourceContent
)
;
#
ifdef
MOZ_XUL
mIsSourceTree
=
sourceContent
-
>
IsXULElement
(
nsGkAtoms
:
:
treechildren
)
;
if
(
mIsSourceTree
)
CheckTreeBodyMove
(
mouseEvent
)
;
#
endif
KillTooltipTimer
(
)
;
if
(
!
currentTooltip
&
&
!
mTooltipShownOnce
)
{
nsCOMPtr
<
EventTarget
>
eventTarget
=
aEvent
-
>
GetComposedTarget
(
)
;
nsCOMPtr
<
nsIContent
>
content
=
do_QueryInterface
(
eventTarget
)
;
if
(
content
&
&
!
content
-
>
GetContainingShadow
(
)
)
{
eventTarget
=
aEvent
-
>
GetTarget
(
)
;
}
if
(
!
sourceContent
-
>
IsElement
(
)
|
|
!
sourceContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
popupsinherittooltip
nsGkAtoms
:
:
_true
eCaseMatters
)
)
{
nsCOMPtr
<
nsIContent
>
targetContent
=
do_QueryInterface
(
eventTarget
)
;
while
(
targetContent
&
&
targetContent
!
=
sourceContent
)
{
if
(
targetContent
-
>
IsAnyOfXULElements
(
nsGkAtoms
:
:
menupopup
nsGkAtoms
:
:
panel
nsGkAtoms
:
:
tooltip
)
)
{
mSourceNode
=
nullptr
;
return
;
}
targetContent
=
targetContent
-
>
GetParent
(
)
;
}
}
mTargetNode
=
do_GetWeakReference
(
eventTarget
)
;
if
(
mTargetNode
)
{
nsresult
rv
=
NS_NewTimerWithFuncCallback
(
getter_AddRefs
(
mTooltipTimer
)
sTooltipCallback
this
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_TooltipDelay
500
)
nsITimer
:
:
TYPE_ONE_SHOT
"
sTooltipCallback
"
sourceContent
-
>
OwnerDoc
(
)
-
>
EventTargetFor
(
TaskCategory
:
:
Other
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
mTargetNode
=
nullptr
;
mSourceNode
=
nullptr
;
}
}
return
;
}
#
ifdef
MOZ_XUL
if
(
mIsSourceTree
)
return
;
#
endif
HideTooltip
(
)
;
mTooltipShownOnce
=
true
;
}
NS_IMETHODIMP
nsXULTooltipListener
:
:
HandleEvent
(
Event
*
aEvent
)
{
nsAutoString
type
;
aEvent
-
>
GetType
(
type
)
;
if
(
type
.
EqualsLiteral
(
"
DOMMouseScroll
"
)
|
|
type
.
EqualsLiteral
(
"
mousedown
"
)
|
|
type
.
EqualsLiteral
(
"
mouseup
"
)
|
|
type
.
EqualsLiteral
(
"
dragstart
"
)
)
{
HideTooltip
(
)
;
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
keydown
"
)
)
{
WidgetKeyboardEvent
*
keyEvent
=
aEvent
-
>
WidgetEventPtr
(
)
-
>
AsKeyboardEvent
(
)
;
if
(
!
keyEvent
-
>
IsModifierKeyEvent
(
)
)
{
HideTooltip
(
)
;
}
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
popuphiding
"
)
)
{
DestroyTooltip
(
)
;
return
NS_OK
;
}
nsCOMPtr
<
nsIDragService
>
dragService
=
do_GetService
(
"
mozilla
.
org
/
widget
/
dragservice
;
1
"
)
;
NS_ENSURE_TRUE
(
dragService
NS_OK
)
;
nsCOMPtr
<
nsIDragSession
>
dragSession
;
dragService
-
>
GetCurrentSession
(
getter_AddRefs
(
dragSession
)
)
;
if
(
dragSession
)
{
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
mousemove
"
)
)
{
MouseMove
(
aEvent
)
;
return
NS_OK
;
}
if
(
type
.
EqualsLiteral
(
"
mouseout
"
)
)
{
MouseOut
(
aEvent
)
;
return
NS_OK
;
}
return
NS_OK
;
}
void
nsXULTooltipListener
:
:
ToolbarTipsPrefChanged
(
const
char
*
aPref
void
*
aClosure
)
{
sShowTooltips
=
Preferences
:
:
GetBool
(
"
browser
.
chrome
.
toolbar_tips
"
sShowTooltips
)
;
}
bool
nsXULTooltipListener
:
:
sShowTooltips
=
false
;
void
nsXULTooltipListener
:
:
AddTooltipSupport
(
nsIContent
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
MOZ_ASSERT
(
this
=
=
sInstance
)
;
aNode
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseout
"
)
this
false
false
)
;
aNode
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mousemove
"
)
this
false
false
)
;
aNode
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mousedown
"
)
this
false
false
)
;
aNode
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseup
"
)
this
false
false
)
;
aNode
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
dragstart
"
)
this
true
false
)
;
}
void
nsXULTooltipListener
:
:
RemoveTooltipSupport
(
nsIContent
*
aNode
)
{
MOZ_ASSERT
(
aNode
)
;
MOZ_ASSERT
(
this
=
=
sInstance
)
;
RefPtr
<
nsXULTooltipListener
>
instance
=
this
;
aNode
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseout
"
)
this
false
)
;
aNode
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mousemove
"
)
this
false
)
;
aNode
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mousedown
"
)
this
false
)
;
aNode
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseup
"
)
this
false
)
;
aNode
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
dragstart
"
)
this
true
)
;
}
#
ifdef
MOZ_XUL
void
nsXULTooltipListener
:
:
CheckTreeBodyMove
(
MouseEvent
*
aMouseEvent
)
{
nsCOMPtr
<
nsIContent
>
sourceNode
=
do_QueryReferent
(
mSourceNode
)
;
if
(
!
sourceNode
)
return
;
nsCOMPtr
<
nsIBoxObject
>
bx
;
nsIDocument
*
doc
=
sourceNode
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
ErrorResult
ignored
;
bx
=
doc
-
>
GetBoxObjectFor
(
doc
-
>
GetRootElement
(
)
ignored
)
;
}
nsCOMPtr
<
nsITreeBoxObject
>
obx
;
GetSourceTreeBoxObject
(
getter_AddRefs
(
obx
)
)
;
if
(
bx
&
&
obx
)
{
int32_t
x
=
aMouseEvent
-
>
ScreenX
(
CallerType
:
:
System
)
;
int32_t
y
=
aMouseEvent
-
>
ScreenY
(
CallerType
:
:
System
)
;
int32_t
row
;
RefPtr
<
nsTreeColumn
>
col
;
nsAutoString
obj
;
int32_t
boxX
boxY
;
bx
-
>
GetScreenX
(
&
boxX
)
;
bx
-
>
GetScreenY
(
&
boxY
)
;
x
-
=
boxX
;
y
-
=
boxY
;
obx
-
>
GetCellAt
(
x
y
&
row
getter_AddRefs
(
col
)
obj
)
;
mNeedTitletip
=
false
;
int16_t
colType
=
-
1
;
if
(
col
)
{
colType
=
col
-
>
Type
(
)
;
}
if
(
row
>
=
0
&
&
obj
.
EqualsLiteral
(
"
text
"
)
&
&
colType
!
=
TreeColumn_Binding
:
:
TYPE_PASSWORD
)
{
obx
-
>
IsCellCropped
(
row
col
&
mNeedTitletip
)
;
}
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
currentTooltip
&
&
(
row
!
=
mLastTreeRow
|
|
col
!
=
mLastTreeCol
)
)
{
HideTooltip
(
)
;
}
mLastTreeRow
=
row
;
mLastTreeCol
=
col
;
}
}
#
endif
nsresult
nsXULTooltipListener
:
:
ShowTooltip
(
)
{
nsCOMPtr
<
nsIContent
>
sourceNode
=
do_QueryReferent
(
mSourceNode
)
;
nsCOMPtr
<
nsIContent
>
tooltipNode
;
GetTooltipFor
(
sourceNode
getter_AddRefs
(
tooltipNode
)
)
;
if
(
!
tooltipNode
|
|
sourceNode
=
=
tooltipNode
)
return
NS_ERROR_FAILURE
;
if
(
tooltipNode
-
>
GetComposedDoc
(
)
&
&
nsContentUtils
:
:
IsChromeDoc
(
tooltipNode
-
>
GetComposedDoc
(
)
)
)
{
if
(
sourceNode
-
>
IsInComposedDoc
(
)
)
{
#
ifdef
MOZ_XUL
if
(
!
mIsSourceTree
)
{
mLastTreeRow
=
-
1
;
mLastTreeCol
=
nullptr
;
}
#
endif
mCurrentTooltip
=
do_GetWeakReference
(
tooltipNode
)
;
LaunchTooltip
(
)
;
mTargetNode
=
nullptr
;
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
!
currentTooltip
)
return
NS_OK
;
currentTooltip
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
popuphiding
"
)
this
false
false
)
;
nsIDocument
*
doc
=
sourceNode
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
doc
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
DOMMouseScroll
"
)
this
true
)
;
doc
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mousedown
"
)
this
true
)
;
doc
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseup
"
)
this
true
)
;
#
ifndef
XP_WIN
doc
-
>
AddSystemEventListener
(
NS_LITERAL_STRING
(
"
keydown
"
)
this
true
)
;
#
endif
}
mSourceNode
=
nullptr
;
}
}
return
NS_OK
;
}
#
ifdef
MOZ_XUL
#
ifdef
DEBUG_crap
static
void
GetTreeCellCoords
(
nsITreeBoxObject
*
aTreeBox
nsIContent
*
aSourceNode
int32_t
aRow
nsTreeColumn
*
aCol
int32_t
*
aX
int32_t
*
aY
)
{
int32_t
junk
;
aTreeBox
-
>
GetCoordsForCellItem
(
aRow
aCol
EmptyCString
(
)
aX
aY
&
junk
&
junk
)
;
RefPtr
<
nsXULElement
>
xulEl
=
nsXULElement
:
:
FromNode
(
aSourceNode
)
;
nsCOMPtr
<
nsIBoxObject
>
bx
=
xulEl
-
>
GetBoxObject
(
IgnoreErrors
(
)
)
;
int32_t
myX
myY
;
bx
-
>
GetX
(
&
myX
)
;
bx
-
>
GetY
(
&
myY
)
;
*
aX
+
=
myX
;
*
aY
+
=
myY
;
}
#
endif
static
void
SetTitletipLabel
(
nsITreeBoxObject
*
aTreeBox
Element
*
aTooltip
int32_t
aRow
nsTreeColumn
*
aCol
)
{
nsCOMPtr
<
nsITreeView
>
view
;
aTreeBox
-
>
GetView
(
getter_AddRefs
(
view
)
)
;
if
(
view
)
{
nsAutoString
label
;
#
ifdef
DEBUG
nsresult
rv
=
#
endif
view
-
>
GetCellText
(
aRow
aCol
label
)
;
NS_WARNING_ASSERTION
(
NS_SUCCEEDED
(
rv
)
"
Couldn
'
t
get
the
cell
text
!
"
)
;
aTooltip
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
label
label
true
)
;
}
}
#
endif
void
nsXULTooltipListener
:
:
LaunchTooltip
(
)
{
nsCOMPtr
<
Element
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
!
currentTooltip
)
return
;
#
ifdef
MOZ_XUL
if
(
mIsSourceTree
&
&
mNeedTitletip
)
{
nsCOMPtr
<
nsITreeBoxObject
>
obx
;
GetSourceTreeBoxObject
(
getter_AddRefs
(
obx
)
)
;
SetTitletipLabel
(
obx
currentTooltip
mLastTreeRow
mLastTreeCol
)
;
if
(
!
(
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
)
)
{
return
;
}
currentTooltip
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
titletip
NS_LITERAL_STRING
(
"
true
"
)
true
)
;
}
else
{
currentTooltip
-
>
UnsetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
titletip
true
)
;
}
if
(
!
(
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
)
)
{
return
;
}
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
{
nsCOMPtr
<
nsIContent
>
target
=
do_QueryReferent
(
mTargetNode
)
;
pm
-
>
ShowTooltipAtScreen
(
currentTooltip
target
mMouseScreenX
mMouseScreenY
)
;
if
(
!
pm
-
>
IsPopupOpen
(
currentTooltip
)
)
mCurrentTooltip
=
nullptr
;
}
#
endif
}
nsresult
nsXULTooltipListener
:
:
HideTooltip
(
)
{
#
ifdef
MOZ_XUL
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
currentTooltip
)
{
nsXULPopupManager
*
pm
=
nsXULPopupManager
:
:
GetInstance
(
)
;
if
(
pm
)
pm
-
>
HidePopup
(
currentTooltip
false
false
false
false
)
;
}
#
endif
DestroyTooltip
(
)
;
return
NS_OK
;
}
static
void
GetImmediateChild
(
nsIContent
*
aContent
nsAtom
*
aTag
nsIContent
*
*
aResult
)
{
*
aResult
=
nullptr
;
for
(
nsCOMPtr
<
nsIContent
>
childContent
=
aContent
-
>
GetFirstChild
(
)
;
childContent
;
childContent
=
childContent
-
>
GetNextSibling
(
)
)
{
if
(
childContent
-
>
IsXULElement
(
aTag
)
)
{
childContent
.
forget
(
aResult
)
;
return
;
}
}
}
nsresult
nsXULTooltipListener
:
:
FindTooltip
(
nsIContent
*
aTarget
nsIContent
*
*
aTooltip
)
{
if
(
!
aTarget
)
return
NS_ERROR_NULL_POINTER
;
nsIDocument
*
document
=
aTarget
-
>
GetComposedDoc
(
)
;
if
(
!
document
)
{
NS_WARNING
(
"
Unable
to
retrieve
the
tooltip
node
document
.
"
)
;
return
NS_ERROR_FAILURE
;
}
nsPIDOMWindowOuter
*
window
=
document
-
>
GetWindow
(
)
;
if
(
!
window
)
{
return
NS_OK
;
}
if
(
window
-
>
Closed
(
)
)
{
return
NS_OK
;
}
if
(
!
document
-
>
IsXULDocument
(
)
)
{
nsIPopupContainer
*
popupContainer
=
nsIPopupContainer
:
:
GetPopupContainer
(
document
-
>
GetShell
(
)
)
;
NS_ENSURE_STATE
(
popupContainer
)
;
if
(
RefPtr
<
Element
>
tooltip
=
popupContainer
-
>
GetDefaultTooltip
(
)
)
{
tooltip
.
forget
(
aTooltip
)
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
nsAutoString
tooltipText
;
if
(
aTarget
-
>
IsElement
(
)
)
{
aTarget
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
tooltiptext
tooltipText
)
;
}
if
(
!
tooltipText
.
IsEmpty
(
)
)
{
nsIPopupContainer
*
popupContainer
=
nsIPopupContainer
:
:
GetPopupContainer
(
document
-
>
GetShell
(
)
)
;
NS_ENSURE_STATE
(
popupContainer
)
;
if
(
RefPtr
<
Element
>
tooltip
=
popupContainer
-
>
GetDefaultTooltip
(
)
)
{
tooltip
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
label
tooltipText
true
)
;
tooltip
.
forget
(
aTooltip
)
;
}
return
NS_OK
;
}
nsAutoString
tooltipId
;
if
(
aTarget
-
>
IsElement
(
)
)
{
aTarget
-
>
AsElement
(
)
-
>
GetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
tooltip
tooltipId
)
;
}
if
(
tooltipId
.
EqualsLiteral
(
"
_child
"
)
)
{
GetImmediateChild
(
aTarget
nsGkAtoms
:
:
tooltip
aTooltip
)
;
return
NS_OK
;
}
if
(
!
tooltipId
.
IsEmpty
(
)
)
{
DocumentOrShadowRoot
*
documentOrShadowRoot
=
aTarget
-
>
GetUncomposedDocOrConnectedShadowRoot
(
)
;
if
(
documentOrShadowRoot
)
{
nsCOMPtr
<
nsIContent
>
tooltipEl
=
documentOrShadowRoot
-
>
GetElementById
(
tooltipId
)
;
if
(
tooltipEl
)
{
#
ifdef
MOZ_XUL
mNeedTitletip
=
false
;
#
endif
tooltipEl
.
forget
(
aTooltip
)
;
return
NS_OK
;
}
}
}
#
ifdef
MOZ_XUL
if
(
mIsSourceTree
&
&
mNeedTitletip
)
{
nsIPopupContainer
*
popupContainer
=
nsIPopupContainer
:
:
GetPopupContainer
(
document
-
>
GetShell
(
)
)
;
NS_ENSURE_STATE
(
popupContainer
)
;
NS_IF_ADDREF
(
*
aTooltip
=
popupContainer
-
>
GetDefaultTooltip
(
)
)
;
}
#
endif
return
NS_OK
;
}
nsresult
nsXULTooltipListener
:
:
GetTooltipFor
(
nsIContent
*
aTarget
nsIContent
*
*
aTooltip
)
{
*
aTooltip
=
nullptr
;
nsCOMPtr
<
nsIContent
>
tooltip
;
nsresult
rv
=
FindTooltip
(
aTarget
getter_AddRefs
(
tooltip
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
tooltip
)
{
return
rv
;
}
#
ifdef
MOZ_XUL
nsIContent
*
parent
=
tooltip
-
>
GetParent
(
)
;
if
(
parent
)
{
nsMenuFrame
*
menu
=
do_QueryFrame
(
parent
-
>
GetPrimaryFrame
(
)
)
;
if
(
menu
)
{
NS_WARNING
(
"
Menu
cannot
be
used
as
a
tooltip
"
)
;
return
NS_ERROR_FAILURE
;
}
}
#
endif
tooltip
.
swap
(
*
aTooltip
)
;
return
rv
;
}
nsresult
nsXULTooltipListener
:
:
DestroyTooltip
(
)
{
nsCOMPtr
<
nsIDOMEventListener
>
kungFuDeathGrip
(
this
)
;
nsCOMPtr
<
nsIContent
>
currentTooltip
=
do_QueryReferent
(
mCurrentTooltip
)
;
if
(
currentTooltip
)
{
mCurrentTooltip
=
nullptr
;
nsCOMPtr
<
nsIDocument
>
doc
=
currentTooltip
-
>
GetComposedDoc
(
)
;
if
(
doc
)
{
doc
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
DOMMouseScroll
"
)
this
true
)
;
doc
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mousedown
"
)
this
true
)
;
doc
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
mouseup
"
)
this
true
)
;
#
ifndef
XP_WIN
doc
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
keydown
"
)
this
true
)
;
#
endif
}
currentTooltip
-
>
RemoveSystemEventListener
(
NS_LITERAL_STRING
(
"
popuphiding
"
)
this
false
)
;
}
KillTooltipTimer
(
)
;
mSourceNode
=
nullptr
;
#
ifdef
MOZ_XUL
mLastTreeCol
=
nullptr
;
#
endif
return
NS_OK
;
}
void
nsXULTooltipListener
:
:
KillTooltipTimer
(
)
{
if
(
mTooltipTimer
)
{
mTooltipTimer
-
>
Cancel
(
)
;
mTooltipTimer
=
nullptr
;
mTargetNode
=
nullptr
;
}
}
void
nsXULTooltipListener
:
:
sTooltipCallback
(
nsITimer
*
aTimer
void
*
aListener
)
{
RefPtr
<
nsXULTooltipListener
>
instance
=
sInstance
;
if
(
instance
)
instance
-
>
ShowTooltip
(
)
;
}
#
ifdef
MOZ_XUL
nsresult
nsXULTooltipListener
:
:
GetSourceTreeBoxObject
(
nsITreeBoxObject
*
*
aBoxObject
)
{
*
aBoxObject
=
nullptr
;
nsCOMPtr
<
nsIContent
>
sourceNode
=
do_QueryReferent
(
mSourceNode
)
;
if
(
mIsSourceTree
&
&
sourceNode
)
{
RefPtr
<
nsXULElement
>
xulEl
=
nsXULElement
:
:
FromNodeOrNull
(
sourceNode
-
>
GetParent
(
)
)
;
if
(
xulEl
)
{
nsCOMPtr
<
nsIBoxObject
>
bx
=
xulEl
-
>
GetBoxObject
(
IgnoreErrors
(
)
)
;
nsCOMPtr
<
nsITreeBoxObject
>
obx
(
do_QueryInterface
(
bx
)
)
;
if
(
obx
)
{
*
aBoxObject
=
obx
;
NS_ADDREF
(
*
aBoxObject
)
;
return
NS_OK
;
}
}
}
return
NS_ERROR_FAILURE
;
}
#
endif
