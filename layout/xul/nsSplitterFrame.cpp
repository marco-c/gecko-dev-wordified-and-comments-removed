#
include
"
gfxContext
.
h
"
#
include
"
nsSplitterFrame
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsXULElement
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsScrollbarButtonFrame
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
nsFrameList
.
h
"
#
include
"
nsHTMLParts
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
CSSOrderAwareFrameIterator
.
h
"
#
include
"
nsBoxLayoutState
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsFlexContainerFrame
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
Event
.
h
"
#
include
"
mozilla
/
dom
/
MouseEvent
.
h
"
#
include
"
mozilla
/
MouseEvents
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsStyledElement
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
dom
:
:
Event
;
class
nsSplitterInfo
{
public
:
nscoord
min
;
nscoord
max
;
nscoord
current
;
nscoord
changed
;
nsCOMPtr
<
nsIContent
>
childElem
;
}
;
class
nsSplitterFrameInner
final
:
public
nsIDOMEventListener
{
protected
:
virtual
~
nsSplitterFrameInner
(
)
;
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIDOMEVENTLISTENER
explicit
nsSplitterFrameInner
(
nsSplitterFrame
*
aSplitter
)
:
mOuter
(
aSplitter
)
{
}
void
Disconnect
(
)
{
mOuter
=
nullptr
;
}
nsresult
MouseDown
(
Event
*
aMouseEvent
)
;
nsresult
MouseUp
(
Event
*
aMouseEvent
)
;
nsresult
MouseMove
(
Event
*
aMouseEvent
)
;
void
MouseDrag
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
)
;
void
MouseUp
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
)
;
void
AdjustChildren
(
nsPresContext
*
aPresContext
)
;
void
AdjustChildren
(
nsPresContext
*
aPresContext
nsSplitterInfo
*
aChildInfos
int32_t
aCount
bool
aIsHorizontal
)
;
void
AddRemoveSpace
(
nscoord
aDiff
nsSplitterInfo
*
aChildInfos
int32_t
aCount
int32_t
&
aSpaceLeft
)
;
void
ResizeChildTo
(
nscoord
&
aDiff
nsSplitterInfo
*
aChildrenBeforeInfos
nsSplitterInfo
*
aChildrenAfterInfos
int32_t
aChildrenBeforeCount
int32_t
aChildrenAfterCount
bool
aBounded
)
;
void
UpdateState
(
)
;
void
AddListener
(
)
;
void
RemoveListener
(
)
;
enum
ResizeType
{
Closest
Farthest
Flex
Grow
}
;
enum
class
State
{
Open
CollapsedBefore
CollapsedAfter
Dragging
}
;
enum
CollapseDirection
{
Before
After
}
;
ResizeType
GetResizeBefore
(
)
;
ResizeType
GetResizeAfter
(
)
;
State
GetState
(
)
;
void
Reverse
(
UniquePtr
<
nsSplitterInfo
[
]
>
&
aIndexes
int32_t
aCount
)
;
bool
SupportsCollapseDirection
(
CollapseDirection
aDirection
)
;
void
EnsureOrient
(
)
;
void
SetPreferredSize
(
nsBoxLayoutState
&
aState
nsIFrame
*
aChildBox
bool
aIsHorizontal
nscoord
*
aSize
)
;
nsSplitterFrame
*
mOuter
;
bool
mDidDrag
=
false
;
nscoord
mDragStart
=
0
;
nsIFrame
*
mParentBox
=
nullptr
;
bool
mPressed
=
false
;
UniquePtr
<
nsSplitterInfo
[
]
>
mChildInfosBefore
;
UniquePtr
<
nsSplitterInfo
[
]
>
mChildInfosAfter
;
int32_t
mChildInfosBeforeCount
=
0
;
int32_t
mChildInfosAfterCount
=
0
;
State
mState
=
State
:
:
Open
;
nscoord
mSplitterPos
=
0
;
bool
mDragging
=
false
;
const
Element
*
SplitterElement
(
)
const
{
return
mOuter
-
>
GetContent
(
)
-
>
AsElement
(
)
;
}
}
;
NS_IMPL_ISUPPORTS
(
nsSplitterFrameInner
nsIDOMEventListener
)
nsSplitterFrameInner
:
:
ResizeType
nsSplitterFrameInner
:
:
GetResizeBefore
(
)
{
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
nsGkAtoms
:
:
farthest
nsGkAtoms
:
:
flex
nullptr
}
;
switch
(
SplitterElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
resizebefore
strings
eCaseMatters
)
)
{
case
0
:
return
Farthest
;
case
1
:
return
Flex
;
}
return
Closest
;
}
nsSplitterFrameInner
:
:
~
nsSplitterFrameInner
(
)
=
default
;
nsSplitterFrameInner
:
:
ResizeType
nsSplitterFrameInner
:
:
GetResizeAfter
(
)
{
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
nsGkAtoms
:
:
farthest
nsGkAtoms
:
:
flex
nsGkAtoms
:
:
grow
nullptr
}
;
switch
(
SplitterElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
resizeafter
strings
eCaseMatters
)
)
{
case
0
:
return
Farthest
;
case
1
:
return
Flex
;
case
2
:
return
Grow
;
}
return
Closest
;
}
nsSplitterFrameInner
:
:
State
nsSplitterFrameInner
:
:
GetState
(
)
{
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
nsGkAtoms
:
:
dragging
nsGkAtoms
:
:
collapsed
nullptr
}
;
static
Element
:
:
AttrValuesArray
strings_substate
[
]
=
{
nsGkAtoms
:
:
before
nsGkAtoms
:
:
after
nullptr
}
;
switch
(
SplitterElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
state
strings
eCaseMatters
)
)
{
case
0
:
return
State
:
:
Dragging
;
case
1
:
switch
(
SplitterElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
substate
strings_substate
eCaseMatters
)
)
{
case
0
:
return
State
:
:
CollapsedBefore
;
case
1
:
return
State
:
:
CollapsedAfter
;
default
:
if
(
SupportsCollapseDirection
(
After
)
)
{
return
State
:
:
CollapsedAfter
;
}
return
State
:
:
CollapsedBefore
;
}
}
return
State
:
:
Open
;
}
nsIFrame
*
NS_NewSplitterFrame
(
PresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
return
new
(
aPresShell
)
nsSplitterFrame
(
aStyle
aPresShell
-
>
GetPresContext
(
)
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsSplitterFrame
)
nsSplitterFrame
:
:
nsSplitterFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
:
nsBoxFrame
(
aStyle
aPresContext
kClassID
)
{
}
void
nsSplitterFrame
:
:
DestroyFrom
(
nsIFrame
*
aDestructRoot
PostDestroyData
&
aPostDestroyData
)
{
if
(
mInner
)
{
mInner
-
>
RemoveListener
(
)
;
mInner
-
>
Disconnect
(
)
;
mInner
=
nullptr
;
}
nsBoxFrame
:
:
DestroyFrom
(
aDestructRoot
aPostDestroyData
)
;
}
nsresult
nsSplitterFrame
:
:
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
{
nsresult
rv
=
nsBoxFrame
:
:
AttributeChanged
(
aNameSpaceID
aAttribute
aModType
)
;
if
(
aAttribute
=
=
nsGkAtoms
:
:
state
)
{
mInner
-
>
UpdateState
(
)
;
}
return
rv
;
}
void
nsSplitterFrame
:
:
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
{
MOZ_ASSERT
(
!
mInner
)
;
mInner
=
new
nsSplitterFrameInner
(
this
)
;
nsBoxFrame
:
:
Init
(
aContent
aParent
aPrevInFlow
)
;
mInner
-
>
AddListener
(
)
;
mInner
-
>
mParentBox
=
nullptr
;
}
static
bool
IsValidParentBox
(
nsIFrame
*
aFrame
)
{
return
aFrame
-
>
IsXULBoxFrame
(
)
|
|
aFrame
-
>
IsFlexContainerFrame
(
)
;
}
static
nsIFrame
*
GetValidParentBox
(
nsIFrame
*
aChild
)
{
return
aChild
-
>
GetParent
(
)
&
&
IsValidParentBox
(
aChild
-
>
GetParent
(
)
)
?
aChild
-
>
GetParent
(
)
:
nullptr
;
}
NS_IMETHODIMP
nsSplitterFrame
:
:
DoXULLayout
(
nsBoxLayoutState
&
aState
)
{
if
(
HasAnyStateBits
(
NS_FRAME_FIRST_REFLOW
)
)
{
mInner
-
>
mParentBox
=
GetValidParentBox
(
this
)
;
mInner
-
>
UpdateState
(
)
;
}
return
nsBoxFrame
:
:
DoXULLayout
(
aState
)
;
}
static
bool
SplitterIsHorizontal
(
const
nsIFrame
*
aParentBox
)
{
if
(
aParentBox
-
>
IsXULBoxFrame
(
)
)
{
return
!
aParentBox
-
>
HasAnyStateBits
(
NS_STATE_IS_HORIZONTAL
)
;
}
MOZ_ASSERT
(
aParentBox
-
>
IsFlexContainerFrame
(
)
)
;
const
FlexboxAxisInfo
info
(
aParentBox
)
;
return
!
info
.
mIsRowOriented
;
}
void
nsSplitterFrame
:
:
GetInitialOrientation
(
bool
&
aIsHorizontal
)
{
if
(
nsIFrame
*
parent
=
GetValidParentBox
(
this
)
)
{
aIsHorizontal
=
SplitterIsHorizontal
(
parent
)
;
}
else
{
nsBoxFrame
:
:
GetInitialOrientation
(
aIsHorizontal
)
;
}
}
NS_IMETHODIMP
nsSplitterFrame
:
:
HandlePress
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
return
NS_OK
;
}
NS_IMETHODIMP
nsSplitterFrame
:
:
HandleMultiplePress
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aControlHeld
)
{
return
NS_OK
;
}
NS_IMETHODIMP
nsSplitterFrame
:
:
HandleDrag
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
return
NS_OK
;
}
NS_IMETHODIMP
nsSplitterFrame
:
:
HandleRelease
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
return
NS_OK
;
}
void
nsSplitterFrame
:
:
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
nsBoxFrame
:
:
BuildDisplayList
(
aBuilder
aLists
)
;
if
(
mInner
-
>
mDragging
&
&
aBuilder
-
>
IsForEventDelivery
(
)
)
{
aLists
.
Outlines
(
)
-
>
AppendNewToTop
<
nsDisplayEventReceiver
>
(
aBuilder
this
)
;
return
;
}
}
nsresult
nsSplitterFrame
:
:
HandleEvent
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
{
NS_ENSURE_ARG_POINTER
(
aEventStatus
)
;
if
(
nsEventStatus_eConsumeNoDefault
=
=
*
aEventStatus
)
{
return
NS_OK
;
}
AutoWeakFrame
weakFrame
(
this
)
;
RefPtr
<
nsSplitterFrameInner
>
inner
(
mInner
)
;
switch
(
aEvent
-
>
mMessage
)
{
case
eMouseMove
:
inner
-
>
MouseDrag
(
aPresContext
aEvent
)
;
break
;
case
eMouseUp
:
if
(
aEvent
-
>
AsMouseEvent
(
)
-
>
mButton
=
=
MouseButton
:
:
ePrimary
)
{
inner
-
>
MouseUp
(
aPresContext
aEvent
)
;
}
break
;
default
:
break
;
}
NS_ENSURE_STATE
(
weakFrame
.
IsAlive
(
)
)
;
return
nsBoxFrame
:
:
HandleEvent
(
aPresContext
aEvent
aEventStatus
)
;
}
void
nsSplitterFrameInner
:
:
MouseUp
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
)
{
if
(
mDragging
&
&
mOuter
)
{
AdjustChildren
(
aPresContext
)
;
AddListener
(
)
;
PresShell
:
:
ReleaseCapturingContent
(
)
;
mDragging
=
false
;
State
newState
=
GetState
(
)
;
if
(
newState
=
=
State
:
:
Dragging
)
{
mOuter
-
>
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
state
u
"
"
_ns
true
)
;
}
mPressed
=
false
;
if
(
mDidDrag
)
{
RefPtr
<
nsXULElement
>
element
=
nsXULElement
:
:
FromNode
(
mOuter
-
>
GetContent
(
)
)
;
element
-
>
DoCommand
(
)
;
}
}
mChildInfosBefore
=
nullptr
;
mChildInfosAfter
=
nullptr
;
mChildInfosBeforeCount
=
0
;
mChildInfosAfterCount
=
0
;
}
void
nsSplitterFrameInner
:
:
MouseDrag
(
nsPresContext
*
aPresContext
WidgetGUIEvent
*
aEvent
)
{
if
(
!
mDragging
|
|
!
mOuter
)
{
return
;
}
const
bool
isHorizontal
=
!
mOuter
-
>
IsXULHorizontal
(
)
;
nsPoint
pt
=
nsLayoutUtils
:
:
GetEventCoordinatesRelativeTo
(
aEvent
RelativeTo
{
mParentBox
}
)
;
nscoord
pos
=
isHorizontal
?
pt
.
x
:
pt
.
y
;
pos
-
=
mDragStart
;
ResizeType
resizeAfter
=
GetResizeAfter
(
)
;
const
bool
bounded
=
resizeAfter
!
=
nsSplitterFrameInner
:
:
Grow
;
for
(
int
i
=
0
;
i
<
mChildInfosBeforeCount
;
i
+
+
)
{
mChildInfosBefore
[
i
]
.
changed
=
mChildInfosBefore
[
i
]
.
current
;
}
for
(
int
i
=
0
;
i
<
mChildInfosAfterCount
;
i
+
+
)
{
mChildInfosAfter
[
i
]
.
changed
=
mChildInfosAfter
[
i
]
.
current
;
}
nscoord
oldPos
=
pos
;
ResizeChildTo
(
pos
mChildInfosBefore
.
get
(
)
mChildInfosAfter
.
get
(
)
mChildInfosBeforeCount
mChildInfosAfterCount
bounded
)
;
State
currentState
=
GetState
(
)
;
bool
supportsBefore
=
SupportsCollapseDirection
(
Before
)
;
bool
supportsAfter
=
SupportsCollapseDirection
(
After
)
;
const
bool
isRTL
=
mOuter
-
>
StyleVisibility
(
)
-
>
mDirection
=
=
StyleDirection
:
:
Rtl
;
bool
pastEnd
=
oldPos
>
0
&
&
oldPos
>
pos
;
bool
pastBegin
=
oldPos
<
0
&
&
oldPos
<
pos
;
if
(
isRTL
)
{
std
:
:
swap
(
pastEnd
pastBegin
)
;
}
const
bool
isCollapsedBefore
=
pastBegin
&
&
supportsBefore
;
const
bool
isCollapsedAfter
=
pastEnd
&
&
supportsAfter
;
if
(
isCollapsedBefore
|
|
isCollapsedAfter
)
{
if
(
currentState
=
=
State
:
:
Dragging
)
{
if
(
pastEnd
)
{
if
(
supportsAfter
)
{
RefPtr
<
Element
>
outer
=
mOuter
-
>
mContent
-
>
AsElement
(
)
;
outer
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
substate
u
"
after
"
_ns
true
)
;
outer
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
state
u
"
collapsed
"
_ns
true
)
;
}
}
else
if
(
pastBegin
)
{
if
(
supportsBefore
)
{
RefPtr
<
Element
>
outer
=
mOuter
-
>
mContent
-
>
AsElement
(
)
;
outer
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
substate
u
"
before
"
_ns
true
)
;
outer
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
state
u
"
collapsed
"
_ns
true
)
;
}
}
}
}
else
{
if
(
currentState
!
=
State
:
:
Dragging
)
{
mOuter
-
>
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
state
u
"
dragging
"
_ns
true
)
;
}
AdjustChildren
(
aPresContext
)
;
}
mDidDrag
=
true
;
}
void
nsSplitterFrameInner
:
:
AddListener
(
)
{
mOuter
-
>
GetContent
(
)
-
>
AddEventListener
(
u
"
mouseup
"
_ns
this
false
false
)
;
mOuter
-
>
GetContent
(
)
-
>
AddEventListener
(
u
"
mousedown
"
_ns
this
false
false
)
;
mOuter
-
>
GetContent
(
)
-
>
AddEventListener
(
u
"
mousemove
"
_ns
this
false
false
)
;
mOuter
-
>
GetContent
(
)
-
>
AddEventListener
(
u
"
mouseout
"
_ns
this
false
false
)
;
}
void
nsSplitterFrameInner
:
:
RemoveListener
(
)
{
NS_ENSURE_TRUE_VOID
(
mOuter
)
;
mOuter
-
>
GetContent
(
)
-
>
RemoveEventListener
(
u
"
mouseup
"
_ns
this
false
)
;
mOuter
-
>
GetContent
(
)
-
>
RemoveEventListener
(
u
"
mousedown
"
_ns
this
false
)
;
mOuter
-
>
GetContent
(
)
-
>
RemoveEventListener
(
u
"
mousemove
"
_ns
this
false
)
;
mOuter
-
>
GetContent
(
)
-
>
RemoveEventListener
(
u
"
mouseout
"
_ns
this
false
)
;
}
nsresult
nsSplitterFrameInner
:
:
HandleEvent
(
dom
:
:
Event
*
aEvent
)
{
nsAutoString
eventType
;
aEvent
-
>
GetType
(
eventType
)
;
if
(
eventType
.
EqualsLiteral
(
"
mouseup
"
)
)
return
MouseUp
(
aEvent
)
;
if
(
eventType
.
EqualsLiteral
(
"
mousedown
"
)
)
return
MouseDown
(
aEvent
)
;
if
(
eventType
.
EqualsLiteral
(
"
mousemove
"
)
|
|
eventType
.
EqualsLiteral
(
"
mouseout
"
)
)
return
MouseMove
(
aEvent
)
;
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
eventType
"
)
;
return
NS_OK
;
}
nsresult
nsSplitterFrameInner
:
:
MouseUp
(
Event
*
aMouseEvent
)
{
NS_ENSURE_TRUE
(
mOuter
NS_OK
)
;
mPressed
=
false
;
PresShell
:
:
ReleaseCapturingContent
(
)
;
return
NS_OK
;
}
template
<
typename
LengthLike
>
static
nscoord
ToLengthWithFallback
(
const
LengthLike
&
aLengthLike
nscoord
aFallback
)
{
if
(
aLengthLike
.
ConvertsToLength
(
)
)
{
return
aLengthLike
.
ToLength
(
)
;
}
return
aFallback
;
}
template
<
typename
LengthLike
>
static
nsSize
ToLengthWithFallback
(
const
LengthLike
&
aWidth
const
LengthLike
&
aHeight
nscoord
aFallback
=
0
)
{
return
{
ToLengthWithFallback
(
aWidth
aFallback
)
ToLengthWithFallback
(
aHeight
aFallback
)
}
;
}
nsresult
nsSplitterFrameInner
:
:
MouseDown
(
Event
*
aMouseEvent
)
{
NS_ENSURE_TRUE
(
mOuter
NS_OK
)
;
dom
:
:
MouseEvent
*
mouseEvent
=
aMouseEvent
-
>
AsMouseEvent
(
)
;
if
(
!
mouseEvent
)
{
return
NS_OK
;
}
if
(
mouseEvent
-
>
Button
(
)
!
=
0
)
{
return
NS_OK
;
}
if
(
SplitterElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
disabled
nsGkAtoms
:
:
_true
eCaseMatters
)
)
return
NS_OK
;
mParentBox
=
GetValidParentBox
(
mOuter
)
;
if
(
!
mParentBox
)
{
return
NS_OK
;
}
nsPresContext
*
outerPresContext
=
mOuter
-
>
PresContext
(
)
;
const
int32_t
childCount
=
mParentBox
-
>
PrincipalChildList
(
)
.
GetLength
(
)
;
RefPtr
<
gfxContext
>
rc
=
outerPresContext
-
>
PresShell
(
)
-
>
CreateReferenceRenderingContext
(
)
;
nsBoxLayoutState
state
(
outerPresContext
rc
)
;
mDidDrag
=
false
;
EnsureOrient
(
)
;
bool
isHorizontal
=
!
mOuter
-
>
IsXULHorizontal
(
)
;
ResizeType
resizeBefore
=
GetResizeBefore
(
)
;
ResizeType
resizeAfter
=
GetResizeAfter
(
)
;
mChildInfosBefore
=
MakeUnique
<
nsSplitterInfo
[
]
>
(
childCount
)
;
mChildInfosAfter
=
MakeUnique
<
nsSplitterInfo
[
]
>
(
childCount
)
;
int32_t
count
=
0
;
mChildInfosBeforeCount
=
0
;
mChildInfosAfterCount
=
0
;
bool
foundOuter
=
false
;
CSSOrderAwareFrameIterator
iter
(
mParentBox
layout
:
:
kPrincipalList
CSSOrderAwareFrameIterator
:
:
ChildFilter
:
:
IncludeAll
CSSOrderAwareFrameIterator
:
:
OrderState
:
:
Unknown
CSSOrderAwareFrameIterator
:
:
OrderingProperty
:
:
BoxOrdinalGroup
)
;
for
(
;
!
iter
.
AtEnd
(
)
;
iter
.
Next
(
)
)
{
nsIFrame
*
childBox
=
iter
.
get
(
)
;
if
(
childBox
=
=
mOuter
)
{
foundOuter
=
true
;
if
(
!
count
)
{
return
NS_OK
;
}
if
(
count
=
=
childCount
-
1
&
&
resizeAfter
!
=
Grow
)
{
return
NS_OK
;
}
}
count
+
+
;
nsIContent
*
content
=
childBox
-
>
GetContent
(
)
;
if
(
auto
*
element
=
nsXULElement
:
:
FromNode
(
content
)
)
{
if
(
element
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
splitter
)
{
continue
;
}
if
(
element
-
>
GetXULBoolAttr
(
nsGkAtoms
:
:
fixed
)
|
|
element
-
>
GetXULBoolAttr
(
nsGkAtoms
:
:
hidden
)
)
{
continue
;
}
}
nsSize
minSize
;
nsSize
maxSize
(
NS_UNCONSTRAINEDSIZE
NS_UNCONSTRAINEDSIZE
)
;
const
nscoord
flex
=
childBox
-
>
GetXULFlex
(
)
;
if
(
childBox
-
>
IsXULBoxFrame
(
)
)
{
nsSize
prefSize
=
childBox
-
>
GetXULPrefSize
(
state
)
;
minSize
=
childBox
-
>
GetXULMinSize
(
state
)
;
maxSize
=
nsIFrame
:
:
XULBoundsCheckMinMax
(
minSize
childBox
-
>
GetXULMaxSize
(
state
)
)
;
prefSize
=
nsIFrame
:
:
XULBoundsCheck
(
minSize
prefSize
maxSize
)
;
nsSplitterFrame
:
:
AddXULMargin
(
childBox
minSize
)
;
nsSplitterFrame
:
:
AddXULMargin
(
childBox
prefSize
)
;
nsSplitterFrame
:
:
AddXULMargin
(
childBox
maxSize
)
;
}
else
{
const
auto
&
pos
=
*
childBox
-
>
StylePosition
(
)
;
minSize
=
ToLengthWithFallback
(
pos
.
mMinWidth
pos
.
mMinHeight
)
;
maxSize
=
ToLengthWithFallback
(
pos
.
mMaxWidth
pos
.
mMaxHeight
NS_UNCONSTRAINEDSIZE
)
;
}
nsMargin
margin
;
childBox
-
>
GetXULMargin
(
margin
)
;
nsRect
r
(
childBox
-
>
GetRect
(
)
)
;
r
.
Inflate
(
margin
)
;
if
(
!
foundOuter
&
&
(
resizeBefore
!
=
Flex
|
|
flex
>
0
)
)
{
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
childElem
=
content
;
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
min
=
isHorizontal
?
minSize
.
width
:
minSize
.
height
;
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
max
=
isHorizontal
?
maxSize
.
width
:
maxSize
.
height
;
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
current
=
isHorizontal
?
r
.
width
:
r
.
height
;
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
changed
=
mChildInfosBefore
[
mChildInfosBeforeCount
]
.
current
;
mChildInfosBeforeCount
+
+
;
}
else
if
(
foundOuter
&
&
(
resizeAfter
!
=
Flex
|
|
flex
>
0
)
)
{
mChildInfosAfter
[
mChildInfosAfterCount
]
.
childElem
=
content
;
mChildInfosAfter
[
mChildInfosAfterCount
]
.
min
=
isHorizontal
?
minSize
.
width
:
minSize
.
height
;
mChildInfosAfter
[
mChildInfosAfterCount
]
.
max
=
isHorizontal
?
maxSize
.
width
:
maxSize
.
height
;
mChildInfosAfter
[
mChildInfosAfterCount
]
.
current
=
isHorizontal
?
r
.
width
:
r
.
height
;
mChildInfosAfter
[
mChildInfosAfterCount
]
.
changed
=
mChildInfosAfter
[
mChildInfosAfterCount
]
.
current
;
mChildInfosAfterCount
+
+
;
}
}
if
(
!
foundOuter
)
{
return
NS_OK
;
}
mPressed
=
true
;
const
bool
reverseDirection
=
[
&
]
{
if
(
mParentBox
-
>
IsXULBoxFrame
(
)
)
{
return
!
mParentBox
-
>
IsXULNormalDirection
(
)
;
}
MOZ_ASSERT
(
mParentBox
-
>
IsFlexContainerFrame
(
)
)
;
const
FlexboxAxisInfo
info
(
mParentBox
)
;
if
(
!
info
.
mIsRowOriented
)
{
return
info
.
mIsMainAxisReversed
;
}
const
bool
rtl
=
mParentBox
-
>
StyleVisibility
(
)
-
>
mDirection
=
=
StyleDirection
:
:
Rtl
;
return
info
.
mIsMainAxisReversed
!
=
rtl
;
}
(
)
;
if
(
reverseDirection
)
{
Reverse
(
mChildInfosBefore
mChildInfosBeforeCount
)
;
Reverse
(
mChildInfosAfter
mChildInfosAfterCount
)
;
std
:
:
swap
(
mChildInfosBeforeCount
mChildInfosAfterCount
)
;
std
:
:
swap
(
mChildInfosBefore
mChildInfosAfter
)
;
}
if
(
resizeBefore
!
=
Farthest
)
Reverse
(
mChildInfosBefore
mChildInfosBeforeCount
)
;
if
(
resizeAfter
=
=
Farthest
)
Reverse
(
mChildInfosAfter
mChildInfosAfterCount
)
;
if
(
resizeAfter
=
=
Grow
)
mChildInfosAfterCount
=
0
;
int32_t
c
;
nsPoint
pt
=
nsLayoutUtils
:
:
GetDOMEventCoordinatesRelativeTo
(
mouseEvent
mParentBox
)
;
if
(
isHorizontal
)
{
c
=
pt
.
x
;
mSplitterPos
=
mOuter
-
>
mRect
.
x
;
}
else
{
c
=
pt
.
y
;
mSplitterPos
=
mOuter
-
>
mRect
.
y
;
}
mDragStart
=
c
;
PresShell
:
:
SetCapturingContent
(
mOuter
-
>
GetContent
(
)
CaptureFlags
:
:
IgnoreAllowedState
)
;
return
NS_OK
;
}
nsresult
nsSplitterFrameInner
:
:
MouseMove
(
Event
*
aMouseEvent
)
{
NS_ENSURE_TRUE
(
mOuter
NS_OK
)
;
if
(
!
mPressed
)
{
return
NS_OK
;
}
if
(
mDragging
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIDOMEventListener
>
kungfuDeathGrip
(
this
)
;
mOuter
-
>
mContent
-
>
AsElement
(
)
-
>
SetAttr
(
kNameSpaceID_None
nsGkAtoms
:
:
state
u
"
dragging
"
_ns
true
)
;
RemoveListener
(
)
;
mDragging
=
true
;
return
NS_OK
;
}
void
nsSplitterFrameInner
:
:
Reverse
(
UniquePtr
<
nsSplitterInfo
[
]
>
&
aChildInfos
int32_t
aCount
)
{
UniquePtr
<
nsSplitterInfo
[
]
>
infos
(
new
nsSplitterInfo
[
aCount
]
)
;
for
(
int
i
=
0
;
i
<
aCount
;
i
+
+
)
infos
[
i
]
=
aChildInfos
[
aCount
-
1
-
i
]
;
aChildInfos
=
std
:
:
move
(
infos
)
;
}
bool
nsSplitterFrameInner
:
:
SupportsCollapseDirection
(
nsSplitterFrameInner
:
:
CollapseDirection
aDirection
)
{
static
Element
:
:
AttrValuesArray
strings
[
]
=
{
nsGkAtoms
:
:
before
nsGkAtoms
:
:
after
nsGkAtoms
:
:
both
nullptr
}
;
switch
(
SplitterElement
(
)
-
>
FindAttrValueIn
(
kNameSpaceID_None
nsGkAtoms
:
:
collapse
strings
eCaseMatters
)
)
{
case
0
:
return
(
aDirection
=
=
Before
)
;
case
1
:
return
(
aDirection
=
=
After
)
;
case
2
:
return
true
;
}
return
false
;
}
void
nsSplitterFrameInner
:
:
UpdateState
(
)
{
State
newState
=
GetState
(
)
;
if
(
newState
=
=
mState
)
{
return
;
}
if
(
(
SupportsCollapseDirection
(
Before
)
|
|
SupportsCollapseDirection
(
After
)
)
&
&
IsValidParentBox
(
mOuter
-
>
GetParent
(
)
)
)
{
const
bool
prev
=
newState
=
=
State
:
:
CollapsedBefore
|
|
mState
=
=
State
:
:
CollapsedBefore
;
nsIFrame
*
splitterSibling
=
nsBoxFrame
:
:
SlowOrdinalGroupAwareSibling
(
mOuter
!
prev
)
;
if
(
splitterSibling
)
{
nsCOMPtr
<
nsIContent
>
sibling
=
splitterSibling
-
>
GetContent
(
)
;
if
(
sibling
&
&
sibling
-
>
IsElement
(
)
)
{
if
(
mState
=
=
State
:
:
CollapsedBefore
|
|
mState
=
=
State
:
:
CollapsedAfter
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
nsUnsetAttrRunnable
(
sibling
-
>
AsElement
(
)
nsGkAtoms
:
:
collapsed
)
)
;
}
else
if
(
(
mState
=
=
State
:
:
Open
|
|
mState
=
=
State
:
:
Dragging
)
&
&
(
newState
=
=
State
:
:
CollapsedBefore
|
|
newState
=
=
State
:
:
CollapsedAfter
)
)
{
nsContentUtils
:
:
AddScriptRunner
(
new
nsSetAttrRunnable
(
sibling
-
>
AsElement
(
)
nsGkAtoms
:
:
collapsed
u
"
true
"
_ns
)
)
;
}
}
}
}
mState
=
newState
;
}
void
nsSplitterFrameInner
:
:
EnsureOrient
(
)
{
if
(
SplitterIsHorizontal
(
mParentBox
)
)
mOuter
-
>
AddStateBits
(
NS_STATE_IS_HORIZONTAL
)
;
else
mOuter
-
>
RemoveStateBits
(
NS_STATE_IS_HORIZONTAL
)
;
}
void
nsSplitterFrameInner
:
:
AdjustChildren
(
nsPresContext
*
aPresContext
)
{
EnsureOrient
(
)
;
const
bool
isHorizontal
=
!
mOuter
-
>
IsXULHorizontal
(
)
;
AdjustChildren
(
aPresContext
mChildInfosBefore
.
get
(
)
mChildInfosBeforeCount
isHorizontal
)
;
AdjustChildren
(
aPresContext
mChildInfosAfter
.
get
(
)
mChildInfosAfterCount
isHorizontal
)
;
}
static
nsIFrame
*
GetChildBoxForContent
(
nsIFrame
*
aParentBox
nsIContent
*
aContent
)
{
for
(
nsIFrame
*
f
:
aParentBox
-
>
PrincipalChildList
(
)
)
{
if
(
f
-
>
GetContent
(
)
=
=
aContent
)
{
return
f
;
}
}
return
nullptr
;
}
void
nsSplitterFrameInner
:
:
AdjustChildren
(
nsPresContext
*
aPresContext
nsSplitterInfo
*
aChildInfos
int32_t
aCount
bool
aIsHorizontal
)
{
nsBoxLayoutState
state
(
aPresContext
)
;
for
(
int
i
=
0
;
i
<
aCount
;
i
+
+
)
{
nscoord
pref
=
aChildInfos
[
i
]
.
changed
;
nsIFrame
*
childBox
=
GetChildBoxForContent
(
mParentBox
aChildInfos
[
i
]
.
childElem
)
;
if
(
childBox
)
{
SetPreferredSize
(
state
childBox
aIsHorizontal
&
pref
)
;
}
}
}
void
nsSplitterFrameInner
:
:
SetPreferredSize
(
nsBoxLayoutState
&
aState
nsIFrame
*
aChildBox
bool
aIsHorizontal
nscoord
*
aSize
)
{
nsRect
rect
(
aChildBox
-
>
GetRect
(
)
)
;
nscoord
pref
=
0
;
if
(
!
aSize
)
{
if
(
aIsHorizontal
)
pref
=
rect
.
width
;
else
pref
=
rect
.
height
;
}
else
{
pref
=
*
aSize
;
}
nsMargin
margin
(
0
0
0
0
)
;
aChildBox
-
>
GetXULMargin
(
margin
)
;
if
(
aIsHorizontal
)
{
pref
-
=
(
margin
.
left
+
margin
.
right
)
;
}
else
{
pref
-
=
(
margin
.
top
+
margin
.
bottom
)
;
}
RefPtr
element
=
nsStyledElement
:
:
FromNode
(
aChildBox
-
>
GetContent
(
)
)
;
if
(
!
element
)
{
return
;
}
int32_t
pixels
=
pref
/
AppUnitsPerCSSPixel
(
)
;
nsAutoString
attrValue
;
attrValue
.
AppendInt
(
pixels
)
;
element
-
>
SetAttr
(
aIsHorizontal
?
nsGkAtoms
:
:
width
:
nsGkAtoms
:
:
height
attrValue
IgnoreErrors
(
)
)
;
nsCOMPtr
<
nsICSSDeclaration
>
decl
=
element
-
>
Style
(
)
;
nsAutoCString
cssValue
;
cssValue
.
AppendInt
(
pixels
)
;
cssValue
.
AppendLiteral
(
"
px
"
)
;
decl
-
>
SetProperty
(
aIsHorizontal
?
"
width
"
_ns
:
"
height
"
_ns
cssValue
"
"
_ns
IgnoreErrors
(
)
)
;
}
void
nsSplitterFrameInner
:
:
AddRemoveSpace
(
nscoord
aDiff
nsSplitterInfo
*
aChildInfos
int32_t
aCount
int32_t
&
aSpaceLeft
)
{
aSpaceLeft
=
0
;
for
(
int
i
=
0
;
i
<
aCount
;
i
+
+
)
{
nscoord
min
=
aChildInfos
[
i
]
.
min
;
nscoord
max
=
aChildInfos
[
i
]
.
max
;
nscoord
&
c
=
aChildInfos
[
i
]
.
changed
;
if
(
c
+
aDiff
<
min
)
{
aDiff
+
=
(
c
-
min
)
;
c
=
min
;
}
else
if
(
c
+
aDiff
>
max
)
{
aDiff
-
=
(
max
-
c
)
;
c
=
max
;
}
else
{
c
+
=
aDiff
;
aDiff
=
0
;
}
if
(
aDiff
=
=
0
)
break
;
}
aSpaceLeft
=
aDiff
;
}
void
nsSplitterFrameInner
:
:
ResizeChildTo
(
nscoord
&
aDiff
nsSplitterInfo
*
aChildrenBeforeInfos
nsSplitterInfo
*
aChildrenAfterInfos
int32_t
aChildrenBeforeCount
int32_t
aChildrenAfterCount
bool
aBounded
)
{
nscoord
spaceLeft
;
AddRemoveSpace
(
aDiff
aChildrenBeforeInfos
aChildrenBeforeCount
spaceLeft
)
;
aDiff
-
=
spaceLeft
;
AddRemoveSpace
(
-
aDiff
aChildrenAfterInfos
aChildrenAfterCount
spaceLeft
)
;
if
(
spaceLeft
!
=
0
)
{
if
(
aBounded
)
{
aDiff
+
=
spaceLeft
;
AddRemoveSpace
(
spaceLeft
aChildrenBeforeInfos
aChildrenBeforeCount
spaceLeft
)
;
}
}
}
