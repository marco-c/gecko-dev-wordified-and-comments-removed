#
ifndef
nsBoxLayoutState_h___
#
define
nsBoxLayoutState_h___
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPresContext
.
h
"
class
gfxContext
;
namespace
mozilla
{
class
PresShell
;
struct
ReflowInput
;
}
class
MOZ_STACK_CLASS
nsBoxLayoutState
{
using
ReflowInput
=
mozilla
:
:
ReflowInput
;
public
:
explicit
nsBoxLayoutState
(
nsPresContext
*
aPresContext
gfxContext
*
aRenderingContext
=
nullptr
const
ReflowInput
*
aOuterReflowInput
=
nullptr
uint16_t
aReflowDepth
=
0
)
;
nsBoxLayoutState
(
const
nsBoxLayoutState
&
aState
)
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
mozilla
:
:
PresShell
*
PresShell
(
)
const
{
return
mPresContext
-
>
PresShell
(
)
;
}
uint32_t
LayoutFlags
(
)
const
{
return
mLayoutFlags
;
}
void
SetLayoutFlags
(
uint32_t
aFlags
)
{
mLayoutFlags
=
aFlags
;
}
void
SetPaintingDisabled
(
bool
aDisable
)
{
mPaintingDisabled
=
aDisable
;
}
bool
PaintingDisabled
(
)
const
{
return
mPaintingDisabled
;
}
gfxContext
*
GetRenderingContext
(
)
const
{
return
mRenderingContext
;
}
struct
AutoReflowDepth
{
explicit
AutoReflowDepth
(
nsBoxLayoutState
&
aState
)
:
mState
(
aState
)
{
+
+
mState
.
mReflowDepth
;
}
~
AutoReflowDepth
(
)
{
-
-
mState
.
mReflowDepth
;
}
nsBoxLayoutState
&
mState
;
}
;
const
ReflowInput
*
OuterReflowInput
(
)
{
return
mOuterReflowInput
;
}
uint16_t
GetReflowDepth
(
)
{
return
mReflowDepth
;
}
private
:
RefPtr
<
nsPresContext
>
mPresContext
;
gfxContext
*
mRenderingContext
;
const
ReflowInput
*
mOuterReflowInput
;
uint32_t
mLayoutFlags
;
uint16_t
mReflowDepth
;
bool
mPaintingDisabled
;
}
;
#
endif
