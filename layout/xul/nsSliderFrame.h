#
ifndef
nsSliderFrame_h__
#
define
nsSliderFrame_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsContainerFrame
.
h
"
#
include
"
nsRepeatService
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsITimer
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
class
nsITimer
;
class
nsScrollbarFrame
;
class
nsSliderFrame
;
namespace
mozilla
{
class
nsDisplaySliderMarks
;
class
PresShell
;
}
nsIFrame
*
NS_NewSliderFrame
(
mozilla
:
:
PresShell
*
aPresShell
mozilla
:
:
ComputedStyle
*
aStyle
)
;
class
nsSliderMediator
final
:
public
nsIDOMEventListener
{
public
:
NS_DECL_ISUPPORTS
nsSliderFrame
*
mSlider
;
explicit
nsSliderMediator
(
nsSliderFrame
*
aSlider
)
{
mSlider
=
aSlider
;
}
void
SetSlider
(
nsSliderFrame
*
aSlider
)
{
mSlider
=
aSlider
;
}
NS_DECL_NSIDOMEVENTLISTENER
protected
:
virtual
~
nsSliderMediator
(
)
=
default
;
}
;
class
nsSliderFrame
final
:
public
nsContainerFrame
{
public
:
NS_DECL_FRAMEARENA_HELPERS
(
nsSliderFrame
)
NS_DECL_QUERYFRAME
friend
class
nsSliderMediator
;
friend
class
mozilla
:
:
nsDisplaySliderMarks
;
explicit
nsSliderFrame
(
ComputedStyle
*
aStyle
nsPresContext
*
aPresContext
)
;
virtual
~
nsSliderFrame
(
)
;
bool
GetEventPoint
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsPoint
&
aPoint
)
;
bool
GetEventPoint
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
mozilla
:
:
LayoutDeviceIntPoint
&
aPoint
)
;
#
ifdef
DEBUG_FRAME_DUMP
nsresult
GetFrameName
(
nsAString
&
aResult
)
const
override
{
return
MakeFrameName
(
u
"
SliderFrame
"
_ns
aResult
)
;
}
#
endif
void
Reflow
(
nsPresContext
*
aPresContext
ReflowOutput
&
aDesiredSize
const
ReflowInput
&
aReflowInput
nsReflowStatus
&
aStatus
)
override
;
void
Destroy
(
DestroyContext
&
)
override
;
void
BuildDisplayList
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
override
;
void
BuildDisplayListForThumb
(
nsDisplayListBuilder
*
aBuilder
nsIFrame
*
aThumb
const
nsDisplayListSet
&
aLists
)
;
nsresult
AttributeChanged
(
int32_t
aNameSpaceID
nsAtom
*
aAttribute
int32_t
aModType
)
override
;
void
Init
(
nsIContent
*
aContent
nsContainerFrame
*
aParent
nsIFrame
*
aPrevInFlow
)
override
;
nsresult
HandleEvent
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
void
SetInitialChildList
(
ChildListID
aListID
nsFrameList
&
&
aChildList
)
override
;
void
AppendFrames
(
ChildListID
aListID
nsFrameList
&
&
aFrameList
)
override
;
void
InsertFrames
(
ChildListID
aListID
nsIFrame
*
aPrevFrame
const
nsLineList
:
:
iterator
*
aPrevFrameLine
nsFrameList
&
&
aFrameList
)
override
;
void
RemoveFrame
(
ChildListID
aListID
nsIFrame
*
aOldFrame
)
override
;
nsresult
StartDrag
(
mozilla
:
:
dom
:
:
Event
*
aEvent
)
;
nsresult
StopDrag
(
)
;
void
StartAPZDrag
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
)
;
static
int32_t
GetCurrentPosition
(
nsIContent
*
content
)
;
static
int32_t
GetMinPosition
(
nsIContent
*
content
)
;
static
int32_t
GetMaxPosition
(
nsIContent
*
content
)
;
static
int32_t
GetIncrement
(
nsIContent
*
content
)
;
static
int32_t
GetPageIncrement
(
nsIContent
*
content
)
;
static
int32_t
GetIntegerAttribute
(
nsIContent
*
content
nsAtom
*
atom
int32_t
defaultValue
)
;
NS_IMETHOD
HandlePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
NS_IMETHOD
HandleMultiplePress
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
bool
aControlHeld
)
override
{
return
NS_OK
;
}
MOZ_CAN_RUN_SCRIPT
NS_IMETHOD
HandleDrag
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
{
return
NS_OK
;
}
NS_IMETHOD
HandleRelease
(
nsPresContext
*
aPresContext
mozilla
:
:
WidgetGUIEvent
*
aEvent
nsEventStatus
*
aEventStatus
)
override
;
float
GetThumbRatio
(
)
const
;
void
AsyncScrollbarDragInitiated
(
uint64_t
aDragBlockId
)
;
void
AsyncScrollbarDragRejected
(
)
;
bool
OnlySystemGroupDispatch
(
mozilla
:
:
EventMessage
aMessage
)
const
override
;
nsIScrollableFrame
*
GetScrollFrame
(
)
;
private
:
bool
GetScrollToClick
(
)
;
nsScrollbarFrame
*
Scrollbar
(
)
;
bool
ShouldScrollForEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
)
;
bool
ShouldScrollToClickForEvent
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
)
;
bool
IsEventOverThumb
(
mozilla
:
:
WidgetGUIEvent
*
aEvent
)
;
void
PageUpDown
(
nscoord
change
)
;
void
SetCurrentThumbPosition
(
nsIContent
*
aScrollbar
nscoord
aNewPos
bool
aIsSmooth
bool
aMaySnap
)
;
void
SetCurrentPosition
(
nsIContent
*
aScrollbar
int32_t
aNewPos
bool
aIsSmooth
)
;
void
SetCurrentPositionInternal
(
nsIContent
*
aScrollbar
int32_t
pos
bool
aIsSmooth
)
;
void
CurrentPositionChanged
(
)
;
void
DragThumb
(
bool
aGrabMouseEvents
)
;
void
AddListener
(
)
;
void
RemoveListener
(
)
;
bool
isDraggingThumb
(
)
const
;
void
SuppressDisplayport
(
)
;
void
UnsuppressDisplayport
(
)
;
void
StartRepeat
(
)
{
nsRepeatService
:
:
GetInstance
(
)
-
>
Start
(
Notify
this
mContent
-
>
OwnerDoc
(
)
"
nsSliderFrame
"
_ns
)
;
}
void
StopRepeat
(
)
{
nsRepeatService
:
:
GetInstance
(
)
-
>
Stop
(
Notify
this
)
;
mCurrentClickHoldDestination
=
Nothing
(
)
;
}
void
Notify
(
)
;
static
void
Notify
(
void
*
aData
)
{
(
static_cast
<
nsSliderFrame
*
>
(
aData
)
)
-
>
Notify
(
)
;
}
void
PageScroll
(
bool
aClickAndHold
)
;
nsPoint
mDestinationPoint
;
Maybe
<
nsPoint
>
mCurrentClickHoldDestination
;
RefPtr
<
nsSliderMediator
>
mMediator
;
float
mRatio
;
nscoord
mDragStart
;
nscoord
mThumbStart
;
int32_t
mCurPos
;
nscoord
mRepeatDirection
;
bool
mDragFinished
;
bool
mUserChanged
;
bool
mScrollingWithAPZ
;
bool
mSuppressionActive
;
Maybe
<
uint64_t
>
mAPZDragInitiated
;
nscoord
mThumbMinLength
;
static
bool
gMiddlePref
;
}
;
#
endif
