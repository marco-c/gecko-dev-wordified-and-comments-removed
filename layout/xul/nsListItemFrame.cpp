#
include
"
nsListItemFrame
.
h
"
#
include
<
algorithm
>
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsNameSpaceManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsBoxLayout
.
h
"
#
include
"
nsIContent
.
h
"
nsListItemFrame
:
:
nsListItemFrame
(
ComputedStyle
*
aStyle
bool
aIsRoot
nsBoxLayout
*
aLayoutManager
)
:
nsGridRowLeafFrame
(
aStyle
aIsRoot
aLayoutManager
kClassID
)
{
}
nsListItemFrame
:
:
~
nsListItemFrame
(
)
{
}
nsSize
nsListItemFrame
:
:
GetXULPrefSize
(
nsBoxLayoutState
&
aState
)
{
nsSize
size
=
nsBoxFrame
:
:
GetXULPrefSize
(
aState
)
;
DISPLAY_PREF_SIZE
(
this
size
)
;
size
.
height
=
std
:
:
max
(
mRect
.
height
size
.
height
)
;
return
size
;
}
void
nsListItemFrame
:
:
BuildDisplayListForChildren
(
nsDisplayListBuilder
*
aBuilder
const
nsDisplayListSet
&
aLists
)
{
if
(
aBuilder
-
>
IsForEventDelivery
(
)
)
{
if
(
!
mContent
-
>
AsElement
(
)
-
>
AttrValueIs
(
kNameSpaceID_None
nsGkAtoms
:
:
allowevents
nsGkAtoms
:
:
_true
eCaseMatters
)
)
return
;
}
nsGridRowLeafFrame
:
:
BuildDisplayListForChildren
(
aBuilder
aLists
)
;
}
already_AddRefed
<
nsBoxLayout
>
NS_NewGridRowLeafLayout
(
)
;
nsIFrame
*
NS_NewListItemFrame
(
nsIPresShell
*
aPresShell
ComputedStyle
*
aStyle
)
{
nsCOMPtr
<
nsBoxLayout
>
layout
=
NS_NewGridRowLeafLayout
(
)
;
if
(
!
layout
)
{
return
nullptr
;
}
return
new
(
aPresShell
)
nsListItemFrame
(
aStyle
false
layout
)
;
}
NS_IMPL_FRAMEARENA_HELPERS
(
nsListItemFrame
)
