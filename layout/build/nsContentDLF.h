#
ifndef
nsContentDLF_h__
#
define
nsContentDLF_h__
#
include
"
nsIDocumentLoaderFactory
.
h
"
#
include
"
nsMimeTypes
.
h
"
class
nsDocShell
;
class
nsIChannel
;
class
nsIDocumentViewer
;
class
nsILoadGroup
;
class
nsIStreamListener
;
#
define
CONTENT_DLF_CONTRACTID
"
mozilla
.
org
/
content
/
document
-
loader
-
factory
;
1
"
#
define
PLUGIN_DLF_CONTRACTID
\
"
mozilla
.
org
/
content
/
plugin
/
document
-
loader
-
factory
;
1
"
class
nsContentDLF
final
:
public
nsIDocumentLoaderFactory
{
protected
:
virtual
~
nsContentDLF
(
)
;
public
:
nsContentDLF
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIDOCUMENTLOADERFACTORY
nsresult
InitUAStyleSheet
(
)
;
typedef
already_AddRefed
<
mozilla
:
:
dom
:
:
Document
>
(
*
DocumentCreator
)
(
)
;
nsresult
CreateDocument
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsIDocShell
*
aContainer
DocumentCreator
aDocumentCreator
nsIStreamListener
*
*
aDocListener
nsIDocumentViewer
*
*
aDocumentViewer
)
;
static
already_AddRefed
<
mozilla
:
:
dom
:
:
Document
>
CreateBlankDocument
(
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aPartitionedPrincipal
nsDocShell
*
aContainer
)
;
enum
class
DocumentKind
{
HTML
XML
SVG
Video
Image
None
}
;
static
DocumentKind
DocumentKindForContentType
(
const
nsACString
&
aContentType
)
;
private
:
static
nsresult
EnsureUAStyleSheet
(
)
;
static
bool
IsImageContentType
(
const
nsACString
&
)
;
}
;
nsresult
NS_NewContentDocumentLoaderFactory
(
nsIDocumentLoaderFactory
*
*
aResult
)
;
#
endif
