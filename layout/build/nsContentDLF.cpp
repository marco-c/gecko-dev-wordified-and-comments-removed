#
include
"
nsContentDLF
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
nsGenericHTMLElement
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIDocumentLoaderFactory
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsNodeInfoManager
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
nsIViewSourceChannel
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
imgLoader
.
h
"
#
include
"
nsCharsetSource
.
h
"
#
include
"
nsMimeTypes
.
h
"
#
include
"
DecoderTraits
.
h
"
#
include
"
nsPluginHost
.
h
"
#
undef
NOISY_REGISTRY
using
mozilla
:
:
dom
:
:
Document
;
already_AddRefed
<
nsIContentViewer
>
NS_NewContentViewer
(
)
;
static
const
char
*
const
gHTMLTypes
[
]
=
{
TEXT_HTML
VIEWSOURCE_CONTENT_TYPE
APPLICATION_XHTML_XML
APPLICATION_WAPXHTML_XML
0
}
;
static
const
char
*
const
gXMLTypes
[
]
=
{
TEXT_XML
APPLICATION_XML
APPLICATION_MATHML_XML
APPLICATION_RDF_XML
TEXT_RDF
0
}
;
static
const
char
*
const
gSVGTypes
[
]
=
{
IMAGE_SVG_XML
0
}
;
static
bool
IsTypeInList
(
const
nsACString
&
aType
const
char
*
const
aList
[
]
)
{
int32_t
typeIndex
;
for
(
typeIndex
=
0
;
aList
[
typeIndex
]
;
+
+
typeIndex
)
{
if
(
aType
.
Equals
(
aList
[
typeIndex
]
)
)
{
return
true
;
}
}
return
false
;
}
nsresult
NS_NewContentDocumentLoaderFactory
(
nsIDocumentLoaderFactory
*
*
aResult
)
{
MOZ_ASSERT
(
aResult
"
null
OUT
ptr
"
)
;
if
(
!
aResult
)
{
return
NS_ERROR_NULL_POINTER
;
}
RefPtr
<
nsContentDLF
>
it
=
new
nsContentDLF
(
)
;
it
.
forget
(
aResult
)
;
return
NS_OK
;
}
nsContentDLF
:
:
nsContentDLF
(
)
=
default
;
nsContentDLF
:
:
~
nsContentDLF
(
)
=
default
;
NS_IMPL_ISUPPORTS
(
nsContentDLF
nsIDocumentLoaderFactory
)
NS_IMETHODIMP
nsContentDLF
:
:
CreateInstance
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
const
nsACString
&
aContentType
nsIDocShell
*
aContainer
nsISupports
*
aExtraInfo
nsIStreamListener
*
*
aDocListener
nsIContentViewer
*
*
aDocViewer
)
{
nsAutoCString
contentType
(
aContentType
)
;
nsCOMPtr
<
nsIViewSourceChannel
>
viewSourceChannel
=
do_QueryInterface
(
aChannel
)
;
if
(
viewSourceChannel
)
{
aCommand
=
"
view
-
source
"
;
nsAutoCString
type
;
mozilla
:
:
Unused
<
<
viewSourceChannel
-
>
GetOriginalContentType
(
type
)
;
bool
knownType
=
(
!
type
.
EqualsLiteral
(
VIEWSOURCE_CONTENT_TYPE
)
&
&
IsTypeInList
(
type
gHTMLTypes
)
)
|
|
nsContentUtils
:
:
IsPlainTextType
(
type
)
|
|
IsTypeInList
(
type
gXMLTypes
)
|
|
IsTypeInList
(
type
gSVGTypes
)
|
|
IsTypeInList
(
type
gXMLTypes
)
;
if
(
knownType
)
{
viewSourceChannel
-
>
SetContentType
(
type
)
;
}
else
if
(
IsImageContentType
(
type
.
get
(
)
)
)
{
contentType
=
type
;
}
else
{
viewSourceChannel
-
>
SetContentType
(
NS_LITERAL_CSTRING
(
TEXT_PLAIN
)
)
;
}
}
else
if
(
aContentType
.
EqualsLiteral
(
VIEWSOURCE_CONTENT_TYPE
)
)
{
aChannel
-
>
SetContentType
(
NS_LITERAL_CSTRING
(
TEXT_PLAIN
)
)
;
contentType
=
TEXT_PLAIN
;
}
if
(
IsTypeInList
(
contentType
gHTMLTypes
)
|
|
nsContentUtils
:
:
IsPlainTextType
(
contentType
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewHTMLDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
if
(
IsTypeInList
(
contentType
gXMLTypes
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewXMLDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
if
(
IsTypeInList
(
contentType
gSVGTypes
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewSVGDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
if
(
mozilla
:
:
DecoderTraits
:
:
ShouldHandleMediaType
(
contentType
.
get
(
)
nullptr
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewVideoDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
if
(
IsImageContentType
(
contentType
.
get
(
)
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewImageDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
RefPtr
<
nsPluginHost
>
pluginHost
=
nsPluginHost
:
:
GetInst
(
)
;
if
(
pluginHost
&
&
pluginHost
-
>
HavePluginForType
(
contentType
nsPluginHost
:
:
eExcludeNone
)
)
{
return
CreateDocument
(
aCommand
aChannel
aLoadGroup
aContainer
[
]
(
)
-
>
already_AddRefed
<
Document
>
{
RefPtr
<
Document
>
doc
;
nsresult
rv
=
NS_NewPluginDocument
(
getter_AddRefs
(
doc
)
)
;
NS_ENSURE_SUCCESS
(
rv
nullptr
)
;
return
doc
.
forget
(
)
;
}
aDocListener
aDocViewer
)
;
}
return
NS_ERROR_FAILURE
;
}
NS_IMETHODIMP
nsContentDLF
:
:
CreateInstanceForDocument
(
nsISupports
*
aContainer
Document
*
aDocument
const
char
*
aCommand
nsIContentViewer
*
*
aContentViewer
)
{
MOZ_ASSERT
(
aDocument
)
;
nsCOMPtr
<
nsIContentViewer
>
contentViewer
=
NS_NewContentViewer
(
)
;
contentViewer
-
>
LoadStart
(
aDocument
)
;
contentViewer
.
forget
(
aContentViewer
)
;
return
NS_OK
;
}
already_AddRefed
<
Document
>
nsContentDLF
:
:
CreateBlankDocument
(
nsILoadGroup
*
aLoadGroup
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aPartitionedPrincipal
nsDocShell
*
aContainer
)
{
RefPtr
<
Document
>
blankDoc
;
mozilla
:
:
Unused
<
<
NS_NewHTMLDocument
(
getter_AddRefs
(
blankDoc
)
)
;
if
(
!
blankDoc
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIURI
>
uri
;
NS_NewURI
(
getter_AddRefs
(
uri
)
NS_LITERAL_CSTRING
(
"
about
:
blank
"
)
)
;
if
(
!
uri
)
{
return
nullptr
;
}
blankDoc
-
>
ResetToURI
(
uri
aLoadGroup
aPrincipal
aPartitionedPrincipal
)
;
blankDoc
-
>
SetContainer
(
aContainer
)
;
nsNodeInfoManager
*
nim
=
blankDoc
-
>
NodeInfoManager
(
)
;
RefPtr
<
mozilla
:
:
dom
:
:
NodeInfo
>
htmlNodeInfo
;
htmlNodeInfo
=
nim
-
>
GetNodeInfo
(
nsGkAtoms
:
:
html
0
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
nsCOMPtr
<
nsIContent
>
htmlElement
=
NS_NewHTMLHtmlElement
(
htmlNodeInfo
.
forget
(
)
)
;
htmlNodeInfo
=
nim
-
>
GetNodeInfo
(
nsGkAtoms
:
:
head
0
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
nsCOMPtr
<
nsIContent
>
headElement
=
NS_NewHTMLHeadElement
(
htmlNodeInfo
.
forget
(
)
)
;
htmlNodeInfo
=
nim
-
>
GetNodeInfo
(
nsGkAtoms
:
:
body
0
kNameSpaceID_XHTML
nsINode
:
:
ELEMENT_NODE
)
;
nsCOMPtr
<
nsIContent
>
bodyElement
=
NS_NewHTMLBodyElement
(
htmlNodeInfo
.
forget
(
)
)
;
NS_ASSERTION
(
blankDoc
-
>
GetChildCount
(
)
=
=
0
"
Shouldn
'
t
have
children
"
)
;
if
(
!
htmlElement
|
|
!
headElement
|
|
!
bodyElement
|
|
NS_FAILED
(
blankDoc
-
>
AppendChildTo
(
htmlElement
false
)
)
|
|
NS_FAILED
(
htmlElement
-
>
AppendChildTo
(
headElement
false
)
)
|
|
NS_FAILED
(
htmlElement
-
>
AppendChildTo
(
bodyElement
false
)
)
)
{
return
nullptr
;
}
blankDoc
-
>
SetDocumentCharacterSetSource
(
kCharsetFromDocTypeDefault
)
;
blankDoc
-
>
SetDocumentCharacterSet
(
UTF_8_ENCODING
)
;
return
blankDoc
.
forget
(
)
;
}
nsresult
nsContentDLF
:
:
CreateDocument
(
const
char
*
aCommand
nsIChannel
*
aChannel
nsILoadGroup
*
aLoadGroup
nsIDocShell
*
aContainer
nsContentDLF
:
:
DocumentCreator
aDocumentCreator
nsIStreamListener
*
*
aDocListener
nsIContentViewer
*
*
aContentViewer
)
{
MOZ_ASSERT
(
aDocumentCreator
)
;
nsresult
rv
=
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIURI
>
aURL
;
rv
=
aChannel
-
>
GetURI
(
getter_AddRefs
(
aURL
)
)
;
if
(
NS_FAILED
(
rv
)
)
return
rv
;
#
ifdef
NOISY_CREATE_DOC
if
(
nullptr
!
=
aURL
)
{
nsAutoString
tmp
;
aURL
-
>
ToString
(
tmp
)
;
fputs
(
NS_LossyConvertUTF16toASCII
(
tmp
)
.
get
(
)
stdout
)
;
printf
(
"
:
creating
document
\
n
"
)
;
}
#
endif
RefPtr
<
Document
>
doc
=
aDocumentCreator
(
)
;
NS_ENSURE_TRUE
(
doc
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIContentViewer
>
contentViewer
=
NS_NewContentViewer
(
)
;
doc
-
>
SetContainer
(
static_cast
<
nsDocShell
*
>
(
aContainer
)
)
;
rv
=
doc
-
>
StartDocumentLoad
(
aCommand
aChannel
aLoadGroup
aContainer
aDocListener
true
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
contentViewer
-
>
LoadStart
(
doc
)
;
contentViewer
.
forget
(
aContentViewer
)
;
return
NS_OK
;
}
bool
nsContentDLF
:
:
IsImageContentType
(
const
char
*
aContentType
)
{
return
imgLoader
:
:
SupportImageWithMimeType
(
aContentType
)
;
}
