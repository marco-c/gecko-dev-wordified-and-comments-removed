#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCSSPseudoClasses
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsStaticAtom
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsString
.
h
"
using
namespace
mozilla
;
#
define
CSS_PSEUDO_CLASS
(
_name
_value
_flags
_pref
)
\
static
nsIAtom
*
sPseudoClass_
#
#
_name
;
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
NS_STATIC_ATOM_BUFFER
(
name_
#
#
_pseudo_class_buffer
value_
)
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
static_assert
(
!
(
(
flags_
)
&
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
)
|
|
\
(
(
flags_
)
&
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
)
\
"
Pseudo
-
class
'
"
#
name_
"
'
is
enabled
in
chrome
so
it
"
\
"
should
also
be
enabled
in
UA
sheets
"
)
;
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
static
const
nsStaticAtom
CSSPseudoClasses_info
[
]
=
{
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
NS_STATIC_ATOM
(
name_
#
#
_pseudo_class_buffer
&
sPseudoClass_
#
#
name_
)
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
}
;
const
uint32_t
nsCSSPseudoClasses
:
:
kPseudoClassFlags
[
]
=
{
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
flags_
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
}
;
bool
nsCSSPseudoClasses
:
:
sPseudoClassEnabled
[
]
=
{
#
define
IS_ENABLED_BY_DEFAULT
(
flags_
)
\
(
!
(
(
flags_
)
&
CSS_PSEUDO_CLASS_ENABLED_MASK
)
)
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
IS_ENABLED_BY_DEFAULT
(
flags_
)
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
#
undef
IS_ENABLED_BY_DEFAULT
}
;
void
nsCSSPseudoClasses
:
:
AddRefAtoms
(
)
{
NS_RegisterStaticAtoms
(
CSSPseudoClasses_info
)
;
#
define
CSS_PSEUDO_CLASS
(
name_
value_
flags_
pref_
)
\
if
(
pref_
[
0
]
)
{
\
auto
idx
=
static_cast
<
CSSPseudoElementTypeBase
>
(
Type
:
:
name_
)
;
\
Preferences
:
:
AddBoolVarCache
(
&
sPseudoClassEnabled
[
idx
]
pref_
)
;
\
}
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
}
bool
nsCSSPseudoClasses
:
:
HasStringArg
(
Type
aType
)
{
return
aType
=
=
Type
:
:
lang
|
|
aType
=
=
Type
:
:
mozEmptyExceptChildrenWithLocalname
|
|
aType
=
=
Type
:
:
mozSystemMetric
|
|
aType
=
=
Type
:
:
mozLocaleDir
|
|
aType
=
=
Type
:
:
dir
;
}
bool
nsCSSPseudoClasses
:
:
HasNthPairArg
(
Type
aType
)
{
return
aType
=
=
Type
:
:
nthChild
|
|
aType
=
=
Type
:
:
nthLastChild
|
|
aType
=
=
Type
:
:
nthOfType
|
|
aType
=
=
Type
:
:
nthLastOfType
;
}
void
nsCSSPseudoClasses
:
:
PseudoTypeToString
(
Type
aType
nsAString
&
aString
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
"
Unexpected
type
"
)
;
auto
idx
=
static_cast
<
CSSPseudoClassTypeBase
>
(
aType
)
;
(
*
CSSPseudoClasses_info
[
idx
]
.
mAtom
)
-
>
ToString
(
aString
)
;
}
CSSPseudoClassType
nsCSSPseudoClasses
:
:
GetPseudoType
(
nsIAtom
*
aAtom
EnabledState
aEnabledState
)
{
for
(
uint32_t
i
=
0
;
i
<
ArrayLength
(
CSSPseudoClasses_info
)
;
+
+
i
)
{
if
(
*
CSSPseudoClasses_info
[
i
]
.
mAtom
=
=
aAtom
)
{
Type
type
=
Type
(
i
)
;
return
IsEnabled
(
type
aEnabledState
)
?
type
:
Type
:
:
NotPseudo
;
}
}
return
Type
:
:
NotPseudo
;
}
bool
nsCSSPseudoClasses
:
:
IsUserActionPseudoClass
(
Type
aType
)
{
return
aType
=
=
Type
:
:
hover
|
|
aType
=
=
Type
:
:
active
|
|
aType
=
=
Type
:
:
focus
;
}
