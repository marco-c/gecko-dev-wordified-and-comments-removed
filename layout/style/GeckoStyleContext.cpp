#
include
"
mozilla
/
GeckoStyleContext
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsRuleNode
.
h
"
using
namespace
mozilla
;
GeckoStyleContext
:
:
GeckoStyleContext
(
nsStyleContext
*
aParent
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
already_AddRefed
<
nsRuleNode
>
aRuleNode
bool
aSkipParentDisplayBasedStyleFixup
)
:
nsStyleContext
(
aParent
OwningStyleContextSource
(
Move
(
aRuleNode
)
)
aPseudoTag
aPseudoType
)
{
mBits
|
=
NS_STYLE_CONTEXT_IS_GECKO
;
if
(
aParent
)
{
#
ifdef
DEBUG
nsRuleNode
*
r1
=
mParent
-
>
RuleNode
(
)
*
r2
=
mSource
.
AsGeckoRuleNode
(
)
;
while
(
r1
-
>
GetParent
(
)
)
r1
=
r1
-
>
GetParent
(
)
;
while
(
r2
-
>
GetParent
(
)
)
r2
=
r2
-
>
GetParent
(
)
;
NS_ASSERTION
(
r1
=
=
r2
"
must
be
in
the
same
rule
tree
as
parent
"
)
;
#
endif
}
else
{
PresContext
(
)
-
>
PresShell
(
)
-
>
StyleSet
(
)
-
>
RootStyleContextAdded
(
)
;
}
mSource
.
AsGeckoRuleNode
(
)
-
>
SetUsedDirectly
(
)
;
FinishConstruction
(
)
;
ApplyStyleFixups
(
aSkipParentDisplayBasedStyleFixup
)
;
}
void
*
GeckoStyleContext
:
:
operator
new
(
size_t
sz
nsPresContext
*
aPresContext
)
{
MOZ_ASSERT
(
sz
=
=
sizeof
(
GeckoStyleContext
)
)
;
return
aPresContext
-
>
PresShell
(
)
-
>
AllocateByObjectID
(
eArenaObjectID_GeckoStyleContext
sz
)
;
}
