#
include
"
SharedSubResourceCache
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
dom
/
CacheablePerformanceTimingData
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Performance
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceResourceTimingBinding
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceStorage
.
h
"
#
include
"
mozilla
/
dom
/
PerformanceTiming
.
h
"
#
include
"
mozilla
/
net
/
HttpBaseChannel
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsDOMNavigationTiming
.
h
"
#
include
"
nsIHttpChannel
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsITimedChannel
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsQueryObject
.
h
"
namespace
mozilla
{
namespace
SharedSubResourceCacheUtils
{
void
AddPerformanceEntryForCache
(
const
nsString
&
aEntryName
const
nsString
&
aInitiatorType
const
SubResourceNetworkMetadataHolder
*
aNetworkMetadata
TimeStamp
aStartTime
TimeStamp
aEndTime
dom
:
:
Document
*
aDocument
)
{
if
(
!
aNetworkMetadata
|
|
!
aNetworkMetadata
-
>
GetPerfData
(
)
)
{
return
;
}
nsPIDOMWindowInner
*
win
=
aDocument
-
>
GetInnerWindow
(
)
;
if
(
!
win
)
{
return
;
}
RefPtr
<
dom
:
:
Performance
>
performance
=
win
-
>
GetPerformance
(
)
;
if
(
!
performance
)
{
return
;
}
auto
renderBlocking
=
dom
:
:
RenderBlockingStatusType
:
:
Non_blocking
;
UniquePtr
<
dom
:
:
PerformanceTimingData
>
data
(
dom
:
:
PerformanceTimingData
:
:
Create
(
*
aNetworkMetadata
-
>
GetPerfData
(
)
0
aStartTime
aEndTime
renderBlocking
)
)
;
if
(
!
data
)
{
return
;
}
dom
:
:
PerformanceStorage
*
storage
=
performance
-
>
AsPerformanceStorage
(
)
;
MOZ_ASSERT
(
storage
)
;
storage
-
>
AddEntry
(
aEntryName
aInitiatorType
std
:
:
move
(
data
)
)
;
}
}
SubResourceNetworkMetadataHolder
:
:
SubResourceNetworkMetadataHolder
(
nsIRequest
*
aRequest
)
{
nsCOMPtr
<
nsITimedChannel
>
timedChannel
=
do_QueryInterface
(
aRequest
)
;
if
(
timedChannel
)
{
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aRequest
)
;
mPerfData
.
emplace
(
timedChannel
httpChannel
)
;
}
RefPtr
<
net
:
:
HttpBaseChannel
>
httpBaseChannel
=
do_QueryObject
(
aRequest
)
;
if
(
httpBaseChannel
)
{
mResponseHead
=
httpBaseChannel
-
>
MaybeCloneResponseHeadForCachedResource
(
)
;
}
}
}
