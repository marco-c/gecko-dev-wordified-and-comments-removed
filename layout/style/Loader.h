#
ifndef
mozilla_css_Loader_h
#
define
mozilla_css_Loader_h
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCompatibility
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTObserverArray
.
h
"
#
include
"
nsURIHashKey
.
h
"
#
include
"
nsIStyleSheetLinkingElement
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
class
nsICSSLoaderObserver
;
class
nsIConsoleReportCollector
;
class
nsIContent
;
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
DocGroup
;
class
Element
;
}
}
namespace
mozilla
{
class
URIPrincipalReferrerPolicyAndCORSModeHashKey
:
public
nsURIHashKey
{
public
:
typedef
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
KeyType
;
typedef
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
KeyTypePointer
;
typedef
mozilla
:
:
net
:
:
ReferrerPolicy
ReferrerPolicy
;
explicit
URIPrincipalReferrerPolicyAndCORSModeHashKey
(
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
aKey
)
:
nsURIHashKey
(
aKey
-
>
mKey
)
mPrincipal
(
aKey
-
>
mPrincipal
)
mCORSMode
(
aKey
-
>
mCORSMode
)
mReferrerPolicy
(
aKey
-
>
mReferrerPolicy
)
{
MOZ_COUNT_CTOR
(
URIPrincipalReferrerPolicyAndCORSModeHashKey
)
;
}
URIPrincipalReferrerPolicyAndCORSModeHashKey
(
nsIURI
*
aURI
nsIPrincipal
*
aPrincipal
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
)
:
nsURIHashKey
(
aURI
)
mPrincipal
(
aPrincipal
)
mCORSMode
(
aCORSMode
)
mReferrerPolicy
(
aReferrerPolicy
)
{
MOZ_COUNT_CTOR
(
URIPrincipalReferrerPolicyAndCORSModeHashKey
)
;
}
URIPrincipalReferrerPolicyAndCORSModeHashKey
(
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
&
toCopy
)
:
nsURIHashKey
(
toCopy
)
mPrincipal
(
toCopy
.
mPrincipal
)
mCORSMode
(
toCopy
.
mCORSMode
)
mReferrerPolicy
(
toCopy
.
mReferrerPolicy
)
{
MOZ_COUNT_CTOR
(
URIPrincipalReferrerPolicyAndCORSModeHashKey
)
;
}
~
URIPrincipalReferrerPolicyAndCORSModeHashKey
(
)
{
MOZ_COUNT_DTOR
(
URIPrincipalReferrerPolicyAndCORSModeHashKey
)
;
}
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
GetKey
(
)
const
{
return
const_cast
<
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
>
(
this
)
;
}
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
GetKeyPointer
(
)
const
{
return
this
;
}
bool
KeyEquals
(
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
aKey
)
const
{
if
(
!
nsURIHashKey
:
:
KeyEquals
(
aKey
-
>
mKey
)
)
{
return
false
;
}
if
(
!
mPrincipal
!
=
!
aKey
-
>
mPrincipal
)
{
return
false
;
}
if
(
mCORSMode
!
=
aKey
-
>
mCORSMode
)
{
return
false
;
}
if
(
mReferrerPolicy
!
=
aKey
-
>
mReferrerPolicy
)
{
return
false
;
}
bool
eq
;
return
!
mPrincipal
|
|
(
NS_SUCCEEDED
(
mPrincipal
-
>
Equals
(
aKey
-
>
mPrincipal
&
eq
)
)
&
&
eq
)
;
}
static
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
KeyToPointer
(
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
aKey
)
{
return
aKey
;
}
static
PLDHashNumber
HashKey
(
const
URIPrincipalReferrerPolicyAndCORSModeHashKey
*
aKey
)
{
return
nsURIHashKey
:
:
HashKey
(
aKey
-
>
mKey
)
;
}
nsIURI
*
GetURI
(
)
const
{
return
nsURIHashKey
:
:
GetKey
(
)
;
}
enum
{
ALLOW_MEMMOVE
=
true
}
;
protected
:
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
CORSMode
mCORSMode
;
ReferrerPolicy
mReferrerPolicy
;
}
;
namespace
css
{
class
SheetLoadData
;
class
ImportRule
;
class
MOZ_RAII
LoaderReusableStyleSheets
{
public
:
LoaderReusableStyleSheets
(
)
{
}
bool
FindReusableStyleSheet
(
nsIURI
*
aURL
RefPtr
<
StyleSheet
>
&
aResult
)
;
void
AddReusableSheet
(
StyleSheet
*
aSheet
)
{
mReusableSheets
.
AppendElement
(
aSheet
)
;
}
private
:
LoaderReusableStyleSheets
(
const
LoaderReusableStyleSheets
&
)
=
delete
;
LoaderReusableStyleSheets
&
operator
=
(
const
LoaderReusableStyleSheets
&
)
=
delete
;
nsTArray
<
RefPtr
<
StyleSheet
>
>
mReusableSheets
;
}
;
enum
StyleSheetState
{
eSheetStateUnknown
=
0
eSheetNeedsParser
eSheetPending
eSheetLoading
eSheetComplete
}
;
class
Loader
final
{
typedef
mozilla
:
:
net
:
:
ReferrerPolicy
ReferrerPolicy
;
public
:
typedef
nsIStyleSheetLinkingElement
:
:
Completed
Completed
;
typedef
nsIStyleSheetLinkingElement
:
:
HasAlternateRel
HasAlternateRel
;
typedef
nsIStyleSheetLinkingElement
:
:
IsAlternate
IsAlternate
;
typedef
nsIStyleSheetLinkingElement
:
:
IsInline
IsInline
;
typedef
nsIStyleSheetLinkingElement
:
:
MediaMatched
MediaMatched
;
typedef
nsIStyleSheetLinkingElement
:
:
Update
LoadSheetResult
;
typedef
nsIStyleSheetLinkingElement
:
:
SheetInfo
SheetInfo
;
Loader
(
)
;
explicit
Loader
(
mozilla
:
:
dom
:
:
DocGroup
*
)
;
explicit
Loader
(
nsIDocument
*
)
;
private
:
~
Loader
(
)
;
public
:
NS_INLINE_DECL_CYCLE_COLLECTING_NATIVE_REFCOUNTING
(
Loader
)
NS_DECL_CYCLE_COLLECTION_NATIVE_CLASS
(
Loader
)
void
DropDocumentReference
(
)
;
void
SetCompatibilityMode
(
nsCompatibility
aCompatMode
)
{
mCompatMode
=
aCompatMode
;
}
nsCompatibility
GetCompatibilityMode
(
)
{
return
mCompatMode
;
}
void
DocumentStyleSheetSetChanged
(
)
;
Result
<
LoadSheetResult
nsresult
>
LoadInlineStyle
(
const
SheetInfo
&
const
nsAString
&
aBuffer
uint32_t
aLineNumber
nsICSSLoaderObserver
*
aObserver
)
;
Result
<
LoadSheetResult
nsresult
>
LoadStyleLink
(
const
SheetInfo
&
nsICSSLoaderObserver
*
aObserver
)
;
nsresult
LoadChildSheet
(
StyleSheet
*
aParentSheet
SheetLoadData
*
aParentData
nsIURI
*
aURL
dom
:
:
MediaList
*
aMedia
LoaderReusableStyleSheets
*
aSavedSheets
)
;
nsresult
LoadSheetSync
(
nsIURI
*
aURL
SheetParsingMode
aParsingMode
bool
aUseSystemPrincipal
RefPtr
<
StyleSheet
>
*
aSheet
)
;
nsresult
LoadSheetSync
(
nsIURI
*
aURL
RefPtr
<
StyleSheet
>
*
aSheet
)
{
return
LoadSheetSync
(
aURL
eAuthorSheetFeatures
false
aSheet
)
;
}
nsresult
LoadSheet
(
nsIURI
*
aURL
SheetParsingMode
aParsingMode
bool
aUseSystemPrincipal
nsICSSLoaderObserver
*
aObserver
RefPtr
<
StyleSheet
>
*
aSheet
)
;
nsresult
LoadSheet
(
nsIURI
*
aURL
nsIPrincipal
*
aOriginPrincipal
nsICSSLoaderObserver
*
aObserver
RefPtr
<
StyleSheet
>
*
aSheet
)
;
nsresult
LoadSheet
(
nsIURI
*
aURL
bool
aIsPreload
nsIPrincipal
*
aOriginPrincipal
const
Encoding
*
aPreloadEncoding
nsICSSLoaderObserver
*
aObserver
CORSMode
aCORSMode
=
CORS_NONE
ReferrerPolicy
aReferrerPolicy
=
mozilla
:
:
net
:
:
RP_Unset
const
nsAString
&
aIntegrity
=
EmptyString
(
)
)
;
nsresult
Stop
(
void
)
;
bool
GetEnabled
(
)
{
return
mEnabled
;
}
void
SetEnabled
(
bool
aEnabled
)
{
mEnabled
=
aEnabled
;
}
nsIDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
bool
HasPendingLoads
(
)
;
nsresult
AddObserver
(
nsICSSLoaderObserver
*
aObserver
)
;
void
RemoveObserver
(
nsICSSLoaderObserver
*
aObserver
)
;
IsAlternate
IsAlternateSheet
(
const
nsAString
&
aTitle
bool
aHasAlternateRel
)
;
typedef
nsTArray
<
RefPtr
<
SheetLoadData
>
>
LoadDataArray
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
nsresult
ObsoleteSheet
(
nsIURI
*
aURI
)
;
private
:
friend
class
SheetLoadData
;
friend
class
StreamLoader
;
void
BlockOnload
(
)
;
void
UnblockOnload
(
bool
aFireSync
)
;
already_AddRefed
<
nsISerialEventTarget
>
DispatchTarget
(
)
;
nsresult
CheckContentPolicy
(
nsIPrincipal
*
aLoadingPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIURI
*
aTargetURI
nsINode
*
aRequestingNode
bool
aIsPreload
)
;
nsresult
CreateSheet
(
const
SheetInfo
&
aInfo
nsIPrincipal
*
aLoaderPrincipal
css
:
:
SheetParsingMode
aParsingMode
bool
aSyncLoad
StyleSheetState
&
aSheetState
RefPtr
<
StyleSheet
>
*
aSheet
)
{
return
CreateSheet
(
aInfo
.
mURI
aInfo
.
mContent
aLoaderPrincipal
aParsingMode
aInfo
.
mCORSMode
aInfo
.
mReferrerPolicy
aInfo
.
mIntegrity
aSyncLoad
aSheetState
aSheet
)
;
}
nsresult
CreateSheet
(
nsIURI
*
aURI
nsIContent
*
aLinkingContent
nsIPrincipal
*
aLoaderPrincipal
css
:
:
SheetParsingMode
aParsingMode
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
const
nsAString
&
aIntegrity
bool
aSyncLoad
StyleSheetState
&
aSheetState
RefPtr
<
StyleSheet
>
*
aSheet
)
;
MediaMatched
PrepareSheet
(
StyleSheet
*
aSheet
const
nsAString
&
aTitle
const
nsAString
&
aMediaString
dom
:
:
MediaList
*
aMediaList
IsAlternate
)
;
void
InsertSheetInTree
(
StyleSheet
&
aSheet
nsIContent
*
aLinkingContent
)
;
nsresult
InsertChildSheet
(
StyleSheet
*
aSheet
StyleSheet
*
aParentSheet
)
;
nsresult
InternalLoadNonDocumentSheet
(
nsIURI
*
aURL
bool
aIsPreload
SheetParsingMode
aParsingMode
bool
aUseSystemPrincipal
nsIPrincipal
*
aOriginPrincipal
const
Encoding
*
aPreloadEncoding
RefPtr
<
StyleSheet
>
*
aSheet
nsICSSLoaderObserver
*
aObserver
CORSMode
aCORSMode
=
CORS_NONE
ReferrerPolicy
aReferrerPolicy
=
mozilla
:
:
net
:
:
RP_Unset
const
nsAString
&
aIntegrity
=
EmptyString
(
)
)
;
nsresult
PostLoadEvent
(
nsIURI
*
aURI
StyleSheet
*
aSheet
nsICSSLoaderObserver
*
aObserver
IsAlternate
aWasAlternate
MediaMatched
aMediaMatched
nsIStyleSheetLinkingElement
*
aElement
)
;
void
StartDeferredLoads
(
)
;
void
HandleLoadEvent
(
SheetLoadData
*
aEvent
)
;
nsresult
LoadSheet
(
SheetLoadData
*
aLoadData
StyleSheetState
aSheetState
bool
aIsPreLoad
)
;
void
ParseSheet
(
const
nsAString
&
aUTF16
const
nsACString
&
aUTF8
SheetLoadData
*
aLoadData
bool
aAllowAsync
bool
&
aCompleted
)
;
void
DoParseSheetServo
(
const
nsACString
&
aBytes
SheetLoadData
*
aLoadData
bool
aAllowAsync
bool
&
aCompleted
)
;
void
SheetComplete
(
SheetLoadData
*
aLoadData
nsresult
aStatus
)
;
void
DoSheetComplete
(
SheetLoadData
*
aLoadData
LoadDataArray
&
aDatasToNotify
)
;
void
MarkLoadTreeFailed
(
SheetLoadData
*
aLoadData
)
;
struct
Sheets
{
nsBaseHashtable
<
URIPrincipalReferrerPolicyAndCORSModeHashKey
RefPtr
<
StyleSheet
>
StyleSheet
*
>
mCompleteSheets
;
nsDataHashtable
<
URIPrincipalReferrerPolicyAndCORSModeHashKey
SheetLoadData
*
>
mLoadingDatas
;
nsDataHashtable
<
URIPrincipalReferrerPolicyAndCORSModeHashKey
SheetLoadData
*
>
mPendingDatas
;
}
;
nsAutoPtr
<
Sheets
>
mSheets
;
LoadDataArray
mPostedEvents
;
nsTObserverArray
<
nsCOMPtr
<
nsICSSLoaderObserver
>
>
mObservers
;
nsIDocument
*
MOZ_NON_OWNING_REF
mDocument
;
RefPtr
<
mozilla
:
:
dom
:
:
DocGroup
>
mDocGroup
;
uint32_t
mDatasToNotifyOn
;
nsCompatibility
mCompatMode
;
bool
mEnabled
;
nsCOMPtr
<
nsIConsoleReportCollector
>
mReporter
;
#
ifdef
DEBUG
bool
mSyncCallback
;
#
endif
}
;
}
}
#
endif
