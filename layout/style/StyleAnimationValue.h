#
ifndef
mozilla_StyleAnimationValue_h_
#
define
mozilla_StyleAnimationValue_h_
#
include
"
mozilla
/
gfx
/
MatrixFwd
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsStyleCoord
.
h
"
#
include
"
nsStyleTransformMatrix
.
h
"
class
nsIFrame
;
class
nsStyleContext
;
class
gfx3DMatrix
;
namespace
mozilla
{
namespace
css
{
class
StyleRule
;
}
namespace
dom
{
class
Element
;
}
enum
class
CSSPseudoElementType
:
uint8_t
;
struct
PropertyStyleAnimationValuePair
;
class
StyleAnimationValue
{
public
:
static
MOZ_MUST_USE
bool
Add
(
nsCSSPropertyID
aProperty
StyleAnimationValue
&
aDest
const
StyleAnimationValue
&
aValueToAdd
uint32_t
aCount
)
{
return
AddWeighted
(
aProperty
1
.
0
aDest
aCount
aValueToAdd
aDest
)
;
}
static
StyleAnimationValue
Add
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aA
StyleAnimationValue
&
&
aB
)
;
static
double
ComputeColorDistance
(
const
css
:
:
RGBAColorData
&
aStartColor
const
css
:
:
RGBAColorData
&
aEndColor
)
;
static
MOZ_MUST_USE
bool
ComputeDistance
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aStartValue
const
StyleAnimationValue
&
aEndValue
nsStyleContext
*
aStyleContext
double
&
aDistance
)
;
static
MOZ_MUST_USE
bool
Interpolate
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aStartValue
const
StyleAnimationValue
&
aEndValue
double
aPortion
StyleAnimationValue
&
aResultValue
)
{
return
AddWeighted
(
aProperty
1
.
0
-
aPortion
aStartValue
aPortion
aEndValue
aResultValue
)
;
}
static
MOZ_MUST_USE
bool
AddWeighted
(
nsCSSPropertyID
aProperty
double
aCoeff1
const
StyleAnimationValue
&
aValue1
double
aCoeff2
const
StyleAnimationValue
&
aValue2
StyleAnimationValue
&
aResultValue
)
;
static
StyleAnimationValue
Accumulate
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aA
StyleAnimationValue
&
&
aB
uint64_t
aCount
=
1
)
;
static
MOZ_MUST_USE
bool
ComputeValue
(
nsCSSPropertyID
aProperty
mozilla
:
:
dom
:
:
Element
*
aTargetElement
nsStyleContext
*
aStyleContext
const
nsAString
&
aSpecifiedValue
bool
aUseSVGMode
StyleAnimationValue
&
aComputedValue
bool
*
aIsContextSensitive
=
nullptr
)
;
static
MOZ_MUST_USE
bool
ComputeValues
(
nsCSSPropertyID
aProperty
mozilla
:
:
CSSEnabledState
aEnabledState
mozilla
:
:
dom
:
:
Element
*
aTargetElement
nsStyleContext
*
aStyleContext
const
nsAString
&
aSpecifiedValue
bool
aUseSVGMode
nsTArray
<
PropertyStyleAnimationValuePair
>
&
aResult
)
;
static
MOZ_MUST_USE
bool
ComputeValues
(
nsCSSPropertyID
aProperty
mozilla
:
:
CSSEnabledState
aEnabledState
mozilla
:
:
dom
:
:
Element
*
aTargetElement
nsStyleContext
*
aStyleContext
const
nsCSSValue
&
aSpecifiedValue
bool
aUseSVGMode
nsTArray
<
PropertyStyleAnimationValuePair
>
&
aResult
)
;
static
MOZ_MUST_USE
bool
UncomputeValue
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aComputedValue
nsCSSValue
&
aSpecifiedValue
)
;
static
MOZ_MUST_USE
bool
UncomputeValue
(
nsCSSPropertyID
aProperty
StyleAnimationValue
&
&
aComputedValue
nsCSSValue
&
aSpecifiedValue
)
;
static
MOZ_MUST_USE
bool
UncomputeValue
(
nsCSSPropertyID
aProperty
const
StyleAnimationValue
&
aComputedValue
nsAString
&
aSpecifiedValue
)
;
static
MOZ_MUST_USE
bool
ExtractComputedValue
(
nsCSSPropertyID
aProperty
nsStyleContext
*
aStyleContext
StyleAnimationValue
&
aComputedValue
)
;
static
already_AddRefed
<
nsCSSValue
:
:
Array
>
AppendTransformFunction
(
nsCSSKeyword
aTransformFunction
nsCSSValueList
*
*
&
aListTail
)
;
enum
Unit
{
eUnit_Null
eUnit_Normal
eUnit_Auto
eUnit_None
eUnit_Enumerated
eUnit_Visibility
eUnit_Integer
eUnit_Coord
eUnit_Percent
eUnit_Float
eUnit_Color
eUnit_CurrentColor
eUnit_ComplexColor
eUnit_Calc
eUnit_ObjectPosition
eUnit_URL
eUnit_DiscreteCSSValue
eUnit_CSSValuePair
eUnit_CSSValueTriplet
eUnit_CSSRect
eUnit_Dasharray
eUnit_Shadow
eUnit_Shape
eUnit_Filter
eUnit_Transform
eUnit_BackgroundPositionCoord
eUnit_CSSValuePairList
eUnit_UnparsedString
}
;
private
:
Unit
mUnit
;
union
{
int32_t
mInt
;
nscoord
mCoord
;
float
mFloat
;
nsCSSValue
*
mCSSValue
;
nsCSSValuePair
*
mCSSValuePair
;
nsCSSValueTriplet
*
mCSSValueTriplet
;
nsCSSRect
*
mCSSRect
;
nsCSSValue
:
:
Array
*
mCSSValueArray
;
nsCSSValueList
*
mCSSValueList
;
nsCSSValueSharedList
*
mCSSValueSharedList
;
nsCSSValuePairList
*
mCSSValuePairList
;
nsStringBuffer
*
mString
;
css
:
:
ComplexColorValue
*
mComplexColor
;
}
mValue
;
public
:
Unit
GetUnit
(
)
const
{
NS_ASSERTION
(
mUnit
!
=
eUnit_Null
"
uninitialized
"
)
;
return
mUnit
;
}
bool
IsNull
(
)
const
{
return
mUnit
=
=
eUnit_Null
;
}
int32_t
GetIntValue
(
)
const
{
NS_ASSERTION
(
IsIntUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mInt
;
}
nscoord
GetCoordValue
(
)
const
{
NS_ASSERTION
(
mUnit
=
=
eUnit_Coord
"
unit
mismatch
"
)
;
return
mValue
.
mCoord
;
}
float
GetPercentValue
(
)
const
{
NS_ASSERTION
(
mUnit
=
=
eUnit_Percent
"
unit
mismatch
"
)
;
return
mValue
.
mFloat
;
}
float
GetFloatValue
(
)
const
{
NS_ASSERTION
(
mUnit
=
=
eUnit_Float
"
unit
mismatch
"
)
;
return
mValue
.
mFloat
;
}
nsCSSValue
*
GetCSSValueValue
(
)
const
{
NS_ASSERTION
(
IsCSSValueUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValue
;
}
nsCSSValuePair
*
GetCSSValuePairValue
(
)
const
{
NS_ASSERTION
(
IsCSSValuePairUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValuePair
;
}
nsCSSValueTriplet
*
GetCSSValueTripletValue
(
)
const
{
NS_ASSERTION
(
IsCSSValueTripletUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValueTriplet
;
}
nsCSSRect
*
GetCSSRectValue
(
)
const
{
NS_ASSERTION
(
IsCSSRectUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSRect
;
}
nsCSSValue
:
:
Array
*
GetCSSValueArrayValue
(
)
const
{
NS_ASSERTION
(
IsCSSValueArrayUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValueArray
;
}
nsCSSValueList
*
GetCSSValueListValue
(
)
const
{
NS_ASSERTION
(
IsCSSValueListUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValueList
;
}
nsCSSValueSharedList
*
GetCSSValueSharedListValue
(
)
const
{
NS_ASSERTION
(
IsCSSValueSharedListValue
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValueSharedList
;
}
nsCSSValuePairList
*
GetCSSValuePairListValue
(
)
const
{
NS_ASSERTION
(
IsCSSValuePairListUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
mValue
.
mCSSValuePairList
;
}
const
char16_t
*
GetStringBufferValue
(
)
const
{
NS_ASSERTION
(
IsStringUnit
(
mUnit
)
"
unit
mismatch
"
)
;
return
GetBufferValue
(
mValue
.
mString
)
;
}
void
GetStringValue
(
nsAString
&
aBuffer
)
const
{
NS_ASSERTION
(
IsStringUnit
(
mUnit
)
"
unit
mismatch
"
)
;
aBuffer
.
Truncate
(
)
;
uint32_t
len
=
NS_strlen
(
GetBufferValue
(
mValue
.
mString
)
)
;
mValue
.
mString
-
>
ToString
(
len
aBuffer
)
;
}
gfxSize
GetScaleValue
(
const
nsIFrame
*
aForFrame
)
const
;
const
css
:
:
ComplexColorData
&
GetComplexColorData
(
)
const
{
MOZ_ASSERT
(
mUnit
=
=
eUnit_ComplexColor
"
unit
mismatch
"
)
;
return
*
mValue
.
mComplexColor
;
}
StyleComplexColor
GetStyleComplexColorValue
(
)
const
{
return
GetComplexColorData
(
)
.
ToComplexColor
(
)
;
}
UniquePtr
<
nsCSSValueList
>
TakeCSSValueListValue
(
)
{
nsCSSValueList
*
list
=
GetCSSValueListValue
(
)
;
mValue
.
mCSSValueList
=
nullptr
;
mUnit
=
eUnit_Null
;
return
UniquePtr
<
nsCSSValueList
>
(
list
)
;
}
UniquePtr
<
nsCSSValuePairList
>
TakeCSSValuePairListValue
(
)
{
nsCSSValuePairList
*
list
=
GetCSSValuePairListValue
(
)
;
mValue
.
mCSSValuePairList
=
nullptr
;
mUnit
=
eUnit_Null
;
return
UniquePtr
<
nsCSSValuePairList
>
(
list
)
;
}
explicit
StyleAnimationValue
(
Unit
aUnit
=
eUnit_Null
)
:
mUnit
(
aUnit
)
{
NS_ASSERTION
(
aUnit
=
=
eUnit_Null
|
|
aUnit
=
=
eUnit_Normal
|
|
aUnit
=
=
eUnit_Auto
|
|
aUnit
=
=
eUnit_None
"
must
be
valueless
unit
"
)
;
}
StyleAnimationValue
(
const
StyleAnimationValue
&
aOther
)
:
mUnit
(
eUnit_Null
)
{
*
this
=
aOther
;
}
StyleAnimationValue
(
StyleAnimationValue
&
&
aOther
)
:
mUnit
(
aOther
.
mUnit
)
mValue
(
aOther
.
mValue
)
{
aOther
.
mUnit
=
eUnit_Null
;
}
enum
IntegerConstructorType
{
IntegerConstructor
}
;
StyleAnimationValue
(
int32_t
aInt
Unit
aUnit
IntegerConstructorType
)
;
enum
CoordConstructorType
{
CoordConstructor
}
;
StyleAnimationValue
(
nscoord
aLength
CoordConstructorType
)
;
enum
PercentConstructorType
{
PercentConstructor
}
;
StyleAnimationValue
(
float
aPercent
PercentConstructorType
)
;
enum
FloatConstructorType
{
FloatConstructor
}
;
StyleAnimationValue
(
float
aFloat
FloatConstructorType
)
;
enum
ColorConstructorType
{
ColorConstructor
}
;
StyleAnimationValue
(
nscolor
aColor
ColorConstructorType
)
;
~
StyleAnimationValue
(
)
{
FreeValue
(
)
;
}
void
SetNormalValue
(
)
;
void
SetAutoValue
(
)
;
void
SetNoneValue
(
)
;
void
SetIntValue
(
int32_t
aInt
Unit
aUnit
)
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetEnumValue
(
T
aInt
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
mValue
.
mInt
"
)
;
SetIntValue
(
static_cast
<
int32_t
>
(
aInt
)
eUnit_Enumerated
)
;
}
void
SetCoordValue
(
nscoord
aCoord
)
;
void
SetPercentValue
(
float
aPercent
)
;
void
SetFloatValue
(
float
aFloat
)
;
void
SetColorValue
(
nscolor
aColor
)
;
void
SetCurrentColorValue
(
)
;
void
SetComplexColorValue
(
const
StyleComplexColor
&
aColor
)
;
void
SetComplexColorValue
(
already_AddRefed
<
css
:
:
ComplexColorValue
>
aValue
)
;
void
SetUnparsedStringValue
(
const
nsString
&
aString
)
;
void
SetCSSValueArrayValue
(
nsCSSValue
:
:
Array
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSValueValue
(
nsCSSValue
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSValuePairValue
(
nsCSSValuePair
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSValueTripletValue
(
nsCSSValueTriplet
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSRectValue
(
nsCSSRect
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSValueListValue
(
nsCSSValueList
*
aValue
Unit
aUnit
)
;
void
SetAndAdoptCSSValuePairListValue
(
nsCSSValuePairList
*
aValue
)
;
void
SetTransformValue
(
nsCSSValueSharedList
*
aList
)
;
StyleAnimationValue
&
operator
=
(
const
StyleAnimationValue
&
aOther
)
;
StyleAnimationValue
&
operator
=
(
StyleAnimationValue
&
&
aOther
)
{
MOZ_ASSERT
(
this
!
=
&
aOther
"
Do
not
move
itself
"
)
;
if
(
this
!
=
&
aOther
)
{
FreeValue
(
)
;
mUnit
=
aOther
.
mUnit
;
mValue
=
aOther
.
mValue
;
aOther
.
mUnit
=
eUnit_Null
;
}
return
*
this
;
}
bool
operator
=
=
(
const
StyleAnimationValue
&
aOther
)
const
;
bool
operator
!
=
(
const
StyleAnimationValue
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
private
:
void
FreeValue
(
)
;
static
const
char16_t
*
GetBufferValue
(
nsStringBuffer
*
aBuffer
)
{
return
static_cast
<
char16_t
*
>
(
aBuffer
-
>
Data
(
)
)
;
}
static
bool
IsIntUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_Enumerated
|
|
aUnit
=
=
eUnit_Visibility
|
|
aUnit
=
=
eUnit_Integer
;
}
static
bool
IsCSSValueUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_Color
|
|
aUnit
=
=
eUnit_Calc
|
|
aUnit
=
=
eUnit_ObjectPosition
|
|
aUnit
=
=
eUnit_URL
|
|
aUnit
=
=
eUnit_DiscreteCSSValue
;
}
static
bool
IsCSSValuePairUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_CSSValuePair
;
}
static
bool
IsCSSValueTripletUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_CSSValueTriplet
;
}
static
bool
IsCSSRectUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_CSSRect
;
}
static
bool
IsCSSValueArrayUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_Shape
;
}
static
bool
IsCSSValueListUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_Dasharray
|
|
aUnit
=
=
eUnit_Filter
|
|
aUnit
=
=
eUnit_Shadow
|
|
aUnit
=
=
eUnit_BackgroundPositionCoord
;
}
static
bool
IsCSSValueSharedListValue
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_Transform
;
}
static
bool
IsCSSValuePairListUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_CSSValuePairList
;
}
static
bool
IsStringUnit
(
Unit
aUnit
)
{
return
aUnit
=
=
eUnit_UnparsedString
;
}
}
;
struct
AnimationValue
{
StyleAnimationValue
mGecko
;
RefPtr
<
RawServoAnimationValue
>
mServo
;
bool
operator
=
=
(
const
AnimationValue
&
aOther
)
const
;
bool
operator
!
=
(
const
AnimationValue
&
aOther
)
const
;
bool
IsNull
(
)
const
{
return
mGecko
.
IsNull
(
)
&
&
!
mServo
;
}
float
GetOpacity
(
)
const
;
gfxSize
GetScaleValue
(
const
nsIFrame
*
aFrame
)
const
;
void
SerializeSpecifiedValue
(
nsCSSPropertyID
aProperty
nsAString
&
aString
)
const
;
bool
IsInterpolableWith
(
nsCSSPropertyID
aProperty
const
AnimationValue
&
aToValue
)
const
;
}
;
struct
PropertyStyleAnimationValuePair
{
nsCSSPropertyID
mProperty
;
AnimationValue
mValue
;
}
;
}
#
endif
