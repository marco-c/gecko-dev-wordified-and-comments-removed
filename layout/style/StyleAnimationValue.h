#
ifndef
mozilla_StyleAnimationValue_h_
#
define
mozilla_StyleAnimationValue_h_
#
include
"
mozilla
/
AnimatedPropertyID
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStyleTransformMatrix
.
h
"
class
nsIFrame
;
namespace
mozilla
{
namespace
css
{
class
StyleRule
;
}
namespace
dom
{
class
Element
;
}
namespace
layers
{
class
Animatable
;
}
enum
class
PseudoStyleType
:
uint8_t
;
struct
PropertyStyleAnimationValuePair
;
struct
AnimationValue
{
explicit
AnimationValue
(
const
RefPtr
<
StyleAnimationValue
>
&
aValue
)
:
mServo
(
aValue
)
{
}
AnimationValue
(
)
=
default
;
AnimationValue
(
const
AnimationValue
&
aOther
)
=
default
;
AnimationValue
(
AnimationValue
&
&
aOther
)
=
default
;
AnimationValue
&
operator
=
(
const
AnimationValue
&
aOther
)
=
default
;
AnimationValue
&
operator
=
(
AnimationValue
&
&
aOther
)
=
default
;
bool
operator
=
=
(
const
AnimationValue
&
aOther
)
const
;
bool
operator
!
=
(
const
AnimationValue
&
aOther
)
const
;
bool
IsNull
(
)
const
{
return
!
mServo
;
}
float
GetOpacity
(
)
const
;
nscolor
GetColor
(
nscolor
aForegroundColor
)
const
;
bool
IsCurrentColor
(
)
const
;
const
mozilla
:
:
StyleTransform
&
GetTransformProperty
(
)
const
;
const
mozilla
:
:
StyleScale
&
GetScaleProperty
(
)
const
;
const
mozilla
:
:
StyleTranslate
&
GetTranslateProperty
(
)
const
;
const
mozilla
:
:
StyleRotate
&
GetRotateProperty
(
)
const
;
void
GetOffsetPathProperty
(
StyleOffsetPath
&
aOffsetPath
)
const
;
const
mozilla
:
:
LengthPercentage
&
GetOffsetDistanceProperty
(
)
const
;
const
mozilla
:
:
StyleOffsetRotate
&
GetOffsetRotateProperty
(
)
const
;
const
mozilla
:
:
StylePositionOrAuto
&
GetOffsetAnchorProperty
(
)
const
;
const
mozilla
:
:
StyleOffsetPosition
&
GetOffsetPositionProperty
(
)
const
;
bool
IsOffsetPathUrl
(
)
const
;
mozilla
:
:
gfx
:
:
MatrixScales
GetScaleValue
(
const
nsIFrame
*
aFrame
)
const
;
void
SerializeSpecifiedValue
(
const
AnimatedPropertyID
&
aProperty
const
StylePerDocumentStyleData
*
aRawData
nsACString
&
aString
)
const
;
bool
IsInterpolableWith
(
const
AnimatedPropertyID
&
aProperty
const
AnimationValue
&
aToValue
)
const
;
double
ComputeDistance
(
const
AnimationValue
&
aOther
)
const
;
static
AnimationValue
FromString
(
AnimatedPropertyID
&
aProperty
const
nsACString
&
aValue
dom
:
:
Element
*
aElement
)
;
static
already_AddRefed
<
StyleAnimationValue
>
FromAnimatable
(
nsCSSPropertyID
aProperty
const
layers
:
:
Animatable
&
aAnimatable
)
;
RefPtr
<
StyleAnimationValue
>
mServo
;
}
;
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
const
AnimationValue
&
aValue
)
{
MOZ_ASSERT
(
aValue
.
mServo
)
;
nsAutoCString
s
;
Servo_AnimationValue_Dump
(
aValue
.
mServo
&
s
)
;
return
aOut
<
<
s
;
}
struct
PropertyStyleAnimationValuePair
{
AnimatedPropertyID
mProperty
;
AnimationValue
mValue
;
}
;
}
#
endif
