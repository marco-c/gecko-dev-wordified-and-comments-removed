#
include
"
nsTransitionManager
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
mozilla
/
dom
/
CSSTransitionBinding
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsRuleProcessorData
.
h
"
#
include
"
nsRuleWalker
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
EffectSet
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimeline
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
Layers
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsStyleChangeList
.
h
"
#
include
"
nsStyleSet
.
h
"
#
include
"
mozilla
/
RestyleManagerHandle
.
h
"
#
include
"
mozilla
/
RestyleManagerHandleInlines
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
using
mozilla
:
:
TimeStamp
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
dom
:
:
Animation
;
using
mozilla
:
:
dom
:
:
AnimationPlayState
;
using
mozilla
:
:
dom
:
:
CSSTransition
;
using
mozilla
:
:
dom
:
:
KeyframeEffectReadOnly
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
typedef
mozilla
:
:
ComputedTiming
:
:
AnimationPhase
AnimationPhase
;
namespace
{
struct
TransitionEventParams
{
EventMessage
mMessage
;
StickyTimeDuration
mElapsedTime
;
TimeStamp
mTimeStamp
;
}
;
}
double
ElementPropertyTransition
:
:
CurrentValuePortion
(
)
const
{
MOZ_ASSERT
(
!
GetLocalTime
(
)
.
IsNull
(
)
"
Getting
the
value
portion
of
an
animation
that
'
s
not
being
"
"
sampled
"
)
;
TimingParams
timingToUse
=
SpecifiedTiming
(
)
;
timingToUse
.
mFill
=
dom
:
:
FillMode
:
:
Both
;
ComputedTiming
computedTiming
=
GetComputedTiming
(
&
timingToUse
)
;
MOZ_ASSERT
(
!
computedTiming
.
mProgress
.
IsNull
(
)
"
Got
a
null
progress
for
a
fill
mode
of
'
both
'
"
)
;
MOZ_ASSERT
(
mKeyframes
.
Length
(
)
=
=
2
"
Should
have
two
animation
keyframes
for
a
transition
"
)
;
return
ComputedTimingFunction
:
:
GetPortion
(
mKeyframes
[
0
]
.
mTimingFunction
computedTiming
.
mProgress
.
Value
(
)
computedTiming
.
mBeforeFlag
)
;
}
void
ElementPropertyTransition
:
:
UpdateStartValueFromReplacedTransition
(
)
{
if
(
!
mReplacedTransition
)
{
return
;
}
MOZ_ASSERT
(
nsCSSProps
:
:
PropHasFlags
(
TransitionProperty
(
)
CSS_PROPERTY_CAN_ANIMATE_ON_COMPOSITOR
)
"
The
transition
property
should
be
able
to
be
run
on
the
"
"
compositor
"
)
;
MOZ_ASSERT
(
mTarget
&
&
mTarget
-
>
mElement
-
>
OwnerDoc
(
)
"
We
should
have
a
valid
document
at
this
moment
"
)
;
dom
:
:
DocumentTimeline
*
timeline
=
mTarget
-
>
mElement
-
>
OwnerDoc
(
)
-
>
Timeline
(
)
;
ComputedTiming
computedTiming
=
GetComputedTimingAt
(
dom
:
:
CSSTransition
:
:
GetCurrentTimeAt
(
*
timeline
TimeStamp
:
:
Now
(
)
mReplacedTransition
-
>
mStartTime
mReplacedTransition
-
>
mPlaybackRate
)
mReplacedTransition
-
>
mTiming
mReplacedTransition
-
>
mPlaybackRate
)
;
if
(
!
computedTiming
.
mProgress
.
IsNull
(
)
)
{
double
valuePosition
=
ComputedTimingFunction
:
:
GetPortion
(
mReplacedTransition
-
>
mTimingFunction
computedTiming
.
mProgress
.
Value
(
)
computedTiming
.
mBeforeFlag
)
;
StyleAnimationValue
startValue
;
if
(
StyleAnimationValue
:
:
Interpolate
(
mProperties
[
0
]
.
mProperty
mReplacedTransition
-
>
mFromValue
mReplacedTransition
-
>
mToValue
valuePosition
startValue
)
)
{
MOZ_ASSERT
(
mProperties
.
Length
(
)
=
=
1
&
&
mProperties
[
0
]
.
mSegments
.
Length
(
)
=
=
1
"
The
transition
should
have
one
property
and
one
segment
"
)
;
nsCSSValue
cssValue
;
DebugOnly
<
bool
>
uncomputeResult
=
StyleAnimationValue
:
:
UncomputeValue
(
mProperties
[
0
]
.
mProperty
startValue
cssValue
)
;
mProperties
[
0
]
.
mSegments
[
0
]
.
mFromValue
=
Move
(
startValue
)
;
MOZ_ASSERT
(
uncomputeResult
"
UncomputeValue
should
not
fail
"
)
;
MOZ_ASSERT
(
mKeyframes
.
Length
(
)
=
=
2
"
Transitions
should
have
exactly
two
animation
keyframes
"
)
;
MOZ_ASSERT
(
mKeyframes
[
0
]
.
mPropertyValues
.
Length
(
)
=
=
1
"
Transitions
should
have
exactly
one
property
in
their
first
"
"
frame
"
)
;
mKeyframes
[
0
]
.
mPropertyValues
[
0
]
.
mValue
=
cssValue
;
}
}
mReplacedTransition
.
reset
(
)
;
}
JSObject
*
CSSTransition
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
CSSTransitionBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
CSSTransition
:
:
GetTransitionProperty
(
nsString
&
aRetVal
)
const
{
MOZ_ASSERT
(
eCSSProperty_UNKNOWN
!
=
mTransitionProperty
"
Transition
Property
should
be
initialized
"
)
;
aRetVal
=
NS_ConvertUTF8toUTF16
(
nsCSSProps
:
:
GetStringValue
(
mTransitionProperty
)
)
;
}
AnimationPlayState
CSSTransition
:
:
PlayStateFromJS
(
)
const
{
FlushStyle
(
)
;
return
Animation
:
:
PlayStateFromJS
(
)
;
}
void
CSSTransition
:
:
PlayFromJS
(
ErrorResult
&
aRv
)
{
FlushStyle
(
)
;
Animation
:
:
PlayFromJS
(
aRv
)
;
}
void
CSSTransition
:
:
UpdateTiming
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
{
if
(
mNeedsNewAnimationIndexWhenRun
&
&
PlayState
(
)
!
=
AnimationPlayState
:
:
Idle
)
{
mAnimationIndex
=
sNextAnimationIndex
+
+
;
mNeedsNewAnimationIndexWhenRun
=
false
;
}
Animation
:
:
UpdateTiming
(
aSeekFlag
aSyncNotifyFlag
)
;
}
void
CSSTransition
:
:
QueueEvents
(
)
{
if
(
!
mEffect
|
|
!
mOwningElement
.
IsSet
(
)
)
{
return
;
}
dom
:
:
Element
*
owningElement
;
CSSPseudoElementType
owningPseudoType
;
mOwningElement
.
GetElement
(
owningElement
owningPseudoType
)
;
MOZ_ASSERT
(
owningElement
"
Owning
element
should
be
set
"
)
;
nsPresContext
*
presContext
=
mOwningElement
.
GetRenderedPresContext
(
)
;
if
(
!
presContext
)
{
return
;
}
ComputedTiming
computedTiming
=
mEffect
-
>
GetComputedTiming
(
)
;
const
StickyTimeDuration
zeroDuration
;
StickyTimeDuration
intervalStartTime
=
std
:
:
max
(
std
:
:
min
(
StickyTimeDuration
(
-
mEffect
-
>
SpecifiedTiming
(
)
.
mDelay
)
computedTiming
.
mActiveDuration
)
zeroDuration
)
;
StickyTimeDuration
intervalEndTime
=
std
:
:
max
(
std
:
:
min
(
(
EffectEnd
(
)
-
mEffect
-
>
SpecifiedTiming
(
)
.
mDelay
)
computedTiming
.
mActiveDuration
)
zeroDuration
)
;
TimeStamp
zeroTimeStamp
=
AnimationTimeToTimeStamp
(
zeroDuration
)
;
TimeStamp
startTimeStamp
=
ElapsedTimeToTimeStamp
(
intervalStartTime
)
;
TimeStamp
endTimeStamp
=
ElapsedTimeToTimeStamp
(
intervalEndTime
)
;
TransitionPhase
currentPhase
;
if
(
mPendingState
!
=
PendingState
:
:
NotPending
&
&
(
mPreviousTransitionPhase
=
=
TransitionPhase
:
:
Idle
|
|
mPreviousTransitionPhase
=
=
TransitionPhase
:
:
Pending
)
)
{
currentPhase
=
TransitionPhase
:
:
Pending
;
}
else
{
currentPhase
=
static_cast
<
TransitionPhase
>
(
computedTiming
.
mPhase
)
;
}
AutoTArray
<
TransitionEventParams
3
>
events
;
if
(
mPreviousTransitionPhase
!
=
TransitionPhase
:
:
Idle
&
&
currentPhase
=
=
TransitionPhase
:
:
Idle
)
{
StickyTimeDuration
activeTime
(
0
)
;
TimeStamp
activeTimeStamp
=
ElapsedTimeToTimeStamp
(
activeTime
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionCancel
activeTime
activeTimeStamp
}
)
;
}
switch
(
mPreviousTransitionPhase
)
{
case
TransitionPhase
:
:
Idle
:
if
(
currentPhase
=
=
TransitionPhase
:
:
Pending
|
|
currentPhase
=
=
TransitionPhase
:
:
Before
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionRun
intervalStartTime
zeroTimeStamp
}
)
;
}
else
if
(
currentPhase
=
=
TransitionPhase
:
:
Active
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionRun
intervalStartTime
zeroTimeStamp
}
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalStartTime
startTimeStamp
}
)
;
}
else
if
(
currentPhase
=
=
TransitionPhase
:
:
After
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionRun
intervalStartTime
zeroTimeStamp
}
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalStartTime
startTimeStamp
}
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionEnd
intervalEndTime
endTimeStamp
}
)
;
}
break
;
case
TransitionPhase
:
:
Pending
:
case
TransitionPhase
:
:
Before
:
if
(
currentPhase
=
=
TransitionPhase
:
:
Active
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalStartTime
startTimeStamp
}
)
;
}
else
if
(
currentPhase
=
=
TransitionPhase
:
:
After
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalStartTime
startTimeStamp
}
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionEnd
intervalEndTime
endTimeStamp
}
)
;
}
break
;
case
TransitionPhase
:
:
Active
:
if
(
currentPhase
=
=
TransitionPhase
:
:
After
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionEnd
intervalEndTime
endTimeStamp
}
)
;
}
else
if
(
currentPhase
=
=
TransitionPhase
:
:
Before
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionEnd
intervalStartTime
startTimeStamp
}
)
;
}
break
;
case
TransitionPhase
:
:
After
:
if
(
currentPhase
=
=
TransitionPhase
:
:
Active
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalEndTime
startTimeStamp
}
)
;
}
else
if
(
currentPhase
=
=
TransitionPhase
:
:
Before
)
{
events
.
AppendElement
(
TransitionEventParams
{
eTransitionStart
intervalEndTime
startTimeStamp
}
)
;
events
.
AppendElement
(
TransitionEventParams
{
eTransitionEnd
intervalStartTime
endTimeStamp
}
)
;
}
break
;
}
mPreviousTransitionPhase
=
currentPhase
;
nsTransitionManager
*
manager
=
presContext
-
>
TransitionManager
(
)
;
for
(
const
TransitionEventParams
&
evt
:
events
)
{
manager
-
>
QueueEvent
(
TransitionEventInfo
(
owningElement
owningPseudoType
evt
.
mMessage
TransitionProperty
(
)
evt
.
mElapsedTime
evt
.
mTimeStamp
this
)
)
;
}
}
void
CSSTransition
:
:
Tick
(
)
{
Animation
:
:
Tick
(
)
;
QueueEvents
(
)
;
}
nsCSSPropertyID
CSSTransition
:
:
TransitionProperty
(
)
const
{
MOZ_ASSERT
(
eCSSProperty_UNKNOWN
!
=
mTransitionProperty
"
Transition
property
should
be
initialized
"
)
;
return
mTransitionProperty
;
}
StyleAnimationValue
CSSTransition
:
:
ToValue
(
)
const
{
MOZ_ASSERT
(
!
mTransitionToValue
.
IsNull
(
)
"
Transition
ToValue
should
be
initialized
"
)
;
return
mTransitionToValue
;
}
bool
CSSTransition
:
:
HasLowerCompositeOrderThan
(
const
CSSTransition
&
aOther
)
const
{
MOZ_ASSERT
(
IsTiedToMarkup
(
)
&
&
aOther
.
IsTiedToMarkup
(
)
"
Should
only
be
called
for
CSS
transitions
that
are
sorted
"
"
as
CSS
transitions
(
i
.
e
.
tied
to
CSS
markup
)
"
)
;
if
(
&
aOther
=
=
this
)
{
return
false
;
}
if
(
!
mOwningElement
.
Equals
(
aOther
.
mOwningElement
)
)
{
return
mOwningElement
.
LessThan
(
aOther
.
mOwningElement
)
;
}
if
(
mAnimationIndex
!
=
aOther
.
mAnimationIndex
)
{
return
mAnimationIndex
<
aOther
.
mAnimationIndex
;
}
return
nsCSSProps
:
:
GetStringValue
(
TransitionProperty
(
)
)
<
nsCSSProps
:
:
GetStringValue
(
aOther
.
TransitionProperty
(
)
)
;
}
Nullable
<
TimeDuration
>
CSSTransition
:
:
GetCurrentTimeAt
(
const
dom
:
:
DocumentTimeline
&
aTimeline
const
TimeStamp
&
aBaseTime
const
TimeDuration
&
aStartTime
double
aPlaybackRate
)
{
Nullable
<
TimeDuration
>
result
;
Nullable
<
TimeDuration
>
timelineTime
=
aTimeline
.
ToTimelineTime
(
aBaseTime
)
;
if
(
!
timelineTime
.
IsNull
(
)
)
{
result
.
SetValue
(
(
timelineTime
.
Value
(
)
-
aStartTime
)
.
MultDouble
(
aPlaybackRate
)
)
;
}
return
result
;
}
void
CSSTransition
:
:
SetEffectFromStyle
(
dom
:
:
AnimationEffectReadOnly
*
aEffect
)
{
Animation
:
:
SetEffectNoUpdate
(
aEffect
)
;
ElementPropertyTransition
*
pt
=
aEffect
?
aEffect
-
>
AsTransition
(
)
:
nullptr
;
if
(
eCSSProperty_UNKNOWN
=
=
mTransitionProperty
&
&
pt
)
{
mTransitionProperty
=
pt
-
>
TransitionProperty
(
)
;
mTransitionToValue
=
pt
-
>
ToValue
(
)
;
}
}
NS_IMPL_CYCLE_COLLECTION
(
nsTransitionManager
mEventDispatcher
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
nsTransitionManager
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
nsTransitionManager
Release
)
static
inline
bool
ExtractNonDiscreteComputedValue
(
nsCSSPropertyID
aProperty
nsStyleContext
*
aStyleContext
StyleAnimationValue
&
aComputedValue
)
{
return
(
nsCSSProps
:
:
kAnimTypeTable
[
aProperty
]
!
=
eStyleAnimType_Discrete
|
|
aProperty
=
=
eCSSProperty_visibility
)
&
&
StyleAnimationValue
:
:
ExtractComputedValue
(
aProperty
aStyleContext
aComputedValue
)
;
}
void
nsTransitionManager
:
:
StyleContextChanged
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aOldStyleContext
RefPtr
<
nsStyleContext
>
*
aNewStyleContext
)
{
nsStyleContext
*
newStyleContext
=
*
aNewStyleContext
;
NS_PRECONDITION
(
aOldStyleContext
-
>
GetPseudo
(
)
=
=
newStyleContext
-
>
GetPseudo
(
)
"
pseudo
type
mismatch
"
)
;
if
(
mInAnimationOnlyStyleUpdate
)
{
return
;
}
if
(
!
mPresContext
-
>
IsDynamic
(
)
)
{
return
;
}
if
(
aOldStyleContext
-
>
HasPseudoElementData
(
)
!
=
newStyleContext
-
>
HasPseudoElementData
(
)
)
{
return
;
}
const
nsStyleDisplay
*
disp
=
newStyleContext
-
>
StyleDisplay
(
)
;
CSSPseudoElementType
pseudoType
=
newStyleContext
-
>
GetPseudoType
(
)
;
if
(
pseudoType
!
=
CSSPseudoElementType
:
:
NotPseudo
)
{
if
(
pseudoType
!
=
CSSPseudoElementType
:
:
before
&
&
pseudoType
!
=
CSSPseudoElementType
:
:
after
)
{
return
;
}
NS_ASSERTION
(
(
pseudoType
=
=
CSSPseudoElementType
:
:
before
&
&
aElement
-
>
IsGeneratedContentContainerForBefore
(
)
)
|
|
(
pseudoType
=
=
CSSPseudoElementType
:
:
after
&
&
aElement
-
>
IsGeneratedContentContainerForAfter
(
)
)
"
Unexpected
aElement
coming
through
"
)
;
aElement
=
aElement
-
>
GetParent
(
)
-
>
AsElement
(
)
;
}
CSSTransitionCollection
*
collection
=
CSSTransitionCollection
:
:
GetAnimationCollection
(
aElement
pseudoType
)
;
if
(
!
collection
&
&
disp
-
>
mTransitionPropertyCount
=
=
1
&
&
disp
-
>
mTransitions
[
0
]
.
GetCombinedDuration
(
)
<
=
0
.
0f
)
{
return
;
}
MOZ_ASSERT
(
mPresContext
-
>
RestyleManager
(
)
-
>
IsGecko
(
)
"
ServoRestyleManager
should
not
use
nsTransitionManager
"
"
for
transitions
"
)
;
if
(
collection
&
&
collection
-
>
mCheckGeneration
=
=
mPresContext
-
>
RestyleManager
(
)
-
>
AsGecko
(
)
-
>
GetAnimationGeneration
(
)
)
{
return
;
}
if
(
newStyleContext
-
>
GetParent
(
)
&
&
newStyleContext
-
>
GetParent
(
)
-
>
HasPseudoElementData
(
)
)
{
return
;
}
NS_WARNING_ASSERTION
(
!
mPresContext
-
>
EffectCompositor
(
)
-
>
HasThrottledStyleUpdates
(
)
"
throttled
animations
not
up
to
date
"
)
;
RefPtr
<
nsStyleContext
>
afterChangeStyle
;
if
(
collection
)
{
MOZ_ASSERT
(
mPresContext
-
>
StyleSet
(
)
-
>
IsGecko
(
)
"
ServoStyleSets
should
not
use
nsTransitionManager
"
"
for
transitions
"
)
;
nsStyleSet
*
styleSet
=
mPresContext
-
>
StyleSet
(
)
-
>
AsGecko
(
)
;
afterChangeStyle
=
styleSet
-
>
ResolveStyleWithoutAnimation
(
aElement
newStyleContext
eRestyle_CSSTransitions
)
;
}
else
{
afterChangeStyle
=
newStyleContext
;
}
nsAutoAnimationMutationBatch
mb
(
aElement
-
>
OwnerDoc
(
)
)
;
DebugOnly
<
bool
>
startedAny
=
false
;
if
(
!
afterChangeStyle
-
>
IsInDisplayNoneSubtree
(
)
)
{
startedAny
=
UpdateTransitions
(
disp
aElement
collection
aOldStyleContext
afterChangeStyle
)
;
}
MOZ_ASSERT
(
!
startedAny
|
|
collection
"
must
have
element
transitions
if
we
started
any
transitions
"
)
;
EffectCompositor
:
:
CascadeLevel
cascadeLevel
=
EffectCompositor
:
:
CascadeLevel
:
:
Transitions
;
if
(
collection
)
{
collection
-
>
UpdateCheckGeneration
(
mPresContext
)
;
mPresContext
-
>
EffectCompositor
(
)
-
>
MaybeUpdateAnimationRule
(
aElement
pseudoType
cascadeLevel
newStyleContext
)
;
}
*
aNewStyleContext
=
afterChangeStyle
;
if
(
collection
)
{
mPresContext
-
>
EffectCompositor
(
)
-
>
PostRestyleForAnimation
(
aElement
pseudoType
cascadeLevel
)
;
}
}
bool
nsTransitionManager
:
:
UpdateTransitions
(
const
nsStyleDisplay
*
aDisp
dom
:
:
Element
*
aElement
CSSTransitionCollection
*
&
aElementTransitions
nsStyleContext
*
aOldStyleContext
nsStyleContext
*
aNewStyleContext
)
{
MOZ_ASSERT
(
aDisp
"
Null
nsStyleDisplay
"
)
;
MOZ_ASSERT
(
!
aElementTransitions
|
|
aElementTransitions
-
>
mElement
=
=
aElement
"
Element
mismatch
"
)
;
bool
startedAny
=
false
;
nsCSSPropertyIDSet
whichStarted
;
for
(
uint32_t
i
=
aDisp
-
>
mTransitionPropertyCount
;
i
-
-
!
=
0
;
)
{
const
StyleTransition
&
t
=
aDisp
-
>
mTransitions
[
i
]
;
if
(
t
.
GetCombinedDuration
(
)
>
0
.
0f
)
{
nsCSSPropertyID
property
=
t
.
GetProperty
(
)
;
if
(
property
=
=
eCSSPropertyExtra_no_properties
|
|
property
=
=
eCSSPropertyExtra_variable
|
|
property
=
=
eCSSProperty_UNKNOWN
)
{
}
else
if
(
property
=
=
eCSSPropertyExtra_all_properties
)
{
for
(
nsCSSPropertyID
p
=
nsCSSPropertyID
(
0
)
;
p
<
eCSSProperty_COUNT_no_shorthands
;
p
=
nsCSSPropertyID
(
p
+
1
)
)
{
ConsiderInitiatingTransition
(
p
t
aElement
aElementTransitions
aOldStyleContext
aNewStyleContext
&
startedAny
&
whichStarted
)
;
}
}
else
if
(
nsCSSProps
:
:
IsShorthand
(
property
)
)
{
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
subprop
property
CSSEnabledState
:
:
eForAllContent
)
{
ConsiderInitiatingTransition
(
*
subprop
t
aElement
aElementTransitions
aOldStyleContext
aNewStyleContext
&
startedAny
&
whichStarted
)
;
}
}
else
{
ConsiderInitiatingTransition
(
property
t
aElement
aElementTransitions
aOldStyleContext
aNewStyleContext
&
startedAny
&
whichStarted
)
;
}
}
}
if
(
aElementTransitions
)
{
bool
checkProperties
=
aDisp
-
>
mTransitions
[
0
]
.
GetProperty
(
)
!
=
eCSSPropertyExtra_all_properties
;
nsCSSPropertyIDSet
allTransitionProperties
;
if
(
checkProperties
)
{
for
(
uint32_t
i
=
aDisp
-
>
mTransitionPropertyCount
;
i
-
-
!
=
0
;
)
{
const
StyleTransition
&
t
=
aDisp
-
>
mTransitions
[
i
]
;
nsCSSPropertyID
property
=
t
.
GetProperty
(
)
;
if
(
property
=
=
eCSSPropertyExtra_no_properties
|
|
property
=
=
eCSSPropertyExtra_variable
|
|
property
=
=
eCSSProperty_UNKNOWN
)
{
}
else
if
(
property
=
=
eCSSPropertyExtra_all_properties
)
{
for
(
nsCSSPropertyID
p
=
nsCSSPropertyID
(
0
)
;
p
<
eCSSProperty_COUNT_no_shorthands
;
p
=
nsCSSPropertyID
(
p
+
1
)
)
{
allTransitionProperties
.
AddProperty
(
p
)
;
}
}
else
if
(
nsCSSProps
:
:
IsShorthand
(
property
)
)
{
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
subprop
property
CSSEnabledState
:
:
eForAllContent
)
{
allTransitionProperties
.
AddProperty
(
*
subprop
)
;
}
}
else
{
allTransitionProperties
.
AddProperty
(
property
)
;
}
}
}
OwningCSSTransitionPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
size_t
i
=
animations
.
Length
(
)
;
MOZ_ASSERT
(
i
!
=
0
"
empty
transitions
list
?
"
)
;
StyleAnimationValue
currentValue
;
do
{
-
-
i
;
CSSTransition
*
anim
=
animations
[
i
]
;
if
(
(
checkProperties
&
&
!
allTransitionProperties
.
HasProperty
(
anim
-
>
TransitionProperty
(
)
)
)
|
|
!
ExtractNonDiscreteComputedValue
(
anim
-
>
TransitionProperty
(
)
aNewStyleContext
currentValue
)
|
|
currentValue
!
=
anim
-
>
ToValue
(
)
)
{
if
(
anim
-
>
HasCurrentEffect
(
)
)
{
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
}
anim
-
>
CancelFromStyle
(
)
;
animations
.
RemoveElementAt
(
i
)
;
}
}
while
(
i
!
=
0
)
;
if
(
animations
.
IsEmpty
(
)
)
{
aElementTransitions
-
>
Destroy
(
)
;
aElementTransitions
=
nullptr
;
}
}
return
startedAny
;
}
void
nsTransitionManager
:
:
ConsiderInitiatingTransition
(
nsCSSPropertyID
aProperty
const
StyleTransition
&
aTransition
dom
:
:
Element
*
aElement
CSSTransitionCollection
*
&
aElementTransitions
nsStyleContext
*
aOldStyleContext
nsStyleContext
*
aNewStyleContext
bool
*
aStartedAny
nsCSSPropertyIDSet
*
aWhichStarted
)
{
MOZ_ASSERT
(
!
nsCSSProps
:
:
IsShorthand
(
aProperty
)
"
property
out
of
range
"
)
;
NS_ASSERTION
(
!
aElementTransitions
|
|
aElementTransitions
-
>
mElement
=
=
aElement
"
Element
mismatch
"
)
;
if
(
!
nsCSSProps
:
:
IsEnabled
(
aProperty
CSSEnabledState
:
:
eForAllContent
)
)
{
return
;
}
if
(
aWhichStarted
-
>
HasProperty
(
aProperty
)
)
{
return
;
}
if
(
nsCSSProps
:
:
kAnimTypeTable
[
aProperty
]
=
=
eStyleAnimType_None
)
{
return
;
}
dom
:
:
DocumentTimeline
*
timeline
=
aElement
-
>
OwnerDoc
(
)
-
>
Timeline
(
)
;
StyleAnimationValue
startValue
endValue
dummyValue
;
bool
haveValues
=
ExtractNonDiscreteComputedValue
(
aProperty
aOldStyleContext
startValue
)
&
&
ExtractNonDiscreteComputedValue
(
aProperty
aNewStyleContext
endValue
)
;
bool
haveChange
=
startValue
!
=
endValue
;
bool
shouldAnimate
=
haveValues
&
&
haveChange
&
&
StyleAnimationValue
:
:
Interpolate
(
aProperty
startValue
endValue
0
.
5
dummyValue
)
;
bool
haveCurrentTransition
=
false
;
size_t
currentIndex
=
nsTArray
<
ElementPropertyTransition
>
:
:
NoIndex
;
const
ElementPropertyTransition
*
oldPT
=
nullptr
;
if
(
aElementTransitions
)
{
OwningCSSTransitionPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
for
(
size_t
i
=
0
i_end
=
animations
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
if
(
animations
[
i
]
-
>
TransitionProperty
(
)
=
=
aProperty
)
{
haveCurrentTransition
=
true
;
currentIndex
=
i
;
oldPT
=
animations
[
i
]
-
>
GetEffect
(
)
?
animations
[
i
]
-
>
GetEffect
(
)
-
>
AsTransition
(
)
:
nullptr
;
break
;
}
}
}
if
(
haveCurrentTransition
&
&
haveValues
&
&
aElementTransitions
-
>
mAnimations
[
currentIndex
]
-
>
ToValue
(
)
=
=
endValue
)
{
return
;
}
if
(
!
shouldAnimate
)
{
if
(
haveCurrentTransition
)
{
OwningCSSTransitionPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
animations
[
currentIndex
]
-
>
CancelFromStyle
(
)
;
oldPT
=
nullptr
;
animations
.
RemoveElementAt
(
currentIndex
)
;
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
if
(
animations
.
IsEmpty
(
)
)
{
aElementTransitions
-
>
Destroy
(
)
;
aElementTransitions
=
nullptr
;
}
}
return
;
}
const
nsTimingFunction
&
tf
=
aTransition
.
GetTimingFunction
(
)
;
float
delay
=
aTransition
.
GetDelay
(
)
;
float
duration
=
aTransition
.
GetDuration
(
)
;
if
(
duration
<
0
.
0
)
{
duration
=
0
.
0
;
}
StyleAnimationValue
startForReversingTest
=
startValue
;
double
reversePortion
=
1
.
0
;
if
(
haveCurrentTransition
&
&
aElementTransitions
-
>
mAnimations
[
currentIndex
]
-
>
HasCurrentEffect
(
)
&
&
oldPT
&
&
oldPT
-
>
mStartForReversingTest
=
=
endValue
)
{
double
valuePortion
=
oldPT
-
>
CurrentValuePortion
(
)
*
oldPT
-
>
mReversePortion
+
(
1
.
0
-
oldPT
-
>
mReversePortion
)
;
if
(
valuePortion
<
0
.
0
)
{
valuePortion
=
-
valuePortion
;
}
if
(
valuePortion
>
1
.
0
)
{
valuePortion
=
1
.
0
;
}
if
(
delay
<
0
.
0f
)
{
delay
*
=
valuePortion
;
}
duration
*
=
valuePortion
;
startForReversingTest
=
oldPT
-
>
ToValue
(
)
;
reversePortion
=
valuePortion
;
}
TimingParams
timing
;
timing
.
mDuration
.
emplace
(
StickyTimeDuration
:
:
FromMilliseconds
(
duration
)
)
;
timing
.
mDelay
=
TimeDuration
:
:
FromMilliseconds
(
delay
)
;
timing
.
mIterations
=
1
.
0
;
timing
.
mDirection
=
dom
:
:
PlaybackDirection
:
:
Normal
;
timing
.
mFill
=
dom
:
:
FillMode
:
:
Backwards
;
Maybe
<
OwningAnimationTarget
>
target
;
target
.
emplace
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
KeyframeEffectParams
effectOptions
;
RefPtr
<
ElementPropertyTransition
>
pt
=
new
ElementPropertyTransition
(
aElement
-
>
OwnerDoc
(
)
target
timing
startForReversingTest
reversePortion
effectOptions
)
;
pt
-
>
SetKeyframes
(
GetTransitionKeyframes
(
aNewStyleContext
aProperty
Move
(
startValue
)
Move
(
endValue
)
tf
)
aNewStyleContext
)
;
MOZ_ASSERT
(
mPresContext
-
>
RestyleManager
(
)
-
>
IsGecko
(
)
"
ServoRestyleManager
should
not
use
nsTransitionManager
"
"
for
transitions
"
)
;
RefPtr
<
CSSTransition
>
animation
=
new
CSSTransition
(
mPresContext
-
>
Document
(
)
-
>
GetScopeObject
(
)
)
;
animation
-
>
SetOwningElement
(
OwningElementRef
(
*
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
)
;
animation
-
>
SetTimelineNoUpdate
(
timeline
)
;
animation
-
>
SetCreationSequence
(
mPresContext
-
>
RestyleManager
(
)
-
>
AsGecko
(
)
-
>
GetAnimationGeneration
(
)
)
;
animation
-
>
SetEffectFromStyle
(
pt
)
;
animation
-
>
PlayFromStyle
(
)
;
if
(
!
aElementTransitions
)
{
bool
createdCollection
=
false
;
aElementTransitions
=
CSSTransitionCollection
:
:
GetOrCreateAnimationCollection
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
&
createdCollection
)
;
if
(
!
aElementTransitions
)
{
MOZ_ASSERT
(
!
createdCollection
"
outparam
should
agree
with
return
value
"
)
;
NS_WARNING
(
"
allocating
collection
failed
"
)
;
return
;
}
if
(
createdCollection
)
{
AddElementCollection
(
aElementTransitions
)
;
}
}
OwningCSSTransitionPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
#
ifdef
DEBUG
for
(
size_t
i
=
0
i_end
=
animations
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
MOZ_ASSERT
(
i
=
=
currentIndex
|
|
animations
[
i
]
-
>
TransitionProperty
(
)
!
=
aProperty
"
duplicate
transitions
for
property
"
)
;
}
#
endif
if
(
haveCurrentTransition
)
{
if
(
oldPT
&
&
oldPT
-
>
IsCurrent
(
)
&
&
oldPT
-
>
IsRunningOnCompositor
(
)
&
&
!
oldPT
-
>
GetAnimation
(
)
-
>
GetStartTime
(
)
.
IsNull
(
)
&
&
timeline
=
=
oldPT
-
>
GetAnimation
(
)
-
>
GetTimeline
(
)
)
{
const
AnimationPropertySegment
&
segment
=
oldPT
-
>
Properties
(
)
[
0
]
.
mSegments
[
0
]
;
pt
-
>
mReplacedTransition
.
emplace
(
ElementPropertyTransition
:
:
ReplacedTransitionProperties
(
{
oldPT
-
>
GetAnimation
(
)
-
>
GetStartTime
(
)
.
Value
(
)
oldPT
-
>
GetAnimation
(
)
-
>
PlaybackRate
(
)
oldPT
-
>
SpecifiedTiming
(
)
segment
.
mTimingFunction
segment
.
mFromValue
segment
.
mToValue
}
)
)
;
}
animations
[
currentIndex
]
-
>
CancelFromStyle
(
)
;
oldPT
=
nullptr
;
animations
[
currentIndex
]
=
animation
;
}
else
{
if
(
!
animations
.
AppendElement
(
animation
)
)
{
NS_WARNING
(
"
out
of
memory
"
)
;
return
;
}
}
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
*
aStartedAny
=
true
;
aWhichStarted
-
>
AddProperty
(
aProperty
)
;
}
static
Keyframe
&
AppendKeyframe
(
double
aOffset
nsCSSPropertyID
aProperty
StyleAnimationValue
&
&
aValue
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
Keyframe
&
frame
=
*
aKeyframes
.
AppendElement
(
)
;
frame
.
mOffset
.
emplace
(
aOffset
)
;
PropertyValuePair
&
pv
=
*
frame
.
mPropertyValues
.
AppendElement
(
)
;
pv
.
mProperty
=
aProperty
;
DebugOnly
<
bool
>
uncomputeResult
=
StyleAnimationValue
:
:
UncomputeValue
(
aProperty
Move
(
aValue
)
pv
.
mValue
)
;
MOZ_ASSERT
(
uncomputeResult
"
Unable
to
get
specified
value
from
computed
value
"
)
;
return
frame
;
}
nsTArray
<
Keyframe
>
nsTransitionManager
:
:
GetTransitionKeyframes
(
nsStyleContext
*
aStyleContext
nsCSSPropertyID
aProperty
StyleAnimationValue
&
&
aStartValue
StyleAnimationValue
&
&
aEndValue
const
nsTimingFunction
&
aTimingFunction
)
{
nsTArray
<
Keyframe
>
keyframes
(
2
)
;
Keyframe
&
fromFrame
=
AppendKeyframe
(
0
.
0
aProperty
Move
(
aStartValue
)
keyframes
)
;
if
(
aTimingFunction
.
mType
!
=
nsTimingFunction
:
:
Type
:
:
Linear
)
{
fromFrame
.
mTimingFunction
.
emplace
(
)
;
fromFrame
.
mTimingFunction
-
>
Init
(
aTimingFunction
)
;
}
AppendKeyframe
(
1
.
0
aProperty
Move
(
aEndValue
)
keyframes
)
;
return
keyframes
;
}
void
nsTransitionManager
:
:
PruneCompletedTransitions
(
mozilla
:
:
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
nsStyleContext
*
aNewStyleContext
)
{
CSSTransitionCollection
*
collection
=
CSSTransitionCollection
:
:
GetAnimationCollection
(
aElement
aPseudoType
)
;
if
(
!
collection
)
{
return
;
}
OwningCSSTransitionPtrArray
&
animations
=
collection
-
>
mAnimations
;
size_t
i
=
animations
.
Length
(
)
;
MOZ_ASSERT
(
i
!
=
0
"
empty
transitions
list
?
"
)
;
do
{
-
-
i
;
CSSTransition
*
anim
=
animations
[
i
]
;
if
(
anim
-
>
HasCurrentEffect
(
)
)
{
continue
;
}
StyleAnimationValue
currentValue
;
if
(
!
ExtractNonDiscreteComputedValue
(
anim
-
>
TransitionProperty
(
)
aNewStyleContext
currentValue
)
|
|
currentValue
!
=
anim
-
>
ToValue
(
)
)
{
anim
-
>
CancelFromStyle
(
)
;
animations
.
RemoveElementAt
(
i
)
;
}
}
while
(
i
!
=
0
)
;
if
(
collection
-
>
mAnimations
.
IsEmpty
(
)
)
{
collection
-
>
Destroy
(
)
;
collection
=
nullptr
;
}
}
void
nsTransitionManager
:
:
StopTransitionsForElement
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
CSSPseudoElementType
aPseudoType
)
{
MOZ_ASSERT
(
aElement
)
;
CSSTransitionCollection
*
collection
=
CSSTransitionCollection
:
:
GetAnimationCollection
(
aElement
aPseudoType
)
;
if
(
!
collection
)
{
return
;
}
nsAutoAnimationMutationBatch
mb
(
aElement
-
>
OwnerDoc
(
)
)
;
collection
-
>
Destroy
(
)
;
}
