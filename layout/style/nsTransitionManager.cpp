#
include
"
nsTransitionManager
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
mozilla
/
dom
/
CSSTransitionBinding
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsRefreshDriver
.
h
"
#
include
"
nsRuleProcessorData
.
h
"
#
include
"
nsRuleWalker
.
h
"
#
include
"
nsCSSPropertySet
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
EffectSet
.
h
"
#
include
"
mozilla
/
EventDispatcher
.
h
"
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimeline
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
Layers
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
nsStyleChangeList
.
h
"
#
include
"
nsStyleSet
.
h
"
#
include
"
RestyleManager
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
using
mozilla
:
:
TimeStamp
;
using
mozilla
:
:
TimeDuration
;
using
mozilla
:
:
dom
:
:
Animation
;
using
mozilla
:
:
dom
:
:
KeyframeEffectReadOnly
;
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
double
ElementPropertyTransition
:
:
CurrentValuePortion
(
)
const
{
MOZ_ASSERT
(
!
GetLocalTime
(
)
.
IsNull
(
)
"
Getting
the
value
portion
of
an
animation
that
'
s
not
being
"
"
sampled
"
)
;
TimingParams
timingToUse
=
SpecifiedTiming
(
)
;
timingToUse
.
mFill
=
dom
:
:
FillMode
:
:
Both
;
ComputedTiming
computedTiming
=
GetComputedTiming
(
&
timingToUse
)
;
MOZ_ASSERT
(
!
computedTiming
.
mProgress
.
IsNull
(
)
"
Got
a
null
progress
for
a
fill
mode
of
'
both
'
"
)
;
MOZ_ASSERT
(
mProperties
.
Length
(
)
=
=
1
"
Should
have
one
animation
property
for
a
transition
"
)
;
MOZ_ASSERT
(
mProperties
[
0
]
.
mSegments
.
Length
(
)
=
=
1
"
Animation
property
should
have
one
segment
for
a
transition
"
)
;
return
mProperties
[
0
]
.
mSegments
[
0
]
.
mTimingFunction
.
GetValue
(
computedTiming
.
mProgress
.
Value
(
)
)
;
}
JSObject
*
CSSTransition
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
CSSTransitionBinding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
CSSTransition
:
:
GetTransitionProperty
(
nsString
&
aRetVal
)
const
{
MOZ_ASSERT
(
mEffect
&
&
mEffect
-
>
AsTransition
(
)
"
Transitions
should
have
a
transition
effect
"
)
;
nsCSSProperty
prop
=
mEffect
-
>
AsTransition
(
)
-
>
TransitionProperty
(
)
;
aRetVal
=
NS_ConvertUTF8toUTF16
(
nsCSSProps
:
:
GetStringValue
(
prop
)
)
;
}
AnimationPlayState
CSSTransition
:
:
PlayStateFromJS
(
)
const
{
FlushStyle
(
)
;
return
Animation
:
:
PlayStateFromJS
(
)
;
}
void
CSSTransition
:
:
PlayFromJS
(
ErrorResult
&
aRv
)
{
FlushStyle
(
)
;
Animation
:
:
PlayFromJS
(
aRv
)
;
}
void
CSSTransition
:
:
UpdateTiming
(
SeekFlag
aSeekFlag
SyncNotifyFlag
aSyncNotifyFlag
)
{
if
(
mNeedsNewAnimationIndexWhenRun
&
&
PlayState
(
)
!
=
AnimationPlayState
:
:
Idle
)
{
mAnimationIndex
=
sNextAnimationIndex
+
+
;
mNeedsNewAnimationIndexWhenRun
=
false
;
}
Animation
:
:
UpdateTiming
(
aSeekFlag
aSyncNotifyFlag
)
;
}
void
CSSTransition
:
:
QueueEvents
(
)
{
AnimationPlayState
playState
=
PlayState
(
)
;
bool
newlyFinished
=
!
mWasFinishedOnLastTick
&
&
playState
=
=
AnimationPlayState
:
:
Finished
;
mWasFinishedOnLastTick
=
playState
=
=
AnimationPlayState
:
:
Finished
;
if
(
!
newlyFinished
|
|
!
mEffect
|
|
!
mOwningElement
.
IsSet
(
)
)
{
return
;
}
dom
:
:
Element
*
owningElement
;
nsCSSPseudoElements
:
:
Type
owningPseudoType
;
mOwningElement
.
GetElement
(
owningElement
owningPseudoType
)
;
MOZ_ASSERT
(
owningElement
"
Owning
element
should
be
set
"
)
;
nsCSSProperty
property
=
TransitionProperty
(
)
;
if
(
!
nsCSSProps
:
:
IsEnabled
(
property
nsCSSProps
:
:
eEnabledForAllContent
)
&
&
(
!
nsContentUtils
:
:
IsSystemPrincipal
(
owningElement
-
>
NodePrincipal
(
)
)
|
|
!
nsCSSProps
:
:
IsEnabled
(
property
nsCSSProps
:
:
eEnabledInChrome
)
)
)
{
return
;
}
nsPresContext
*
presContext
=
mOwningElement
.
GetRenderedPresContext
(
)
;
if
(
!
presContext
)
{
return
;
}
nsTransitionManager
*
manager
=
presContext
-
>
TransitionManager
(
)
;
manager
-
>
QueueEvent
(
TransitionEventInfo
(
owningElement
owningPseudoType
property
mEffect
-
>
GetComputedTiming
(
)
.
mDuration
AnimationTimeToTimeStamp
(
EffectEnd
(
)
)
this
)
)
;
}
void
CSSTransition
:
:
Tick
(
)
{
Animation
:
:
Tick
(
)
;
QueueEvents
(
)
;
}
nsCSSProperty
CSSTransition
:
:
TransitionProperty
(
)
const
{
dom
:
:
KeyframeEffectReadOnly
*
effect
=
GetEffect
(
)
;
MOZ_ASSERT
(
effect
&
&
effect
-
>
AsTransition
(
)
"
Transition
should
have
a
transition
effect
"
)
;
return
effect
-
>
AsTransition
(
)
-
>
TransitionProperty
(
)
;
}
bool
CSSTransition
:
:
HasLowerCompositeOrderThan
(
const
CSSTransition
&
aOther
)
const
{
MOZ_ASSERT
(
IsTiedToMarkup
(
)
&
&
aOther
.
IsTiedToMarkup
(
)
"
Should
only
be
called
for
CSS
transitions
that
are
sorted
"
"
as
CSS
transitions
(
i
.
e
.
tied
to
CSS
markup
)
"
)
;
if
(
&
aOther
=
=
this
)
{
return
false
;
}
if
(
!
mOwningElement
.
Equals
(
aOther
.
mOwningElement
)
)
{
return
mOwningElement
.
LessThan
(
aOther
.
mOwningElement
)
;
}
if
(
mAnimationIndex
!
=
aOther
.
mAnimationIndex
)
{
return
mAnimationIndex
<
aOther
.
mAnimationIndex
;
}
return
nsCSSProps
:
:
GetStringValue
(
TransitionProperty
(
)
)
<
nsCSSProps
:
:
GetStringValue
(
aOther
.
TransitionProperty
(
)
)
;
}
NS_IMPL_CYCLE_COLLECTION
(
nsTransitionManager
mEventDispatcher
)
NS_IMPL_CYCLE_COLLECTION_ROOT_NATIVE
(
nsTransitionManager
AddRef
)
NS_IMPL_CYCLE_COLLECTION_UNROOT_NATIVE
(
nsTransitionManager
Release
)
void
nsTransitionManager
:
:
StyleContextChanged
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aOldStyleContext
RefPtr
<
nsStyleContext
>
*
aNewStyleContext
)
{
nsStyleContext
*
newStyleContext
=
*
aNewStyleContext
;
NS_PRECONDITION
(
aOldStyleContext
-
>
GetPseudo
(
)
=
=
newStyleContext
-
>
GetPseudo
(
)
"
pseudo
type
mismatch
"
)
;
if
(
mInAnimationOnlyStyleUpdate
)
{
return
;
}
if
(
!
mPresContext
-
>
IsDynamic
(
)
)
{
return
;
}
if
(
aOldStyleContext
-
>
HasPseudoElementData
(
)
!
=
newStyleContext
-
>
HasPseudoElementData
(
)
)
{
return
;
}
const
nsStyleDisplay
*
disp
=
newStyleContext
-
>
StyleDisplay
(
)
;
nsCSSPseudoElements
:
:
Type
pseudoType
=
newStyleContext
-
>
GetPseudoType
(
)
;
if
(
pseudoType
!
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
)
{
if
(
pseudoType
!
=
nsCSSPseudoElements
:
:
ePseudo_before
&
&
pseudoType
!
=
nsCSSPseudoElements
:
:
ePseudo_after
)
{
return
;
}
NS_ASSERTION
(
(
pseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_before
&
&
aElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
mozgeneratedcontentbefore
)
|
|
(
pseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_after
&
&
aElement
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
=
=
nsGkAtoms
:
:
mozgeneratedcontentafter
)
"
Unexpected
aElement
coming
through
"
)
;
aElement
=
aElement
-
>
GetParent
(
)
-
>
AsElement
(
)
;
}
AnimationCollection
*
collection
=
GetAnimationCollection
(
aElement
pseudoType
false
)
;
if
(
!
collection
&
&
disp
-
>
mTransitionPropertyCount
=
=
1
&
&
disp
-
>
mTransitions
[
0
]
.
GetCombinedDuration
(
)
<
=
0
.
0f
)
{
return
;
}
if
(
collection
&
&
collection
-
>
mCheckGeneration
=
=
mPresContext
-
>
RestyleManager
(
)
-
>
GetAnimationGeneration
(
)
)
{
return
;
}
if
(
newStyleContext
-
>
GetParent
(
)
&
&
newStyleContext
-
>
GetParent
(
)
-
>
HasPseudoElementData
(
)
)
{
return
;
}
NS_WARN_IF_FALSE
(
!
nsLayoutUtils
:
:
AreAsyncAnimationsEnabled
(
)
|
|
!
mPresContext
-
>
EffectCompositor
(
)
-
>
HasThrottledStyleUpdates
(
)
"
throttled
animations
not
up
to
date
"
)
;
RefPtr
<
nsStyleContext
>
afterChangeStyle
;
if
(
collection
)
{
nsStyleSet
*
styleSet
=
mPresContext
-
>
StyleSet
(
)
;
afterChangeStyle
=
styleSet
-
>
ResolveStyleWithoutAnimation
(
aElement
newStyleContext
eRestyle_CSSTransitions
)
;
}
else
{
afterChangeStyle
=
newStyleContext
;
}
nsAutoAnimationMutationBatch
mb
(
aElement
-
>
OwnerDoc
(
)
)
;
bool
startedAny
=
false
;
nsCSSPropertySet
whichStarted
;
for
(
uint32_t
i
=
disp
-
>
mTransitionPropertyCount
;
i
-
-
!
=
0
;
)
{
const
StyleTransition
&
t
=
disp
-
>
mTransitions
[
i
]
;
if
(
t
.
GetCombinedDuration
(
)
>
0
.
0f
)
{
nsCSSProperty
property
=
t
.
GetProperty
(
)
;
if
(
property
=
=
eCSSPropertyExtra_no_properties
|
|
property
=
=
eCSSPropertyExtra_variable
|
|
property
=
=
eCSSProperty_UNKNOWN
)
{
}
else
if
(
property
=
=
eCSSPropertyExtra_all_properties
)
{
for
(
nsCSSProperty
p
=
nsCSSProperty
(
0
)
;
p
<
eCSSProperty_COUNT_no_shorthands
;
p
=
nsCSSProperty
(
p
+
1
)
)
{
ConsiderStartingTransition
(
p
t
aElement
collection
aOldStyleContext
afterChangeStyle
&
startedAny
&
whichStarted
)
;
}
}
else
if
(
nsCSSProps
:
:
IsShorthand
(
property
)
)
{
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
subprop
property
nsCSSProps
:
:
eEnabledForAllContent
)
{
ConsiderStartingTransition
(
*
subprop
t
aElement
collection
aOldStyleContext
afterChangeStyle
&
startedAny
&
whichStarted
)
;
}
}
else
{
ConsiderStartingTransition
(
property
t
aElement
collection
aOldStyleContext
afterChangeStyle
&
startedAny
&
whichStarted
)
;
}
}
}
if
(
collection
)
{
bool
checkProperties
=
disp
-
>
mTransitions
[
0
]
.
GetProperty
(
)
!
=
eCSSPropertyExtra_all_properties
;
nsCSSPropertySet
allTransitionProperties
;
if
(
checkProperties
)
{
for
(
uint32_t
i
=
disp
-
>
mTransitionPropertyCount
;
i
-
-
!
=
0
;
)
{
const
StyleTransition
&
t
=
disp
-
>
mTransitions
[
i
]
;
nsCSSProperty
property
=
t
.
GetProperty
(
)
;
if
(
property
=
=
eCSSPropertyExtra_no_properties
|
|
property
=
=
eCSSPropertyExtra_variable
|
|
property
=
=
eCSSProperty_UNKNOWN
)
{
}
else
if
(
property
=
=
eCSSPropertyExtra_all_properties
)
{
for
(
nsCSSProperty
p
=
nsCSSProperty
(
0
)
;
p
<
eCSSProperty_COUNT_no_shorthands
;
p
=
nsCSSProperty
(
p
+
1
)
)
{
allTransitionProperties
.
AddProperty
(
p
)
;
}
}
else
if
(
nsCSSProps
:
:
IsShorthand
(
property
)
)
{
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
subprop
property
nsCSSProps
:
:
eEnabledForAllContent
)
{
allTransitionProperties
.
AddProperty
(
*
subprop
)
;
}
}
else
{
allTransitionProperties
.
AddProperty
(
property
)
;
}
}
}
AnimationPtrArray
&
animations
=
collection
-
>
mAnimations
;
size_t
i
=
animations
.
Length
(
)
;
MOZ_ASSERT
(
i
!
=
0
"
empty
transitions
list
?
"
)
;
StyleAnimationValue
currentValue
;
do
{
-
-
i
;
Animation
*
anim
=
animations
[
i
]
;
dom
:
:
KeyframeEffectReadOnly
*
effect
=
anim
-
>
GetEffect
(
)
;
MOZ_ASSERT
(
effect
&
&
effect
-
>
Properties
(
)
.
Length
(
)
=
=
1
"
Should
have
one
animation
property
for
a
transition
"
)
;
MOZ_ASSERT
(
effect
&
&
effect
-
>
Properties
(
)
[
0
]
.
mSegments
.
Length
(
)
=
=
1
"
Animation
property
should
have
one
segment
for
a
transition
"
)
;
const
AnimationProperty
&
prop
=
effect
-
>
Properties
(
)
[
0
]
;
const
AnimationPropertySegment
&
segment
=
prop
.
mSegments
[
0
]
;
if
(
(
checkProperties
&
&
!
allTransitionProperties
.
HasProperty
(
prop
.
mProperty
)
)
|
|
!
ExtractComputedValueForTransition
(
prop
.
mProperty
afterChangeStyle
currentValue
)
|
|
currentValue
!
=
segment
.
mToValue
)
{
if
(
anim
-
>
HasCurrentEffect
(
)
)
{
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
pseudoType
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
}
anim
-
>
CancelFromStyle
(
)
;
animations
.
RemoveElementAt
(
i
)
;
}
}
while
(
i
!
=
0
)
;
if
(
animations
.
IsEmpty
(
)
)
{
collection
-
>
Destroy
(
)
;
collection
=
nullptr
;
}
}
MOZ_ASSERT
(
!
startedAny
|
|
collection
"
must
have
element
transitions
if
we
started
any
transitions
"
)
;
EffectCompositor
:
:
CascadeLevel
cascadeLevel
=
EffectCompositor
:
:
CascadeLevel
:
:
Transitions
;
if
(
collection
)
{
EffectCompositor
:
:
UpdateCascadeResults
(
aElement
pseudoType
newStyleContext
)
;
collection
-
>
UpdateCheckGeneration
(
mPresContext
)
;
mPresContext
-
>
EffectCompositor
(
)
-
>
MaybeUpdateAnimationRule
(
aElement
pseudoType
cascadeLevel
)
;
}
*
aNewStyleContext
=
afterChangeStyle
;
if
(
collection
)
{
mPresContext
-
>
EffectCompositor
(
)
-
>
PostRestyleForAnimation
(
aElement
pseudoType
cascadeLevel
)
;
}
}
void
nsTransitionManager
:
:
ConsiderStartingTransition
(
nsCSSProperty
aProperty
const
StyleTransition
&
aTransition
dom
:
:
Element
*
aElement
AnimationCollection
*
&
aElementTransitions
nsStyleContext
*
aOldStyleContext
nsStyleContext
*
aNewStyleContext
bool
*
aStartedAny
nsCSSPropertySet
*
aWhichStarted
)
{
MOZ_ASSERT
(
!
nsCSSProps
:
:
IsShorthand
(
aProperty
)
"
property
out
of
range
"
)
;
NS_ASSERTION
(
!
aElementTransitions
|
|
aElementTransitions
-
>
mElement
=
=
aElement
"
Element
mismatch
"
)
;
if
(
aWhichStarted
-
>
HasProperty
(
aProperty
)
)
{
return
;
}
if
(
nsCSSProps
:
:
kAnimTypeTable
[
aProperty
]
=
=
eStyleAnimType_None
)
{
return
;
}
dom
:
:
DocumentTimeline
*
timeline
=
aElement
-
>
OwnerDoc
(
)
-
>
Timeline
(
)
;
StyleAnimationValue
startValue
endValue
dummyValue
;
bool
haveValues
=
ExtractComputedValueForTransition
(
aProperty
aOldStyleContext
startValue
)
&
&
ExtractComputedValueForTransition
(
aProperty
aNewStyleContext
endValue
)
;
bool
haveChange
=
startValue
!
=
endValue
;
bool
shouldAnimate
=
haveValues
&
&
haveChange
&
&
StyleAnimationValue
:
:
Interpolate
(
aProperty
startValue
endValue
0
.
5
dummyValue
)
;
bool
haveCurrentTransition
=
false
;
size_t
currentIndex
=
nsTArray
<
ElementPropertyTransition
>
:
:
NoIndex
;
const
ElementPropertyTransition
*
oldPT
=
nullptr
;
if
(
aElementTransitions
)
{
AnimationPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
for
(
size_t
i
=
0
i_end
=
animations
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
const
ElementPropertyTransition
*
iPt
=
animations
[
i
]
-
>
GetEffect
(
)
-
>
AsTransition
(
)
;
if
(
iPt
-
>
TransitionProperty
(
)
=
=
aProperty
)
{
haveCurrentTransition
=
true
;
currentIndex
=
i
;
oldPT
=
iPt
;
break
;
}
}
}
MOZ_ASSERT
(
!
oldPT
|
|
oldPT
-
>
Properties
(
)
[
0
]
.
mSegments
.
Length
(
)
=
=
1
"
Should
have
one
animation
property
segment
for
a
transition
"
)
;
if
(
haveCurrentTransition
&
&
haveValues
&
&
oldPT
-
>
Properties
(
)
[
0
]
.
mSegments
[
0
]
.
mToValue
=
=
endValue
)
{
return
;
}
if
(
!
shouldAnimate
)
{
if
(
haveCurrentTransition
)
{
AnimationPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
animations
[
currentIndex
]
-
>
CancelFromStyle
(
)
;
oldPT
=
nullptr
;
animations
.
RemoveElementAt
(
currentIndex
)
;
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
if
(
animations
.
IsEmpty
(
)
)
{
aElementTransitions
-
>
Destroy
(
)
;
aElementTransitions
=
nullptr
;
}
}
return
;
}
const
nsTimingFunction
&
tf
=
aTransition
.
GetTimingFunction
(
)
;
float
delay
=
aTransition
.
GetDelay
(
)
;
float
duration
=
aTransition
.
GetDuration
(
)
;
if
(
duration
<
0
.
0
)
{
duration
=
0
.
0
;
}
StyleAnimationValue
startForReversingTest
=
startValue
;
double
reversePortion
=
1
.
0
;
if
(
haveCurrentTransition
&
&
aElementTransitions
-
>
mAnimations
[
currentIndex
]
-
>
HasCurrentEffect
(
)
&
&
oldPT
-
>
mStartForReversingTest
=
=
endValue
)
{
double
valuePortion
=
oldPT
-
>
CurrentValuePortion
(
)
*
oldPT
-
>
mReversePortion
+
(
1
.
0
-
oldPT
-
>
mReversePortion
)
;
if
(
valuePortion
<
0
.
0
)
{
valuePortion
=
-
valuePortion
;
}
if
(
valuePortion
>
1
.
0
)
{
valuePortion
=
1
.
0
;
}
if
(
delay
<
0
.
0f
)
{
delay
*
=
valuePortion
;
}
duration
*
=
valuePortion
;
startForReversingTest
=
oldPT
-
>
Properties
(
)
[
0
]
.
mSegments
[
0
]
.
mToValue
;
reversePortion
=
valuePortion
;
}
TimingParams
timing
;
timing
.
mDuration
.
SetAsUnrestrictedDouble
(
)
=
duration
;
timing
.
mDelay
=
TimeDuration
:
:
FromMilliseconds
(
delay
)
;
timing
.
mIterations
=
1
.
0
;
timing
.
mDirection
=
dom
:
:
PlaybackDirection
:
:
Normal
;
timing
.
mFill
=
dom
:
:
FillMode
:
:
Backwards
;
RefPtr
<
ElementPropertyTransition
>
pt
=
new
ElementPropertyTransition
(
aElement
-
>
OwnerDoc
(
)
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
timing
)
;
pt
-
>
mStartForReversingTest
=
startForReversingTest
;
pt
-
>
mReversePortion
=
reversePortion
;
AnimationProperty
&
prop
=
*
pt
-
>
Properties
(
)
.
AppendElement
(
)
;
prop
.
mProperty
=
aProperty
;
AnimationPropertySegment
&
segment
=
*
prop
.
mSegments
.
AppendElement
(
)
;
segment
.
mFromValue
=
startValue
;
segment
.
mToValue
=
endValue
;
segment
.
mFromKey
=
0
;
segment
.
mToKey
=
1
;
segment
.
mTimingFunction
.
Init
(
tf
)
;
RefPtr
<
CSSTransition
>
animation
=
new
CSSTransition
(
mPresContext
-
>
Document
(
)
-
>
GetScopeObject
(
)
)
;
animation
-
>
SetOwningElement
(
OwningElementRef
(
*
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
)
;
animation
-
>
SetTimeline
(
timeline
)
;
animation
-
>
SetCreationSequence
(
mPresContext
-
>
RestyleManager
(
)
-
>
GetAnimationGeneration
(
)
)
;
animation
-
>
SetEffect
(
pt
)
;
animation
-
>
PlayFromStyle
(
)
;
if
(
!
aElementTransitions
)
{
aElementTransitions
=
GetAnimationCollection
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
true
)
;
if
(
!
aElementTransitions
)
{
NS_WARNING
(
"
allocating
CommonAnimationManager
failed
"
)
;
return
;
}
}
AnimationPtrArray
&
animations
=
aElementTransitions
-
>
mAnimations
;
#
ifdef
DEBUG
for
(
size_t
i
=
0
i_end
=
animations
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
MOZ_ASSERT
(
i
=
=
currentIndex
|
|
(
animations
[
i
]
-
>
GetEffect
(
)
&
&
animations
[
i
]
-
>
GetEffect
(
)
-
>
AsTransition
(
)
-
>
TransitionProperty
(
)
!
=
aProperty
)
"
duplicate
transitions
for
property
"
)
;
}
#
endif
if
(
haveCurrentTransition
)
{
animations
[
currentIndex
]
-
>
CancelFromStyle
(
)
;
oldPT
=
nullptr
;
animations
[
currentIndex
]
=
animation
;
}
else
{
if
(
!
animations
.
AppendElement
(
animation
)
)
{
NS_WARNING
(
"
out
of
memory
"
)
;
return
;
}
}
EffectSet
*
effectSet
=
EffectSet
:
:
GetEffectSet
(
aElement
aNewStyleContext
-
>
GetPseudoType
(
)
)
;
if
(
effectSet
)
{
effectSet
-
>
UpdateAnimationGeneration
(
mPresContext
)
;
}
*
aStartedAny
=
true
;
aWhichStarted
-
>
AddProperty
(
aProperty
)
;
}
void
nsTransitionManager
:
:
PruneCompletedTransitions
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
nsStyleContext
*
aNewStyleContext
)
{
AnimationCollection
*
collection
=
GetAnimationCollection
(
aElement
aPseudoType
false
)
;
if
(
!
collection
)
{
return
;
}
AnimationPtrArray
&
animations
=
collection
-
>
mAnimations
;
size_t
i
=
animations
.
Length
(
)
;
MOZ_ASSERT
(
i
!
=
0
"
empty
transitions
list
?
"
)
;
do
{
-
-
i
;
Animation
*
anim
=
animations
[
i
]
;
if
(
anim
-
>
HasCurrentEffect
(
)
)
{
continue
;
}
dom
:
:
KeyframeEffectReadOnly
*
effect
=
anim
-
>
GetEffect
(
)
;
MOZ_ASSERT
(
effect
-
>
Properties
(
)
.
Length
(
)
=
=
1
"
Should
have
one
animation
property
for
a
transition
"
)
;
MOZ_ASSERT
(
effect
-
>
Properties
(
)
[
0
]
.
mSegments
.
Length
(
)
=
=
1
"
Animation
property
should
have
one
segment
for
a
transition
"
)
;
const
AnimationProperty
&
prop
=
effect
-
>
Properties
(
)
[
0
]
;
const
AnimationPropertySegment
&
segment
=
prop
.
mSegments
[
0
]
;
StyleAnimationValue
currentValue
;
if
(
!
ExtractComputedValueForTransition
(
prop
.
mProperty
aNewStyleContext
currentValue
)
|
|
currentValue
!
=
segment
.
mToValue
)
{
anim
-
>
CancelFromStyle
(
)
;
animations
.
RemoveElementAt
(
i
)
;
}
}
while
(
i
!
=
0
)
;
if
(
collection
-
>
mAnimations
.
IsEmpty
(
)
)
{
collection
-
>
Destroy
(
)
;
collection
=
nullptr
;
}
}
