#
ifndef
mozilla_css_GroupRule_h__
#
define
mozilla_css_GroupRule_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ServoCSSRuleList
.
h
"
#
include
"
mozilla
/
css
/
Rule
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
{
class
ErrorResult
;
class
StyleSheet
;
namespace
dom
{
class
CSSRuleList
;
}
namespace
css
{
class
GroupRule
:
public
Rule
{
protected
:
GroupRule
(
already_AddRefed
<
StyleLockedCssRules
>
aRules
StyleSheet
*
aSheet
Rule
*
aParentRule
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
GroupRule
(
const
GroupRule
&
aCopy
)
=
delete
;
virtual
~
GroupRule
(
)
;
public
:
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
GroupRule
Rule
)
NS_DECL_ISUPPORTS_INHERITED
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
void
DropSheetReference
(
)
override
;
public
:
int32_t
StyleRuleCount
(
)
const
{
return
mRuleList
?
mRuleList
-
>
Length
(
)
:
0
;
}
Rule
*
GetStyleRuleAt
(
int32_t
aIndex
)
const
{
return
mRuleList
?
mRuleList
-
>
GetRule
(
aIndex
)
:
nullptr
;
}
void
SetRawAfterClone
(
RefPtr
<
StyleLockedCssRules
>
aRules
)
{
if
(
mRuleList
)
{
mRuleList
-
>
SetRawAfterClone
(
std
:
:
move
(
aRules
)
)
;
}
else
{
MOZ_ASSERT
(
!
aRules
"
Can
'
t
move
from
having
no
rules
to
having
rules
"
)
;
}
}
nsresult
DeleteStyleRuleAt
(
uint32_t
aIndex
)
{
if
(
!
mRuleList
)
{
return
NS_OK
;
}
return
mRuleList
-
>
DeleteRule
(
aIndex
)
;
}
size_t
SizeOfExcludingThis
(
MallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
)
const
override
=
0
;
ServoCSSRuleList
*
GetCssRules
(
)
{
return
mRuleList
;
}
uint32_t
InsertRule
(
const
nsACString
&
aRule
uint32_t
aIndex
ErrorResult
&
aRv
)
;
void
DeleteRule
(
uint32_t
aIndex
ErrorResult
&
aRv
)
;
private
:
RefPtr
<
ServoCSSRuleList
>
mRuleList
;
}
;
class
ConditionRule
:
public
GroupRule
{
protected
:
using
GroupRule
:
:
GroupRule
;
public
:
virtual
void
GetConditionText
(
nsACString
&
aConditionText
)
=
0
;
}
;
}
}
#
endif
