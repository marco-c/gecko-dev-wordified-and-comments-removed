#
ifndef
nsRuleData_h_
#
define
nsRuleData_h_
#
include
"
mozilla
/
CSSVariableDeclarations
.
h
"
#
include
"
mozilla
/
GenericSpecifiedValues
.
h
"
#
include
"
mozilla
/
RuleNodeCacheConditions
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
class
nsPresContext
;
class
nsStyleContext
;
struct
nsRuleData
;
typedef
void
(
*
nsPostResolveFunc
)
(
void
*
aStyleStruct
nsRuleData
*
aData
)
;
struct
nsRuleData
final
:
mozilla
:
:
GenericSpecifiedValues
{
mozilla
:
:
RuleNodeCacheConditions
mConditions
;
bool
mIsImportantRule
;
mozilla
:
:
SheetType
mLevel
;
nsStyleContext
*
const
mStyleContext
;
nsCSSValue
*
const
mValueStorage
;
size_t
mValueOffsets
[
nsStyleStructID_Length
]
;
nsAutoPtr
<
mozilla
:
:
CSSVariableDeclarations
>
mVariables
;
nsRuleData
(
uint32_t
aSIDs
nsCSSValue
*
aValueStorage
nsPresContext
*
aContext
nsStyleContext
*
aStyleContext
)
;
#
ifdef
DEBUG
~
nsRuleData
(
)
;
#
else
~
nsRuleData
(
)
{
}
#
endif
nsCSSValue
*
ValueFor
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
invalid
or
shorthand
property
"
)
;
nsStyleStructID
sid
=
nsCSSProps
:
:
kSIDTable
[
aProperty
]
;
size_t
indexInStruct
=
nsCSSProps
:
:
PropertyIndexInStruct
(
aProperty
)
;
MOZ_ASSERT
(
mSIDs
&
(
1
<
<
sid
)
"
calling
nsRuleData
:
:
ValueFor
on
property
not
in
mSIDs
"
)
;
MOZ_ASSERT
(
indexInStruct
!
=
size_t
(
-
1
)
"
logical
property
"
)
;
return
mValueStorage
+
mValueOffsets
[
sid
]
+
indexInStruct
;
}
const
nsCSSValue
*
ValueFor
(
nsCSSPropertyID
aProperty
)
const
{
return
const_cast
<
nsRuleData
*
>
(
this
)
-
>
ValueFor
(
aProperty
)
;
}
#
define
CSS_PROP_PUBLIC_OR_PRIVATE
(
publicname_
privatename_
)
privatename_
#
define
CSS_PROP
(
name_
id_
method_
flags_
pref_
parsevariant_
\
kwtable_
stylestruct_
stylestructoffset_
animtype_
)
\
nsCSSValue
*
ValueFor
#
#
method_
(
)
{
\
MOZ_ASSERT
(
mSIDs
&
NS_STYLE_INHERIT_BIT
(
stylestruct_
)
\
"
Calling
nsRuleData
:
:
ValueFor
"
#
method_
"
without
"
\
"
NS_STYLE_INHERIT_BIT
(
"
#
stylestruct_
"
in
mSIDs
.
"
)
;
\
nsStyleStructID
sid
=
eStyleStruct_
#
#
stylestruct_
;
\
size_t
indexInStruct
=
\
nsCSSProps
:
:
PropertyIndexInStruct
(
eCSSProperty_
#
#
id_
)
;
\
MOZ_ASSERT
(
indexInStruct
!
=
size_t
(
-
1
)
\
"
logical
property
"
)
;
\
return
mValueStorage
+
mValueOffsets
[
sid
]
+
indexInStruct
;
\
}
\
const
nsCSSValue
*
ValueFor
#
#
method_
(
)
const
{
\
return
const_cast
<
nsRuleData
*
>
(
this
)
-
>
ValueFor
#
#
method_
(
)
;
\
}
#
define
CSS_PROP_LIST_EXCLUDE_LOGICAL
#
include
"
nsCSSPropList
.
h
"
#
undef
CSS_PROP_LIST_EXCLUDE_LOGICAL
#
undef
CSS_PROP
#
undef
CSS_PROP_PUBLIC_OR_PRIVATE
bool
PropertyIsSet
(
nsCSSPropertyID
aId
)
{
return
ValueFor
(
aId
)
-
>
GetUnit
(
)
!
=
eCSSUnit_Null
;
}
void
SetIdentStringValue
(
nsCSSPropertyID
aId
const
nsString
&
aValue
)
{
ValueFor
(
aId
)
-
>
SetStringValue
(
aValue
eCSSUnit_Ident
)
;
}
void
SetIdentAtomValue
(
nsCSSPropertyID
aId
nsIAtom
*
aValue
)
{
nsCOMPtr
<
nsIAtom
>
atom
=
aValue
;
ValueFor
(
aId
)
-
>
SetAtomIdentValue
(
atom
.
forget
(
)
)
;
}
void
SetKeywordValue
(
nsCSSPropertyID
aId
int32_t
aValue
)
{
ValueFor
(
aId
)
-
>
SetIntValue
(
aValue
eCSSUnit_Enumerated
)
;
}
void
SetIntValue
(
nsCSSPropertyID
aId
int32_t
aValue
)
{
ValueFor
(
aId
)
-
>
SetIntValue
(
aValue
eCSSUnit_Integer
)
;
}
void
SetPixelValue
(
nsCSSPropertyID
aId
float
aValue
)
{
ValueFor
(
aId
)
-
>
SetFloatValue
(
aValue
eCSSUnit_Pixel
)
;
}
void
SetLengthValue
(
nsCSSPropertyID
aId
nsCSSValue
aValue
)
{
nsCSSValue
*
val
=
ValueFor
(
aId
)
;
*
val
=
aValue
;
}
void
SetNumberValue
(
nsCSSPropertyID
aId
float
aValue
)
{
ValueFor
(
aId
)
-
>
SetFloatValue
(
aValue
eCSSUnit_Number
)
;
}
void
SetPercentValue
(
nsCSSPropertyID
aId
float
aValue
)
{
ValueFor
(
aId
)
-
>
SetPercentValue
(
aValue
)
;
}
void
SetAutoValue
(
nsCSSPropertyID
aId
)
{
ValueFor
(
aId
)
-
>
SetAutoValue
(
)
;
}
void
SetCurrentColor
(
nsCSSPropertyID
aId
)
{
ValueFor
(
aId
)
-
>
SetIntValue
(
NS_COLOR_CURRENTCOLOR
eCSSUnit_EnumColor
)
;
}
void
SetColorValue
(
nsCSSPropertyID
aId
nscolor
aValue
)
{
ValueFor
(
aId
)
-
>
SetColorValue
(
aValue
)
;
}
void
SetFontFamily
(
const
nsString
&
aValue
)
;
void
SetTextDecorationColorOverride
(
)
;
void
SetBackgroundImage
(
nsAttrValue
&
aValue
)
;
private
:
inline
size_t
GetPoisonOffset
(
)
;
}
;
#
endif
