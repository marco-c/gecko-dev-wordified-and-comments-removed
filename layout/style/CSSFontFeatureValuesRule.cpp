#
include
"
mozilla
/
dom
/
CSSFontFeatureValuesRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSFontFeatureValuesRuleBinding
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
namespace
mozilla
{
namespace
dom
{
size_t
CSSFontFeatureValuesRule
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
#
ifdef
DEBUG
void
CSSFontFeatureValuesRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
i
=
0
;
i
<
aIndent
;
i
+
+
)
{
str
.
AppendLiteral
(
"
"
)
;
}
Servo_FontFeatureValuesRule_Debug
(
mRawRule
&
str
)
;
fprintf_stderr
(
out
"
%
s
\
n
"
str
.
get
(
)
)
;
}
#
endif
void
CSSFontFeatureValuesRule
:
:
GetCssText
(
nsACString
&
aCssText
)
const
{
Servo_FontFeatureValuesRule_GetCssText
(
mRawRule
&
aCssText
)
;
}
void
CSSFontFeatureValuesRule
:
:
GetFontFamily
(
nsACString
&
aFamilyListStr
)
{
Servo_FontFeatureValuesRule_GetFontFamily
(
mRawRule
&
aFamilyListStr
)
;
}
void
CSSFontFeatureValuesRule
:
:
GetValueText
(
nsACString
&
aValueText
)
{
Servo_FontFeatureValuesRule_GetValueText
(
mRawRule
&
aValueText
)
;
}
void
CSSFontFeatureValuesRule
:
:
SetFontFamily
(
const
nsACString
&
aFontFamily
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
)
{
return
;
}
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSFontFeatureValuesRule
:
:
SetValueText
(
const
nsACString
&
aValueText
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
)
{
return
;
}
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
bool
CSSFontFeatureValuesRule
:
:
IsCCLeaf
(
)
const
{
return
Rule
:
:
IsCCLeaf
(
)
;
}
JSObject
*
CSSFontFeatureValuesRule
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSFontFeatureValuesRule_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
