#
include
"
mozilla
/
ServoStyleSheet
.
h
"
#
include
"
mozilla
/
StyleBackendType
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoCSSRuleList
.
h
"
#
include
"
mozilla
/
dom
/
CSSRuleList
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
namespace
mozilla
{
ServoStyleSheet
:
:
ServoStyleSheet
(
css
:
:
SheetParsingMode
aParsingMode
CORSMode
aCORSMode
net
:
:
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
)
:
StyleSheet
(
StyleBackendType
:
:
Servo
aParsingMode
)
mSheetInfo
(
aCORSMode
aReferrerPolicy
aIntegrity
)
{
}
ServoStyleSheet
:
:
~
ServoStyleSheet
(
)
{
DropSheet
(
)
;
if
(
mRuleList
)
{
mRuleList
-
>
DropReference
(
)
;
}
}
bool
ServoStyleSheet
:
:
HasRules
(
)
const
{
return
mSheet
&
&
Servo_StyleSheet_HasRules
(
mSheet
)
;
}
void
ServoStyleSheet
:
:
SetOwningDocument
(
nsIDocument
*
aDocument
)
{
mDocument
=
aDocument
;
}
ServoStyleSheet
*
ServoStyleSheet
:
:
GetParentSheet
(
)
const
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
void
ServoStyleSheet
:
:
AppendStyleSheet
(
ServoStyleSheet
*
aSheet
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
nsresult
ServoStyleSheet
:
:
ParseSheet
(
const
nsAString
&
aInput
nsIURI
*
aSheetURI
nsIURI
*
aBaseURI
nsIPrincipal
*
aSheetPrincipal
uint32_t
aLineNumber
)
{
DropSheet
(
)
;
RefPtr
<
ThreadSafeURIHolder
>
base
=
new
ThreadSafeURIHolder
(
aBaseURI
)
;
RefPtr
<
ThreadSafeURIHolder
>
referrer
=
new
ThreadSafeURIHolder
(
aSheetURI
)
;
RefPtr
<
ThreadSafePrincipalHolder
>
principal
=
new
ThreadSafePrincipalHolder
(
aSheetPrincipal
)
;
nsCString
baseString
;
nsresult
rv
=
aBaseURI
-
>
GetSpec
(
baseString
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ConvertUTF16toUTF8
input
(
aInput
)
;
mSheet
=
Servo_StyleSheet_FromUTF8Bytes
(
&
input
mParsingMode
&
baseString
base
referrer
principal
)
.
Consume
(
)
;
return
NS_OK
;
}
void
ServoStyleSheet
:
:
LoadFailed
(
)
{
mSheet
=
Servo_StyleSheet_Empty
(
mParsingMode
)
.
Consume
(
)
;
}
void
ServoStyleSheet
:
:
DropSheet
(
)
{
mSheet
=
nullptr
;
}
size_t
ServoStyleSheet
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
#
ifdef
DEBUG
void
ServoStyleSheet
:
:
List
(
FILE
*
aOut
int32_t
aIndex
)
const
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
#
endif
nsMediaList
*
ServoStyleSheet
:
:
Media
(
)
{
return
nullptr
;
}
nsIDOMCSSRule
*
ServoStyleSheet
:
:
GetDOMOwnerRule
(
)
const
{
return
nullptr
;
}
CSSRuleList
*
ServoStyleSheet
:
:
GetCssRulesInternal
(
ErrorResult
&
aRv
)
{
if
(
!
mRuleList
)
{
RefPtr
<
ServoCssRules
>
rawRules
=
Servo_StyleSheet_GetRules
(
mSheet
)
.
Consume
(
)
;
mRuleList
=
new
ServoCSSRuleList
(
this
rawRules
.
forget
(
)
)
;
}
return
mRuleList
;
}
uint32_t
ServoStyleSheet
:
:
InsertRuleInternal
(
const
nsAString
&
aRule
uint32_t
aIndex
ErrorResult
&
aRv
)
{
GetCssRulesInternal
(
aRv
)
;
mozAutoDocUpdate
updateBatch
(
mDocument
UPDATE_STYLE
true
)
;
aRv
=
mRuleList
-
>
InsertRule
(
aRule
aIndex
)
;
if
(
aRv
.
Failed
(
)
)
{
return
0
;
}
if
(
mDocument
)
{
mDocument
-
>
StyleRuleAdded
(
this
mRuleList
-
>
GetRule
(
aIndex
)
)
;
}
return
aIndex
;
}
void
ServoStyleSheet
:
:
DeleteRuleInternal
(
uint32_t
aIndex
ErrorResult
&
aRv
)
{
GetCssRulesInternal
(
aRv
)
;
if
(
aIndex
>
mRuleList
-
>
Length
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
;
return
;
}
mozAutoDocUpdate
updateBatch
(
mDocument
UPDATE_STYLE
true
)
;
RefPtr
<
css
:
:
Rule
>
rule
=
mRuleList
-
>
GetRule
(
aIndex
)
;
aRv
=
mRuleList
-
>
DeleteRule
(
aIndex
)
;
MOZ_ASSERT
(
!
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
"
IndexSizeError
should
have
been
handled
earlier
"
)
;
if
(
!
aRv
.
Failed
(
)
&
&
mDocument
)
{
mDocument
-
>
StyleRuleRemoved
(
this
rule
)
;
}
}
}
