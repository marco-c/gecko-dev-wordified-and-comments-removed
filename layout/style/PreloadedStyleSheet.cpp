#
include
"
PreloadedStyleSheet
.
h
"
namespace
mozilla
{
PreloadedStyleSheet
:
:
PreloadedStyleSheet
(
nsIURI
*
aURI
css
:
:
SheetParsingMode
aParsingMode
)
:
mURI
(
aURI
)
mParsingMode
(
aParsingMode
)
{
}
nsresult
PreloadedStyleSheet
:
:
Create
(
nsIURI
*
aURI
css
:
:
SheetParsingMode
aParsingMode
PreloadedStyleSheet
*
*
aResult
)
{
*
aResult
=
nullptr
;
RefPtr
<
PreloadedStyleSheet
>
preloadedSheet
=
new
PreloadedStyleSheet
(
aURI
aParsingMode
)
;
auto
type
=
nsLayoutUtils
:
:
StyloEnabled
(
)
?
StyleBackendType
:
:
Servo
:
StyleBackendType
:
:
Gecko
;
StyleSheet
*
sheet
;
nsresult
rv
=
preloadedSheet
-
>
GetSheet
(
type
&
sheet
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
preloadedSheet
.
forget
(
aResult
)
;
return
NS_OK
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PreloadedStyleSheet
)
NS_INTERFACE_MAP_ENTRY
(
nsIPreloadedStyleSheet
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
PreloadedStyleSheet
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
PreloadedStyleSheet
)
NS_IMPL_CYCLE_COLLECTION
(
PreloadedStyleSheet
mGecko
mServo
)
nsresult
PreloadedStyleSheet
:
:
GetSheet
(
StyleBackendType
aType
StyleSheet
*
*
aResult
)
{
*
aResult
=
nullptr
;
RefPtr
<
StyleSheet
>
&
sheet
=
aType
=
=
StyleBackendType
:
:
Gecko
?
mGecko
:
mServo
;
if
(
!
sheet
)
{
RefPtr
<
css
:
:
Loader
>
loader
=
new
css
:
:
Loader
(
aType
)
;
nsresult
rv
=
loader
-
>
LoadSheetSync
(
mURI
mParsingMode
true
&
sheet
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_ASSERT
(
sheet
)
;
}
*
aResult
=
sheet
;
return
NS_OK
;
}
}
