#
include
"
PreloadedStyleSheet
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsLayoutUtils
.
h
"
namespace
mozilla
{
PreloadedStyleSheet
:
:
PreloadedStyleSheet
(
nsIURI
*
aURI
css
:
:
SheetParsingMode
aParsingMode
)
:
mLoaded
(
false
)
mURI
(
aURI
)
mParsingMode
(
aParsingMode
)
{
}
nsresult
PreloadedStyleSheet
:
:
Create
(
nsIURI
*
aURI
css
:
:
SheetParsingMode
aParsingMode
PreloadedStyleSheet
*
*
aResult
)
{
*
aResult
=
nullptr
;
RefPtr
<
PreloadedStyleSheet
>
preloadedSheet
=
new
PreloadedStyleSheet
(
aURI
aParsingMode
)
;
preloadedSheet
.
forget
(
aResult
)
;
return
NS_OK
;
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
PreloadedStyleSheet
)
NS_INTERFACE_MAP_ENTRY
(
nsIPreloadedStyleSheet
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
PreloadedStyleSheet
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
PreloadedStyleSheet
)
NS_IMPL_CYCLE_COLLECTION
(
PreloadedStyleSheet
mSheet
)
nsresult
PreloadedStyleSheet
:
:
GetSheet
(
StyleSheet
*
*
aResult
)
{
*
aResult
=
nullptr
;
MOZ_DIAGNOSTIC_ASSERT
(
mLoaded
)
;
if
(
!
mSheet
)
{
RefPtr
<
css
:
:
Loader
>
loader
=
new
css
:
:
Loader
;
nsresult
rv
=
loader
-
>
LoadSheetSync
(
mURI
mParsingMode
true
&
mSheet
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
MOZ_ASSERT
(
mSheet
)
;
}
*
aResult
=
mSheet
;
return
NS_OK
;
}
nsresult
PreloadedStyleSheet
:
:
Preload
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mLoaded
)
;
mLoaded
=
true
;
StyleSheet
*
sheet
;
return
GetSheet
(
&
sheet
)
;
}
NS_IMPL_ISUPPORTS
(
PreloadedStyleSheet
:
:
StylesheetPreloadObserver
nsICSSLoaderObserver
)
NS_IMETHODIMP
PreloadedStyleSheet
:
:
StylesheetPreloadObserver
:
:
StyleSheetLoaded
(
StyleSheet
*
aSheet
bool
aWasDeferred
nsresult
aStatus
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mPreloadedSheet
-
>
mLoaded
)
;
mPreloadedSheet
-
>
mLoaded
=
true
;
if
(
NS_FAILED
(
aStatus
)
)
{
mPromise
-
>
MaybeReject
(
aStatus
)
;
}
else
{
mPromise
-
>
MaybeResolve
(
mPreloadedSheet
)
;
}
return
NS_OK
;
}
nsresult
PreloadedStyleSheet
:
:
PreloadAsync
(
NotNull
<
dom
:
:
Promise
*
>
aPromise
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mLoaded
)
;
RefPtr
<
css
:
:
Loader
>
loader
=
new
css
:
:
Loader
;
RefPtr
<
StylesheetPreloadObserver
>
obs
=
new
StylesheetPreloadObserver
(
aPromise
this
)
;
return
loader
-
>
LoadSheet
(
mURI
mParsingMode
false
obs
&
mSheet
)
;
}
}
