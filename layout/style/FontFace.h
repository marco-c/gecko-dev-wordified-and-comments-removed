#
ifndef
mozilla_dom_FontFace_h
#
define
mozilla_dom_FontFace_h
#
include
"
mozilla
/
dom
/
FontFaceBinding
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
gfxFontFaceBufferSource
;
class
nsCSSFontFaceRule
;
namespace
mozilla
{
struct
CSSFontFaceDescriptors
;
class
PostTraversalTask
;
namespace
dom
{
class
FontFaceBufferSource
;
struct
FontFaceDescriptors
;
class
FontFaceSet
;
class
Promise
;
class
StringOrArrayBufferOrArrayBufferView
;
}
}
namespace
mozilla
{
namespace
dom
{
class
FontFace
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
mozilla
:
:
PostTraversalTask
;
friend
class
mozilla
:
:
dom
:
:
FontFaceBufferSource
;
friend
class
Entry
;
public
:
class
Entry
final
:
public
gfxUserFontEntry
{
friend
class
FontFace
;
public
:
Entry
(
gfxUserFontSet
*
aFontSet
const
nsTArray
<
gfxFontFaceSrc
>
&
aFontFaceSrcList
uint32_t
aWeight
int32_t
aStretch
uint8_t
aStyle
const
nsTArray
<
gfxFontFeature
>
&
aFeatureSettings
const
nsTArray
<
gfxFontVariation
>
&
aVariationSettings
uint32_t
aLanguageOverride
gfxCharacterMap
*
aUnicodeRanges
uint8_t
aFontDisplay
)
:
gfxUserFontEntry
(
aFontSet
aFontFaceSrcList
aWeight
aStretch
aStyle
aFeatureSettings
aVariationSettings
aLanguageOverride
aUnicodeRanges
aFontDisplay
)
{
}
virtual
void
SetLoadState
(
UserFontLoadState
aLoadState
)
override
;
virtual
void
GetUserFontSets
(
nsTArray
<
gfxUserFontSet
*
>
&
aResult
)
override
;
const
AutoTArray
<
FontFace
*
1
>
&
GetFontFaces
(
)
{
return
mFontFaces
;
}
protected
:
AutoTArray
<
FontFace
*
1
>
mFontFaces
;
}
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
FontFace
)
nsISupports
*
GetParentObject
(
)
const
{
return
mParent
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
FontFace
>
CreateForRule
(
nsISupports
*
aGlobal
FontFaceSet
*
aFontFaceSet
nsCSSFontFaceRule
*
aRule
)
;
nsCSSFontFaceRule
*
GetRule
(
)
{
return
mRule
;
}
void
GetDesc
(
nsCSSFontDesc
aDescID
nsCSSValue
&
aResult
)
const
;
gfxUserFontEntry
*
CreateUserFontEntry
(
)
;
gfxUserFontEntry
*
GetUserFontEntry
(
)
const
{
return
mUserFontEntry
;
}
void
SetUserFontEntry
(
gfxUserFontEntry
*
aEntry
)
;
bool
IsInFontFaceSet
(
FontFaceSet
*
aFontFaceSet
)
const
;
void
AddFontFaceSet
(
FontFaceSet
*
aFontFaceSet
)
;
void
RemoveFontFaceSet
(
FontFaceSet
*
aFontFaceSet
)
;
FontFaceSet
*
GetPrimaryFontFaceSet
(
)
const
{
return
mFontFaceSet
;
}
bool
GetFamilyName
(
nsString
&
aResult
)
;
bool
HasRule
(
)
const
{
return
mRule
;
}
void
DisconnectFromRule
(
)
;
bool
HasFontData
(
)
const
;
already_AddRefed
<
gfxFontFaceBufferSource
>
CreateBufferSource
(
)
;
bool
GetData
(
uint8_t
*
&
aBuffer
uint32_t
&
aLength
)
;
gfxCharacterMap
*
GetUnicodeRangeAsCharacterMap
(
)
;
static
already_AddRefed
<
FontFace
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsAString
&
aFamily
const
mozilla
:
:
dom
:
:
StringOrArrayBufferOrArrayBufferView
&
aSource
const
mozilla
:
:
dom
:
:
FontFaceDescriptors
&
aDescriptors
ErrorResult
&
aRV
)
;
void
GetFamily
(
nsString
&
aResult
)
;
void
SetFamily
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetStyle
(
nsString
&
aResult
)
;
void
SetStyle
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetWeight
(
nsString
&
aResult
)
;
void
SetWeight
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetStretch
(
nsString
&
aResult
)
;
void
SetStretch
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetUnicodeRange
(
nsString
&
aResult
)
;
void
SetUnicodeRange
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetVariant
(
nsString
&
aResult
)
;
void
SetVariant
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetFeatureSettings
(
nsString
&
aResult
)
;
void
SetFeatureSettings
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetVariationSettings
(
nsString
&
aResult
)
;
void
SetVariationSettings
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
void
GetDisplay
(
nsString
&
aResult
)
;
void
SetDisplay
(
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
FontFaceLoadStatus
Status
(
)
;
mozilla
:
:
dom
:
:
Promise
*
Load
(
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
Promise
*
GetLoaded
(
mozilla
:
:
ErrorResult
&
aRv
)
;
private
:
FontFace
(
nsISupports
*
aParent
FontFaceSet
*
aFontFaceSet
)
;
~
FontFace
(
)
;
void
InitializeSource
(
const
StringOrArrayBufferOrArrayBufferView
&
aSource
)
;
void
DoLoad
(
)
;
bool
ParseDescriptor
(
nsCSSFontDesc
aDescID
const
nsAString
&
aString
nsCSSValue
&
aResult
)
;
void
SetDescriptor
(
nsCSSFontDesc
aFontDesc
const
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
aRv
)
;
bool
SetDescriptors
(
const
nsAString
&
aFamily
const
FontFaceDescriptors
&
aDescriptors
)
;
void
SetStatus
(
mozilla
:
:
dom
:
:
FontFaceLoadStatus
aStatus
)
;
void
GetDesc
(
nsCSSFontDesc
aDescID
nsCSSPropertyID
aPropID
nsString
&
aResult
)
const
;
void
TakeBuffer
(
uint8_t
*
&
aBuffer
uint32_t
&
aLength
)
;
void
Reject
(
nsresult
aResult
)
;
void
EnsurePromise
(
)
;
void
DoResolve
(
)
;
void
DoReject
(
nsresult
aResult
)
;
nsCOMPtr
<
nsISupports
>
mParent
;
RefPtr
<
mozilla
:
:
dom
:
:
Promise
>
mLoaded
;
nsresult
mLoadedRejection
;
RefPtr
<
nsCSSFontFaceRule
>
mRule
;
RefPtr
<
Entry
>
mUserFontEntry
;
mozilla
:
:
dom
:
:
FontFaceLoadStatus
mStatus
;
enum
SourceType
{
eSourceType_FontFaceRule
=
1
eSourceType_URLs
eSourceType_Buffer
}
;
SourceType
mSourceType
;
uint8_t
*
mSourceBuffer
;
uint32_t
mSourceBufferLength
;
nsAutoPtr
<
mozilla
:
:
CSSFontFaceDescriptors
>
mDescriptors
;
RefPtr
<
gfxCharacterMap
>
mUnicodeRange
;
RefPtr
<
FontFaceSet
>
mFontFaceSet
;
nsTArray
<
RefPtr
<
FontFaceSet
>
>
mOtherFontFaceSets
;
bool
mUnicodeRangeDirty
;
bool
mInFontFaceSet
;
}
;
}
}
#
endif
