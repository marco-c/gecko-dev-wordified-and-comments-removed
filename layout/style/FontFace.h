#
ifndef
mozilla_dom_FontFace_h
#
define
mozilla_dom_FontFace_h
#
include
"
mozilla
/
dom
/
FontFaceBinding
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
gfxFontFaceBufferSource
;
class
nsIGlobalObject
;
struct
RawServoFontFaceRule
;
namespace
mozilla
{
struct
CSSFontFaceDescriptors
;
class
PostTraversalTask
;
namespace
dom
{
class
CSSFontFaceRule
;
class
FontFaceBufferSource
;
struct
FontFaceDescriptors
;
class
FontFaceImpl
;
class
FontFaceSet
;
class
FontFaceSetImpl
;
class
Promise
;
class
UTF8StringOrArrayBufferOrArrayBufferView
;
}
}
namespace
mozilla
:
:
dom
{
class
FontFace
final
:
public
nsISupports
public
nsWrapperCache
{
friend
class
mozilla
:
:
PostTraversalTask
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
FontFace
)
nsIGlobalObject
*
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
WrapObject
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
FontFace
>
CreateForRule
(
nsIGlobalObject
*
aGlobal
FontFaceSet
*
aFontFaceSet
RawServoFontFaceRule
*
aRule
)
;
static
already_AddRefed
<
FontFace
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aFamily
const
UTF8StringOrArrayBufferOrArrayBufferView
&
aSource
const
FontFaceDescriptors
&
aDescriptors
ErrorResult
&
aRV
)
;
void
GetFamily
(
nsACString
&
aResult
)
;
void
SetFamily
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetStyle
(
nsACString
&
aResult
)
;
void
SetStyle
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetWeight
(
nsACString
&
aResult
)
;
void
SetWeight
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetStretch
(
nsACString
&
aResult
)
;
void
SetStretch
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetUnicodeRange
(
nsACString
&
aResult
)
;
void
SetUnicodeRange
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetVariant
(
nsACString
&
aResult
)
;
void
SetVariant
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetFeatureSettings
(
nsACString
&
aResult
)
;
void
SetFeatureSettings
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetVariationSettings
(
nsACString
&
aResult
)
;
void
SetVariationSettings
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetDisplay
(
nsACString
&
aResult
)
;
void
SetDisplay
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetAscentOverride
(
nsACString
&
aResult
)
;
void
SetAscentOverride
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetDescentOverride
(
nsACString
&
aResult
)
;
void
SetDescentOverride
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetLineGapOverride
(
nsACString
&
aResult
)
;
void
SetLineGapOverride
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
void
GetSizeAdjust
(
nsACString
&
aResult
)
;
void
SetSizeAdjust
(
const
nsACString
&
aValue
ErrorResult
&
aRv
)
;
FontFaceLoadStatus
Status
(
)
;
Promise
*
Load
(
ErrorResult
&
aRv
)
;
Promise
*
GetLoaded
(
ErrorResult
&
aRv
)
;
FontFaceImpl
*
GetImpl
(
)
const
{
return
mImpl
;
}
void
Destroy
(
)
;
void
MaybeResolve
(
)
;
void
MaybeReject
(
nsresult
aResult
)
;
private
:
explicit
FontFace
(
nsIGlobalObject
*
aParent
)
;
~
FontFace
(
)
;
void
TakeBuffer
(
uint8_t
*
&
aBuffer
uint32_t
&
aLength
)
;
void
EnsurePromise
(
)
;
nsCOMPtr
<
nsIGlobalObject
>
mParent
;
RefPtr
<
FontFaceImpl
>
mImpl
;
RefPtr
<
Promise
>
mLoaded
;
nsresult
mLoadedRejection
;
}
;
}
#
endif
