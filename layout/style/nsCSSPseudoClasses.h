#
ifndef
nsCSSPseudoClasses_h___
#
define
nsCSSPseudoClasses_h___
#
include
"
nsStringFwd
.
h
"
#
define
CSS_PSEUDO_CLASS_ENABLED_MASK
(
3
<
<
0
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
(
1
<
<
0
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
(
1
<
<
1
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS_AND_CHROME
\
(
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
|
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
)
class
nsIAtom
;
namespace
mozilla
{
typedef
uint8_t
CSSPseudoClassTypeBase
;
enum
class
CSSPseudoClassType
:
CSSPseudoClassTypeBase
{
#
define
CSS_PSEUDO_CLASS
(
_name
_value
_flags
_pref
)
\
_name
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
Count
NotPseudo
MAX
}
;
}
class
nsCSSPseudoClasses
{
typedef
mozilla
:
:
CSSPseudoClassType
Type
;
public
:
static
void
AddRefAtoms
(
)
;
static
Type
GetPseudoType
(
nsIAtom
*
aAtom
bool
aAgentEnabled
bool
aChromeEnabled
)
;
static
bool
HasStringArg
(
Type
aType
)
;
static
bool
HasNthPairArg
(
Type
aType
)
;
static
bool
HasSelectorListArg
(
Type
aType
)
{
return
aType
=
=
Type
:
:
any
;
}
static
bool
IsUserActionPseudoClass
(
Type
aType
)
;
static
void
PseudoTypeToString
(
Type
aType
nsAString
&
aString
)
;
private
:
static
uint32_t
FlagsForPseudoClass
(
const
Type
aType
)
;
static
const
uint32_t
kPseudoClassFlags
[
size_t
(
Type
:
:
Count
)
]
;
static
bool
sPseudoClassEnabled
[
size_t
(
Type
:
:
Count
)
]
;
}
;
#
endif
