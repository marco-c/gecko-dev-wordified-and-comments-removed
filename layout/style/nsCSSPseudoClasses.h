#
ifndef
nsCSSPseudoClasses_h___
#
define
nsCSSPseudoClasses_h___
#
include
"
nsStringFwd
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
define
CSS_PSEUDO_CLASS_ENABLED_MASK
(
3
<
<
0
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
(
1
<
<
0
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
(
1
<
<
1
)
#
define
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS_AND_CHROME
\
(
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
|
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
)
class
nsAtom
;
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
typedef
uint8_t
CSSPseudoClassTypeBase
;
enum
class
CSSPseudoClassType
:
CSSPseudoClassTypeBase
{
#
define
CSS_PSEUDO_CLASS
(
_name
_value
_flags
_pref
)
\
_name
#
include
"
nsCSSPseudoClassList
.
h
"
#
undef
CSS_PSEUDO_CLASS
Count
NotPseudo
MAX
}
;
}
class
nsCSSPseudoClasses
{
typedef
mozilla
:
:
CSSPseudoClassType
Type
;
typedef
mozilla
:
:
CSSEnabledState
EnabledState
;
public
:
static
void
RegisterStaticAtoms
(
)
;
static
Type
GetPseudoType
(
nsAtom
*
aAtom
EnabledState
aEnabledState
)
;
static
bool
HasStringArg
(
Type
aType
)
;
static
bool
HasNthPairArg
(
Type
aType
)
;
static
bool
HasSelectorListArg
(
Type
aType
)
{
return
aType
=
=
Type
:
:
any
;
}
static
bool
IsUserActionPseudoClass
(
Type
aType
)
;
static
void
PseudoTypeToString
(
Type
aType
nsAString
&
aString
)
;
static
bool
IsEnabled
(
Type
aType
EnabledState
aEnabledState
)
{
auto
index
=
static_cast
<
size_t
>
(
aType
)
;
MOZ_ASSERT
(
index
<
static_cast
<
size_t
>
(
Type
:
:
Count
)
)
;
if
(
sPseudoClassEnabled
[
index
]
|
|
aEnabledState
=
=
EnabledState
:
:
eIgnoreEnabledState
)
{
return
true
;
}
auto
flags
=
kPseudoClassFlags
[
index
]
;
if
(
(
(
aEnabledState
&
EnabledState
:
:
eInChrome
)
&
&
(
flags
&
CSS_PSEUDO_CLASS_ENABLED_IN_CHROME
)
)
|
|
(
(
aEnabledState
&
EnabledState
:
:
eInUASheets
)
&
&
(
flags
&
CSS_PSEUDO_CLASS_ENABLED_IN_UA_SHEETS
)
)
)
{
return
true
;
}
return
false
;
}
static
mozilla
:
:
Maybe
<
bool
>
MatchesElement
(
Type
aType
const
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
static
bool
StringPseudoMatches
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
CSSPseudoClassType
aPseudo
const
char16_t
*
aString
const
nsIDocument
*
aDocument
mozilla
:
:
EventStates
aStateMask
bool
*
const
aDependence
=
nullptr
)
;
static
const
mozilla
:
:
EventStates
sPseudoClassStateDependences
[
size_t
(
Type
:
:
Count
)
+
2
]
;
private
:
static
const
uint32_t
kPseudoClassFlags
[
size_t
(
Type
:
:
Count
)
]
;
static
bool
sPseudoClassEnabled
[
size_t
(
Type
:
:
Count
)
]
;
}
;
#
endif
