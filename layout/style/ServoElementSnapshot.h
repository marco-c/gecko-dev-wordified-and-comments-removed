#
ifndef
mozilla_ServoElementSnapshot_h
#
define
mozilla_ServoElementSnapshot_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
include
"
mozilla
/
IntegerRange
.
h
"
#
include
"
mozilla
/
dom
/
BorrowedAttrInfo
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAttrName
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsAtom
.
h
"
namespace
mozilla
{
struct
ServoAttrSnapshot
{
nsAttrName
mName
;
nsAttrValue
mValue
;
ServoAttrSnapshot
(
const
nsAttrName
&
aName
const
nsAttrValue
&
aValue
)
:
mName
(
aName
)
mValue
(
aValue
)
{
}
}
;
enum
class
ServoElementSnapshotFlags
:
uint8_t
{
State
=
1
<
<
0
Attributes
=
1
<
<
1
Id
=
1
<
<
2
MaybeClass
=
1
<
<
3
OtherPseudoClassState
=
1
<
<
4
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
ServoElementSnapshotFlags
)
class
ServoElementSnapshot
{
typedef
dom
:
:
BorrowedAttrInfo
BorrowedAttrInfo
;
typedef
dom
:
:
Element
Element
;
typedef
EventStates
:
:
ServoType
ServoStateType
;
public
:
typedef
ServoElementSnapshotFlags
Flags
;
explicit
ServoElementSnapshot
(
const
Element
*
aElement
)
;
~
ServoElementSnapshot
(
)
{
MOZ_COUNT_DTOR
(
ServoElementSnapshot
)
;
}
bool
HasAttrs
(
)
const
{
return
HasAny
(
Flags
:
:
Attributes
)
;
}
bool
HasState
(
)
const
{
return
HasAny
(
Flags
:
:
State
)
;
}
bool
HasOtherPseudoClassState
(
)
const
{
return
HasAny
(
Flags
:
:
OtherPseudoClassState
)
;
}
void
AddState
(
EventStates
aState
)
{
if
(
!
HasAny
(
Flags
:
:
State
)
)
{
mState
=
aState
.
ServoValue
(
)
;
mContains
|
=
Flags
:
:
State
;
}
}
inline
void
AddAttrs
(
Element
*
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
;
void
AddOtherPseudoClassState
(
Element
*
aElement
)
;
BorrowedAttrInfo
GetAttrInfoAt
(
uint32_t
aIndex
)
const
{
MOZ_ASSERT
(
HasAttrs
(
)
)
;
if
(
aIndex
>
=
mAttrs
.
Length
(
)
)
{
return
BorrowedAttrInfo
(
nullptr
nullptr
)
;
}
return
BorrowedAttrInfo
(
&
mAttrs
[
aIndex
]
.
mName
&
mAttrs
[
aIndex
]
.
mValue
)
;
}
const
nsAttrValue
*
GetParsedAttr
(
nsAtom
*
aLocalName
)
const
{
return
GetParsedAttr
(
aLocalName
kNameSpaceID_None
)
;
}
const
nsAttrValue
*
GetParsedAttr
(
nsAtom
*
aLocalName
int32_t
aNamespaceID
)
const
{
MOZ_ASSERT
(
HasAttrs
(
)
)
;
uint32_t
i
len
=
mAttrs
.
Length
(
)
;
if
(
aNamespaceID
=
=
kNameSpaceID_None
)
{
for
(
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
mAttrs
[
i
]
.
mName
.
Equals
(
aLocalName
)
)
{
return
&
mAttrs
[
i
]
.
mValue
;
}
}
return
nullptr
;
}
for
(
i
=
0
;
i
<
len
;
+
+
i
)
{
if
(
mAttrs
[
i
]
.
mName
.
Equals
(
aLocalName
aNamespaceID
)
)
{
return
&
mAttrs
[
i
]
.
mValue
;
}
}
return
nullptr
;
}
const
nsAttrValue
*
GetClasses
(
)
const
{
MOZ_ASSERT
(
HasAttrs
(
)
)
;
return
&
mClass
;
}
bool
IsInChromeDocument
(
)
const
{
return
mIsInChromeDocument
;
}
bool
SupportsLangAttr
(
)
const
{
return
mSupportsLangAttr
;
}
bool
HasAny
(
Flags
aFlags
)
const
{
return
bool
(
mContains
&
aFlags
)
;
}
bool
IsTableBorderNonzero
(
)
const
{
MOZ_ASSERT
(
HasOtherPseudoClassState
(
)
)
;
return
mIsTableBorderNonzero
;
}
bool
IsMozBrowserFrame
(
)
const
{
MOZ_ASSERT
(
HasOtherPseudoClassState
(
)
)
;
return
mIsMozBrowserFrame
;
}
private
:
nsTArray
<
ServoAttrSnapshot
>
mAttrs
;
nsAttrValue
mClass
;
ServoStateType
mState
;
Flags
mContains
;
bool
mIsHTMLElementInHTMLDocument
:
1
;
bool
mIsInChromeDocument
:
1
;
bool
mSupportsLangAttr
:
1
;
bool
mIsTableBorderNonzero
:
1
;
bool
mIsMozBrowserFrame
:
1
;
bool
mClassAttributeChanged
:
1
;
bool
mIdAttributeChanged
:
1
;
bool
mOtherAttributeChanged
:
1
;
}
;
inline
void
ServoElementSnapshot
:
:
AddAttrs
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
_class
)
{
mClassAttributeChanged
=
true
;
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
id
)
{
mIdAttributeChanged
=
true
;
}
else
{
mOtherAttributeChanged
=
true
;
}
}
else
{
mOtherAttributeChanged
=
true
;
}
if
(
HasAttrs
(
)
)
{
return
;
}
uint32_t
attrCount
=
aElement
-
>
GetAttrCount
(
)
;
mAttrs
.
SetCapacity
(
attrCount
)
;
for
(
uint32_t
i
:
IntegerRange
(
attrCount
)
)
{
const
BorrowedAttrInfo
info
=
aElement
-
>
GetAttrInfoAt
(
i
)
;
MOZ_ASSERT
(
info
)
;
mAttrs
.
AppendElement
(
ServoAttrSnapshot
{
*
info
.
mName
*
info
.
mValue
}
)
;
}
mContains
|
=
Flags
:
:
Attributes
;
if
(
aElement
-
>
HasID
(
)
)
{
mContains
|
=
Flags
:
:
Id
;
}
if
(
const
nsAttrValue
*
classValue
=
aElement
-
>
GetClasses
(
)
)
{
mClass
=
*
classValue
;
mContains
|
=
Flags
:
:
MaybeClass
;
}
}
}
#
endif
