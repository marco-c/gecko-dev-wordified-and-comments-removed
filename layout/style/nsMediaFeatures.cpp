#
include
"
nsGkAtoms
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
DocumentInlines
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContextBinding
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
RelativeLuminanceUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
GeckoBindings
.
h
"
#
include
"
PreferenceSheet
.
h
"
#
include
"
nsGlobalWindowOuter
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
WindowsVersion
.
h
"
#
endif
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
DisplayMode
;
using
mozilla
:
:
dom
:
:
Document
;
static
nsSize
GetSize
(
const
Document
&
aDocument
)
{
nsPresContext
*
pc
=
aDocument
.
GetPresContext
(
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
return
pc
-
>
GetVisibleArea
(
)
.
Size
(
)
;
}
static
nsSize
GetDeviceSize
(
const
Document
&
aDocument
)
{
if
(
aDocument
.
ShouldResistFingerprinting
(
)
)
{
return
GetSize
(
aDocument
)
;
}
Maybe
<
CSSIntSize
>
deviceSize
=
nsGlobalWindowOuter
:
:
GetRDMDeviceSize
(
aDocument
)
;
if
(
deviceSize
.
isSome
(
)
)
{
return
CSSPixel
:
:
ToAppUnits
(
deviceSize
.
value
(
)
)
;
}
nsPresContext
*
pc
=
aDocument
.
GetPresContext
(
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
nsSize
size
;
pc
-
>
DeviceContext
(
)
-
>
GetDeviceSurfaceDimensions
(
size
.
width
size
.
height
)
;
return
size
;
}
bool
Gecko_MediaFeatures_WindowsNonNativeMenus
(
)
{
return
LookAndFeel
:
:
WindowsNonNativeMenusEnabled
(
)
;
}
bool
Gecko_MediaFeatures_IsResourceDocument
(
const
Document
*
aDocument
)
{
return
aDocument
-
>
IsResourceDoc
(
)
;
}
bool
Gecko_MediaFeatures_ShouldAvoidNativeTheme
(
const
Document
*
aDocument
)
{
return
aDocument
-
>
ShouldAvoidNativeTheme
(
)
;
}
bool
Gecko_MediaFeatures_UseOverlayScrollbars
(
const
Document
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
return
pc
&
&
pc
-
>
UseOverlayScrollbars
(
)
;
}
static
nsDeviceContext
*
GetDeviceContextFor
(
const
Document
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
nullptr
;
}
return
pc
-
>
DeviceContext
(
)
;
}
void
Gecko_MediaFeatures_GetDeviceSize
(
const
Document
*
aDocument
nscoord
*
aWidth
nscoord
*
aHeight
)
{
nsSize
size
=
GetDeviceSize
(
*
aDocument
)
;
*
aWidth
=
size
.
width
;
*
aHeight
=
size
.
height
;
}
uint32_t
Gecko_MediaFeatures_GetMonochromeBitsPerPixel
(
const
Document
*
aDocument
)
{
static
constexpr
uint32_t
kDefaultMonochromeBpp
=
8
;
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
0
;
}
nsIPrintSettings
*
ps
=
pc
-
>
GetPrintSettings
(
)
;
if
(
!
ps
)
{
return
0
;
}
bool
color
=
true
;
ps
-
>
GetPrintInColor
(
&
color
)
;
return
color
?
0
:
kDefaultMonochromeBpp
;
}
uint32_t
Gecko_MediaFeatures_GetColorDepth
(
const
Document
*
aDocument
)
{
if
(
Gecko_MediaFeatures_GetMonochromeBitsPerPixel
(
aDocument
)
!
=
0
)
{
return
0
;
}
uint32_t
depth
=
24
;
if
(
!
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
if
(
nsDeviceContext
*
dx
=
GetDeviceContextFor
(
aDocument
)
)
{
depth
=
dx
-
>
GetDepth
(
)
;
}
}
return
depth
/
3
;
}
float
Gecko_MediaFeatures_GetResolution
(
const
Document
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
1
.
;
}
if
(
pc
-
>
GetOverrideDPPX
(
)
>
0
.
)
{
return
pc
-
>
GetOverrideDPPX
(
)
;
}
if
(
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
return
pc
-
>
DeviceContext
(
)
-
>
GetFullZoom
(
)
;
}
return
float
(
AppUnitsPerCSSPixel
(
)
)
/
pc
-
>
DeviceContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
}
static
const
Document
*
TopDocument
(
const
Document
*
aDocument
)
{
const
Document
*
current
=
aDocument
;
while
(
const
Document
*
parent
=
current
-
>
GetInProcessParentDocument
(
)
)
{
current
=
parent
;
}
return
current
;
}
StyleDisplayMode
Gecko_MediaFeatures_GetDisplayMode
(
const
Document
*
aDocument
)
{
const
Document
*
rootDocument
=
TopDocument
(
aDocument
)
;
nsCOMPtr
<
nsISupports
>
container
=
rootDocument
-
>
GetContainer
(
)
;
if
(
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
container
)
)
{
nsCOMPtr
<
nsIWidget
>
mainWidget
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
mainWidget
)
)
;
if
(
mainWidget
&
&
mainWidget
-
>
SizeMode
(
)
=
=
nsSizeMode_Fullscreen
)
{
return
StyleDisplayMode
:
:
Fullscreen
;
}
}
static_assert
(
static_cast
<
int32_t
>
(
DisplayMode
:
:
Browser
)
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Browser
)
&
&
static_cast
<
int32_t
>
(
DisplayMode
:
:
Minimal_ui
)
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
MinimalUi
)
&
&
static_cast
<
int32_t
>
(
DisplayMode
:
:
Standalone
)
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Standalone
)
&
&
static_cast
<
int32_t
>
(
DisplayMode
:
:
Fullscreen
)
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Fullscreen
)
"
DisplayMode
must
mach
nsStyleConsts
.
h
"
)
;
dom
:
:
BrowsingContext
*
browsingContext
=
aDocument
-
>
GetBrowsingContext
(
)
;
if
(
!
browsingContext
)
{
return
StyleDisplayMode
:
:
Browser
;
}
return
static_cast
<
StyleDisplayMode
>
(
browsingContext
-
>
DisplayMode
(
)
)
;
}
bool
Gecko_MediaFeatures_MatchesPlatform
(
StylePlatform
aPlatform
)
{
switch
(
aPlatform
)
{
#
if
defined
(
XP_WIN
)
case
StylePlatform
:
:
Windows
:
return
true
;
case
StylePlatform
:
:
WindowsWin10
:
case
StylePlatform
:
:
WindowsWin7
:
case
StylePlatform
:
:
WindowsWin8
:
{
if
(
IsWin10OrLater
(
)
)
{
return
aPlatform
=
=
StylePlatform
:
:
WindowsWin10
;
}
if
(
IsWin8OrLater
(
)
)
{
return
aPlatform
=
=
StylePlatform
:
:
WindowsWin8
;
}
return
aPlatform
=
=
StylePlatform
:
:
WindowsWin7
;
}
#
elif
defined
(
ANDROID
)
case
StylePlatform
:
:
Android
:
return
true
;
#
elif
defined
(
MOZ_WIDGET_GTK
)
case
StylePlatform
:
:
Linux
:
return
true
;
#
elif
defined
(
XP_MACOSX
)
case
StylePlatform
:
:
Macos
:
return
true
;
#
else
#
error
"
Unknown
platform
?
"
#
endif
default
:
return
false
;
}
}
bool
Gecko_MediaFeatures_PrefersReducedMotion
(
const
Document
*
aDocument
)
{
if
(
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
return
false
;
}
return
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
IntID
:
:
PrefersReducedMotion
0
)
=
=
1
;
}
StylePrefersColorScheme
Gecko_MediaFeatures_PrefersColorScheme
(
const
Document
*
aDocument
bool
aUseContent
)
{
auto
scheme
=
aUseContent
?
LookAndFeel
:
:
PreferredColorSchemeForContent
(
)
:
aDocument
-
>
PreferredColorScheme
(
)
;
return
scheme
=
=
ColorScheme
:
:
Dark
?
StylePrefersColorScheme
:
:
Dark
:
StylePrefersColorScheme
:
:
Light
;
}
StylePrefersContrast
Gecko_MediaFeatures_PrefersContrast
(
const
Document
*
aDocument
)
{
if
(
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
return
StylePrefersContrast
:
:
NoPreference
;
}
const
auto
&
prefs
=
PreferenceSheet
:
:
PrefsFor
(
*
aDocument
)
;
if
(
!
prefs
.
mUseAccessibilityTheme
&
&
prefs
.
mUseDocumentColors
)
{
return
StylePrefersContrast
:
:
NoPreference
;
}
const
auto
&
colors
=
prefs
.
ColorsFor
(
ColorScheme
:
:
Light
)
;
float
ratio
=
RelativeLuminanceUtils
:
:
ContrastRatio
(
colors
.
mDefaultBackground
colors
.
mDefault
)
;
if
(
ratio
<
4
.
5f
)
{
return
StylePrefersContrast
:
:
Less
;
}
if
(
ratio
>
=
7
.
0f
)
{
return
StylePrefersContrast
:
:
More
;
}
return
StylePrefersContrast
:
:
Custom
;
}
StyleDynamicRange
Gecko_MediaFeatures_DynamicRange
(
const
Document
*
aDocument
)
{
return
StyleDynamicRange
:
:
Standard
;
}
StyleDynamicRange
Gecko_MediaFeatures_VideoDynamicRange
(
const
Document
*
aDocument
)
{
if
(
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
return
StyleDynamicRange
:
:
Standard
;
}
if
(
nsDeviceContext
*
dx
=
GetDeviceContextFor
(
aDocument
)
)
{
if
(
dx
-
>
GetDepth
(
)
>
24
&
&
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
IntID
:
:
VideoDynamicRange
)
)
{
return
StyleDynamicRange
:
:
High
;
}
}
return
StyleDynamicRange
:
:
Standard
;
}
static
PointerCapabilities
GetPointerCapabilities
(
const
Document
*
aDocument
LookAndFeel
:
:
IntID
aID
)
{
MOZ_ASSERT
(
aID
=
=
LookAndFeel
:
:
IntID
:
:
PrimaryPointerCapabilities
|
|
aID
=
=
LookAndFeel
:
:
IntID
:
:
AllPointerCapabilities
)
;
MOZ_ASSERT
(
aDocument
)
;
if
(
dom
:
:
BrowsingContext
*
bc
=
aDocument
-
>
GetBrowsingContext
(
)
)
{
if
(
bc
-
>
TouchEventsOverride
(
)
=
=
dom
:
:
TouchEventsOverride
:
:
Enabled
)
{
return
PointerCapabilities
:
:
Coarse
;
}
}
const
PointerCapabilities
kDefaultCapabilities
=
#
ifdef
ANDROID
PointerCapabilities
:
:
Coarse
;
#
else
PointerCapabilities
:
:
Fine
|
PointerCapabilities
:
:
Hover
;
#
endif
if
(
aDocument
-
>
ShouldResistFingerprinting
(
)
)
{
return
kDefaultCapabilities
;
}
int32_t
intValue
;
nsresult
rv
=
LookAndFeel
:
:
GetInt
(
aID
&
intValue
)
;
if
(
NS_FAILED
(
rv
)
)
{
return
kDefaultCapabilities
;
}
return
static_cast
<
PointerCapabilities
>
(
intValue
)
;
}
PointerCapabilities
Gecko_MediaFeatures_PrimaryPointerCapabilities
(
const
Document
*
aDocument
)
{
return
GetPointerCapabilities
(
aDocument
LookAndFeel
:
:
IntID
:
:
PrimaryPointerCapabilities
)
;
}
PointerCapabilities
Gecko_MediaFeatures_AllPointerCapabilities
(
const
Document
*
aDocument
)
{
return
GetPointerCapabilities
(
aDocument
LookAndFeel
:
:
IntID
:
:
AllPointerCapabilities
)
;
}
