#
include
"
nsMediaFeatures
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsCSSKeywords
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsCSSValue
.
h
"
#
ifdef
XP_WIN
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
endif
#
include
"
nsCSSRuleProcessor
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
using
namespace
mozilla
;
static
nsTArray
<
RefPtr
<
nsAtom
>
>
*
sSystemMetrics
=
nullptr
;
#
ifdef
XP_WIN
static
uint8_t
sWinThemeId
=
LookAndFeel
:
:
eWindowsTheme_Generic
;
#
endif
static
const
nsCSSProps
:
:
KTableEntry
kOrientationKeywords
[
]
=
{
{
eCSSKeyword_portrait
NS_STYLE_ORIENTATION_PORTRAIT
}
{
eCSSKeyword_landscape
NS_STYLE_ORIENTATION_LANDSCAPE
}
{
eCSSKeyword_UNKNOWN
-
1
}
}
;
static
const
nsCSSProps
:
:
KTableEntry
kScanKeywords
[
]
=
{
{
eCSSKeyword_progressive
NS_STYLE_SCAN_PROGRESSIVE
}
{
eCSSKeyword_interlace
NS_STYLE_SCAN_INTERLACE
}
{
eCSSKeyword_UNKNOWN
-
1
}
}
;
static
const
nsCSSProps
:
:
KTableEntry
kDisplayModeKeywords
[
]
=
{
{
eCSSKeyword_browser
NS_STYLE_DISPLAY_MODE_BROWSER
}
{
eCSSKeyword_minimal_ui
NS_STYLE_DISPLAY_MODE_MINIMAL_UI
}
{
eCSSKeyword_standalone
NS_STYLE_DISPLAY_MODE_STANDALONE
}
{
eCSSKeyword_fullscreen
NS_STYLE_DISPLAY_MODE_FULLSCREEN
}
{
eCSSKeyword_UNKNOWN
-
1
}
}
;
#
ifdef
XP_WIN
struct
WindowsThemeName
{
LookAndFeel
:
:
WindowsTheme
id
;
const
wchar_t
*
name
;
}
;
const
WindowsThemeName
themeStrings
[
]
=
{
{
LookAndFeel
:
:
eWindowsTheme_Aero
L
"
aero
"
}
{
LookAndFeel
:
:
eWindowsTheme_AeroLite
L
"
aero
-
lite
"
}
{
LookAndFeel
:
:
eWindowsTheme_LunaBlue
L
"
luna
-
blue
"
}
{
LookAndFeel
:
:
eWindowsTheme_LunaOlive
L
"
luna
-
olive
"
}
{
LookAndFeel
:
:
eWindowsTheme_LunaSilver
L
"
luna
-
silver
"
}
{
LookAndFeel
:
:
eWindowsTheme_Royale
L
"
royale
"
}
{
LookAndFeel
:
:
eWindowsTheme_Zune
L
"
zune
"
}
{
LookAndFeel
:
:
eWindowsTheme_Generic
L
"
generic
"
}
}
;
struct
OperatingSystemVersionInfo
{
LookAndFeel
:
:
OperatingSystemVersion
id
;
const
wchar_t
*
name
;
}
;
const
OperatingSystemVersionInfo
osVersionStrings
[
]
=
{
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows7
L
"
windows
-
win7
"
}
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows8
L
"
windows
-
win8
"
}
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows10
L
"
windows
-
win10
"
}
}
;
#
endif
static
nsPresContext
*
GetPresContext
(
nsIDocument
*
aDocument
)
{
nsIPresShell
*
presShell
=
aDocument
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
return
nullptr
;
}
return
presShell
-
>
GetPresContext
(
)
;
}
static
nsSize
GetSize
(
nsIDocument
*
aDocument
)
{
nsPresContext
*
pc
=
GetPresContext
(
aDocument
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
return
pc
-
>
GetVisibleArea
(
)
.
Size
(
)
;
}
static
void
GetWidth
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetSize
(
aDocument
)
;
aResult
.
SetFloatValue
(
CSSPixel
:
:
FromAppUnits
(
size
.
width
)
eCSSUnit_Pixel
)
;
}
static
void
GetHeight
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetSize
(
aDocument
)
;
aResult
.
SetFloatValue
(
CSSPixel
:
:
FromAppUnits
(
size
.
height
)
eCSSUnit_Pixel
)
;
}
static
bool
ShouldResistFingerprinting
(
nsIDocument
*
aDocument
)
{
return
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
-
>
GetDocShell
(
)
)
;
}
static
bool
IsDeviceSizePageSize
(
nsIDocument
*
aDocument
)
{
nsIDocShell
*
docShell
=
aDocument
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
false
;
}
return
docShell
-
>
GetDeviceSizeIsPageSize
(
)
;
}
static
nsSize
GetDeviceSize
(
nsIDocument
*
aDocument
)
{
if
(
ShouldResistFingerprinting
(
aDocument
)
|
|
IsDeviceSizePageSize
(
aDocument
)
)
{
return
GetSize
(
aDocument
)
;
}
nsPresContext
*
pc
=
GetPresContext
(
aDocument
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
nsSize
size
;
pc
-
>
DeviceContext
(
)
-
>
GetDeviceSurfaceDimensions
(
size
.
width
size
.
height
)
;
return
size
;
}
static
void
GetDeviceWidth
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetDeviceSize
(
aDocument
)
;
aResult
.
SetFloatValue
(
CSSPixel
:
:
FromAppUnits
(
size
.
width
)
eCSSUnit_Pixel
)
;
}
static
void
GetDeviceHeight
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetDeviceSize
(
aDocument
)
;
aResult
.
SetFloatValue
(
CSSPixel
:
:
FromAppUnits
(
size
.
height
)
eCSSUnit_Pixel
)
;
}
static
void
GetOrientation
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetSize
(
aDocument
)
;
int32_t
orientation
=
size
.
width
>
size
.
height
?
NS_STYLE_ORIENTATION_LANDSCAPE
:
NS_STYLE_ORIENTATION_PORTRAIT
;
aResult
.
SetIntValue
(
orientation
eCSSUnit_Enumerated
)
;
}
static
void
GetDeviceOrientation
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsSize
size
=
GetDeviceSize
(
aDocument
)
;
int32_t
orientation
=
size
.
width
>
size
.
height
?
NS_STYLE_ORIENTATION_LANDSCAPE
:
NS_STYLE_ORIENTATION_PORTRAIT
;
aResult
.
SetIntValue
(
orientation
eCSSUnit_Enumerated
)
;
}
static
void
GetIsResourceDocument
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
SetIntValue
(
aDocument
-
>
IsResourceDoc
(
)
?
1
:
0
eCSSUnit_Integer
)
;
}
static
void
MakeArray
(
const
nsSize
&
aSize
nsCSSValue
&
aResult
)
{
RefPtr
<
nsCSSValue
:
:
Array
>
a
=
nsCSSValue
:
:
Array
:
:
Create
(
2
)
;
a
-
>
Item
(
0
)
.
SetIntValue
(
aSize
.
width
eCSSUnit_Integer
)
;
a
-
>
Item
(
1
)
.
SetIntValue
(
aSize
.
height
eCSSUnit_Integer
)
;
aResult
.
SetArrayValue
(
a
eCSSUnit_Array
)
;
}
static
void
GetAspectRatio
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
MakeArray
(
GetSize
(
aDocument
)
aResult
)
;
}
static
void
GetDeviceAspectRatio
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
MakeArray
(
GetDeviceSize
(
aDocument
)
aResult
)
;
}
static
nsDeviceContext
*
GetDeviceContextFor
(
nsIDocument
*
aDocument
)
{
nsPresContext
*
pc
=
GetPresContext
(
aDocument
)
;
if
(
!
pc
)
{
return
nullptr
;
}
return
pc
-
>
DeviceContext
(
)
;
}
static
void
GetColor
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
uint32_t
depth
=
24
;
if
(
!
ShouldResistFingerprinting
(
aDocument
)
)
{
if
(
nsDeviceContext
*
dx
=
GetDeviceContextFor
(
aDocument
)
)
{
dx
-
>
GetDepth
(
depth
)
;
}
}
depth
/
=
3
;
aResult
.
SetIntValue
(
int32_t
(
depth
)
eCSSUnit_Integer
)
;
}
static
void
GetColorIndex
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
SetIntValue
(
0
eCSSUnit_Integer
)
;
}
static
void
GetMonochrome
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
SetIntValue
(
0
eCSSUnit_Integer
)
;
}
static
void
GetResolution
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
float
dppx
=
1
.
;
if
(
nsDeviceContext
*
dx
=
GetDeviceContextFor
(
aDocument
)
)
{
if
(
ShouldResistFingerprinting
(
aDocument
)
)
{
dppx
=
dx
-
>
GetFullZoom
(
)
;
}
else
{
dppx
=
float
(
nsPresContext
:
:
AppUnitsPerCSSPixel
(
)
)
/
dx
-
>
AppUnitsPerDevPixel
(
)
;
}
}
aResult
.
SetFloatValue
(
dppx
eCSSUnit_Pixel
)
;
}
static
void
GetScan
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
Reset
(
)
;
}
static
nsIDocument
*
TopDocument
(
nsIDocument
*
aDocument
)
{
nsIDocument
*
current
=
aDocument
;
while
(
nsIDocument
*
parent
=
current
-
>
GetParentDocument
(
)
)
{
current
=
parent
;
}
return
current
;
}
static
void
GetDisplayMode
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
nsIDocument
*
rootDocument
=
TopDocument
(
aDocument
)
;
nsCOMPtr
<
nsISupports
>
container
=
rootDocument
-
>
GetContainer
(
)
;
if
(
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
container
)
)
{
nsCOMPtr
<
nsIWidget
>
mainWidget
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
mainWidget
)
)
;
if
(
mainWidget
&
&
mainWidget
-
>
SizeMode
(
)
=
=
nsSizeMode_Fullscreen
)
{
aResult
.
SetIntValue
(
NS_STYLE_DISPLAY_MODE_FULLSCREEN
eCSSUnit_Enumerated
)
;
return
;
}
}
static_assert
(
nsIDocShell
:
:
DISPLAY_MODE_BROWSER
=
=
NS_STYLE_DISPLAY_MODE_BROWSER
&
&
nsIDocShell
:
:
DISPLAY_MODE_MINIMAL_UI
=
=
NS_STYLE_DISPLAY_MODE_MINIMAL_UI
&
&
nsIDocShell
:
:
DISPLAY_MODE_STANDALONE
=
=
NS_STYLE_DISPLAY_MODE_STANDALONE
&
&
nsIDocShell
:
:
DISPLAY_MODE_FULLSCREEN
=
=
NS_STYLE_DISPLAY_MODE_FULLSCREEN
"
nsIDocShell
display
modes
must
mach
nsStyleConsts
.
h
"
)
;
uint32_t
displayMode
=
NS_STYLE_DISPLAY_MODE_BROWSER
;
if
(
nsIDocShell
*
docShell
=
rootDocument
-
>
GetDocShell
(
)
)
{
docShell
-
>
GetDisplayMode
(
&
displayMode
)
;
}
aResult
.
SetIntValue
(
displayMode
eCSSUnit_Enumerated
)
;
}
static
void
GetGrid
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
SetIntValue
(
0
eCSSUnit_Integer
)
;
}
static
void
GetDevicePixelRatio
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
if
(
ShouldResistFingerprinting
(
aDocument
)
)
{
aResult
.
SetFloatValue
(
1
.
0
eCSSUnit_Number
)
;
return
;
}
nsIPresShell
*
presShell
=
aDocument
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
aResult
.
SetFloatValue
(
1
.
0
eCSSUnit_Number
)
;
return
;
}
nsPresContext
*
pc
=
presShell
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
aResult
.
SetFloatValue
(
1
.
0
eCSSUnit_Number
)
;
return
;
}
float
ratio
=
pc
-
>
CSSPixelsToDevPixels
(
1
.
0f
)
;
aResult
.
SetFloatValue
(
ratio
eCSSUnit_Number
)
;
}
static
void
GetTransform3d
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
nsCSSValue
&
aResult
)
{
aResult
.
SetIntValue
(
1
eCSSUnit_Integer
)
;
}
static
bool
HasSystemMetric
(
nsAtom
*
aMetric
)
{
nsMediaFeatures
:
:
InitSystemMetrics
(
)
;
return
sSystemMetrics
-
>
IndexOf
(
aMetric
)
!
=
sSystemMetrics
-
>
NoIndex
;
}
#
ifdef
XP_WIN
static
uint8_t
GetWindowsThemeIdentifier
(
)
{
nsMediaFeatures
:
:
InitSystemMetrics
(
)
;
return
sWinThemeId
;
}
#
endif
static
void
GetSystemMetric
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
aFeature
nsCSSValue
&
aResult
)
{
aResult
.
Reset
(
)
;
const
bool
isAccessibleFromContentPages
=
!
(
aFeature
-
>
mReqFlags
&
nsMediaFeature
:
:
eUserAgentAndChromeOnly
)
;
MOZ_ASSERT
(
!
isAccessibleFromContentPages
|
|
*
aFeature
-
>
mName
=
=
nsGkAtoms
:
:
_moz_touch_enabled
)
;
if
(
isAccessibleFromContentPages
&
&
ShouldResistFingerprinting
(
aDocument
)
)
{
return
;
}
MOZ_ASSERT
(
aFeature
-
>
mValueType
=
=
nsMediaFeature
:
:
eBoolInteger
"
unexpected
type
"
)
;
nsAtom
*
metricAtom
=
*
aFeature
-
>
mData
.
mMetric
;
bool
hasMetric
=
HasSystemMetric
(
metricAtom
)
;
aResult
.
SetIntValue
(
hasMetric
?
1
:
0
eCSSUnit_Integer
)
;
}
static
void
GetWindowsTheme
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
aFeature
nsCSSValue
&
aResult
)
{
aResult
.
Reset
(
)
;
MOZ_ASSERT
(
aFeature
-
>
mReqFlags
&
nsMediaFeature
:
:
eUserAgentAndChromeOnly
)
;
if
(
ShouldResistFingerprinting
(
aDocument
)
)
{
return
;
}
#
ifdef
XP_WIN
uint8_t
windowsThemeId
=
GetWindowsThemeIdentifier
(
)
;
if
(
windowsThemeId
=
=
LookAndFeel
:
:
eWindowsTheme_Classic
)
return
;
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
themeStrings
)
;
+
+
i
)
{
if
(
windowsThemeId
=
=
themeStrings
[
i
]
.
id
)
{
aResult
.
SetStringValue
(
nsDependentString
(
themeStrings
[
i
]
.
name
)
eCSSUnit_Ident
)
;
break
;
}
}
#
endif
}
static
void
GetOperatingSystemVersion
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
aFeature
nsCSSValue
&
aResult
)
{
aResult
.
Reset
(
)
;
MOZ_ASSERT
(
aFeature
-
>
mReqFlags
&
nsMediaFeature
:
:
eUserAgentAndChromeOnly
)
;
if
(
ShouldResistFingerprinting
(
aDocument
)
)
{
return
;
}
#
ifdef
XP_WIN
int32_t
metricResult
;
if
(
NS_SUCCEEDED
(
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_OperatingSystemVersionIdentifier
&
metricResult
)
)
)
{
for
(
size_t
i
=
0
;
i
<
ArrayLength
(
osVersionStrings
)
;
+
+
i
)
{
if
(
metricResult
=
=
osVersionStrings
[
i
]
.
id
)
{
aResult
.
SetStringValue
(
nsDependentString
(
osVersionStrings
[
i
]
.
name
)
eCSSUnit_Ident
)
;
break
;
}
}
}
#
endif
}
static
void
GetIsGlyph
(
nsIDocument
*
aDocument
const
nsMediaFeature
*
aFeature
nsCSSValue
&
aResult
)
{
MOZ_ASSERT
(
aFeature
-
>
mReqFlags
&
nsMediaFeature
:
:
eUserAgentAndChromeOnly
)
;
aResult
.
SetIntValue
(
aDocument
-
>
IsSVGGlyphsDocument
(
)
?
1
:
0
eCSSUnit_Integer
)
;
}
void
nsMediaFeatures
:
:
InitSystemMetrics
(
)
{
if
(
sSystemMetrics
)
return
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sSystemMetrics
=
new
nsTArray
<
RefPtr
<
nsAtom
>
>
;
int32_t
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ScrollArrowStyle
)
;
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_StartBackward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
scrollbar_start_backward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_StartForward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
scrollbar_start_forward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_EndBackward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
scrollbar_end_backward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_EndForward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
scrollbar_end_forward
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ScrollSliderStyle
)
;
if
(
metricResult
!
=
LookAndFeel
:
:
eScrollThumbStyle_Normal
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
scrollbar_thumb_proportional
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_UseOverlayScrollbars
)
;
if
(
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
overlay_scrollbars
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MenuBarDrag
)
;
if
(
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
menubar_drag
)
;
}
nsresult
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsDefaultTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_default_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MacGraphiteTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
mac_graphite_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MacYosemiteTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
mac_yosemite_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsAccentColorInTitlebar
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_accent_color_in_titlebar
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_DWMCompositor
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_compositor
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsGlass
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_glass
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsClassic
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_classic
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_TouchEnabled
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
touch_enabled
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_SwipeAnimationEnabled
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
swipe_animation_enabled
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDAvailable
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
gtk_csd_available
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDMinimizeButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
gtk_csd_minimize_button
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDMaximizeButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
gtk_csd_maximize_button
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDCloseButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
gtk_csd_close_button
)
;
}
#
ifdef
XP_WIN
if
(
NS_SUCCEEDED
(
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsThemeIdentifier
&
metricResult
)
)
)
{
sWinThemeId
=
metricResult
;
switch
(
metricResult
)
{
case
LookAndFeel
:
:
eWindowsTheme_Aero
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_aero
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_AeroLite
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_aero_lite
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_LunaBlue
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_luna_blue
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_LunaOlive
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_luna_olive
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_LunaSilver
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_luna_silver
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_Royale
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_royale
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_Zune
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_zune
)
;
break
;
case
LookAndFeel
:
:
eWindowsTheme_Generic
:
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
windows_theme_generic
)
;
break
;
}
}
#
endif
}
void
nsMediaFeatures
:
:
FreeSystemMetrics
(
)
{
delete
sSystemMetrics
;
sSystemMetrics
=
nullptr
;
}
void
nsMediaFeatures
:
:
Shutdown
(
)
{
FreeSystemMetrics
(
)
;
}
const
nsMediaFeature
nsMediaFeatures
:
:
features
[
]
=
{
{
&
nsGkAtoms
:
:
width
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eLength
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetWidth
}
{
&
nsGkAtoms
:
:
height
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eLength
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetHeight
}
{
&
nsGkAtoms
:
:
deviceWidth
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eLength
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetDeviceWidth
}
{
&
nsGkAtoms
:
:
deviceHeight
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eLength
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetDeviceHeight
}
{
&
nsGkAtoms
:
:
orientation
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eEnumerated
nsMediaFeature
:
:
eNoRequirements
{
kOrientationKeywords
}
GetOrientation
}
{
&
nsGkAtoms
:
:
aspectRatio
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eIntRatio
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetAspectRatio
}
{
&
nsGkAtoms
:
:
deviceAspectRatio
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eIntRatio
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetDeviceAspectRatio
}
{
&
nsGkAtoms
:
:
color
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetColor
}
{
&
nsGkAtoms
:
:
colorIndex
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetColorIndex
}
{
&
nsGkAtoms
:
:
monochrome
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetMonochrome
}
{
&
nsGkAtoms
:
:
resolution
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eResolution
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetResolution
}
{
&
nsGkAtoms
:
:
scan
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eEnumerated
nsMediaFeature
:
:
eNoRequirements
{
kScanKeywords
}
GetScan
}
{
&
nsGkAtoms
:
:
grid
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetGrid
}
{
&
nsGkAtoms
:
:
displayMode
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eEnumerated
nsMediaFeature
:
:
eNoRequirements
{
kDisplayModeKeywords
}
GetDisplayMode
}
{
&
nsGkAtoms
:
:
devicePixelRatio
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eFloat
nsMediaFeature
:
:
eHasWebkitPrefix
|
nsMediaFeature
:
:
eWebkitDevicePixelRatioPrefEnabled
{
nullptr
}
GetDevicePixelRatio
}
{
&
nsGkAtoms
:
:
transform_3d
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eHasWebkitPrefix
{
nullptr
}
GetTransform3d
}
{
&
nsGkAtoms
:
:
_moz_device_pixel_ratio
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eFloat
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetDevicePixelRatio
}
{
&
nsGkAtoms
:
:
_moz_device_orientation
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eEnumerated
nsMediaFeature
:
:
eNoRequirements
{
kOrientationKeywords
}
GetDeviceOrientation
}
{
&
nsGkAtoms
:
:
_moz_is_resource_document
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
GetIsResourceDocument
}
{
&
nsGkAtoms
:
:
_moz_scrollbar_start_backward
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
scrollbar_start_backward
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_scrollbar_start_forward
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
scrollbar_start_forward
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_scrollbar_end_backward
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
scrollbar_end_backward
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_scrollbar_end_forward
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
scrollbar_end_forward
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_scrollbar_thumb_proportional
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
scrollbar_thumb_proportional
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_overlay_scrollbars
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
overlay_scrollbars
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_default_theme
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
windows_default_theme
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_mac_graphite_theme
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
mac_graphite_theme
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_mac_yosemite_theme
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
mac_yosemite_theme
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_accent_color_in_titlebar
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
windows_accent_color_in_titlebar
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_compositor
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
windows_compositor
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_classic
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
windows_classic
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_glass
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
windows_glass
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_touch_enabled
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eNoRequirements
{
&
nsGkAtoms
:
:
touch_enabled
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_menubar_drag
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
menubar_drag
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_windows_theme
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eIdent
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
nullptr
}
GetWindowsTheme
}
{
&
nsGkAtoms
:
:
_moz_os_version
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eIdent
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
nullptr
}
GetOperatingSystemVersion
}
{
&
nsGkAtoms
:
:
_moz_swipe_animation_enabled
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
swipe_animation_enabled
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_gtk_csd_available
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
gtk_csd_available
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_gtk_csd_minimize_button
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
gtk_csd_minimize_button
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_gtk_csd_maximize_button
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
gtk_csd_maximize_button
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_gtk_csd_close_button
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
&
nsGkAtoms
:
:
gtk_csd_close_button
}
GetSystemMetric
}
{
&
nsGkAtoms
:
:
_moz_is_glyph
nsMediaFeature
:
:
eMinMaxNotAllowed
nsMediaFeature
:
:
eBoolInteger
nsMediaFeature
:
:
eUserAgentAndChromeOnly
{
nullptr
}
GetIsGlyph
}
{
nullptr
nsMediaFeature
:
:
eMinMaxAllowed
nsMediaFeature
:
:
eInteger
nsMediaFeature
:
:
eNoRequirements
{
nullptr
}
nullptr
}
}
;
