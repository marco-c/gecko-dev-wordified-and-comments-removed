#
include
"
nsMediaFeatures
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsCSSKeywords
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
using
namespace
mozilla
;
static
nsTArray
<
RefPtr
<
nsAtom
>
>
*
sSystemMetrics
=
nullptr
;
#
ifdef
XP_WIN
struct
OperatingSystemVersionInfo
{
LookAndFeel
:
:
OperatingSystemVersion
mId
;
nsStaticAtom
*
*
mName
;
}
;
const
OperatingSystemVersionInfo
kOsVersionStrings
[
]
=
{
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows7
&
nsGkAtoms
:
:
windows_win7
}
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows8
&
nsGkAtoms
:
:
windows_win8
}
{
LookAndFeel
:
:
eOperatingSystemVersion_Windows10
&
nsGkAtoms
:
:
windows_win10
}
}
;
#
endif
static
nsSize
GetSize
(
nsIDocument
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
return
pc
-
>
GetVisibleArea
(
)
.
Size
(
)
;
}
static
bool
IsDeviceSizePageSize
(
nsIDocument
*
aDocument
)
{
nsIDocShell
*
docShell
=
aDocument
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
{
return
false
;
}
return
docShell
-
>
GetDeviceSizeIsPageSize
(
)
;
}
static
nsSize
GetDeviceSize
(
nsIDocument
*
aDocument
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
|
|
IsDeviceSizePageSize
(
aDocument
)
)
{
return
GetSize
(
aDocument
)
;
}
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
{
}
;
}
if
(
pc
-
>
IsRootPaginatedDocument
(
)
)
{
return
pc
-
>
GetPageSize
(
)
;
}
nsSize
size
;
pc
-
>
DeviceContext
(
)
-
>
GetDeviceSurfaceDimensions
(
size
.
width
size
.
height
)
;
return
size
;
}
bool
Gecko_MediaFeatures_IsResourceDocument
(
nsIDocument
*
aDocument
)
{
return
aDocument
-
>
IsResourceDoc
(
)
;
}
static
nsDeviceContext
*
GetDeviceContextFor
(
nsIDocument
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
nullptr
;
}
return
pc
-
>
DeviceContext
(
)
;
}
void
Gecko_MediaFeatures_GetDeviceSize
(
nsIDocument
*
aDocument
nscoord
*
aWidth
nscoord
*
aHeight
)
{
nsSize
size
=
GetDeviceSize
(
aDocument
)
;
*
aWidth
=
size
.
width
;
*
aHeight
=
size
.
height
;
}
uint32_t
Gecko_MediaFeatures_GetColorDepth
(
nsIDocument
*
aDocument
)
{
uint32_t
depth
=
24
;
if
(
!
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
if
(
nsDeviceContext
*
dx
=
GetDeviceContextFor
(
aDocument
)
)
{
dx
-
>
GetDepth
(
depth
)
;
}
}
return
depth
/
3
;
}
float
Gecko_MediaFeatures_GetResolution
(
nsIDocument
*
aDocument
)
{
nsPresContext
*
pc
=
aDocument
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
1
.
;
}
if
(
pc
-
>
GetOverrideDPPX
(
)
>
0
.
)
{
return
pc
-
>
GetOverrideDPPX
(
)
;
}
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
return
pc
-
>
DeviceContext
(
)
-
>
GetFullZoom
(
)
;
}
return
float
(
AppUnitsPerCSSPixel
(
)
)
/
pc
-
>
DeviceContext
(
)
-
>
AppUnitsPerDevPixel
(
)
;
}
static
nsIDocument
*
TopDocument
(
nsIDocument
*
aDocument
)
{
nsIDocument
*
current
=
aDocument
;
while
(
nsIDocument
*
parent
=
current
-
>
GetParentDocument
(
)
)
{
current
=
parent
;
}
return
current
;
}
StyleDisplayMode
Gecko_MediaFeatures_GetDisplayMode
(
nsIDocument
*
aDocument
)
{
nsIDocument
*
rootDocument
=
TopDocument
(
aDocument
)
;
nsCOMPtr
<
nsISupports
>
container
=
rootDocument
-
>
GetContainer
(
)
;
if
(
nsCOMPtr
<
nsIBaseWindow
>
baseWindow
=
do_QueryInterface
(
container
)
)
{
nsCOMPtr
<
nsIWidget
>
mainWidget
;
baseWindow
-
>
GetMainWidget
(
getter_AddRefs
(
mainWidget
)
)
;
if
(
mainWidget
&
&
mainWidget
-
>
SizeMode
(
)
=
=
nsSizeMode_Fullscreen
)
{
return
StyleDisplayMode
:
:
Fullscreen
;
}
}
static_assert
(
nsIDocShell
:
:
DISPLAY_MODE_BROWSER
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Browser
)
&
&
nsIDocShell
:
:
DISPLAY_MODE_MINIMAL_UI
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
MinimalUi
)
&
&
nsIDocShell
:
:
DISPLAY_MODE_STANDALONE
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Standalone
)
&
&
nsIDocShell
:
:
DISPLAY_MODE_FULLSCREEN
=
=
static_cast
<
int32_t
>
(
StyleDisplayMode
:
:
Fullscreen
)
"
nsIDocShell
display
modes
must
mach
nsStyleConsts
.
h
"
)
;
uint32_t
displayMode
=
nsIDocShell
:
:
DISPLAY_MODE_BROWSER
;
if
(
nsIDocShell
*
docShell
=
rootDocument
-
>
GetDocShell
(
)
)
{
docShell
-
>
GetDisplayMode
(
&
displayMode
)
;
}
return
static_cast
<
StyleDisplayMode
>
(
displayMode
)
;
}
float
Gecko_MediaFeatures_GetDevicePixelRatio
(
nsIDocument
*
aDocument
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
return
1
.
0
;
}
nsIPresShell
*
presShell
=
aDocument
-
>
GetShell
(
)
;
if
(
!
presShell
)
{
return
1
.
0
;
}
nsPresContext
*
pc
=
presShell
-
>
GetPresContext
(
)
;
if
(
!
pc
)
{
return
1
.
0
;
}
return
pc
-
>
CSSPixelsToDevPixels
(
1
.
0f
)
;
}
bool
Gecko_MediaFeatures_HasSystemMetric
(
nsIDocument
*
aDocument
nsAtom
*
aMetric
bool
aIsAccessibleFromContent
)
{
if
(
aIsAccessibleFromContent
&
&
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
return
false
;
}
nsMediaFeatures
:
:
InitSystemMetrics
(
)
;
return
sSystemMetrics
-
>
IndexOf
(
aMetric
)
!
=
sSystemMetrics
-
>
NoIndex
;
}
nsAtom
*
Gecko_MediaFeatures_GetOperatingSystemVersion
(
nsIDocument
*
aDocument
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
return
nullptr
;
}
#
ifdef
XP_WIN
int32_t
metricResult
;
if
(
NS_SUCCEEDED
(
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_OperatingSystemVersionIdentifier
&
metricResult
)
)
)
{
for
(
const
auto
&
osVersion
:
kOsVersionStrings
)
{
if
(
metricResult
=
=
osVersion
.
mId
)
{
return
*
osVersion
.
mName
;
}
}
}
#
endif
return
nullptr
;
}
bool
Gecko_MediaFeatures_PrefersReducedMotion
(
nsIDocument
*
aDocument
)
{
if
(
nsContentUtils
:
:
ShouldResistFingerprinting
(
aDocument
)
)
{
return
false
;
}
return
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_PrefersReducedMotion
0
)
=
=
1
;
}
void
nsMediaFeatures
:
:
InitSystemMetrics
(
)
{
if
(
sSystemMetrics
)
return
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
sSystemMetrics
=
new
nsTArray
<
RefPtr
<
nsAtom
>
>
;
int32_t
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ScrollArrowStyle
)
;
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_StartBackward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_scrollbar_start_backward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_StartForward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_scrollbar_start_forward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_EndBackward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_scrollbar_end_backward
)
;
}
if
(
metricResult
&
LookAndFeel
:
:
eScrollArrow_EndForward
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_scrollbar_end_forward
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ScrollSliderStyle
)
;
if
(
metricResult
!
=
LookAndFeel
:
:
eScrollThumbStyle_Normal
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_scrollbar_thumb_proportional
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_UseOverlayScrollbars
)
;
if
(
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_overlay_scrollbars
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MenuBarDrag
)
;
if
(
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_menubar_drag
)
;
}
nsresult
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsDefaultTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_windows_default_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MacGraphiteTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_mac_graphite_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_MacYosemiteTheme
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_mac_yosemite_theme
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsAccentColorInTitlebar
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_windows_accent_color_in_titlebar
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_DWMCompositor
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_windows_compositor
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsGlass
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_windows_glass
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_WindowsClassic
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_windows_classic
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_TouchEnabled
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_touch_enabled
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_SwipeAnimationEnabled
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_swipe_animation_enabled
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDAvailable
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_gtk_csd_available
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDMinimizeButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_gtk_csd_minimize_button
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDMaximizeButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_gtk_csd_maximize_button
)
;
}
rv
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_GTKCSDCloseButton
&
metricResult
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_gtk_csd_close_button
)
;
}
metricResult
=
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_SystemUsesDarkTheme
)
;
if
(
metricResult
)
{
sSystemMetrics
-
>
AppendElement
(
nsGkAtoms
:
:
_moz_system_dark_theme
)
;
}
}
void
nsMediaFeatures
:
:
FreeSystemMetrics
(
)
{
delete
sSystemMetrics
;
sSystemMetrics
=
nullptr
;
}
void
nsMediaFeatures
:
:
Shutdown
(
)
{
FreeSystemMetrics
(
)
;
}
