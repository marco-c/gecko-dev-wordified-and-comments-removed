#
ifndef
mozilla_ServoStyleSet_h
#
define
mozilla_ServoStyleSet_h
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
AnonymousContentKey
.
h
"
#
include
"
mozilla
/
AtomArray
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PostTraversalTask
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
mozilla
/
dom
/
RustTypes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsSize
.
h
"
namespace
mozilla
{
enum
class
MediaFeatureChangeReason
:
uint8_t
;
enum
class
StylePageSizeOrientation
:
uint8_t
;
enum
class
StyleRuleChangeKind
:
uint32_t
;
template
<
typename
Integer
typename
Number
typename
LinearStops
>
struct
StyleTimingFunction
;
struct
StylePagePseudoClassFlags
;
struct
StylePiecewiseLinearFunction
;
using
StyleComputedTimingFunction
=
StyleTimingFunction
<
int32_t
float
StylePiecewiseLinearFunction
>
;
namespace
css
{
class
Rule
;
}
namespace
dom
{
class
CSSImportRule
;
class
Element
;
class
ShadowRoot
;
}
namespace
gfx
{
class
FontPaletteValueSet
;
}
class
StyleSheet
;
struct
Keyframe
;
class
ServoElementSnapshotTable
;
class
ComputedStyle
;
class
ServoStyleRuleMap
;
class
StyleSheet
;
}
class
gfxFontFeatureValueSet
;
class
nsIContent
;
class
nsPresContext
;
class
nsWindowSizes
;
struct
TreeMatchContext
;
namespace
mozilla
{
enum
class
StylistState
:
uint8_t
{
NotDirty
=
0
StyleSheetsDirty
=
1
<
<
0
ShadowDOMStyleSheetsDirty
=
1
<
<
1
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
StylistState
)
enum
class
StyleOrigin
:
uint8_t
;
enum
class
OriginFlags
:
uint8_t
{
UserAgent
=
0x01
User
=
0x02
Author
=
0x04
All
=
0x07
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
OriginFlags
)
class
ServoStyleSet
{
friend
class
RestyleManager
;
using
SnapshotTable
=
ServoElementSnapshotTable
;
using
Origin
=
StyleOrigin
;
static
constexpr
Origin
kOrigins
[
]
=
{
Origin
(
static_cast
<
uint8_t
>
(
OriginFlags
:
:
UserAgent
)
)
Origin
(
static_cast
<
uint8_t
>
(
OriginFlags
:
:
User
)
)
Origin
(
static_cast
<
uint8_t
>
(
OriginFlags
:
:
Author
)
)
}
;
public
:
static
bool
IsInServoTraversal
(
)
{
return
mozilla
:
:
IsInServoTraversal
(
)
;
}
#
ifdef
DEBUG
static
bool
IsCurrentThreadInServoTraversal
(
)
;
#
endif
static
ServoStyleSet
*
Current
(
)
{
return
sInServoTraversal
;
}
explicit
ServoStyleSet
(
dom
:
:
Document
&
)
;
~
ServoStyleSet
(
)
;
void
ShellDetachedFromDocument
(
)
;
void
RuleAdded
(
StyleSheet
&
css
:
:
Rule
&
)
;
void
RuleRemoved
(
StyleSheet
&
css
:
:
Rule
&
)
;
void
RuleChanged
(
StyleSheet
&
css
:
:
Rule
*
StyleRuleChangeKind
)
;
void
SheetCloned
(
StyleSheet
&
)
;
void
ImportRuleLoaded
(
dom
:
:
CSSImportRule
&
StyleSheet
&
)
;
void
InvalidateStyleForDocumentStateChanges
(
dom
:
:
DocumentState
aStatesChanged
)
;
void
RecordShadowStyleChange
(
dom
:
:
ShadowRoot
&
)
;
bool
StyleSheetsHaveChanged
(
)
const
{
return
StylistNeedsUpdate
(
)
;
}
RestyleHint
MediumFeaturesChanged
(
MediaFeatureChangeReason
)
;
inline
nscoord
EvaluateSourceSizeList
(
const
StyleSourceSizeList
*
aSourceSizeList
)
const
;
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
;
const
StylePerDocumentStyleData
*
RawData
(
)
const
{
return
mRawData
.
get
(
)
;
}
bool
GetAuthorStyleDisabled
(
)
const
{
return
mAuthorStyleDisabled
;
}
bool
UsesFontMetrics
(
)
const
;
void
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForText
(
nsIContent
*
aTextNode
ComputedStyle
*
aParentStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForFirstLetterContinuation
(
ComputedStyle
*
aParentStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForPlaceholder
(
)
;
static
bool
GeneratedContentPseudoExists
(
const
ComputedStyle
&
aParentStyle
const
ComputedStyle
&
aPseudoStyle
)
;
enum
class
IsProbe
{
No
Yes
}
;
already_AddRefed
<
ComputedStyle
>
ResolvePseudoElementStyle
(
const
dom
:
:
Element
&
aOriginatingElement
PseudoStyleType
ComputedStyle
*
aParentStyle
IsProbe
=
IsProbe
:
:
No
)
;
already_AddRefed
<
ComputedStyle
>
ProbePseudoElementStyle
(
const
dom
:
:
Element
&
aOriginatingElement
PseudoStyleType
aType
ComputedStyle
*
aParentStyle
)
{
return
ResolvePseudoElementStyle
(
aOriginatingElement
aType
aParentStyle
IsProbe
:
:
Yes
)
;
}
already_AddRefed
<
ComputedStyle
>
ProbeHighlightPseudoElementStyle
(
const
dom
:
:
Element
&
aOriginatingElement
const
nsAtom
*
aHighlightName
ComputedStyle
*
aParentStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleLazily
(
const
dom
:
:
Element
&
PseudoStyleType
=
PseudoStyleType
:
:
NotPseudo
StyleRuleInclusion
=
StyleRuleInclusion
:
:
All
)
;
already_AddRefed
<
ComputedStyle
>
ResolveInheritingAnonymousBoxStyle
(
PseudoStyleType
ComputedStyle
*
aParentStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveNonInheritingAnonymousBoxStyle
(
PseudoStyleType
aType
)
;
already_AddRefed
<
ComputedStyle
>
ResolvePageContentStyle
(
const
nsAtom
*
aPageName
const
StylePagePseudoClassFlags
&
aPseudo
)
;
already_AddRefed
<
ComputedStyle
>
ResolveXULTreePseudoStyle
(
dom
:
:
Element
*
aParentElement
nsCSSAnonBoxPseudoStaticAtom
*
aPseudoTag
ComputedStyle
*
aParentStyle
const
AtomArray
&
aInputWord
)
;
size_t
SheetCount
(
Origin
)
const
;
StyleSheet
*
SheetAt
(
Origin
size_t
aIndex
)
const
;
struct
FirstPageSizeAndOrientation
{
Maybe
<
StylePageSizeOrientation
>
orientation
;
Maybe
<
nsSize
>
size
;
}
;
FirstPageSizeAndOrientation
GetFirstPageSizeAndOrientation
(
const
nsAtom
*
aFirstPageName
)
;
void
AppendAllNonDocumentAuthorSheets
(
nsTArray
<
StyleSheet
*
>
&
aArray
)
const
;
void
AppendStyleSheet
(
StyleSheet
&
)
;
void
InsertStyleSheetBefore
(
StyleSheet
&
StyleSheet
&
aReferenceSheet
)
;
void
RemoveStyleSheet
(
StyleSheet
&
)
;
void
AddDocStyleSheet
(
StyleSheet
&
)
;
bool
StyleDocument
(
ServoTraversalFlags
aFlags
)
;
void
StyleNewSubtree
(
dom
:
:
Element
*
aRoot
)
;
void
UpdateStylistIfNeeded
(
)
{
if
(
StylistNeedsUpdate
(
)
)
{
UpdateStylist
(
)
;
}
}
void
MaybeGCRuleTree
(
)
;
static
bool
MayTraverseFrom
(
const
dom
:
:
Element
*
aElement
)
;
#
ifdef
DEBUG
void
AssertTreeIsClean
(
)
;
#
else
void
AssertTreeIsClean
(
)
{
}
#
endif
void
ClearCachedStyleData
(
)
;
void
CompatibilityModeChanged
(
)
;
template
<
typename
T
>
void
EnumerateStyleSheets
(
T
aCb
)
{
for
(
auto
origin
:
kOrigins
)
{
for
(
size_t
i
=
0
count
=
SheetCount
(
origin
)
;
i
<
count
;
+
+
i
)
{
aCb
(
*
SheetAt
(
origin
i
)
)
;
}
}
}
static
inline
already_AddRefed
<
ComputedStyle
>
ResolveServoStyle
(
const
dom
:
:
Element
&
)
;
bool
GetKeyframesForName
(
const
dom
:
:
Element
&
const
ComputedStyle
&
nsAtom
*
aName
const
StyleComputedTimingFunction
&
aTimingFunction
nsTArray
<
Keyframe
>
&
aKeyframes
)
;
nsTArray
<
ComputedKeyframeValues
>
GetComputedKeyframeValuesFor
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
const
ComputedStyle
*
aStyle
)
;
void
GetAnimationValues
(
StyleLockedDeclarationBlock
*
aDeclarations
dom
:
:
Element
*
aElement
const
mozilla
:
:
ComputedStyle
*
aStyle
nsTArray
<
RefPtr
<
StyleAnimationValue
>
>
&
aAnimationValues
)
;
void
AppendFontFaceRules
(
nsTArray
<
nsFontFaceRuleContainer
>
&
aArray
)
;
const
StyleLockedCounterStyleRule
*
CounterStyleRuleForName
(
nsAtom
*
aName
)
;
already_AddRefed
<
gfxFontFeatureValueSet
>
BuildFontFeatureValueSet
(
)
;
already_AddRefed
<
gfx
:
:
FontPaletteValueSet
>
BuildFontPaletteValueSet
(
)
;
already_AddRefed
<
ComputedStyle
>
GetBaseContextForElement
(
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveServoStyleByAddingAnimation
(
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
StyleAnimationValue
*
aAnimationValue
)
;
already_AddRefed
<
ComputedStyle
>
ResolveForDeclarations
(
const
ComputedStyle
*
aParentOrNull
const
StyleLockedDeclarationBlock
*
aDeclarations
)
;
already_AddRefed
<
StyleAnimationValue
>
ComputeAnimationValue
(
dom
:
:
Element
*
aElement
StyleLockedDeclarationBlock
*
aDeclaration
const
mozilla
:
:
ComputedStyle
*
aStyle
)
;
void
AppendTask
(
PostTraversalTask
aTask
)
{
MOZ_ASSERT
(
IsInServoTraversal
(
)
)
;
AssertIsMainThreadOrServoFontMetricsLocked
(
)
;
mPostTraversalTasks
.
AppendElement
(
aTask
)
;
}
bool
EnsureUniqueInnerOnCSSSheets
(
)
;
ServoStyleRuleMap
*
StyleRuleMap
(
)
;
bool
MightHaveAttributeDependency
(
const
dom
:
:
Element
&
nsAtom
*
aAttribute
)
const
;
bool
MightHaveNthOfAttributeDependency
(
const
dom
:
:
Element
&
nsAtom
*
aAttribute
)
const
;
bool
MightHaveNthOfClassDependency
(
const
dom
:
:
Element
&
)
;
bool
MightHaveNthOfIDDependency
(
const
dom
:
:
Element
&
nsAtom
*
aOldID
nsAtom
*
aNewID
)
const
;
bool
HasStateDependency
(
const
dom
:
:
Element
&
dom
:
:
ElementState
)
const
;
bool
HasNthOfStateDependency
(
const
dom
:
:
Element
&
dom
:
:
ElementState
)
const
;
bool
HasDocumentStateDependency
(
dom
:
:
DocumentState
)
const
;
already_AddRefed
<
ComputedStyle
>
ReparentComputedStyle
(
ComputedStyle
*
aComputedStyle
ComputedStyle
*
aNewParent
ComputedStyle
*
aNewParentIgnoringFirstLine
ComputedStyle
*
aNewLayoutParent
dom
:
:
Element
*
aElement
)
;
enum
class
OnlyDynamic
:
bool
{
No
Yes
}
;
void
InvalidateForViewportUnits
(
OnlyDynamic
)
;
private
:
friend
class
AutoSetInServoTraversal
;
friend
class
AutoPrepareTraversal
;
friend
class
PostTraversalTask
;
bool
ShouldTraverseInParallel
(
)
const
;
void
RuleChangedInternal
(
StyleSheet
&
css
:
:
Rule
&
StyleRuleChangeKind
)
;
void
ForceDirtyAllShadowStyles
(
)
;
const
SnapshotTable
&
Snapshots
(
)
;
void
ClearNonInheritingComputedStyles
(
)
;
void
PreTraverse
(
ServoTraversalFlags
aFlags
dom
:
:
Element
*
aRoot
=
nullptr
)
;
void
PreTraverseSync
(
)
;
void
MarkOriginsDirty
(
OriginFlags
aChangedOrigins
)
;
void
SetStylistStyleSheetsDirty
(
)
;
void
SetStylistShadowDOMStyleSheetsDirty
(
)
;
bool
StylistNeedsUpdate
(
)
const
{
return
mStylistState
!
=
StylistState
:
:
NotDirty
;
}
void
UpdateStylist
(
)
;
void
RunPostTraversalTasks
(
)
;
void
PrependSheetOfType
(
Origin
StyleSheet
*
)
;
void
AppendSheetOfType
(
Origin
StyleSheet
*
)
;
void
InsertSheetOfType
(
Origin
StyleSheet
*
StyleSheet
*
aBeforeSheet
)
;
void
RemoveSheetOfType
(
Origin
StyleSheet
*
)
;
const
nsPresContext
*
GetPresContext
(
)
const
{
return
const_cast
<
ServoStyleSet
*
>
(
this
)
-
>
GetPresContext
(
)
;
}
nsPresContext
*
GetPresContext
(
)
;
dom
:
:
Document
*
mDocument
;
UniquePtr
<
StylePerDocumentStyleData
>
mRawData
;
UniquePtr
<
ServoStyleRuleMap
>
mStyleRuleMap
;
uint64_t
mUserFontSetUpdateGeneration
=
0
;
nsTArray
<
PostTraversalTask
>
mPostTraversalTasks
;
EnumeratedArray
<
nsCSSAnonBoxes
:
:
NonInheriting
nsCSSAnonBoxes
:
:
NonInheriting
:
:
_Count
RefPtr
<
ComputedStyle
>
>
mNonInheritingComputedStyles
;
public
:
void
PutCachedAnonymousContentStyles
(
AnonymousContentKey
aKey
nsTArray
<
RefPtr
<
ComputedStyle
>
>
&
&
aStyles
)
{
auto
index
=
static_cast
<
size_t
>
(
aKey
)
;
MOZ_ASSERT
(
mCachedAnonymousContentStyles
.
Length
(
)
+
aStyles
.
Length
(
)
<
256
"
(
index
length
)
pairs
must
be
bigger
"
)
;
MOZ_ASSERT
(
mCachedAnonymousContentStyleIndexes
[
index
]
.
second
=
=
0
"
shouldn
'
t
need
to
overwrite
existing
cached
styles
"
)
;
MOZ_ASSERT
(
!
aStyles
.
IsEmpty
(
)
"
should
have
some
styles
to
cache
"
)
;
mCachedAnonymousContentStyleIndexes
[
index
]
=
std
:
:
make_pair
(
mCachedAnonymousContentStyles
.
Length
(
)
aStyles
.
Length
(
)
)
;
mCachedAnonymousContentStyles
.
AppendElements
(
std
:
:
move
(
aStyles
)
)
;
}
void
GetCachedAnonymousContentStyles
(
AnonymousContentKey
aKey
nsTArray
<
RefPtr
<
ComputedStyle
>
>
&
aStyles
)
{
auto
index
=
static_cast
<
size_t
>
(
aKey
)
;
auto
loc
=
mCachedAnonymousContentStyleIndexes
[
index
]
;
aStyles
.
AppendElements
(
mCachedAnonymousContentStyles
.
Elements
(
)
+
loc
.
first
loc
.
second
)
;
}
private
:
Array
<
std
:
:
pair
<
uint8_t
uint8_t
>
1
<
<
sizeof
(
AnonymousContentKey
)
*
8
>
mCachedAnonymousContentStyleIndexes
;
nsTArray
<
RefPtr
<
ComputedStyle
>
>
mCachedAnonymousContentStyles
;
StylistState
mStylistState
=
StylistState
:
:
NotDirty
;
bool
mAuthorStyleDisabled
=
false
;
bool
mNeedsRestyleAfterEnsureUniqueInner
=
false
;
}
;
class
UACacheReporter
final
:
public
nsIMemoryReporter
{
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
private
:
~
UACacheReporter
(
)
=
default
;
}
;
}
#
endif
