#
ifndef
mozilla_ServoStyleSet_h
#
define
mozilla_ServoStyleSet_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsIAtom
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
dom
{
class
Element
;
}
class
CSSStyleSheet
;
}
class
nsStyleContext
;
class
nsPresContext
;
struct
TreeMatchContext
;
namespace
mozilla
{
class
ServoStyleSet
{
public
:
void
Init
(
nsPresContext
*
aPresContext
)
;
void
BeginShutdown
(
)
;
void
Shutdown
(
)
;
bool
GetAuthorStyleDisabled
(
)
const
;
nsresult
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
void
BeginUpdate
(
)
;
nsresult
EndUpdate
(
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleForNonElement
(
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolvePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
dom
:
:
Element
*
aPseudoElement
)
;
already_AddRefed
<
nsStyleContext
>
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
=
0
)
;
nsresult
AppendStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
;
nsresult
PrependStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
;
nsresult
RemoveStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
;
nsresult
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
CSSStyleSheet
>
>
&
aNewSheets
)
;
nsresult
InsertStyleSheetBefore
(
SheetType
aType
CSSStyleSheet
*
aNewSheet
CSSStyleSheet
*
aReferenceSheet
)
;
int32_t
SheetCount
(
SheetType
aType
)
const
;
CSSStyleSheet
*
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
;
nsresult
RemoveDocStyleSheet
(
CSSStyleSheet
*
aSheet
)
;
nsresult
AddDocStyleSheet
(
CSSStyleSheet
*
aSheet
nsIDocument
*
aDocument
)
;
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
dom
:
:
Element
*
aPseudoElement
=
nullptr
)
;
nsRestyleHint
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
EventStates
aStateMask
)
;
nsRestyleHint
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
mozilla
:
:
CSSPseudoElementType
aPseudoType
dom
:
:
Element
*
aPseudoElement
EventStates
aStateMask
)
;
}
;
}
#
endif
