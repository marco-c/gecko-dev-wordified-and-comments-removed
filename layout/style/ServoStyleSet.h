#
ifndef
mozilla_ServoStyleSet_h
#
define
mozilla_ServoStyleSet_h
#
include
"
mozilla
/
AtomArray
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MediaFeatureChange
.
h
"
#
include
"
mozilla
/
PostTraversalTask
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
css
{
class
Rule
;
}
namespace
dom
{
class
Element
;
class
ShadowRoot
;
}
class
StyleSheet
;
struct
Keyframe
;
class
ServoElementSnapshotTable
;
class
ComputedStyle
;
class
ServoStyleRuleMap
;
class
StyleSheet
;
}
class
gfxFontFeatureValueSet
;
class
nsIContent
;
class
nsPresContext
;
struct
nsTimingFunction
;
struct
RawServoRuleNode
;
struct
TreeMatchContext
;
namespace
mozilla
{
enum
class
StylistState
:
uint8_t
{
NotDirty
=
0
StyleSheetsDirty
=
1
<
<
0
XBLStyleSheetsDirty
=
1
<
<
1
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
StylistState
)
enum
class
OriginFlags
:
uint8_t
{
UserAgent
=
0x01
User
=
0x02
Author
=
0x04
All
=
0x07
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
OriginFlags
)
class
ServoStyleSet
{
friend
class
RestyleManager
;
typedef
ServoElementSnapshotTable
SnapshotTable
;
public
:
static
bool
IsInServoTraversal
(
)
{
return
mozilla
:
:
IsInServoTraversal
(
)
;
}
#
ifdef
DEBUG
static
bool
IsCurrentThreadInServoTraversal
(
)
;
#
endif
static
ServoStyleSet
*
Current
(
)
{
return
sInServoTraversal
;
}
ServoStyleSet
(
)
;
~
ServoStyleSet
(
)
;
void
Init
(
nsPresContext
*
aPresContext
)
;
void
BeginShutdown
(
)
{
}
void
Shutdown
(
)
;
void
RuleAdded
(
StyleSheet
&
css
:
:
Rule
&
)
;
void
RuleRemoved
(
StyleSheet
&
css
:
:
Rule
&
)
;
void
RuleChanged
(
StyleSheet
&
aSheet
css
:
:
Rule
*
aRule
)
;
void
InvalidateStyleForDocumentStateChanges
(
EventStates
aStatesChanged
)
;
void
RecordShadowStyleChange
(
dom
:
:
ShadowRoot
&
)
;
bool
StyleSheetsHaveChanged
(
)
const
{
return
StylistNeedsUpdate
(
)
;
}
nsRestyleHint
MediumFeaturesChanged
(
MediaFeatureChangeReason
)
;
inline
nscoord
EvaluateSourceSizeList
(
const
RawServoSourceSizeList
*
aSourceSizeList
)
const
;
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
)
const
;
const
RawServoStyleSet
*
RawSet
(
)
const
{
return
mRawSet
.
get
(
)
;
}
bool
GetAuthorStyleDisabled
(
)
const
{
return
mAuthorStyleDisabled
;
}
void
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
LazyComputeBehavior
aMayCompute
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForText
(
nsIContent
*
aTextNode
ComputedStyle
*
aParentContext
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForFirstLetterContinuation
(
ComputedStyle
*
aParentContext
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleForPlaceholder
(
)
;
already_AddRefed
<
ComputedStyle
>
ResolvePseudoElementStyle
(
dom
:
:
Element
*
aOriginatingElement
CSSPseudoElementType
aType
ComputedStyle
*
aParentContext
dom
:
:
Element
*
aPseudoElement
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleLazily
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
StyleRuleInclusion
aRules
=
StyleRuleInclusion
:
:
All
)
;
already_AddRefed
<
ComputedStyle
>
ResolveInheritingAnonymousBoxStyle
(
nsAtom
*
aPseudoTag
ComputedStyle
*
aParentContext
)
;
already_AddRefed
<
ComputedStyle
>
ResolveNonInheritingAnonymousBoxStyle
(
nsAtom
*
aPseudoTag
)
;
#
ifdef
MOZ_XUL
already_AddRefed
<
ComputedStyle
>
ResolveXULTreePseudoStyle
(
dom
:
:
Element
*
aParentElement
nsCSSAnonBoxPseudoStaticAtom
*
aPseudoTag
ComputedStyle
*
aParentContext
const
AtomArray
&
aInputWord
)
;
#
endif
nsresult
AppendStyleSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
;
nsresult
RemoveStyleSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
;
nsresult
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aNewSheets
)
;
nsresult
InsertStyleSheetBefore
(
SheetType
aType
StyleSheet
*
aNewSheet
StyleSheet
*
aReferenceSheet
)
;
int32_t
SheetCount
(
SheetType
aType
)
const
;
StyleSheet
*
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
;
void
AppendAllNonDocumentAuthorSheets
(
nsTArray
<
StyleSheet
*
>
&
aArray
)
const
;
template
<
typename
Func
>
void
EnumerateStyleSheetArrays
(
Func
aCallback
)
const
{
for
(
const
auto
&
sheetArray
:
mSheets
)
{
aCallback
(
sheetArray
)
;
}
}
nsresult
RemoveDocStyleSheet
(
StyleSheet
*
aSheet
)
;
nsresult
AddDocStyleSheet
(
StyleSheet
*
aSheet
dom
:
:
Document
*
aDocument
)
;
already_AddRefed
<
ComputedStyle
>
ProbePseudoElementStyle
(
const
dom
:
:
Element
&
aOriginatingElement
CSSPseudoElementType
aType
ComputedStyle
*
aParentStyle
)
;
bool
StyleDocument
(
ServoTraversalFlags
aFlags
)
;
void
StyleNewSubtree
(
dom
:
:
Element
*
aRoot
)
;
void
UpdateStylistIfNeeded
(
)
{
if
(
StylistNeedsUpdate
(
)
)
{
UpdateStylist
(
)
;
}
}
void
MaybeGCRuleTree
(
)
;
static
bool
MayTraverseFrom
(
const
dom
:
:
Element
*
aElement
)
;
#
ifdef
DEBUG
void
AssertTreeIsClean
(
)
;
#
else
void
AssertTreeIsClean
(
)
{
}
#
endif
void
ClearCachedStyleData
(
)
;
void
CompatibilityModeChanged
(
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveServoStyle
(
const
dom
:
:
Element
&
)
;
bool
GetKeyframesForName
(
const
dom
:
:
Element
&
const
ComputedStyle
&
nsAtom
*
aName
const
nsTimingFunction
&
aTimingFunction
nsTArray
<
Keyframe
>
&
aKeyframes
)
;
nsTArray
<
ComputedKeyframeValues
>
GetComputedKeyframeValuesFor
(
const
nsTArray
<
Keyframe
>
&
aKeyframes
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
)
;
void
GetAnimationValues
(
RawServoDeclarationBlock
*
aDeclarations
dom
:
:
Element
*
aElement
const
mozilla
:
:
ComputedStyle
*
aStyle
nsTArray
<
RefPtr
<
RawServoAnimationValue
>
>
&
aAnimationValues
)
;
bool
AppendFontFaceRules
(
nsTArray
<
nsFontFaceRuleContainer
>
&
aArray
)
;
const
RawServoCounterStyleRule
*
CounterStyleRuleForName
(
nsAtom
*
aName
)
;
already_AddRefed
<
gfxFontFeatureValueSet
>
BuildFontFeatureValueSet
(
)
;
already_AddRefed
<
ComputedStyle
>
GetBaseContextForElement
(
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
)
;
already_AddRefed
<
ComputedStyle
>
ResolveServoStyleByAddingAnimation
(
dom
:
:
Element
*
aElement
const
ComputedStyle
*
aStyle
RawServoAnimationValue
*
aAnimationValue
)
;
already_AddRefed
<
ComputedStyle
>
ResolveForDeclarations
(
const
ComputedStyle
*
aParentOrNull
RawServoDeclarationBlockBorrowed
aDeclarations
)
;
already_AddRefed
<
RawServoAnimationValue
>
ComputeAnimationValue
(
dom
:
:
Element
*
aElement
RawServoDeclarationBlock
*
aDeclaration
const
mozilla
:
:
ComputedStyle
*
aStyle
)
;
void
AppendTask
(
PostTraversalTask
aTask
)
{
MOZ_ASSERT
(
IsInServoTraversal
(
)
)
;
AssertIsMainThreadOrServoFontMetricsLocked
(
)
;
mPostTraversalTasks
.
AppendElement
(
aTask
)
;
}
bool
EnsureUniqueInnerOnCSSSheets
(
)
;
void
SetNeedsRestyleAfterEnsureUniqueInner
(
)
{
mNeedsRestyleAfterEnsureUniqueInner
=
true
;
}
ServoStyleRuleMap
*
StyleRuleMap
(
)
;
bool
MightHaveAttributeDependency
(
const
dom
:
:
Element
&
nsAtom
*
aAttribute
)
const
;
bool
HasStateDependency
(
const
dom
:
:
Element
&
EventStates
)
const
;
bool
HasDocumentStateDependency
(
EventStates
aState
)
const
;
already_AddRefed
<
ComputedStyle
>
ReparentComputedStyle
(
ComputedStyle
*
aComputedStyle
ComputedStyle
*
aNewParent
ComputedStyle
*
aNewParentIgnoringFirstLine
ComputedStyle
*
aNewLayoutParent
dom
:
:
Element
*
aElement
)
;
private
:
friend
class
AutoSetInServoTraversal
;
friend
class
AutoPrepareTraversal
;
bool
ShouldTraverseInParallel
(
)
const
;
const
SnapshotTable
&
Snapshots
(
)
;
void
ResolveMappedAttrDeclarationBlocks
(
)
;
void
ClearNonInheritingComputedStyles
(
)
;
void
PreTraverse
(
ServoTraversalFlags
aFlags
dom
:
:
Element
*
aRoot
=
nullptr
)
;
void
PreTraverseSync
(
)
;
void
MarkOriginsDirty
(
OriginFlags
aChangedOrigins
)
;
void
SetStylistStyleSheetsDirty
(
)
;
void
SetStylistXBLStyleSheetsDirty
(
)
;
bool
StylistNeedsUpdate
(
)
const
{
return
mStylistState
!
=
StylistState
:
:
NotDirty
;
}
void
UpdateStylist
(
)
;
already_AddRefed
<
ComputedStyle
>
ResolveStyleLazilyInternal
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
StyleRuleInclusion
aRules
=
StyleRuleInclusion
:
:
All
)
;
void
RunPostTraversalTasks
(
)
;
void
PrependSheetOfType
(
SheetType
aType
StyleSheet
*
aSheet
)
;
void
AppendSheetOfType
(
SheetType
aType
StyleSheet
*
aSheet
)
;
void
InsertSheetOfType
(
SheetType
aType
StyleSheet
*
aSheet
StyleSheet
*
aBeforeSheet
)
;
void
RemoveSheetOfType
(
SheetType
aType
StyleSheet
*
aSheet
)
;
dom
:
:
Document
*
mDocument
;
const
nsPresContext
*
GetPresContext
(
)
const
{
return
const_cast
<
ServoStyleSet
*
>
(
this
)
-
>
GetPresContext
(
)
;
}
nsPresContext
*
GetPresContext
(
)
;
UniquePtr
<
RawServoStyleSet
>
mRawSet
;
EnumeratedArray
<
SheetType
SheetType
:
:
Count
nsTArray
<
RefPtr
<
StyleSheet
>
>
>
mSheets
;
bool
mAuthorStyleDisabled
;
StylistState
mStylistState
;
uint64_t
mUserFontSetUpdateGeneration
;
bool
mNeedsRestyleAfterEnsureUniqueInner
;
EnumeratedArray
<
nsCSSAnonBoxes
:
:
NonInheriting
nsCSSAnonBoxes
:
:
NonInheriting
:
:
_Count
RefPtr
<
ComputedStyle
>
>
mNonInheritingComputedStyles
;
nsTArray
<
PostTraversalTask
>
mPostTraversalTasks
;
UniquePtr
<
ServoStyleRuleMap
>
mStyleRuleMap
;
}
;
class
UACacheReporter
final
:
public
nsIMemoryReporter
{
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
private
:
~
UACacheReporter
(
)
{
}
}
;
}
#
endif
