#
ifndef
nsStyleStructInlines_h_
#
define
nsStyleStructInlines_h_
#
include
"
nsIFrame
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsIContent
.
h
"
#
include
"
nsTextFrame
.
h
"
#
include
"
nsSVGUtils
.
h
"
inline
void
nsStyleImage
:
:
EnsureCachedBIData
(
)
const
{
if
(
!
mCachedBIData
)
{
const_cast
<
nsStyleImage
*
>
(
this
)
-
>
mCachedBIData
=
mozilla
:
:
MakeUnique
<
CachedBorderImageData
>
(
)
;
}
}
inline
void
nsStyleImage
:
:
SetSubImage
(
uint8_t
aIndex
imgIContainer
*
aSubImage
)
const
{
EnsureCachedBIData
(
)
;
mCachedBIData
-
>
SetSubImage
(
aIndex
aSubImage
)
;
}
inline
imgIContainer
*
nsStyleImage
:
:
GetSubImage
(
uint8_t
aIndex
)
const
{
return
(
mCachedBIData
)
?
mCachedBIData
-
>
GetSubImage
(
aIndex
)
:
nullptr
;
}
bool
nsStyleText
:
:
HasTextShadow
(
)
const
{
return
mTextShadow
;
}
nsCSSShadowArray
*
nsStyleText
:
:
GetTextShadow
(
)
const
{
return
mTextShadow
;
}
bool
nsStyleText
:
:
NewlineIsSignificant
(
const
nsTextFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleText
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
NewlineIsSignificantStyle
(
)
&
&
!
aContextFrame
-
>
ShouldSuppressLineBreak
(
)
&
&
!
aContextFrame
-
>
Style
(
)
-
>
IsTextCombined
(
)
;
}
bool
nsStyleText
:
:
WhiteSpaceCanWrap
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleText
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
WhiteSpaceCanWrapStyle
(
)
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
&
&
!
aContextFrame
-
>
Style
(
)
-
>
IsTextCombined
(
)
;
}
bool
nsStyleText
:
:
WordCanWrap
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleText
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
WordCanWrapStyle
(
)
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
bool
nsStyleDisplay
:
:
IsBlockInside
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
)
{
return
aContextFrame
-
>
IsBlockFrame
(
)
;
}
return
IsBlockInsideStyle
(
)
;
}
bool
nsStyleDisplay
:
:
IsBlockOutside
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
)
{
return
aContextFrame
-
>
IsBlockFrame
(
)
;
}
return
IsBlockOutsideStyle
(
)
;
}
bool
nsStyleDisplay
:
:
IsInlineOutside
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
)
{
return
!
aContextFrame
-
>
IsBlockFrame
(
)
;
}
return
IsInlineOutsideStyle
(
)
;
}
bool
nsStyleDisplay
:
:
IsOriginalDisplayInlineOutside
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
)
{
return
!
aContextFrame
-
>
IsBlockFrame
(
)
;
}
return
IsOriginalDisplayInlineOutsideStyle
(
)
;
}
mozilla
:
:
StyleDisplay
nsStyleDisplay
:
:
GetDisplay
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
&
&
mDisplay
!
=
mozilla
:
:
StyleDisplay
:
:
None
)
{
return
aContextFrame
-
>
IsBlockFrame
(
)
?
mozilla
:
:
StyleDisplay
:
:
Block
:
mozilla
:
:
StyleDisplay
:
:
Inline
;
}
return
mDisplay
;
}
bool
nsStyleDisplay
:
:
IsFloating
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
IsFloatingStyle
(
)
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
bool
nsStyleDisplay
:
:
HasTransform
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
HasTransformStyle
(
)
&
&
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsCSSTransforms
)
;
}
bool
nsStyleDisplay
:
:
HasPerspective
(
const
nsIFrame
*
aContextFrame
)
const
{
MOZ_ASSERT
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
HasPerspectiveStyle
(
)
&
&
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsCSSTransforms
)
;
}
bool
nsStyleDisplay
:
:
IsFixedPosContainingBlockForNonSVGTextFrames
(
mozilla
:
:
ComputedStyle
&
aStyle
)
const
{
NS_ASSERTION
(
aStyle
.
ThreadsafeStyleDisplay
(
)
=
=
this
"
unexpected
aStyle
"
)
;
if
(
mWillChangeBitField
&
NS_STYLE_WILL_CHANGE_FIXPOS_CB
)
{
return
true
;
}
return
aStyle
.
ThreadsafeStyleEffects
(
)
-
>
HasFilters
(
)
;
}
bool
nsStyleDisplay
:
:
IsFixedPosContainingBlockForContainLayoutAndPaintSupportingFrames
(
)
const
{
return
IsContainPaint
(
)
;
}
bool
nsStyleDisplay
:
:
IsFixedPosContainingBlockForTransformSupportingFrames
(
)
const
{
return
HasTransformStyle
(
)
|
|
HasPerspectiveStyle
(
)
;
}
bool
nsStyleDisplay
:
:
IsFixedPosContainingBlock
(
const
nsIFrame
*
aContextFrame
)
const
{
mozilla
:
:
ComputedStyle
*
style
=
aContextFrame
-
>
Style
(
)
;
NS_ASSERTION
(
style
-
>
ThreadsafeStyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
!
IsFixedPosContainingBlockForNonSVGTextFrames
(
*
style
)
&
&
(
!
IsFixedPosContainingBlockForContainLayoutAndPaintSupportingFrames
(
)
|
|
!
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsContainLayoutAndPaint
)
)
&
&
(
!
IsFixedPosContainingBlockForTransformSupportingFrames
(
)
|
|
!
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsCSSTransforms
)
)
)
{
return
false
;
}
return
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
bool
nsStyleDisplay
:
:
IsAbsPosContainingBlockForNonSVGTextFrames
(
)
const
{
return
IsAbsolutelyPositionedStyle
(
)
|
|
IsRelativelyPositionedStyle
(
)
|
|
(
mWillChangeBitField
&
NS_STYLE_WILL_CHANGE_ABSPOS_CB
)
;
}
bool
nsStyleDisplay
:
:
IsAbsPosContainingBlock
(
const
nsIFrame
*
aContextFrame
)
const
{
mozilla
:
:
ComputedStyle
*
style
=
aContextFrame
-
>
Style
(
)
;
NS_ASSERTION
(
style
-
>
ThreadsafeStyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
if
(
!
IsAbsPosContainingBlockForNonSVGTextFrames
(
)
&
&
!
IsFixedPosContainingBlockForNonSVGTextFrames
(
*
style
)
&
&
(
!
IsFixedPosContainingBlockForContainLayoutAndPaintSupportingFrames
(
)
|
|
!
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsContainLayoutAndPaint
)
)
&
&
(
!
IsFixedPosContainingBlockForTransformSupportingFrames
(
)
|
|
!
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsCSSTransforms
)
)
)
{
return
false
;
}
return
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
bool
nsStyleDisplay
:
:
IsRelativelyPositioned
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
IsRelativelyPositionedStyle
(
)
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
bool
nsStyleDisplay
:
:
IsAbsolutelyPositioned
(
const
nsIFrame
*
aContextFrame
)
const
{
NS_ASSERTION
(
aContextFrame
-
>
StyleDisplay
(
)
=
=
this
"
unexpected
aContextFrame
"
)
;
return
IsAbsolutelyPositionedStyle
(
)
&
&
!
nsSVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
uint8_t
nsStyleUserInterface
:
:
GetEffectivePointerEvents
(
nsIFrame
*
aFrame
)
const
{
if
(
aFrame
-
>
GetContent
(
)
&
&
!
aFrame
-
>
GetContent
(
)
-
>
GetParent
(
)
)
{
nsIFrame
*
f
=
aFrame
-
>
GetContent
(
)
-
>
GetPrimaryFrame
(
)
;
if
(
f
)
{
return
f
-
>
StyleUserInterface
(
)
-
>
mPointerEvents
;
}
}
return
mPointerEvents
;
}
bool
nsStyleBackground
:
:
HasLocalBackground
(
)
const
{
NS_FOR_VISIBLE_IMAGE_LAYERS_BACK_TO_FRONT
(
i
mImage
)
{
const
nsStyleImageLayers
:
:
Layer
&
layer
=
mImage
.
mLayers
[
i
]
;
if
(
!
layer
.
mImage
.
IsEmpty
(
)
&
&
layer
.
mAttachment
=
=
mozilla
:
:
StyleImageLayerAttachment
:
:
Local
)
{
return
true
;
}
}
return
false
;
}
#
endif
