#
include
"
mozilla
/
dom
/
CSSPageRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSPageRuleBinding
.
h
"
#
include
"
mozilla
/
DeclarationBlock
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
namespace
mozilla
:
:
dom
{
CSSPageRuleDeclaration
:
:
CSSPageRuleDeclaration
(
already_AddRefed
<
RawServoDeclarationBlock
>
aDecls
)
:
mDecls
(
new
DeclarationBlock
(
std
:
:
move
(
aDecls
)
)
)
{
mDecls
-
>
SetOwningRule
(
Rule
(
)
)
;
}
CSSPageRuleDeclaration
:
:
~
CSSPageRuleDeclaration
(
)
{
mDecls
-
>
SetOwningRule
(
nullptr
)
;
}
NS_INTERFACE_MAP_BEGIN
(
CSSPageRuleDeclaration
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsCycleCollectionISupports
)
)
|
|
aIID
.
Equals
(
NS_GET_IID
(
nsXPCOMCycleCollectionParticipant
)
)
)
{
return
Rule
(
)
-
>
QueryInterface
(
aIID
aInstancePtr
)
;
}
NS_INTERFACE_MAP_END_INHERITING
(
nsDOMCSSDeclaration
)
NS_IMPL_ADDREF_USING_AGGREGATOR
(
CSSPageRuleDeclaration
Rule
(
)
)
NS_IMPL_RELEASE_USING_AGGREGATOR
(
CSSPageRuleDeclaration
Rule
(
)
)
css
:
:
Rule
*
CSSPageRuleDeclaration
:
:
GetParentRule
(
)
{
return
Rule
(
)
;
}
nsINode
*
CSSPageRuleDeclaration
:
:
GetAssociatedNode
(
)
const
{
return
Rule
(
)
-
>
GetAssociatedDocumentOrShadowRoot
(
)
;
}
nsISupports
*
CSSPageRuleDeclaration
:
:
GetParentObject
(
)
const
{
return
Rule
(
)
-
>
GetParentObject
(
)
;
}
DeclarationBlock
*
CSSPageRuleDeclaration
:
:
GetOrCreateCSSDeclaration
(
Operation
aOperation
DeclarationBlock
*
*
aCreated
)
{
if
(
aOperation
!
=
Operation
:
:
Read
)
{
if
(
StyleSheet
*
sheet
=
Rule
(
)
-
>
GetStyleSheet
(
)
)
{
sheet
-
>
WillDirty
(
)
;
}
}
return
mDecls
;
}
void
CSSPageRuleDeclaration
:
:
SetRawAfterClone
(
RefPtr
<
RawServoDeclarationBlock
>
aDeclarationBlock
)
{
mDecls
-
>
SetOwningRule
(
nullptr
)
;
mDecls
=
new
DeclarationBlock
(
aDeclarationBlock
.
forget
(
)
)
;
mDecls
-
>
SetOwningRule
(
Rule
(
)
)
;
}
nsresult
CSSPageRuleDeclaration
:
:
SetCSSDeclaration
(
DeclarationBlock
*
aDecl
MutationClosureData
*
aClosureData
)
{
MOZ_ASSERT
(
aDecl
"
must
be
non
-
null
"
)
;
CSSPageRule
*
rule
=
Rule
(
)
;
if
(
aDecl
!
=
mDecls
)
{
mDecls
-
>
SetOwningRule
(
nullptr
)
;
RefPtr
<
DeclarationBlock
>
decls
=
aDecl
;
Servo_PageRule_SetStyle
(
rule
-
>
Raw
(
)
decls
-
>
Raw
(
)
)
;
mDecls
=
std
:
:
move
(
decls
)
;
mDecls
-
>
SetOwningRule
(
rule
)
;
}
return
NS_OK
;
}
nsDOMCSSDeclaration
:
:
ParsingEnvironment
CSSPageRuleDeclaration
:
:
GetParsingEnvironment
(
nsIPrincipal
*
aSubjectPrincipal
)
const
{
return
GetParsingEnvironmentForRule
(
Rule
(
)
StyleCssRuleType
:
:
Page
)
;
}
CSSPageRule
:
:
CSSPageRule
(
RefPtr
<
RawServoPageRule
>
aRawRule
StyleSheet
*
aSheet
css
:
:
Rule
*
aParentRule
uint32_t
aLine
uint32_t
aColumn
)
:
css
:
:
Rule
(
aSheet
aParentRule
aLine
aColumn
)
mRawRule
(
std
:
:
move
(
aRawRule
)
)
mDecls
(
Servo_PageRule_GetStyle
(
mRawRule
)
.
Consume
(
)
)
{
}
NS_IMPL_ADDREF_INHERITED
(
CSSPageRule
css
:
:
Rule
)
NS_IMPL_RELEASE_INHERITED
(
CSSPageRule
css
:
:
Rule
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CSSPageRule
)
NS_INTERFACE_MAP_END_INHERITING
(
css
:
:
Rule
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CSSPageRule
)
NS_IMPL_CYCLE_COLLECTION_TRACE_BEGIN_INHERITED
(
CSSPageRule
css
:
:
Rule
)
tmp
-
>
mDecls
.
TraceWrapper
(
aCallbacks
aClosure
)
;
NS_IMPL_CYCLE_COLLECTION_TRACE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
CSSPageRule
)
tmp
-
>
UnlinkDeclarationWrapper
(
tmp
-
>
mDecls
)
;
tmp
-
>
mDecls
.
mDecls
-
>
SetOwningRule
(
nullptr
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_END_INHERITED
(
css
:
:
Rule
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
CSSPageRule
css
:
:
Rule
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
bool
CSSPageRule
:
:
IsCCLeaf
(
)
const
{
if
(
!
Rule
:
:
IsCCLeaf
(
)
)
{
return
false
;
}
return
!
mDecls
.
PreservingWrapper
(
)
;
}
void
CSSPageRule
:
:
SetRawAfterClone
(
RefPtr
<
RawServoPageRule
>
aRaw
)
{
mRawRule
=
std
:
:
move
(
aRaw
)
;
mDecls
.
SetRawAfterClone
(
Servo_PageRule_GetStyle
(
mRawRule
.
get
(
)
)
.
Consume
(
)
)
;
}
StyleCssRuleType
CSSPageRule
:
:
Type
(
)
const
{
return
StyleCssRuleType
:
:
Page
;
}
size_t
CSSPageRule
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
#
ifdef
DEBUG
void
CSSPageRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
i
=
0
;
i
<
aIndent
;
i
+
+
)
{
str
.
AppendLiteral
(
"
"
)
;
}
Servo_PageRule_Debug
(
mRawRule
&
str
)
;
fprintf_stderr
(
out
"
%
s
\
n
"
str
.
get
(
)
)
;
}
#
endif
void
CSSPageRule
:
:
GetCssText
(
nsACString
&
aCssText
)
const
{
Servo_PageRule_GetCssText
(
mRawRule
&
aCssText
)
;
}
void
CSSPageRule
:
:
GetSelectorText
(
nsACString
&
aSelectorText
)
const
{
Servo_PageRule_GetSelectorText
(
mRawRule
.
get
(
)
&
aSelectorText
)
;
}
void
CSSPageRule
:
:
SetSelectorText
(
const
nsACString
&
aSelectorText
)
{
if
(
IsReadOnly
(
)
)
{
return
;
}
if
(
StyleSheet
*
const
sheet
=
GetStyleSheet
(
)
)
{
sheet
-
>
WillDirty
(
)
;
const
RawServoStyleSheetContents
*
const
contents
=
sheet
-
>
RawContents
(
)
;
if
(
Servo_PageRule_SetSelectorText
(
contents
mRawRule
.
get
(
)
&
aSelectorText
)
)
{
sheet
-
>
RuleChanged
(
this
StyleRuleChangeKind
:
:
Generic
)
;
}
}
}
nsICSSDeclaration
*
CSSPageRule
:
:
Style
(
)
{
return
&
mDecls
;
}
JSObject
*
CSSPageRule
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSPageRule_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
