#
ifndef
mozilla_dom_FontFaceSet_h
#
define
mozilla_dom_FontFaceSet_h
#
include
"
mozilla
/
dom
/
FontFace
.
h
"
#
include
"
mozilla
/
dom
/
FontFaceSetBinding
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
struct
gfxFontFaceSrc
;
class
gfxFontSrcPrincipal
;
class
gfxUserFontEntry
;
class
nsFontFaceLoader
;
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
struct
RawServoFontFaceRule
;
namespace
mozilla
{
class
PostTraversalTask
;
class
SharedFontList
;
namespace
dom
{
class
FontFace
;
class
Promise
;
}
}
namespace
mozilla
{
namespace
dom
{
class
FontFaceSet
final
:
public
DOMEventTargetHelper
public
nsIDOMEventListener
public
nsICSSLoaderObserver
{
friend
class
mozilla
:
:
PostTraversalTask
;
friend
class
UserFontSet
;
public
:
class
UserFontSet
final
:
public
gfxUserFontSet
{
friend
class
FontFaceSet
;
public
:
explicit
UserFontSet
(
FontFaceSet
*
aFontFaceSet
)
:
mFontFaceSet
(
aFontFaceSet
)
{
}
FontFaceSet
*
GetFontFaceSet
(
)
{
return
mFontFaceSet
;
}
gfxFontSrcPrincipal
*
GetStandardFontLoadPrincipal
(
)
const
final
{
return
mFontFaceSet
?
mFontFaceSet
-
>
mStandardFontLoadPrincipal
.
get
(
)
:
nullptr
;
}
bool
IsFontLoadAllowed
(
const
gfxFontFaceSrc
&
)
final
;
void
DispatchFontLoadViolations
(
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
&
aViolations
)
override
;
virtual
nsresult
StartLoad
(
gfxUserFontEntry
*
aUserFontEntry
const
gfxFontFaceSrc
*
aFontFaceSrc
)
override
;
void
RecordFontLoadDone
(
uint32_t
aFontSize
mozilla
:
:
TimeStamp
aDoneTime
)
override
;
bool
BypassCache
(
)
final
{
return
mFontFaceSet
&
&
mFontFaceSet
-
>
mBypassCache
;
}
protected
:
virtual
bool
GetPrivateBrowsing
(
)
override
;
virtual
nsresult
SyncLoadFontData
(
gfxUserFontEntry
*
aFontToLoad
const
gfxFontFaceSrc
*
aFontFaceSrc
uint8_t
*
&
aBuffer
uint32_t
&
aBufferLength
)
override
;
virtual
nsresult
LogMessage
(
gfxUserFontEntry
*
aUserFontEntry
const
char
*
aMessage
uint32_t
aFlags
=
nsIScriptError
:
:
errorFlag
nsresult
aStatus
=
NS_OK
)
override
;
virtual
void
DoRebuildUserFontSet
(
)
override
;
already_AddRefed
<
gfxUserFontEntry
>
CreateUserFontEntry
(
const
nsTArray
<
gfxFontFaceSrc
>
&
aFontFaceSrcList
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
const
nsTArray
<
gfxFontFeature
>
&
aFeatureSettings
const
nsTArray
<
gfxFontVariation
>
&
aVariationSettings
uint32_t
aLanguageOverride
gfxCharacterMap
*
aUnicodeRanges
uint8_t
aFontDisplay
RangeFlags
aRangeFlags
)
override
;
private
:
RefPtr
<
FontFaceSet
>
mFontFaceSet
;
}
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
FontFaceSet
DOMEventTargetHelper
)
NS_DECL_NSIDOMEVENTLISTENER
FontFaceSet
(
nsPIDOMWindowInner
*
aWindow
nsIDocument
*
aDocument
)
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
UserFontSet
*
GetUserFontSet
(
)
{
return
mUserFontSet
;
}
void
RemoveLoader
(
nsFontFaceLoader
*
aLoader
)
;
bool
UpdateRules
(
const
nsTArray
<
nsFontFaceRuleContainer
>
&
aRules
)
;
nsPresContext
*
GetPresContext
(
)
;
RawServoFontFaceRule
*
FindRuleForEntry
(
gfxFontEntry
*
aFontEntry
)
;
void
IncrementGeneration
(
bool
aIsRebuild
=
false
)
;
static
already_AddRefed
<
gfxUserFontEntry
>
FindOrCreateUserFontEntryFromFontFace
(
FontFace
*
aFontFace
)
;
void
OnFontFaceStatusChanged
(
FontFace
*
aFontFace
)
;
void
DidRefresh
(
)
;
static
bool
PrefEnabled
(
)
;
NS_IMETHOD
StyleSheetLoaded
(
mozilla
:
:
StyleSheet
*
aSheet
bool
aWasAlternate
nsresult
aStatus
)
override
;
FontFace
*
GetFontFaceAt
(
uint32_t
aIndex
)
;
void
FlushUserFontSet
(
)
;
static
nsPresContext
*
GetPresContextFor
(
gfxUserFontSet
*
aUserFontSet
)
{
FontFaceSet
*
set
=
static_cast
<
UserFontSet
*
>
(
aUserFontSet
)
-
>
mFontFaceSet
;
return
set
?
set
-
>
GetPresContext
(
)
:
nullptr
;
}
void
RefreshStandardFontLoadPrincipal
(
)
;
nsIDocument
*
Document
(
)
const
{
return
mDocument
;
}
IMPL_EVENT_HANDLER
(
loading
)
IMPL_EVENT_HANDLER
(
loadingdone
)
IMPL_EVENT_HANDLER
(
loadingerror
)
already_AddRefed
<
mozilla
:
:
dom
:
:
Promise
>
Load
(
JSContext
*
aCx
const
nsAString
&
aFont
const
nsAString
&
aText
mozilla
:
:
ErrorResult
&
aRv
)
;
bool
Check
(
const
nsAString
&
aFont
const
nsAString
&
aText
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
Promise
*
GetReady
(
mozilla
:
:
ErrorResult
&
aRv
)
;
mozilla
:
:
dom
:
:
FontFaceSetLoadStatus
Status
(
)
;
void
Add
(
FontFace
&
aFontFace
mozilla
:
:
ErrorResult
&
aRv
)
;
void
Clear
(
)
;
bool
Delete
(
FontFace
&
aFontFace
)
;
bool
Has
(
FontFace
&
aFontFace
)
;
uint32_t
Size
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
FontFaceSetIterator
>
Entries
(
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
FontFaceSetIterator
>
Values
(
)
;
void
ForEach
(
JSContext
*
aCx
FontFaceSetForEachCallback
&
aCallback
JS
:
:
Handle
<
JS
:
:
Value
>
aThisArg
mozilla
:
:
ErrorResult
&
aRv
)
;
void
CacheFontLoadability
(
)
;
private
:
~
FontFaceSet
(
)
;
bool
HasAvailableFontFace
(
FontFace
*
aFontFace
)
;
void
Disconnect
(
)
;
void
RemoveDOMContentLoadedListener
(
)
;
bool
MightHavePendingFontLoads
(
)
;
void
CheckLoadingStarted
(
)
;
void
CheckLoadingFinished
(
)
;
void
CheckLoadingFinishedAfterDelay
(
)
;
void
DispatchLoadingFinishedEvent
(
const
nsAString
&
aType
nsTArray
<
OwningNonNull
<
FontFace
>
>
&
&
aFontFaces
)
;
struct
FontFaceRecord
{
RefPtr
<
FontFace
>
mFontFace
;
SheetType
mSheetType
;
bool
mLoadEventShouldFire
;
}
;
static
already_AddRefed
<
gfxUserFontEntry
>
FindOrCreateUserFontEntryFromFontFace
(
const
nsAString
&
aFamilyName
FontFace
*
aFontFace
SheetType
aSheetType
)
;
RawServoFontFaceRule
*
FindRuleForUserFontEntry
(
gfxUserFontEntry
*
aUserFontEntry
)
;
nsresult
StartLoad
(
gfxUserFontEntry
*
aUserFontEntry
const
gfxFontFaceSrc
*
aFontFaceSrc
)
;
gfxFontSrcPrincipal
*
GetStandardFontLoadPrincipal
(
)
;
nsresult
CheckFontLoad
(
const
gfxFontFaceSrc
*
aFontFaceSrc
gfxFontSrcPrincipal
*
*
aPrincipal
bool
*
aBypassCache
)
;
bool
IsFontLoadAllowed
(
const
gfxFontFaceSrc
&
aSrc
)
;
void
DispatchFontLoadViolations
(
nsTArray
<
nsCOMPtr
<
nsIRunnable
>
>
&
aViolations
)
;
nsresult
SyncLoadFontData
(
gfxUserFontEntry
*
aFontToLoad
const
gfxFontFaceSrc
*
aFontFaceSrc
uint8_t
*
&
aBuffer
uint32_t
&
aBufferLength
)
;
nsresult
LogMessage
(
gfxUserFontEntry
*
aUserFontEntry
const
char
*
aMessage
uint32_t
aFlags
nsresult
aStatus
)
;
void
MarkUserFontSetDirty
(
)
;
void
InsertRuleFontFace
(
FontFace
*
aFontFace
SheetType
aSheetType
nsTArray
<
FontFaceRecord
>
&
aOldRecords
bool
&
aFontSetModified
)
;
void
InsertNonRuleFontFace
(
FontFace
*
aFontFace
bool
&
aFontSetModified
)
;
#
ifdef
DEBUG
bool
HasRuleFontFace
(
FontFace
*
aFontFace
)
;
#
endif
bool
HasLoadingFontFaces
(
)
;
bool
ReadyPromiseIsPending
(
)
const
;
void
UpdateHasLoadingFontFaces
(
)
;
void
ParseFontShorthandForMatching
(
const
nsAString
&
aFont
RefPtr
<
SharedFontList
>
&
aFamilyList
FontWeight
&
aWeight
FontStretch
&
aStretch
FontSlantStyle
&
aStyle
ErrorResult
&
aRv
)
;
void
FindMatchingFontFaces
(
const
nsAString
&
aFont
const
nsAString
&
aText
nsTArray
<
FontFace
*
>
&
aFontFaces
mozilla
:
:
ErrorResult
&
aRv
)
;
void
DispatchLoadingEventAndReplaceReadyPromise
(
)
;
void
DispatchCheckLoadingFinishedAfterDelay
(
)
;
TimeStamp
GetNavigationStartTimeStamp
(
)
;
RefPtr
<
UserFontSet
>
mUserFontSet
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
RefPtr
<
gfxFontSrcPrincipal
>
mStandardFontLoadPrincipal
;
RefPtr
<
mozilla
:
:
dom
:
:
Promise
>
mReady
;
bool
mResolveLazilyCreatedReadyPromise
;
nsTHashtable
<
nsPtrHashKey
<
nsFontFaceLoader
>
>
mLoaders
;
nsTArray
<
FontFaceRecord
>
mRuleFaces
;
nsTArray
<
FontFaceRecord
>
mNonRuleFaces
;
mozilla
:
:
dom
:
:
FontFaceSetLoadStatus
mStatus
;
nsDataHashtable
<
nsPtrHashKey
<
const
gfxFontFaceSrc
>
bool
>
mAllowedFontLoads
;
bool
mNonRuleFacesDirty
;
bool
mHasLoadingFontFaces
;
bool
mHasLoadingFontFacesIsDirty
;
bool
mDelayedLoadCheck
;
bool
mBypassCache
;
bool
mPrivateBrowsing
;
}
;
}
}
#
endif
