#
ifndef
mozilla_GeckoStyleContext_h
#
define
mozilla_GeckoStyleContext_h
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
class
GeckoStyleContext
final
:
public
nsStyleContext
{
public
:
GeckoStyleContext
(
nsStyleContext
*
aParent
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
already_AddRefed
<
nsRuleNode
>
aRuleNode
bool
aSkipParentDisplayBasedStyleFixup
)
;
void
*
operator
new
(
size_t
sz
nsPresContext
*
aPresContext
)
;
nsPresContext
*
PresContext
(
)
const
{
return
mSource
.
AsGeckoRuleNode
(
)
-
>
PresContext
(
)
;
}
void
AddChild
(
GeckoStyleContext
*
aChild
)
;
void
RemoveChild
(
GeckoStyleContext
*
aChild
)
;
void
*
GetUniqueStyleData
(
const
nsStyleStructID
&
aSID
)
;
void
*
CreateEmptyStyleData
(
const
nsStyleStructID
&
aSID
)
;
void
SetIneligibleForSharing
(
)
;
void
LogChildStyleContextTree
(
uint32_t
aStructs
)
const
;
void
ClearCachedInheritedStyleDataOnDescendants
(
uint32_t
aStructs
)
;
already_AddRefed
<
GeckoStyleContext
>
FindChildWithRules
(
const
nsIAtom
*
aPseudoTag
mozilla
:
:
NonOwningStyleContextSource
aSource
mozilla
:
:
NonOwningStyleContextSource
aSourceIfVisited
bool
aRelevantLinkVisited
)
;
#
ifdef
DEBUG
void
AssertChildStructsNotUsedElsewhere
(
nsStyleContext
*
aDestroyingContext
int32_t
aLevels
)
const
;
void
ListDescendants
(
FILE
*
out
int32_t
aIndent
)
;
#
endif
void
ApplyStyleFixups
(
bool
aSkipParentDisplayBasedStyleFixup
)
;
bool
HasNoChildren
(
)
const
;
private
:
void
DoClearCachedInheritedStyleDataOnDescendants
(
uint32_t
aStructs
)
;
GeckoStyleContext
*
mChild
;
GeckoStyleContext
*
mEmptyChild
;
GeckoStyleContext
*
mPrevSibling
;
GeckoStyleContext
*
mNextSibling
;
}
;
}
#
endif
