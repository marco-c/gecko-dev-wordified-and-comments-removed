#
ifndef
mozilla_GeckoStyleContext_h
#
define
mozilla_GeckoStyleContext_h
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
class
GeckoStyleContext
final
:
public
nsStyleContext
{
public
:
GeckoStyleContext
(
nsStyleContext
*
aParent
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
already_AddRefed
<
nsRuleNode
>
aRuleNode
bool
aSkipParentDisplayBasedStyleFixup
)
;
void
*
operator
new
(
size_t
sz
nsPresContext
*
aPresContext
)
;
nsPresContext
*
PresContext
(
)
const
{
return
RuleNode
(
)
-
>
PresContext
(
)
;
}
void
AddChild
(
GeckoStyleContext
*
aChild
)
;
void
RemoveChild
(
GeckoStyleContext
*
aChild
)
;
void
*
GetUniqueStyleData
(
const
nsStyleStructID
&
aSID
)
;
void
*
CreateEmptyStyleData
(
const
nsStyleStructID
&
aSID
)
;
void
SetStyleIfVisited
(
already_AddRefed
<
nsStyleContext
>
aStyleIfVisited
)
;
nsStyleContext
*
GetStyleIfVisited
(
)
const
{
return
mStyleIfVisited
;
}
;
#
ifdef
DEBUG
static
void
Initialize
(
)
;
#
endif
void
EnsureSameStructsCached
(
nsStyleContext
*
aOldContext
)
;
void
SetIneligibleForSharing
(
)
;
void
ClearCachedInheritedStyleDataOnDescendants
(
uint32_t
aStructs
)
;
already_AddRefed
<
GeckoStyleContext
>
FindChildWithRules
(
const
nsIAtom
*
aPseudoTag
nsRuleNode
*
aSource
nsRuleNode
*
aSourceIfVisited
bool
aRelevantLinkVisited
)
;
void
SetStyle
(
nsStyleStructID
aSID
void
*
aStruct
)
;
const
void
*
NS_FASTCALL
StyleData
(
nsStyleStructID
aSID
)
MOZ_NONNULL_RETURN
;
#
ifdef
DEBUG
void
ListDescendants
(
FILE
*
out
int32_t
aIndent
)
;
#
endif
#
ifdef
RESTYLE_LOGGING
bool
ShouldLogRestyle
(
)
{
return
true
;
}
void
LogStyleContextTree
(
int32_t
aLoggingDepth
uint32_t
aStructs
)
;
void
LogStyleContextTree
(
bool
aFirst
uint32_t
aStructs
)
;
int32_t
&
LoggingDepth
(
)
;
nsCString
GetCachedStyleDataAsString
(
uint32_t
aStructs
)
;
#
endif
void
ApplyStyleFixups
(
bool
aSkipParentDisplayBasedStyleFixup
)
;
bool
HasNoChildren
(
)
const
;
nsRuleNode
*
RuleNode
(
)
const
{
MOZ_ASSERT
(
mRuleNode
)
;
return
mRuleNode
;
}
void
AddRef
(
)
{
if
(
mRefCnt
=
=
UINT32_MAX
)
{
NS_WARNING
(
"
refcount
overflow
leaking
object
"
)
;
return
;
}
+
+
mRefCnt
;
NS_LOG_ADDREF
(
this
mRefCnt
"
nsStyleContext
"
sizeof
(
nsStyleContext
)
)
;
return
;
}
void
Release
(
)
{
if
(
mRefCnt
=
=
UINT32_MAX
)
{
NS_WARNING
(
"
refcount
overflow
leaking
object
"
)
;
return
;
}
-
-
mRefCnt
;
NS_LOG_RELEASE
(
this
mRefCnt
"
nsStyleContext
"
)
;
if
(
mRefCnt
=
=
0
)
{
Destroy
(
)
;
return
;
}
return
;
}
~
GeckoStyleContext
(
)
;
void
SwapStyleData
(
GeckoStyleContext
*
aNewContext
uint32_t
aStructs
)
;
void
DestroyCachedStructs
(
nsPresContext
*
aPresContext
)
;
const
void
*
GetCachedStyleData
(
nsStyleStructID
aSID
)
{
const
void
*
cachedData
;
if
(
nsCachedStyleData
:
:
IsReset
(
aSID
)
)
{
if
(
mCachedResetData
)
{
cachedData
=
mCachedResetData
-
>
mStyleStructs
[
aSID
]
;
}
else
{
cachedData
=
nullptr
;
}
}
else
{
cachedData
=
mCachedInheritedData
.
mStyleStructs
[
aSID
]
;
}
return
cachedData
;
}
nsResetStyleData
*
mCachedResetData
;
nsInheritedStyleData
mCachedInheritedData
;
#
ifdef
DEBUG
void
AssertStructsNotUsedElsewhere
(
GeckoStyleContext
*
aDestroyingContext
int32_t
aLevels
)
const
;
#
endif
private
:
void
DoClearCachedInheritedStyleDataOnDescendants
(
uint32_t
aStructs
)
;
GeckoStyleContext
*
mChild
;
GeckoStyleContext
*
mEmptyChild
;
GeckoStyleContext
*
mPrevSibling
;
GeckoStyleContext
*
mNextSibling
;
RefPtr
<
nsRuleNode
>
mRuleNode
;
RefPtr
<
nsStyleContext
>
mStyleIfVisited
;
#
ifdef
DEBUG
public
:
struct
AutoCheckDependency
{
GeckoStyleContext
*
mStyleContext
;
nsStyleStructID
mOuterSID
;
AutoCheckDependency
(
GeckoStyleContext
*
aContext
nsStyleStructID
aInnerSID
)
:
mStyleContext
(
aContext
)
{
mOuterSID
=
aContext
-
>
mComputingStruct
;
MOZ_ASSERT
(
mOuterSID
=
=
nsStyleStructID_None
|
|
DependencyAllowed
(
mOuterSID
aInnerSID
)
"
Undeclared
dependency
see
generate
-
stylestructlist
.
py
"
)
;
aContext
-
>
mComputingStruct
=
aInnerSID
;
}
~
AutoCheckDependency
(
)
{
mStyleContext
-
>
mComputingStruct
=
mOuterSID
;
}
}
;
private
:
nsStyleStructID
mComputingStruct
;
#
define
AUTO_CHECK_DEPENDENCY
(
gecko_
sid_
)
\
mozilla
:
:
GeckoStyleContext
:
:
AutoCheckDependency
checkNesting_
(
gecko_
sid_
)
#
else
#
define
AUTO_CHECK_DEPENDENCY
(
gecko_
sid_
)
#
endif
}
;
}
#
endif
