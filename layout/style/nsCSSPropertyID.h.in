#
ifndef
nsCSSPropertyID_h___
#
define
nsCSSPropertyID_h___
#
include
<
nsHashKeys
.
h
>
enum
nsCSSPropertyID
:
int32_t
{
eCSSProperty_UNKNOWN
=
-
1
property_ids
eCSSPropertyExtra_no_properties
eCSSPropertyExtra_variable
}
;
const
nsCSSPropertyID
eCSSProperty_COUNT_no_shorthands
=
longhand_count
;
const
nsCSSPropertyID
eCSSProperty_COUNT
=
shorthand_count
;
const
nsCSSPropertyID
eCSSProperty_COUNT_with_aliases
=
eCSSPropertyExtra_no_properties
;
namespace
mozilla
{
template
<
>
inline
PLDHashNumber
Hash
<
nsCSSPropertyID
>
(
const
nsCSSPropertyID
&
aValue
)
{
return
uint32_t
(
aValue
)
;
}
}
enum
nsCSSFontDesc
{
eCSSFontDesc_UNKNOWN
=
-
1
#
define
CSS_FONT_DESC
(
name_
method_
)
eCSSFontDesc_
#
#
method_
#
include
"
nsCSSFontDescList
.
h
"
#
undef
CSS_FONT_DESC
eCSSFontDesc_COUNT
}
;
enum
nsCSSCounterDesc
{
eCSSCounterDesc_UNKNOWN
=
-
1
#
define
CSS_COUNTER_DESC
(
name_
method_
)
eCSSCounterDesc_
#
#
method_
#
include
"
nsCSSCounterDescList
.
h
"
#
undef
CSS_COUNTER_DESC
eCSSCounterDesc_COUNT
}
;
namespace
mozilla
{
enum
class
CountedUnknownProperty
:
uint32_t
{
#
define
COUNTED_UNKNOWN_PROPERTY
(
name_
method_
)
method_
#
include
"
mozilla
/
CountedUnknownProperties
.
h
"
#
undef
COUNTED_UNKNOWN_PROPERTY
Count
}
;
}
#
endif
