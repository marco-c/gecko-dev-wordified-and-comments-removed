#
ifndef
_nsStyleContext_h_
#
define
_nsStyleContext_h_
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
RestyleLogging
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
mozilla
/
StyleComplexColor
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsStyleSet
.
h
"
class
nsAtom
;
class
nsPresContext
;
namespace
mozilla
{
enum
class
CSSPseudoElementType
:
uint8_t
;
class
GeckoStyleContext
;
class
ServoStyleContext
;
}
extern
"
C
"
{
void
Servo_StyleContext_AddRef
(
const
mozilla
:
:
ServoStyleContext
*
aContext
)
;
void
Servo_StyleContext_Release
(
const
mozilla
:
:
ServoStyleContext
*
aContext
)
;
}
class
nsStyleContext
{
public
:
#
ifdef
MOZ_STYLO
bool
IsGecko
(
)
const
{
return
!
IsServo
(
)
;
}
bool
IsServo
(
)
const
{
return
(
mBits
&
NS_STYLE_CONTEXT_IS_GECKO
)
=
=
0
;
}
#
else
bool
IsGecko
(
)
const
{
return
true
;
}
bool
IsServo
(
)
const
{
return
false
;
}
#
endif
MOZ_DECL_STYLO_CONVERT_METHODS
(
mozilla
:
:
GeckoStyleContext
mozilla
:
:
ServoStyleContext
)
;
static
mozilla
:
:
ArenaObjectID
ArenaObjectID
(
)
{
return
mozilla
:
:
eArenaObjectID_GeckoStyleContext
;
}
nsIPresShell
*
Arena
(
)
;
inline
void
AddRef
(
)
;
inline
void
Release
(
)
;
#
ifdef
DEBUG
void
FrameAddRef
(
)
;
void
FrameRelease
(
)
;
#
endif
inline
nsPresContext
*
PresContext
(
)
const
;
nsAtom
*
GetPseudo
(
)
const
{
return
mPseudoTag
;
}
mozilla
:
:
CSSPseudoElementType
GetPseudoType
(
)
const
{
return
static_cast
<
mozilla
:
:
CSSPseudoElementType
>
(
mBits
>
>
NS_STYLE_CONTEXT_TYPE_SHIFT
)
;
}
bool
IsInheritingAnonBox
(
)
const
{
return
GetPseudoType
(
)
=
=
mozilla
:
:
CSSPseudoElementType
:
:
InheritingAnonBox
;
}
bool
IsNonInheritingAnonBox
(
)
const
{
return
GetPseudoType
(
)
=
=
mozilla
:
:
CSSPseudoElementType
:
:
NonInheritingAnonBox
;
}
bool
IsWrapperAnonBox
(
)
const
{
return
nsCSSAnonBoxes
:
:
IsWrapperAnonBox
(
GetPseudo
(
)
)
;
}
bool
IsAnonBox
(
)
const
{
return
IsInheritingAnonBox
(
)
|
|
IsNonInheritingAnonBox
(
)
;
}
bool
IsPseudoElement
(
)
const
{
return
mPseudoTag
&
&
!
IsAnonBox
(
)
;
}
bool
HasTextDecorationLines
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_HAS_TEXT_DECORATION_LINES
)
;
}
bool
ShouldSuppressLineBreak
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_SUPPRESS_LINEBREAK
)
;
}
bool
IsInDisplayNoneSubtree
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_IN_DISPLAY_NONE_SUBTREE
)
;
}
bool
IsTextCombined
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_IS_TEXT_COMBINED
)
;
}
bool
HasPseudoElementData
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_HAS_PSEUDO_ELEMENT_DATA
)
;
}
bool
HasChildThatUsesResetStyle
(
)
const
{
return
mBits
&
NS_STYLE_HAS_CHILD_THAT_USES_RESET_STYLE
;
}
bool
RelevantLinkVisited
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_RELEVANT_LINK_VISITED
)
;
}
inline
bool
IsLinkContext
(
)
const
;
bool
IsStyleIfVisited
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_IS_STYLE_IF_VISITED
)
;
}
void
SetIsStyleIfVisited
(
)
{
mBits
|
=
NS_STYLE_IS_STYLE_IF_VISITED
;
}
inline
nsStyleContext
*
GetStyleIfVisited
(
)
const
;
bool
HasChildThatUsesGrandancestorStyle
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_CHILD_USES_GRANDANCESTOR_STYLE
)
;
}
bool
IsShared
(
)
const
{
return
!
!
(
mBits
&
NS_STYLE_IS_SHARED
)
;
}
bool
HasCachedDependentStyleData
(
nsStyleStructID
aSID
)
{
return
mBits
&
nsCachedStyleData
:
:
GetBitForSID
(
aSID
)
;
}
inline
nsRuleNode
*
RuleNode
(
)
;
inline
const
ServoComputedData
*
ComputedData
(
)
;
void
AddStyleBit
(
const
uint64_t
&
aBit
)
{
mBits
|
=
aBit
;
}
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
\
inline
const
nsStyle
#
#
name_
*
Style
#
#
name_
(
)
MOZ_NONNULL_RETURN
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
\
inline
const
nsStyle
#
#
name_
*
ThreadsafeStyle
#
#
name_
(
)
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
\
inline
const
nsStyle
#
#
name_
*
PeekStyle
#
#
name_
(
)
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
nsChangeHint
CalcStyleDifference
(
nsStyleContext
*
aNewContext
uint32_t
*
aEqualStructs
uint32_t
*
aSamePointerStructs
bool
aIgnoreVariables
=
false
)
;
public
:
template
<
typename
T
typename
S
>
nscolor
GetVisitedDependentColor
(
T
S
:
:
*
aField
)
;
static
nscolor
CombineVisitedColors
(
nscolor
*
aColors
bool
aLinkIsVisited
)
;
inline
void
StartBackgroundImageLoads
(
)
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
int32_t
aIndent
bool
aListDescendants
=
true
)
;
static
const
char
*
StructName
(
nsStyleStructID
aSID
)
;
static
bool
LookupStruct
(
const
nsACString
&
aName
nsStyleStructID
&
aResult
)
;
#
endif
protected
:
~
nsStyleContext
(
)
{
}
nsStyleContext
(
nsAtom
*
aPseudoTag
mozilla
:
:
CSSPseudoElementType
aPseudoType
)
;
#
define
STYLE_STRUCT_INHERITED
(
name_
checkdata_cb_
)
\
template
<
bool
aComputeData
>
\
const
nsStyle
#
#
name_
*
DoGetStyle
#
#
name_
(
)
;
#
define
STYLE_STRUCT_RESET
(
name_
checkdata_cb_
)
\
template
<
bool
aComputeData
>
\
const
nsStyle
#
#
name_
*
DoGetStyle
#
#
name_
(
)
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT_RESET
#
undef
STYLE_STRUCT_INHERITED
RefPtr
<
nsAtom
>
mPseudoTag
;
uint64_t
mBits
;
#
ifdef
DEBUG
static
bool
DependencyAllowed
(
nsStyleStructID
aOuterSID
nsStyleStructID
aInnerSID
)
{
return
!
!
(
sDependencyTable
[
aOuterSID
]
&
nsCachedStyleData
:
:
GetBitForSID
(
aInnerSID
)
)
;
}
static
const
uint32_t
sDependencyTable
[
]
;
#
endif
}
;
already_AddRefed
<
mozilla
:
:
GeckoStyleContext
>
NS_NewStyleContext
(
mozilla
:
:
GeckoStyleContext
*
aParentContext
nsAtom
*
aPseudoTag
mozilla
:
:
CSSPseudoElementType
aPseudoType
nsRuleNode
*
aRuleNode
bool
aSkipParentDisplayBasedStyleFixup
)
;
#
endif
