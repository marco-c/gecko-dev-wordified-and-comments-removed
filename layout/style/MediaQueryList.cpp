#
include
"
mozilla
/
dom
/
MediaQueryList
.
h
"
#
include
"
mozilla
/
dom
/
MediaQueryListEvent
.
h
"
#
include
"
mozilla
/
dom
/
MediaList
.
h
"
#
include
"
mozilla
/
dom
/
EventTarget
.
h
"
#
include
"
mozilla
/
dom
/
EventTargetBinding
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
define
ONCHANGE_STRING
u
"
change
"
_ns
namespace
mozilla
:
:
dom
{
MediaQueryList
:
:
MediaQueryList
(
Document
*
aDocument
const
nsACString
&
aMediaQueryList
CallerType
aCallerType
)
:
DOMEventTargetHelper
(
aDocument
-
>
GetInnerWindow
(
)
)
mDocument
(
aDocument
)
mMediaList
(
MediaList
:
:
Create
(
aMediaQueryList
aCallerType
)
)
mViewportDependent
(
mMediaList
-
>
IsViewportDependent
(
)
)
{
KeepAliveIfHasListenersFor
(
nsGkAtoms
:
:
onchange
)
;
}
MediaQueryList
:
:
~
MediaQueryList
(
)
=
default
;
NS_IMPL_CYCLE_COLLECTION_CLASS
(
MediaQueryList
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mDocument
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
if
(
tmp
-
>
mDocument
)
{
static_cast
<
LinkedListElement
<
MediaQueryList
>
*
>
(
tmp
)
-
>
remove
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mDocument
)
}
tmp
-
>
Disconnect
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
MediaQueryList
)
NS_INTERFACE_MAP_END_INHERITING
(
DOMEventTargetHelper
)
NS_IMPL_ADDREF_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
NS_IMPL_RELEASE_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
void
MediaQueryList
:
:
GetMedia
(
nsACString
&
aMedia
)
const
{
mMediaList
-
>
GetText
(
aMedia
)
;
}
bool
MediaQueryList
:
:
Matches
(
)
{
if
(
mViewportDependent
&
&
mDocument
-
>
StyleOrLayoutObservablyDependsOnParentDocumentLayout
(
)
)
{
RefPtr
<
Document
>
doc
=
mDocument
;
doc
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
}
if
(
!
mMatchesValid
)
{
MOZ_ASSERT
(
!
HasListeners
(
)
"
when
listeners
present
must
keep
mMatches
current
"
)
;
RecomputeMatches
(
)
;
}
return
mMatches
;
}
void
MediaQueryList
:
:
AddListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
{
if
(
!
aListener
)
{
return
;
}
AddEventListenerOptionsOrBoolean
options
;
options
.
SetAsBoolean
(
)
=
false
;
AddEventListener
(
ONCHANGE_STRING
aListener
options
Nullable
<
bool
>
(
)
aRv
)
;
}
void
MediaQueryList
:
:
EventListenerAdded
(
nsAtom
*
aType
)
{
if
(
!
mMatchesValid
&
&
HasListeners
(
)
)
{
RecomputeMatches
(
)
;
}
DOMEventTargetHelper
:
:
EventListenerAdded
(
aType
)
;
}
void
MediaQueryList
:
:
RemoveListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
{
if
(
!
aListener
)
{
return
;
}
EventListenerOptionsOrBoolean
options
;
options
.
SetAsBoolean
(
)
=
false
;
RemoveEventListener
(
ONCHANGE_STRING
aListener
options
aRv
)
;
}
bool
MediaQueryList
:
:
HasListeners
(
)
const
{
return
HasListenersFor
(
ONCHANGE_STRING
)
;
}
void
MediaQueryList
:
:
Disconnect
(
)
{
DisconnectFromOwner
(
)
;
IgnoreKeepAliveIfHasListenersFor
(
nsGkAtoms
:
:
onchange
)
;
}
void
MediaQueryList
:
:
RecomputeMatches
(
)
{
mMatches
=
false
;
if
(
!
mDocument
)
{
return
;
}
mMatches
=
mMediaList
-
>
Matches
(
*
mDocument
)
;
mMatchesValid
=
true
;
}
nsISupports
*
MediaQueryList
:
:
GetParentObject
(
)
const
{
return
ToSupports
(
mDocument
)
;
}
JSObject
*
MediaQueryList
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
MediaQueryList_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
bool
MediaQueryList
:
:
MediaFeatureValuesChanged
(
)
{
mMatchesValid
=
false
;
if
(
!
HasListeners
(
)
)
{
return
false
;
}
bool
oldMatches
=
mMatches
;
RecomputeMatches
(
)
;
return
mMatches
!
=
oldMatches
;
}
void
MediaQueryList
:
:
FireChangeEvent
(
)
{
MediaQueryListEventInit
init
;
init
.
mBubbles
=
false
;
init
.
mCancelable
=
false
;
init
.
mMatches
=
mMatches
;
mMediaList
-
>
GetText
(
init
.
mMedia
)
;
RefPtr
<
MediaQueryListEvent
>
event
=
MediaQueryListEvent
:
:
Constructor
(
this
ONCHANGE_STRING
init
)
;
event
-
>
SetTrusted
(
true
)
;
DispatchEvent
(
*
event
)
;
}
size_t
MediaQueryList
:
:
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
n
+
=
mMediaList
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
;
return
n
;
}
}
