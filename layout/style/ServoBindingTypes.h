#
ifndef
mozilla_ServoBindingTypes_h
#
define
mozilla_ServoBindingTypes_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoComputedData
.
h
"
#
include
"
mozilla
/
ServoTypes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsStyleAutoArray
.
h
"
#
include
"
nsTArray
.
h
"
#
define
SERVO_BOXED_TYPE
(
name_
type_
)
struct
type_
;
#
include
"
mozilla
/
ServoBoxedTypeList
.
h
"
#
undef
SERVO_BOXED_TYPE
#
define
SERVO_ARC_TYPE
(
name_
type_
)
struct
type_
;
#
include
"
mozilla
/
ServoArcTypeList
.
h
"
#
undef
SERVO_ARC_TYPE
class
nsCSSPropertyIDSet
;
class
nsCSSValue
;
class
nsIDocument
;
class
nsINode
;
class
nsPresContext
;
class
nsXBLBinding
;
struct
nsFontFaceRuleContainer
;
struct
nsTimingFunction
;
namespace
mozilla
{
class
ComputedStyle
;
class
ServoElementSnapshot
;
struct
AnimationPropertySegment
;
struct
ComputedTiming
;
struct
Keyframe
;
struct
PropertyStyleAnimationValuePair
;
struct
PropertyValuePair
;
struct
StyleAnimation
;
struct
URLExtraData
;
using
ComputedKeyframeValues
=
nsTArray
<
PropertyStyleAnimationValuePair
>
;
using
GfxMatrix4x4
=
mozilla
:
:
gfx
:
:
Float
[
16
]
;
namespace
dom
{
class
StyleChildrenIterator
;
class
Element
;
}
}
#
define
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
typedef
type_
const
*
type_
#
#
Borrowed
;
#
define
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
typedef
type_
const
*
type_
#
#
BorrowedOrNull
;
#
define
DECL_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
typedef
type_
*
type_
#
#
BorrowedMut
;
#
define
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
typedef
type_
*
type_
#
#
BorrowedMutOrNull
;
#
define
DECL_OWNED_REF_TYPE_FOR
(
type_
)
\
typedef
type_
*
type_
#
#
Owned
;
\
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
#
define
DECL_NULLABLE_OWNED_REF_TYPE_FOR
(
type_
)
\
typedef
type_
*
type_
#
#
OwnedOrNull
;
\
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
#
define
GECKO_BORROWED_TYPE
(
geckotype_
ffitype_
)
\
using
ffitype_
=
geckotype_
;
\
using
ffitype_
#
#
Borrowed
=
const
ffitype_
*
;
\
using
ffitype_
#
#
BorrowedOrNull
=
const
ffitype_
*
;
#
define
GECKO_BORROWED_TYPE_MUT
(
geckotype_
ffitype_
)
\
GECKO_BORROWED_TYPE
(
geckotype_
ffitype_
)
\
using
ffitype_
#
#
BorrowedMut
=
ffitype_
*
;
\
using
ffitype_
#
#
BorrowedMutOrNull
=
ffitype_
*
;
#
include
"
mozilla
/
BorrowedTypeList
.
h
"
#
undef
GECKO_BORROWED_TYPE_MUT
#
undef
GECKO_BORROWED_TYPE
#
define
SERVO_ARC_TYPE
(
name_
type_
)
\
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
\
struct
MOZ_MUST_USE_TYPE
type_
#
#
Strong
\
{
\
type_
*
mPtr
;
\
already_AddRefed
<
type_
>
Consume
(
)
;
\
}
;
\
extern
"
C
"
{
\
void
Servo_
#
#
name_
#
#
_AddRef
(
type_
#
#
Borrowed
ptr
)
;
\
void
Servo_
#
#
name_
#
#
_Release
(
type_
#
#
Borrowed
ptr
)
;
\
}
\
namespace
mozilla
{
\
template
<
>
struct
RefPtrTraits
<
type_
>
{
\
static
void
AddRef
(
type_
*
aPtr
)
{
\
Servo_
#
#
name_
#
#
_AddRef
(
aPtr
)
;
\
}
\
static
void
Release
(
type_
*
aPtr
)
{
\
Servo_
#
#
name_
#
#
_Release
(
aPtr
)
;
\
}
\
}
;
\
}
#
include
"
mozilla
/
ServoArcTypeList
.
h
"
#
undef
SERVO_ARC_TYPE
#
define
SERVO_BOXED_TYPE
(
name_
type_
)
\
DECL_OWNED_REF_TYPE_FOR
(
type_
)
\
DECL_NULLABLE_OWNED_REF_TYPE_FOR
(
type_
)
\
extern
"
C
"
void
Servo_
#
#
name_
#
#
_Drop
(
type_
#
#
Owned
ptr
)
;
\
namespace
mozilla
{
\
template
<
>
\
class
DefaultDelete
<
type_
>
\
{
\
public
:
\
void
operator
(
)
(
type_
*
aPtr
)
const
\
{
\
Servo_
#
#
name_
#
#
_Drop
(
aPtr
)
;
\
}
\
}
;
\
}
#
include
"
mozilla
/
ServoBoxedTypeList
.
h
"
#
undef
SERVO_BOXED_TYPE
#
define
DEFINE_ARRAY_TYPE_FOR
(
type_
)
\
struct
nsTArrayBorrowed_
#
#
type_
{
\
nsTArray
<
type_
>
*
mArray
;
\
MOZ_IMPLICIT
nsTArrayBorrowed_
#
#
type_
(
nsTArray
<
type_
>
*
aArray
)
\
:
mArray
(
aArray
)
{
}
\
}
DEFINE_ARRAY_TYPE_FOR
(
uintptr_t
)
;
#
undef
DEFINE_ARRAY_TYPE_FOR
typedef
void
*
RawServoAnimationValueTableBorrowed
;
struct
RawServoAnimationValueMap
;
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawServoAnimationValueMap
)
DECL_BORROWED_REF_TYPE_FOR
(
RawServoAnimationValueMap
)
DECL_BORROWED_MUT_REF_TYPE_FOR
(
RawServoAnimationValueMap
)
typedef
mozilla
:
:
ComputedStyle
const
*
ComputedStyleBorrowed
;
typedef
mozilla
:
:
ComputedStyle
const
*
ComputedStyleBorrowedOrNull
;
typedef
ServoComputedData
const
*
ServoComputedDataBorrowed
;
struct
MOZ_MUST_USE_TYPE
ComputedStyleStrong
{
mozilla
:
:
ComputedStyle
*
mPtr
;
already_AddRefed
<
mozilla
:
:
ComputedStyle
>
Consume
(
)
;
}
;
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawServoDeclarationBlockStrong
)
#
undef
DECL_ARC_REF_TYPE_FOR
#
undef
DECL_OWNED_REF_TYPE_FOR
#
undef
DECL_NULLABLE_OWNED_REF_TYPE_FOR
#
undef
DECL_BORROWED_REF_TYPE_FOR
#
undef
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
#
undef
DECL_BORROWED_MUT_REF_TYPE_FOR
#
undef
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
#
endif
