#
ifndef
mozilla_ServoBindingTypes_h
#
define
mozilla_ServoBindingTypes_h
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
struct
RawServoStyleSet
;
#
define
SERVO_ARC_TYPE
(
name_
type_
)
struct
type_
;
#
include
"
mozilla
/
ServoArcTypeList
.
h
"
#
undef
SERVO_ARC_TYPE
namespace
mozilla
{
class
ServoElementSnapshot
;
namespace
dom
{
class
Element
;
class
StyleChildrenIterator
;
}
}
class
nsCSSValue
;
class
nsIDocument
;
class
nsINode
;
using
mozilla
:
:
dom
:
:
StyleChildrenIterator
;
using
mozilla
:
:
ServoElementSnapshot
;
typedef
nsINode
RawGeckoNode
;
typedef
mozilla
:
:
dom
:
:
Element
RawGeckoElement
;
typedef
nsIDocument
RawGeckoDocument
;
#
define
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
typedef
type_
const
*
type_
#
#
Borrowed
;
#
define
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
typedef
type_
const
*
type_
#
#
BorrowedOrNull
;
#
define
DECL_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
typedef
type_
*
type_
#
#
BorrowedMut
;
#
define
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
typedef
type_
*
type_
#
#
BorrowedMutOrNull
;
#
define
SERVO_ARC_TYPE
(
name_
type_
)
\
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
\
struct
MOZ_MUST_USE_TYPE
type_
#
#
Strong
\
{
\
type_
*
mPtr
;
\
already_AddRefed
<
type_
>
Consume
(
)
;
\
}
;
#
include
"
mozilla
/
ServoArcTypeList
.
h
"
#
undef
SERVO_ARC_TYPE
#
define
DECL_OWNED_REF_TYPE_FOR
(
type_
)
\
typedef
type_
*
type_
#
#
Owned
;
\
DECL_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
#
define
DECL_NULLABLE_OWNED_REF_TYPE_FOR
(
type_
)
\
typedef
type_
*
type_
#
#
OwnedOrNull
;
\
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
type_
)
\
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
(
type_
)
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawServoDeclarationBlockStrong
)
DECL_OWNED_REF_TYPE_FOR
(
RawServoStyleSet
)
DECL_NULLABLE_OWNED_REF_TYPE_FOR
(
StyleChildrenIterator
)
DECL_OWNED_REF_TYPE_FOR
(
StyleChildrenIterator
)
DECL_OWNED_REF_TYPE_FOR
(
ServoElementSnapshot
)
DECL_BORROWED_REF_TYPE_FOR
(
RawGeckoNode
)
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawGeckoNode
)
DECL_BORROWED_REF_TYPE_FOR
(
RawGeckoElement
)
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawGeckoElement
)
DECL_BORROWED_REF_TYPE_FOR
(
RawGeckoDocument
)
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
(
RawGeckoDocument
)
DECL_BORROWED_MUT_REF_TYPE_FOR
(
StyleChildrenIterator
)
DECL_BORROWED_MUT_REF_TYPE_FOR
(
ServoElementSnapshot
)
DECL_BORROWED_REF_TYPE_FOR
(
nsCSSValue
)
DECL_BORROWED_MUT_REF_TYPE_FOR
(
nsCSSValue
)
#
undef
DECL_ARC_REF_TYPE_FOR
#
undef
DECL_OWNED_REF_TYPE_FOR
#
undef
DECL_NULLABLE_OWNED_REF_TYPE_FOR
#
undef
DECL_BORROWED_REF_TYPE_FOR
#
undef
DECL_NULLABLE_BORROWED_REF_TYPE_FOR
#
undef
DECL_BORROWED_MUT_REF_TYPE_FOR
#
undef
DECL_NULLABLE_BORROWED_MUT_REF_TYPE_FOR
#
define
SERVO_ARC_TYPE
(
name_
type_
)
\
extern
"
C
"
{
\
void
Servo_
#
#
name_
#
#
_AddRef
(
type_
#
#
Borrowed
ptr
)
;
\
void
Servo_
#
#
name_
#
#
_Release
(
type_
#
#
Borrowed
ptr
)
;
\
}
\
namespace
mozilla
{
\
template
<
>
struct
RefPtrTraits
<
type_
>
{
\
static
void
AddRef
(
type_
*
aPtr
)
{
\
Servo_
#
#
name_
#
#
_AddRef
(
aPtr
)
;
\
}
\
static
void
Release
(
type_
*
aPtr
)
{
\
Servo_
#
#
name_
#
#
_Release
(
aPtr
)
;
\
}
\
}
;
\
}
#
include
"
mozilla
/
ServoArcTypeList
.
h
"
#
undef
SERVO_ARC_TYPE
extern
"
C
"
void
Servo_StyleSet_Drop
(
RawServoStyleSetOwned
ptr
)
;
namespace
mozilla
{
template
<
>
class
DefaultDelete
<
RawServoStyleSet
>
{
public
:
void
operator
(
)
(
RawServoStyleSet
*
aPtr
)
const
{
Servo_StyleSet_Drop
(
aPtr
)
;
}
}
;
}
#
endif
