#
ifndef
mozilla_CSSFontFaceRule_h
#
define
mozilla_CSSFontFaceRule_h
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
css
/
Rule
.
h
"
#
include
"
nsICSSDeclaration
.
h
"
namespace
mozilla
{
namespace
dom
{
class
CSSFontFaceRule
;
class
CSSFontFaceRuleDecl
final
:
public
nsICSSDeclaration
{
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIDOMCSSSTYLEDECLARATION_HELPER
nsINode
*
GetAssociatedNode
(
)
const
final
;
nsISupports
*
GetParentObject
(
)
const
final
;
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsACString
&
aPropName
)
final
;
void
GetPropertyValue
(
nsCSSFontDesc
aFontDescID
nsACString
&
aResult
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
protected
:
friend
class
CSSFontFaceRule
;
explicit
CSSFontFaceRuleDecl
(
already_AddRefed
<
RawServoFontFaceRule
>
aDecl
)
:
mRawRule
(
std
:
:
move
(
aDecl
)
)
{
}
~
CSSFontFaceRuleDecl
(
)
=
default
;
inline
CSSFontFaceRule
*
ContainingRule
(
)
;
inline
const
CSSFontFaceRule
*
ContainingRule
(
)
const
;
RefPtr
<
RawServoFontFaceRule
>
mRawRule
;
private
:
void
*
operator
new
(
size_t
size
)
noexcept
(
true
)
=
delete
;
}
;
class
CSSFontFaceRule
final
:
public
css
:
:
Rule
{
public
:
CSSFontFaceRule
(
already_AddRefed
<
RawServoFontFaceRule
>
aRawRule
StyleSheet
*
aSheet
css
:
:
Rule
*
aParentRule
uint32_t
aLine
uint32_t
aColumn
)
:
css
:
:
Rule
(
aSheet
aParentRule
aLine
aColumn
)
mDecl
(
std
:
:
move
(
aRawRule
)
)
{
}
CSSFontFaceRule
(
const
CSSFontFaceRule
&
)
=
delete
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_INHERITED
(
CSSFontFaceRule
css
:
:
Rule
)
bool
IsCCLeaf
(
)
const
final
;
RawServoFontFaceRule
*
Raw
(
)
const
{
return
mDecl
.
mRawRule
;
}
uint16_t
Type
(
)
const
final
;
void
GetCssText
(
nsACString
&
aCssText
)
const
final
;
nsICSSDeclaration
*
Style
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
final
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
final
;
#
endif
private
:
virtual
~
CSSFontFaceRule
(
)
=
default
;
friend
class
CSSFontFaceRuleDecl
;
CSSFontFaceRuleDecl
mDecl
;
}
;
inline
CSSFontFaceRule
*
CSSFontFaceRuleDecl
:
:
ContainingRule
(
)
{
return
reinterpret_cast
<
CSSFontFaceRule
*
>
(
reinterpret_cast
<
char
*
>
(
this
)
-
offsetof
(
CSSFontFaceRule
mDecl
)
)
;
}
inline
const
CSSFontFaceRule
*
CSSFontFaceRuleDecl
:
:
ContainingRule
(
)
const
{
return
reinterpret_cast
<
const
CSSFontFaceRule
*
>
(
reinterpret_cast
<
const
char
*
>
(
this
)
-
offsetof
(
CSSFontFaceRule
mDecl
)
)
;
}
}
}
#
endif
