#
include
"
ServoCSSParser
.
h
"
#
include
"
mozilla
/
AnimatedPropertyID
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
bool
ServoCSSParser
:
:
IsValidCSSColor
(
const
nsACString
&
aValue
)
{
return
Servo_IsValidCSSColor
(
&
aValue
)
;
}
bool
ServoCSSParser
:
:
ComputeColor
(
ServoStyleSet
*
aStyleSet
nscolor
aCurrentColor
const
nsACString
&
aValue
nscolor
*
aResultColor
bool
*
aWasCurrentColor
css
:
:
Loader
*
aLoader
)
{
return
Servo_ComputeColor
(
aStyleSet
?
aStyleSet
-
>
RawData
(
)
:
nullptr
aCurrentColor
&
aValue
aResultColor
aWasCurrentColor
aLoader
)
;
}
bool
ServoCSSParser
:
:
ColorTo
(
const
nsACString
&
aFromColor
const
nsACString
&
aToColorSpace
nsACString
*
aResultColor
nsTArray
<
float
>
*
aResultComponents
bool
*
aResultAdjusted
css
:
:
Loader
*
aLoader
)
{
return
Servo_ColorTo
(
&
aFromColor
&
aToColorSpace
aResultColor
aResultComponents
aResultAdjusted
aLoader
)
;
}
already_AddRefed
<
StyleLockedDeclarationBlock
>
ServoCSSParser
:
:
ParseProperty
(
nsCSSPropertyID
aProperty
const
nsACString
&
aValue
const
ParsingEnvironment
&
aParsingEnvironment
const
StyleParsingMode
&
aParsingMode
)
{
AnimatedPropertyID
property
(
aProperty
)
;
return
ParseProperty
(
property
aValue
aParsingEnvironment
aParsingMode
)
;
}
already_AddRefed
<
StyleLockedDeclarationBlock
>
ServoCSSParser
:
:
ParseProperty
(
const
AnimatedPropertyID
&
aProperty
const
nsACString
&
aValue
const
ParsingEnvironment
&
aParsingEnvironment
const
StyleParsingMode
&
aParsingMode
)
{
return
Servo_ParseProperty
(
&
aProperty
&
aValue
aParsingEnvironment
.
mUrlExtraData
aParsingMode
aParsingEnvironment
.
mCompatMode
aParsingEnvironment
.
mLoader
aParsingEnvironment
.
mRuleType
)
.
Consume
(
)
;
}
bool
ServoCSSParser
:
:
ParseEasing
(
const
nsACString
&
aValue
StyleComputedTimingFunction
&
aResult
)
{
return
Servo_ParseEasing
(
&
aValue
&
aResult
)
;
}
bool
ServoCSSParser
:
:
ParseTransformIntoMatrix
(
const
nsACString
&
aValue
bool
&
aContains3DTransform
gfx
:
:
Matrix4x4
&
aResult
)
{
return
Servo_ParseTransformIntoMatrix
(
&
aValue
&
aContains3DTransform
&
aResult
.
components
)
;
}
bool
ServoCSSParser
:
:
ParseFontShorthandForMatching
(
const
nsACString
&
aValue
URLExtraData
*
aUrl
StyleFontFamilyList
&
aList
StyleFontStyle
&
aStyle
StyleFontStretch
&
aStretch
StyleFontWeight
&
aWeight
float
*
aSize
bool
*
aSmallCaps
)
{
return
Servo_ParseFontShorthandForMatching
(
&
aValue
aUrl
&
aList
&
aStyle
&
aStretch
&
aWeight
aSize
aSmallCaps
)
;
}
already_AddRefed
<
URLExtraData
>
ServoCSSParser
:
:
GetURLExtraData
(
Document
*
aDocument
)
{
MOZ_ASSERT
(
aDocument
)
;
return
do_AddRef
(
aDocument
-
>
DefaultStyleAttrURLData
(
)
)
;
}
ServoCSSParser
:
:
ParsingEnvironment
ServoCSSParser
:
:
GetParsingEnvironment
(
Document
*
aDocument
)
{
return
{
GetURLExtraData
(
aDocument
)
aDocument
-
>
GetCompatibilityMode
(
)
aDocument
-
>
CSSLoader
(
)
}
;
}
