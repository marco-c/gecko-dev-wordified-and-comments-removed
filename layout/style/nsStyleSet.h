#
ifndef
nsStyleSet_h_
#
define
nsStyleSet_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
EnumeratedArray
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ServoTypes
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
nsIStyleRuleProcessor
.
h
"
#
include
"
nsBindingManager
.
h
"
#
include
"
nsRuleNode
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsCOMArray
.
h
"
#
include
"
nsIStyleRule
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
class
gfxFontFeatureValueSet
;
class
nsCSSKeyframesRule
;
class
nsCSSFontFeatureValuesRule
;
class
nsCSSPageRule
;
class
nsCSSCounterStyleRule
;
class
nsICSSPseudoComparator
;
class
nsRuleWalker
;
struct
ElementDependentRuleProcessorData
;
struct
nsFontFaceRuleContainer
;
struct
TreeMatchContext
;
namespace
mozilla
{
class
CSSStyleSheet
;
class
EventStates
;
enum
class
CSSPseudoElementType
:
uint8_t
;
}
class
nsEmptyStyleRule
final
:
public
nsIStyleRule
{
private
:
~
nsEmptyStyleRule
(
)
{
}
public
:
NS_DECL_ISUPPORTS
virtual
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
virtual
bool
MightMapInheritedStyleData
(
)
override
;
virtual
bool
GetDiscretelyAnimatedCSSValue
(
nsCSSPropertyID
aProperty
nsCSSValue
*
aValue
)
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
}
;
class
nsInitialStyleRule
final
:
public
nsIStyleRule
{
private
:
~
nsInitialStyleRule
(
)
{
}
public
:
NS_DECL_ISUPPORTS
virtual
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
virtual
bool
MightMapInheritedStyleData
(
)
override
;
virtual
bool
GetDiscretelyAnimatedCSSValue
(
nsCSSPropertyID
aProperty
nsCSSValue
*
aValue
)
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
}
;
class
nsDisableTextZoomStyleRule
final
:
public
nsIStyleRule
{
private
:
~
nsDisableTextZoomStyleRule
(
)
{
}
public
:
NS_DECL_ISUPPORTS
virtual
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
virtual
bool
MightMapInheritedStyleData
(
)
override
;
virtual
bool
GetDiscretelyAnimatedCSSValue
(
nsCSSPropertyID
aProperty
nsCSSValue
*
aValue
)
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
}
;
class
nsStyleSet
final
{
public
:
nsStyleSet
(
)
;
~
nsStyleSet
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
Init
(
nsPresContext
*
aPresContext
)
;
nsRuleNode
*
GetRuleTree
(
)
{
return
mRuleTree
;
}
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
mozilla
:
:
LazyComputeBehavior
)
{
return
ResolveStyleFor
(
aElement
aParentContext
)
;
}
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
mozilla
:
:
LazyComputeBehavior
aMayCompute
TreeMatchContext
&
aTreeMatchContext
)
{
return
ResolveStyleFor
(
aElement
aParentContext
aTreeMatchContext
)
;
}
already_AddRefed
<
nsStyleContext
>
ResolveStyleForRules
(
nsStyleContext
*
aParentContext
const
nsTArray
<
nsCOMPtr
<
nsIStyleRule
>
>
&
aRules
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleByAddingRules
(
nsStyleContext
*
aBaseContext
const
nsCOMArray
<
nsIStyleRule
>
&
aRules
)
;
enum
{
eSkipStartingAnimations
=
(
1
<
<
0
)
}
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleWithReplacement
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
nsStyleContext
*
aNewParentContext
nsStyleContext
*
aOldStyleContext
nsRestyleHint
aReplacements
uint32_t
aFlags
=
0
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleByRemovingAnimation
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aStyleContext
nsRestyleHint
aWhichToRemove
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleWithoutAnimation
(
mozilla
:
:
dom
:
:
Element
*
aTarget
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolvePseudoElementStyleWithoutAnimation
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleForText
(
nsIContent
*
aTextNode
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleForFirstLetterContinuation
(
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleForPlaceholder
(
)
;
already_AddRefed
<
nsStyleContext
>
ResolvePseudoElementStyle
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
)
;
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
;
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
=
nullptr
)
;
enum
{
eNoFlags
=
0
eIsLink
=
1
<
<
0
eIsVisitedLink
=
1
<
<
1
eDoAnimation
=
1
<
<
2
eSkipParentDisplayBasedStyleFixup
=
1
<
<
3
}
;
already_AddRefed
<
nsStyleContext
>
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
=
eNoFlags
)
;
#
ifdef
MOZ_XUL
already_AddRefed
<
nsStyleContext
>
ResolveXULTreePseudoStyle
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
nsICSSPseudoComparator
*
aComparator
)
;
#
endif
bool
AppendFontFaceRules
(
nsTArray
<
nsFontFaceRuleContainer
>
&
aArray
)
;
nsCSSKeyframesRule
*
KeyframesRuleForName
(
const
nsString
&
aName
)
;
nsCSSCounterStyleRule
*
CounterStyleRuleForName
(
const
nsAString
&
aName
)
;
already_AddRefed
<
gfxFontFeatureValueSet
>
GetFontFeatureValuesLookup
(
)
;
bool
AppendFontFeatureValuesRules
(
nsTArray
<
nsCSSFontFeatureValuesRule
*
>
&
aArray
)
;
bool
AppendPageRules
(
nsTArray
<
nsCSSPageRule
*
>
&
aArray
)
;
void
BeginShutdown
(
)
;
void
Shutdown
(
)
;
already_AddRefed
<
nsStyleContext
>
ReparentStyleContext
(
nsStyleContext
*
aStyleContext
nsStyleContext
*
aNewParentContext
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
bool
HasDocumentStateDependentStyle
(
nsIContent
*
aContent
mozilla
:
:
EventStates
aStateMask
)
;
nsRestyleHint
HasStateDependentStyle
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
EventStates
aStateMask
)
;
nsRestyleHint
HasStateDependentStyle
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
CSSPseudoElementType
aPseudoType
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
mozilla
:
:
EventStates
aStateMask
)
;
nsRestyleHint
HasAttributeDependentStyle
(
mozilla
:
:
dom
:
:
Element
*
aElement
int32_t
aNameSpaceID
nsIAtom
*
aAttribute
int32_t
aModType
bool
aAttrHasChanged
const
nsAttrValue
*
aOtherValue
mozilla
:
:
RestyleHintData
&
aRestyleHintDataResult
)
;
bool
MediumFeaturesChanged
(
)
;
void
SetBindingManager
(
nsBindingManager
*
aBindingManager
)
{
mBindingManager
=
aBindingManager
;
}
nsresult
AppendStyleSheet
(
mozilla
:
:
SheetType
aType
mozilla
:
:
CSSStyleSheet
*
aSheet
)
;
nsresult
PrependStyleSheet
(
mozilla
:
:
SheetType
aType
mozilla
:
:
CSSStyleSheet
*
aSheet
)
;
nsresult
RemoveStyleSheet
(
mozilla
:
:
SheetType
aType
mozilla
:
:
CSSStyleSheet
*
aSheet
)
;
nsresult
ReplaceSheets
(
mozilla
:
:
SheetType
aType
const
nsTArray
<
RefPtr
<
mozilla
:
:
CSSStyleSheet
>
>
&
aNewSheets
)
;
nsresult
InsertStyleSheetBefore
(
mozilla
:
:
SheetType
aType
mozilla
:
:
CSSStyleSheet
*
aNewSheet
mozilla
:
:
CSSStyleSheet
*
aReferenceSheet
)
;
bool
GetAuthorStyleDisabled
(
)
const
;
nsresult
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
int32_t
SheetCount
(
mozilla
:
:
SheetType
aType
)
const
{
return
mSheets
[
aType
]
.
Length
(
)
;
}
mozilla
:
:
CSSStyleSheet
*
StyleSheetAt
(
mozilla
:
:
SheetType
aType
int32_t
aIndex
)
const
{
return
mSheets
[
aType
]
[
aIndex
]
;
}
void
AppendAllXBLStyleSheets
(
nsTArray
<
mozilla
:
:
CSSStyleSheet
*
>
&
aArray
)
const
;
nsresult
RemoveDocStyleSheet
(
mozilla
:
:
CSSStyleSheet
*
aSheet
)
;
nsresult
AddDocStyleSheet
(
mozilla
:
:
CSSStyleSheet
*
aSheet
nsIDocument
*
aDocument
)
;
void
BeginUpdate
(
)
;
nsresult
EndUpdate
(
)
;
nsresult
BeginReconstruct
(
)
;
void
EndReconstruct
(
)
;
bool
IsInRuleTreeReconstruct
(
)
const
{
return
mInReconstruct
;
}
void
RootStyleContextAdded
(
)
{
+
+
mRootStyleContextCount
;
}
void
RootStyleContextRemoved
(
)
{
MOZ_ASSERT
(
mRootStyleContextCount
>
0
)
;
-
-
mRootStyleContextCount
;
}
bool
HasCachedStyleData
(
)
const
{
return
(
mRuleTree
&
&
mRuleTree
-
>
TreeHasCachedData
(
)
)
|
|
mRootStyleContextCount
>
0
;
}
static
const
uint32_t
kGCInterval
=
300
;
void
RuleNodeUnused
(
nsRuleNode
*
aNode
bool
aMayGC
)
{
+
+
mUnusedRuleNodeCount
;
mUnusedRuleNodeList
.
insertBack
(
aNode
)
;
if
(
aMayGC
&
&
mUnusedRuleNodeCount
>
=
kGCInterval
&
&
!
mInGC
&
&
!
mInReconstruct
)
{
GCRuleTrees
(
)
;
}
}
void
RuleNodeInUse
(
nsRuleNode
*
aNode
)
{
MOZ_ASSERT
(
mUnusedRuleNodeCount
>
0
)
;
-
-
mUnusedRuleNodeCount
;
aNode
-
>
removeFrom
(
mUnusedRuleNodeList
)
;
}
bool
EnsureUniqueInnerOnCSSSheets
(
)
;
void
SetNeedsRestyleAfterEnsureUniqueInner
(
)
{
mNeedsRestyleAfterEnsureUniqueInner
=
true
;
}
nsIStyleRule
*
InitialStyleRule
(
)
;
bool
HasRuleProcessorUsedByMultipleStyleSets
(
mozilla
:
:
SheetType
aSheetType
)
;
void
ClearSelectors
(
)
;
static
bool
IsCSSSheetType
(
mozilla
:
:
SheetType
aSheetType
)
;
private
:
nsStyleSet
(
const
nsStyleSet
&
aCopy
)
=
delete
;
nsStyleSet
&
operator
=
(
const
nsStyleSet
&
aCopy
)
=
delete
;
void
GCRuleTrees
(
)
;
nsresult
DirtyRuleProcessors
(
mozilla
:
:
SheetType
aType
)
;
nsresult
GatherRuleProcessors
(
mozilla
:
:
SheetType
aType
)
;
void
AddImportantRules
(
nsRuleNode
*
aCurrLevelNode
nsRuleNode
*
aLastPrevLevelNode
nsRuleWalker
*
aRuleWalker
)
;
void
WalkRestrictionRule
(
mozilla
:
:
CSSPseudoElementType
aPseudoType
nsRuleWalker
*
aRuleWalker
)
;
void
WalkDisableTextZoomRule
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsRuleWalker
*
aRuleWalker
)
;
#
ifdef
DEBUG
void
AssertNoImportantRules
(
nsRuleNode
*
aCurrLevelNode
nsRuleNode
*
aLastPrevLevelNode
)
;
void
AssertNoCSSRules
(
nsRuleNode
*
aCurrLevelNode
nsRuleNode
*
aLastPrevLevelNode
)
;
#
endif
void
FileRules
(
nsIStyleRuleProcessor
:
:
EnumFunc
aCollectorFunc
RuleProcessorData
*
aData
mozilla
:
:
dom
:
:
Element
*
aElement
nsRuleWalker
*
aRuleWalker
)
;
void
WalkRuleProcessors
(
nsIStyleRuleProcessor
:
:
EnumFunc
aFunc
ElementDependentRuleProcessorData
*
aData
bool
aWalkAllXBLStylesheets
)
;
nsRuleNode
*
RuleNodeWithReplacement
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
nsRuleNode
*
aOldRuleNode
mozilla
:
:
CSSPseudoElementType
aPseudoType
nsRestyleHint
aReplacements
)
;
already_AddRefed
<
nsStyleContext
>
GetContext
(
nsStyleContext
*
aParentContext
nsRuleNode
*
aRuleNode
nsRuleNode
*
aVisitedRuleNode
nsIAtom
*
aPseudoTag
mozilla
:
:
CSSPseudoElementType
aPseudoType
mozilla
:
:
dom
:
:
Element
*
aElementForAnimation
uint32_t
aFlags
)
;
enum
AnimationFlag
{
eWithAnimation
eWithoutAnimation
}
;
already_AddRefed
<
nsStyleContext
>
ResolveStyleForInternal
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
AnimationFlag
aAnimationFlag
)
;
already_AddRefed
<
nsStyleContext
>
ResolvePseudoElementStyleInternal
(
mozilla
:
:
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
mozilla
:
:
dom
:
:
Element
*
aPseudoElement
AnimationFlag
aAnimationFlag
)
;
nsPresContext
*
PresContext
(
)
{
return
mRuleTree
-
>
PresContext
(
)
;
}
void
ClearNonInheritingStyleContexts
(
)
;
mozilla
:
:
EnumeratedArray
<
mozilla
:
:
SheetType
mozilla
:
:
SheetType
:
:
Count
nsTArray
<
RefPtr
<
mozilla
:
:
CSSStyleSheet
>
>
>
mSheets
;
mozilla
:
:
EnumeratedArray
<
mozilla
:
:
SheetType
mozilla
:
:
SheetType
:
:
Count
nsCOMPtr
<
nsIStyleRuleProcessor
>
>
mRuleProcessors
;
nsTArray
<
nsCOMPtr
<
nsIStyleRuleProcessor
>
>
mScopedDocSheetRuleProcessors
;
RefPtr
<
nsBindingManager
>
mBindingManager
;
RefPtr
<
nsRuleNode
>
mRuleTree
;
uint16_t
mBatching
;
unsigned
mInShutdown
:
1
;
unsigned
mInGC
:
1
;
unsigned
mAuthorStyleDisabled
:
1
;
unsigned
mInReconstruct
:
1
;
unsigned
mInitFontFeatureValuesLookup
:
1
;
unsigned
mNeedsRestyleAfterEnsureUniqueInner
:
1
;
unsigned
mDirty
:
int
(
mozilla
:
:
SheetType
:
:
Count
)
;
uint32_t
mRootStyleContextCount
;
#
ifdef
DEBUG
nsRuleNode
*
mOldRootNode
;
#
endif
mozilla
:
:
LinkedList
<
nsRuleNode
>
mUnusedRuleNodeList
;
uint32_t
mUnusedRuleNodeCount
;
RefPtr
<
nsEmptyStyleRule
>
mFirstLineRule
mFirstLetterRule
mPlaceholderRule
;
RefPtr
<
nsInitialStyleRule
>
mInitialStyleRule
;
RefPtr
<
nsDisableTextZoomStyleRule
>
mDisableTextZoomStyleRule
;
RefPtr
<
gfxFontFeatureValueSet
>
mFontFeatureValuesLookup
;
mozilla
:
:
EnumeratedArray
<
nsCSSAnonBoxes
:
:
NonInheriting
nsCSSAnonBoxes
:
:
NonInheriting
:
:
_Count
RefPtr
<
nsStyleContext
>
>
mNonInheritingStyleContexts
;
}
;
#
ifdef
MOZILLA_INTERNAL_API
inline
void
nsRuleNode
:
:
AddRef
(
)
{
if
(
mRefCnt
+
+
=
=
0
)
{
MOZ_ASSERT
(
mPresContext
-
>
StyleSet
(
)
-
>
IsGecko
(
)
"
ServoStyleSets
should
not
have
rule
nodes
"
)
;
mPresContext
-
>
StyleSet
(
)
-
>
AsGecko
(
)
-
>
RuleNodeInUse
(
this
)
;
}
}
inline
void
nsRuleNode
:
:
Release
(
)
{
if
(
-
-
mRefCnt
=
=
0
)
{
MOZ_ASSERT
(
mPresContext
-
>
StyleSet
(
)
-
>
IsGecko
(
)
"
ServoStyleSets
should
not
have
rule
nodes
"
)
;
mPresContext
-
>
StyleSet
(
)
-
>
AsGecko
(
)
-
>
RuleNodeUnused
(
this
true
)
;
}
}
#
endif
#
endif
