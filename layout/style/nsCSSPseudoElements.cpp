#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsAtomListUtils
.
h
"
#
include
"
nsStaticAtom
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsDOMString
.
h
"
using
namespace
mozilla
;
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
nsICSSPseudoElement
*
nsCSSPseudoElements
:
:
name_
;
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
NS_STATIC_ATOM_BUFFER
(
name_
#
#
_pseudo_element_buffer
value_
)
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
static
const
nsStaticAtomSetup
sCSSPseudoElementAtomSetup
[
]
=
{
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
NS_STATIC_ATOM_SETUP
(
name_
#
#
_pseudo_element_buffer
(
nsAtom
*
*
)
&
nsCSSPseudoElements
:
:
name_
)
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
;
const
uint32_t
nsCSSPseudoElements
:
:
kPseudoElementFlags
[
]
=
{
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
flags_
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
;
void
nsCSSPseudoElements
:
:
AddRefAtoms
(
)
{
NS_RegisterStaticAtoms
(
sCSSPseudoElementAtomSetup
)
;
}
bool
nsCSSPseudoElements
:
:
IsPseudoElement
(
nsAtom
*
aAtom
)
{
return
nsAtomListUtils
:
:
IsMember
(
aAtom
sCSSPseudoElementAtomSetup
ArrayLength
(
sCSSPseudoElementAtomSetup
)
)
;
}
bool
nsCSSPseudoElements
:
:
IsCSS2PseudoElement
(
nsAtom
*
aAtom
)
{
NS_ASSERTION
(
nsCSSPseudoElements
:
:
IsPseudoElement
(
aAtom
)
|
|
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
"
must
be
pseudo
element
or
anon
box
"
)
;
bool
result
=
aAtom
=
=
nsCSSPseudoElements
:
:
after
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
before
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
firstLetter
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
firstLine
;
NS_ASSERTION
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
|
|
result
=
=
PseudoElementHasFlags
(
GetPseudoType
(
aAtom
EnabledState
:
:
eIgnoreEnabledState
)
CSS_PSEUDO_ELEMENT_IS_CSS2
)
"
result
doesn
'
t
match
flags
"
)
;
return
result
;
}
CSSPseudoElementType
nsCSSPseudoElements
:
:
GetPseudoType
(
nsAtom
*
aAtom
EnabledState
aEnabledState
)
{
for
(
CSSPseudoElementTypeBase
i
=
0
;
i
<
ArrayLength
(
sCSSPseudoElementAtomSetup
)
;
+
+
i
)
{
if
(
*
sCSSPseudoElementAtomSetup
[
i
]
.
mAtom
=
=
aAtom
)
{
auto
type
=
static_cast
<
Type
>
(
i
)
;
if
(
type
=
=
CSSPseudoElementType
:
:
mozPlaceholder
)
{
type
=
CSSPseudoElementType
:
:
placeholder
;
}
return
IsEnabled
(
type
aEnabledState
)
?
type
:
Type
:
:
NotPseudo
;
}
}
if
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
)
{
#
ifdef
MOZ_XUL
if
(
nsCSSAnonBoxes
:
:
IsTreePseudoElement
(
aAtom
)
)
{
return
Type
:
:
XULTree
;
}
#
endif
if
(
nsCSSAnonBoxes
:
:
IsNonInheritingAnonBox
(
aAtom
)
)
{
return
Type
:
:
NonInheritingAnonBox
;
}
return
Type
:
:
InheritingAnonBox
;
}
return
Type
:
:
NotPseudo
;
}
nsAtom
*
nsCSSPseudoElements
:
:
GetPseudoAtom
(
Type
aType
)
{
NS_ASSERTION
(
aType
<
Type
:
:
Count
"
Unexpected
type
"
)
;
return
*
sCSSPseudoElementAtomSetup
[
static_cast
<
CSSPseudoElementTypeBase
>
(
aType
)
]
.
mAtom
;
}
already_AddRefed
<
nsAtom
>
nsCSSPseudoElements
:
:
GetPseudoAtom
(
const
nsAString
&
aPseudoElement
)
{
if
(
DOMStringIsNull
(
aPseudoElement
)
|
|
aPseudoElement
.
IsEmpty
(
)
|
|
aPseudoElement
.
First
(
)
!
=
char16_t
(
'
:
'
)
)
{
return
nullptr
;
}
nsAString
:
:
const_iterator
start
end
;
aPseudoElement
.
BeginReading
(
start
)
;
aPseudoElement
.
EndReading
(
end
)
;
NS_ASSERTION
(
start
!
=
end
"
aPseudoElement
is
not
empty
!
"
)
;
+
+
start
;
bool
haveTwoColons
=
true
;
if
(
start
=
=
end
|
|
*
start
!
=
char16_t
(
'
:
'
)
)
{
-
-
start
;
haveTwoColons
=
false
;
}
RefPtr
<
nsAtom
>
pseudo
=
NS_Atomize
(
Substring
(
start
end
)
)
;
MOZ_ASSERT
(
pseudo
)
;
if
(
!
haveTwoColons
&
&
(
!
IsPseudoElement
(
pseudo
)
|
|
!
IsCSS2PseudoElement
(
pseudo
)
)
)
{
return
nullptr
;
}
return
pseudo
.
forget
(
)
;
}
bool
nsCSSPseudoElements
:
:
PseudoElementSupportsUserActionState
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
)
;
}
