#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsGkAtomConsts
.
h
"
using
namespace
mozilla
;
const
uint32_t
nsCSSPseudoElements
:
:
kPseudoElementFlags
[
]
=
{
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
flags_
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
;
static
nsStaticAtom
*
GetAtomBase
(
)
{
return
const_cast
<
nsStaticAtom
*
>
(
nsGkAtoms
:
:
GetAtomByIndex
(
kAtomIndex_PseudoElements
)
)
;
}
bool
nsCSSPseudoElements
:
:
IsPseudoElement
(
nsAtom
*
aAtom
)
{
return
nsStaticAtomUtils
:
:
IsMember
(
aAtom
GetAtomBase
(
)
kAtomCount_PseudoElements
)
;
}
bool
nsCSSPseudoElements
:
:
IsCSS2PseudoElement
(
nsAtom
*
aAtom
)
{
NS_ASSERTION
(
nsCSSPseudoElements
:
:
IsPseudoElement
(
aAtom
)
|
|
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
"
must
be
pseudo
element
or
anon
box
"
)
;
bool
result
=
aAtom
=
=
nsCSSPseudoElements
:
:
after
(
)
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
before
(
)
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
firstLetter
(
)
|
|
aAtom
=
=
nsCSSPseudoElements
:
:
firstLine
(
)
;
NS_ASSERTION
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
|
|
result
=
=
PseudoElementHasFlags
(
GetPseudoType
(
aAtom
EnabledState
:
:
eIgnoreEnabledState
)
CSS_PSEUDO_ELEMENT_IS_CSS2
)
"
result
doesn
'
t
match
flags
"
)
;
return
result
;
}
CSSPseudoElementType
nsCSSPseudoElements
:
:
GetPseudoType
(
nsAtom
*
aAtom
EnabledState
aEnabledState
)
{
Maybe
<
uint32_t
>
index
=
nsStaticAtomUtils
:
:
Lookup
(
aAtom
GetAtomBase
(
)
kAtomCount_PseudoElements
)
;
if
(
index
.
isSome
(
)
)
{
auto
type
=
static_cast
<
Type
>
(
*
index
)
;
return
IsEnabled
(
type
aEnabledState
)
?
type
:
Type
:
:
NotPseudo
;
}
if
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aAtom
)
)
{
#
ifdef
MOZ_XUL
if
(
nsCSSAnonBoxes
:
:
IsTreePseudoElement
(
aAtom
)
)
{
return
Type
:
:
XULTree
;
}
#
endif
if
(
nsCSSAnonBoxes
:
:
IsNonInheritingAnonBox
(
aAtom
)
)
{
return
Type
:
:
NonInheritingAnonBox
;
}
return
Type
:
:
InheritingAnonBox
;
}
return
Type
:
:
NotPseudo
;
}
nsAtom
*
nsCSSPseudoElements
:
:
GetPseudoAtom
(
Type
aType
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
"
Unexpected
type
"
)
;
size_t
index
=
kAtomIndex_PseudoElements
+
static_cast
<
size_t
>
(
aType
)
;
return
nsGkAtoms
:
:
GetAtomByIndex
(
index
)
;
}
already_AddRefed
<
nsAtom
>
nsCSSPseudoElements
:
:
GetPseudoAtom
(
const
nsAString
&
aPseudoElement
)
{
if
(
DOMStringIsNull
(
aPseudoElement
)
|
|
aPseudoElement
.
IsEmpty
(
)
|
|
aPseudoElement
.
First
(
)
!
=
char16_t
(
'
:
'
)
)
{
return
nullptr
;
}
nsAString
:
:
const_iterator
start
end
;
aPseudoElement
.
BeginReading
(
start
)
;
aPseudoElement
.
EndReading
(
end
)
;
NS_ASSERTION
(
start
!
=
end
"
aPseudoElement
is
not
empty
!
"
)
;
+
+
start
;
bool
haveTwoColons
=
true
;
if
(
start
=
=
end
|
|
*
start
!
=
char16_t
(
'
:
'
)
)
{
-
-
start
;
haveTwoColons
=
false
;
}
RefPtr
<
nsAtom
>
pseudo
=
NS_Atomize
(
Substring
(
start
end
)
)
;
MOZ_ASSERT
(
pseudo
)
;
if
(
!
haveTwoColons
&
&
(
!
IsPseudoElement
(
pseudo
)
|
|
!
IsCSS2PseudoElement
(
pseudo
)
)
)
{
return
nullptr
;
}
return
pseudo
.
forget
(
)
;
}
bool
nsCSSPseudoElements
:
:
PseudoElementSupportsUserActionState
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
)
;
}
nsString
nsCSSPseudoElements
:
:
PseudoTypeAsString
(
Type
aPseudoType
)
{
switch
(
aPseudoType
)
{
case
CSSPseudoElementType
:
:
before
:
return
NS_LITERAL_STRING
(
"
:
:
before
"
)
;
case
CSSPseudoElementType
:
:
after
:
return
NS_LITERAL_STRING
(
"
:
:
after
"
)
;
default
:
MOZ_ASSERT
(
aPseudoType
=
=
CSSPseudoElementType
:
:
NotPseudo
"
Unexpected
pseudo
type
"
)
;
return
EmptyString
(
)
;
}
}
#
ifdef
DEBUG
void
nsCSSPseudoElements
:
:
AssertAtoms
(
)
{
nsStaticAtom
*
base
=
GetAtomBase
(
)
;
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
{
\
RefPtr
<
nsAtom
>
atom
=
NS_Atomize
(
value_
)
;
\
size_t
index
=
static_cast
<
size_t
>
(
CSSPseudoElementType
:
:
name_
)
;
\
MOZ_ASSERT
(
atom
=
=
nsGkAtoms
:
:
PseudoElement_
#
#
name_
\
"
Static
atom
for
"
#
name_
"
has
incorrect
value
"
)
;
\
MOZ_ASSERT
(
atom
=
=
&
base
[
index
]
\
"
Static
atom
for
"
#
name_
"
not
at
expected
index
"
)
;
\
}
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
#
endif
