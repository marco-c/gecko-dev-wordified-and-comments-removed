#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsDOMString
.
h
"
#
include
"
nsGkAtomConsts
.
h
"
#
include
"
nsStaticAtomUtils
.
h
"
#
include
"
nsStringFwd
.
h
"
using
namespace
mozilla
;
const
uint32_t
nsCSSPseudoElements
:
:
kPseudoElementFlags
[
]
=
{
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
flags_
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
;
nsStaticAtom
*
nsCSSPseudoElements
:
:
GetAtomBase
(
)
{
return
const_cast
<
nsStaticAtom
*
>
(
nsGkAtoms
:
:
GetAtomByIndex
(
kAtomIndex_PseudoElements
)
)
;
}
nsAtom
*
nsCSSPseudoElements
:
:
GetPseudoAtom
(
Type
aType
)
{
MOZ_ASSERT
(
PseudoStyle
:
:
IsPseudoElement
(
aType
)
"
Unexpected
type
"
)
;
size_t
index
=
kAtomIndex_PseudoElements
+
static_cast
<
size_t
>
(
aType
)
;
return
nsGkAtoms
:
:
GetAtomByIndex
(
index
)
;
}
Maybe
<
PseudoStyleRequest
>
nsCSSPseudoElements
:
:
ParsePseudoElement
(
const
nsAString
&
aPseudoElement
CSSEnabledState
aEnabledState
)
{
PseudoStyleRequest
result
;
if
(
DOMStringIsNull
(
aPseudoElement
)
|
|
aPseudoElement
.
IsEmpty
(
)
)
{
return
Some
(
result
)
;
}
if
(
!
Servo_ParsePseudoElement
(
&
aPseudoElement
&
result
)
)
{
return
Nothing
(
)
;
}
if
(
!
PseudoStyle
:
:
IsPseudoElement
(
result
.
mType
)
|
|
!
IsEnabled
(
result
.
mType
aEnabledState
)
)
{
return
Nothing
(
)
;
}
return
Some
(
result
)
;
}
bool
nsCSSPseudoElements
:
:
PseudoElementSupportsUserActionState
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
)
;
}
nsString
nsCSSPseudoElements
:
:
PseudoRequestAsString
(
const
Request
&
aPseudoRequest
)
{
switch
(
aPseudoRequest
.
mType
)
{
case
PseudoStyleType
:
:
before
:
return
u
"
:
:
before
"
_ns
;
case
PseudoStyleType
:
:
after
:
return
u
"
:
:
after
"
_ns
;
case
PseudoStyleType
:
:
marker
:
return
u
"
:
:
marker
"
_ns
;
case
PseudoStyleType
:
:
viewTransition
:
return
u
"
:
:
view
-
transition
"
_ns
;
case
PseudoStyleType
:
:
viewTransitionGroup
:
return
u
"
:
:
view
-
transition
-
group
(
"
_ns
+
nsAtomString
(
aPseudoRequest
.
mIdentifier
)
+
u
"
)
"
_ns
;
case
PseudoStyleType
:
:
viewTransitionImagePair
:
return
u
"
:
:
view
-
transition
-
image
-
pair
(
"
_ns
+
nsAtomString
(
aPseudoRequest
.
mIdentifier
)
+
u
"
)
"
_ns
;
case
PseudoStyleType
:
:
viewTransitionOld
:
return
u
"
:
:
view
-
transition
-
old
(
"
_ns
+
nsAtomString
(
aPseudoRequest
.
mIdentifier
)
+
u
"
)
"
_ns
;
case
PseudoStyleType
:
:
viewTransitionNew
:
return
u
"
:
:
view
-
transition
-
new
(
"
_ns
+
nsAtomString
(
aPseudoRequest
.
mIdentifier
)
+
u
"
)
"
_ns
;
default
:
MOZ_ASSERT
(
aPseudoRequest
.
IsNotPseudo
(
)
"
Unexpected
pseudo
type
"
)
;
return
u
"
"
_ns
;
}
}
#
ifdef
DEBUG
void
nsCSSPseudoElements
:
:
AssertAtoms
(
)
{
nsStaticAtom
*
base
=
GetAtomBase
(
)
;
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
{
\
RefPtr
<
nsAtom
>
atom
=
NS_Atomize
(
value_
)
;
\
size_t
index
=
static_cast
<
size_t
>
(
PseudoStyleType
:
:
name_
)
;
\
MOZ_ASSERT
(
atom
=
=
nsGkAtoms
:
:
PseudoElement_
#
#
name_
\
"
Static
atom
for
"
#
name_
"
has
incorrect
value
"
)
;
\
MOZ_ASSERT
(
atom
=
=
&
base
[
index
]
\
"
Static
atom
for
"
#
name_
"
not
at
expected
index
"
)
;
\
}
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
}
#
endif
