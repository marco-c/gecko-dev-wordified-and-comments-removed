#
ifndef
mozilla_CachedInheritingStyles_h
#
define
mozilla_CachedInheritingStyles_h
#
include
"
nsAtom
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
class
nsWindowSizes
;
namespace
mozilla
{
class
ComputedStyle
;
class
CachedInheritingStyles
{
public
:
void
Insert
(
ComputedStyle
*
aStyle
)
;
ComputedStyle
*
Lookup
(
nsAtom
*
aPseudoTag
)
const
;
CachedInheritingStyles
(
)
:
mBits
(
0
)
{
}
~
CachedInheritingStyles
(
)
{
if
(
IsIndirect
(
)
)
{
delete
AsIndirect
(
)
;
}
else
if
(
!
IsEmpty
(
)
)
{
RefPtr
<
ComputedStyle
>
ref
=
dont_AddRef
(
AsDirect
(
)
)
;
}
}
void
AddSizeOfIncludingThis
(
nsWindowSizes
&
aSizes
size_t
*
aCVsSize
)
const
;
private
:
typedef
AutoTArray
<
RefPtr
<
ComputedStyle
>
4
>
IndirectCache
;
bool
IsEmpty
(
)
const
{
return
!
mBits
;
}
bool
IsIndirect
(
)
const
{
return
(
mBits
&
1
)
;
}
ComputedStyle
*
AsDirect
(
)
const
{
MOZ_ASSERT
(
!
IsIndirect
(
)
)
;
return
reinterpret_cast
<
ComputedStyle
*
>
(
mBits
)
;
}
IndirectCache
*
AsIndirect
(
)
const
{
MOZ_ASSERT
(
IsIndirect
(
)
)
;
return
reinterpret_cast
<
IndirectCache
*
>
(
mBits
&
~
1
)
;
}
uintptr_t
mBits
;
}
;
}
#
endif
