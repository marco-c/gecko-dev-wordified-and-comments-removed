#
ifndef
mozilla_GenericSpecifiedValues_h
#
define
mozilla_GenericSpecifiedValues_h
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsPresContext
.
h
"
struct
nsRuleData
;
class
GenericSpecifiedValues
{
public
:
virtual
bool
PropertyIsSet
(
nsCSSPropertyID
aId
)
=
0
;
virtual
bool
ShouldComputeStyleStruct
(
uint64_t
aInheritBits
)
=
0
;
virtual
nsPresContext
*
PresContext
(
)
=
0
;
virtual
void
SetIdentStringValue
(
nsCSSPropertyID
aId
const
nsString
&
aValue
)
=
0
;
virtual
void
SetIdentStringValueIfUnset
(
nsCSSPropertyID
aId
const
nsString
&
aValue
)
=
0
;
virtual
void
SetKeywordValue
(
nsCSSPropertyID
aId
int32_t
aValue
)
=
0
;
virtual
void
SetKeywordValueIfUnset
(
nsCSSPropertyID
aId
int32_t
aValue
)
=
0
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetKeywordValue
(
nsCSSPropertyID
aId
T
aValue
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
32
bits
"
)
;
SetKeywordValue
(
aId
static_cast
<
int32_t
>
(
aValue
)
)
;
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetKeywordValueIfUnset
(
nsCSSPropertyID
aId
T
aValue
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
32
bits
"
)
;
SetKeywordValueIfUnset
(
aId
static_cast
<
int32_t
>
(
aValue
)
)
;
}
virtual
void
SetPixelValue
(
nsCSSPropertyID
aId
float
aValue
)
=
0
;
virtual
void
SetPixelValueIfUnset
(
nsCSSPropertyID
aId
float
aValue
)
=
0
;
virtual
void
SetPercentValue
(
nsCSSPropertyID
aId
float
aValue
)
=
0
;
virtual
void
SetPercentValueIfUnset
(
nsCSSPropertyID
aId
float
aValue
)
=
0
;
virtual
void
SetCurrentColor
(
nsCSSPropertyID
aId
)
=
0
;
virtual
void
SetCurrentColorIfUnset
(
nsCSSPropertyID
aId
)
=
0
;
virtual
void
SetColorValue
(
nsCSSPropertyID
aId
nscolor
aValue
)
=
0
;
virtual
nsRuleData
*
AsRuleData
(
)
=
0
;
}
;
#
endif
