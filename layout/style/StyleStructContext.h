#
ifndef
mozilla_StyleStructContext_h
#
define
mozilla_StyleStructContext_h
#
include
"
CounterStyleManager
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
class
nsDeviceContext
;
#
ifdef
MOZ_STYLO
#
define
SERVO_DEFAULT
(
default_val
)
{
if
(
!
mPresContext
)
{
return
default_val
;
}
}
#
else
#
define
SERVO_DEFAULT
(
default_val
)
{
MOZ_ASSERT
(
mPresContext
)
;
}
#
endif
class
StyleStructContext
{
public
:
MOZ_IMPLICIT
StyleStructContext
(
const
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
{
MOZ_ASSERT
(
aPresContext
)
;
}
static
StyleStructContext
ServoContext
(
)
{
return
StyleStructContext
(
)
;
}
float
TextZoom
(
)
{
SERVO_DEFAULT
(
1
.
0
)
;
return
mPresContext
-
>
TextZoom
(
)
;
}
const
nsFont
*
GetDefaultFont
(
uint8_t
aFontID
)
{
SERVO_DEFAULT
(
mozilla
:
:
StaticPresData
:
:
Get
(
)
-
>
GetDefaultFont
(
aFontID
GetLanguageFromCharset
(
)
)
)
;
return
mPresContext
-
>
GetDefaultFont
(
aFontID
GetLanguageFromCharset
(
)
)
;
}
uint32_t
GetBidi
(
)
{
SERVO_DEFAULT
(
0
)
;
return
mPresContext
-
>
GetBidi
(
)
;
}
int32_t
AppUnitsPerDevPixel
(
)
;
nscoord
DevPixelsToAppUnits
(
int32_t
aPixels
)
{
return
NSIntPixelsToAppUnits
(
aPixels
AppUnitsPerDevPixel
(
)
)
;
}
typedef
mozilla
:
:
LookAndFeel
LookAndFeel
;
nscolor
DefaultColor
(
)
{
SERVO_DEFAULT
(
NS_RGB
(
0x00
0x00
0x00
)
)
;
return
mPresContext
-
>
DefaultColor
(
)
;
}
mozilla
:
:
CounterStyle
*
BuildCounterStyle
(
const
nsSubstring
&
aName
)
{
SERVO_DEFAULT
(
mozilla
:
:
CounterStyleManager
:
:
GetBuiltinStyle
(
NS_STYLE_LIST_STYLE_DISC
)
)
;
if
(
mPresContext
-
>
StyleSet
(
)
-
>
IsServo
(
)
)
{
return
mozilla
:
:
CounterStyleManager
:
:
GetBuiltinStyle
(
NS_STYLE_LIST_STYLE_DISC
)
;
}
return
mPresContext
-
>
CounterStyleManager
(
)
-
>
BuildCounterStyle
(
aName
)
;
}
nsIAtom
*
GetLanguageFromCharset
(
)
const
{
SERVO_DEFAULT
(
nsGkAtoms
:
:
x_western
)
;
return
mPresContext
-
>
GetLanguageFromCharset
(
)
;
}
already_AddRefed
<
nsIAtom
>
GetContentLanguage
(
)
const
{
SERVO_DEFAULT
(
do_AddRef
(
nsGkAtoms
:
:
x_western
)
)
;
return
mPresContext
-
>
GetContentLanguage
(
)
;
}
private
:
nsDeviceContext
*
DeviceContext
(
)
{
SERVO_DEFAULT
(
HackilyFindSomeDeviceContext
(
)
)
;
return
mPresContext
-
>
DeviceContext
(
)
;
}
nsDeviceContext
*
HackilyFindSomeDeviceContext
(
)
;
StyleStructContext
(
)
:
mPresContext
(
nullptr
)
{
}
const
nsPresContext
*
mPresContext
;
}
;
#
undef
SERVO_DEFAULT
#
endif
