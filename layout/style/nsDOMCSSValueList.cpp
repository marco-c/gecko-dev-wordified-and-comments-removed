#
include
"
nsDOMCSSValueList
.
h
"
#
include
<
utility
>
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsString
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsDOMCSSValueList
:
:
nsDOMCSSValueList
(
bool
aCommaDelimited
)
:
CSSValue
(
)
mCommaDelimited
(
aCommaDelimited
)
{
}
nsDOMCSSValueList
:
:
~
nsDOMCSSValueList
(
)
=
default
;
void
nsDOMCSSValueList
:
:
AppendCSSValue
(
already_AddRefed
<
CSSValue
>
aValue
)
{
RefPtr
<
CSSValue
>
val
=
aValue
;
mCSSValues
.
AppendElement
(
std
:
:
move
(
val
)
)
;
}
void
nsDOMCSSValueList
:
:
GetCssText
(
nsAString
&
aCssText
)
{
aCssText
.
Truncate
(
)
;
uint32_t
count
=
mCSSValues
.
Length
(
)
;
nsAutoString
separator
;
if
(
mCommaDelimited
)
{
separator
.
AssignLiteral
(
"
"
)
;
}
else
{
separator
.
Assign
(
char16_t
(
'
'
)
)
;
}
nsAutoString
tmpStr
;
for
(
uint32_t
i
=
0
;
i
<
count
;
+
+
i
)
{
CSSValue
*
cssValue
=
mCSSValues
[
i
]
;
NS_ASSERTION
(
cssValue
"
Eek
!
Someone
filled
the
value
list
with
null
CSSValues
!
"
)
;
if
(
cssValue
)
{
cssValue
-
>
GetCssText
(
tmpStr
)
;
if
(
tmpStr
.
IsEmpty
(
)
)
{
#
ifdef
DEBUG_caillon
NS_ERROR
(
"
Eek
!
An
empty
CSSValue
!
Bad
!
"
)
;
#
endif
continue
;
}
if
(
!
aCssText
.
IsEmpty
(
)
)
{
aCssText
.
Append
(
separator
)
;
}
aCssText
.
Append
(
tmpStr
)
;
}
}
}
