#
include
"
CSS
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
HighlightRegistry
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
nsGlobalWindow
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsStyleUtil
.
h
"
#
include
"
xpcpublic
.
h
"
namespace
mozilla
:
:
dom
{
bool
CSS
:
:
Supports
(
const
GlobalObject
&
const
nsACString
&
aProperty
const
nsACString
&
aValue
)
{
return
Servo_CSSSupports2
(
&
aProperty
&
aValue
)
;
}
bool
CSS
:
:
Supports
(
const
GlobalObject
&
const
nsACString
&
aCondition
)
{
return
Servo_CSSSupports
(
&
aCondition
false
false
false
)
;
}
void
CSS
:
:
Escape
(
const
GlobalObject
&
const
nsAString
&
aIdent
nsAString
&
aReturn
)
{
nsStyleUtil
:
:
AppendEscapedCSSIdent
(
aIdent
aReturn
)
;
}
static
Document
*
GetDocument
(
const
GlobalObject
&
aGlobal
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
MOZ_DIAGNOSTIC_ASSERT
(
window
"
CSS
is
only
exposed
to
window
globals
"
)
;
if
(
!
window
)
{
return
nullptr
;
}
return
window
-
>
GetExtantDoc
(
)
;
}
HighlightRegistry
*
CSS
:
:
GetHighlights
(
const
GlobalObject
&
aGlobal
ErrorResult
&
aRv
)
{
Document
*
doc
=
GetDocument
(
aGlobal
)
;
if
(
!
doc
)
{
aRv
.
ThrowUnknownError
(
"
No
document
associated
to
this
global
?
"
)
;
return
nullptr
;
}
return
&
doc
-
>
HighlightRegistry
(
)
;
}
void
CSS
:
:
RegisterProperty
(
const
GlobalObject
&
aGlobal
const
PropertyDefinition
&
aDefinition
ErrorResult
&
aRv
)
{
Document
*
doc
=
GetDocument
(
aGlobal
)
;
if
(
!
doc
)
{
return
aRv
.
ThrowUnknownError
(
"
No
document
associated
to
this
global
?
"
)
;
}
doc
-
>
StyleSetForPresShellOrMediaQueryEvaluation
(
)
-
>
RegisterProperty
(
aDefinition
aRv
)
;
}
}
