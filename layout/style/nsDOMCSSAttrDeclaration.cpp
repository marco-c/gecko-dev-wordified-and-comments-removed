#
include
"
nsDOMCSSAttrDeclaration
.
h
"
#
include
"
mozilla
/
DeclarationBlock
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
MutationEventBinding
.
h
"
#
include
"
mozilla
/
InternalMutationEvent
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsNodeUtils
.
h
"
#
include
"
nsSMILCSSValueType
.
h
"
#
include
"
nsWrapperCacheInlines
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
ActiveLayerTracker
.
h
"
using
namespace
mozilla
;
nsDOMCSSAttributeDeclaration
:
:
nsDOMCSSAttributeDeclaration
(
dom
:
:
Element
*
aElement
bool
aIsSMILOverride
)
:
mElement
(
aElement
)
mIsSMILOverride
(
aIsSMILOverride
)
{
NS_ASSERTION
(
aElement
"
Inline
style
for
a
NULL
element
?
"
)
;
}
nsDOMCSSAttributeDeclaration
:
:
~
nsDOMCSSAttributeDeclaration
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
nsDOMCSSAttributeDeclaration
mElement
)
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
nsDOMCSSAttributeDeclaration
)
if
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkip
(
tmp
-
>
mElement
true
)
)
{
if
(
tmp
-
>
PreservingWrapper
(
)
)
{
tmp
-
>
MarkWrapperLive
(
)
;
}
return
true
;
}
return
tmp
-
>
HasKnownLiveWrapper
(
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
nsDOMCSSAttributeDeclaration
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
|
|
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkipInCC
(
tmp
-
>
mElement
)
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
nsDOMCSSAttributeDeclaration
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
|
|
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkipThis
(
tmp
-
>
mElement
)
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsDOMCSSAttributeDeclaration
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_END_INHERITING
(
nsDOMCSSDeclaration
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsDOMCSSAttributeDeclaration
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsDOMCSSAttributeDeclaration
)
nsresult
nsDOMCSSAttributeDeclaration
:
:
SetCSSDeclaration
(
DeclarationBlock
*
aDecl
MutationClosureData
*
aClosureData
)
{
NS_ASSERTION
(
mElement
"
Must
have
Element
to
set
the
declaration
!
"
)
;
MOZ_ASSERT_IF
(
!
mIsSMILOverride
aClosureData
)
;
MOZ_ASSERT_IF
(
aClosureData
!
aClosureData
-
>
mClosure
)
;
aDecl
-
>
SetDirty
(
)
;
return
mIsSMILOverride
?
mElement
-
>
SetSMILOverrideStyleDeclaration
(
aDecl
true
)
:
mElement
-
>
SetInlineStyleDeclaration
(
*
aDecl
*
aClosureData
)
;
}
nsIDocument
*
nsDOMCSSAttributeDeclaration
:
:
DocToUpdate
(
)
{
return
mElement
-
>
OwnerDoc
(
)
;
}
DeclarationBlock
*
nsDOMCSSAttributeDeclaration
:
:
GetOrCreateCSSDeclaration
(
Operation
aOperation
DeclarationBlock
*
*
aCreated
)
{
MOZ_ASSERT
(
aOperation
!
=
eOperation_Modify
|
|
aCreated
)
;
if
(
!
mElement
)
return
nullptr
;
DeclarationBlock
*
declaration
;
if
(
mIsSMILOverride
)
{
declaration
=
mElement
-
>
GetSMILOverrideStyleDeclaration
(
)
;
}
else
{
declaration
=
mElement
-
>
GetInlineStyleDeclaration
(
)
;
}
if
(
declaration
)
{
return
declaration
;
}
if
(
aOperation
!
=
eOperation_Modify
)
{
return
nullptr
;
}
RefPtr
<
DeclarationBlock
>
decl
=
new
DeclarationBlock
(
)
;
decl
-
>
SetDirty
(
)
;
#
ifdef
DEBUG
RefPtr
<
DeclarationBlock
>
mutableDecl
=
decl
-
>
EnsureMutable
(
)
;
MOZ_ASSERT
(
mutableDecl
=
=
decl
)
;
#
endif
decl
.
swap
(
*
aCreated
)
;
return
*
aCreated
;
}
nsDOMCSSDeclaration
:
:
ParsingEnvironment
nsDOMCSSAttributeDeclaration
:
:
GetParsingEnvironment
(
nsIPrincipal
*
aSubjectPrincipal
)
const
{
return
{
mElement
-
>
GetURLDataForStyleAttr
(
aSubjectPrincipal
)
mElement
-
>
OwnerDoc
(
)
-
>
GetCompatibilityMode
(
)
mElement
-
>
OwnerDoc
(
)
-
>
CSSLoader
(
)
}
;
}
nsresult
nsDOMCSSAttributeDeclaration
:
:
SetSMILValue
(
const
nsCSSPropertyID
aPropID
const
nsSMILValue
&
aValue
)
{
MOZ_ASSERT
(
mIsSMILOverride
)
;
RefPtr
<
DeclarationBlock
>
created
;
DeclarationBlock
*
olddecl
=
GetOrCreateCSSDeclaration
(
eOperation_Modify
getter_AddRefs
(
created
)
)
;
if
(
!
olddecl
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
mozAutoDocUpdate
autoUpdate
(
DocToUpdate
(
)
true
)
;
RefPtr
<
DeclarationBlock
>
decl
=
olddecl
-
>
EnsureMutable
(
)
;
bool
changed
=
nsSMILCSSValueType
:
:
SetPropertyValues
(
aValue
*
decl
)
;
if
(
changed
)
{
SetCSSDeclaration
(
decl
nullptr
)
;
}
return
NS_OK
;
}
nsresult
nsDOMCSSAttributeDeclaration
:
:
SetPropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsAString
&
aValue
nsIPrincipal
*
aSubjectPrincipal
)
{
if
(
aPropID
=
=
eCSSProperty_opacity
|
|
aPropID
=
=
eCSSProperty_transform
|
|
aPropID
=
=
eCSSProperty_left
|
|
aPropID
=
=
eCSSProperty_top
|
|
aPropID
=
=
eCSSProperty_right
|
|
aPropID
=
=
eCSSProperty_bottom
|
|
aPropID
=
=
eCSSProperty_background_position_x
|
|
aPropID
=
=
eCSSProperty_background_position_y
|
|
aPropID
=
=
eCSSProperty_background_position
)
{
nsIFrame
*
frame
=
mElement
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
ActiveLayerTracker
:
:
NotifyInlineStyleRuleModified
(
frame
aPropID
aValue
this
)
;
}
}
return
nsDOMCSSDeclaration
:
:
SetPropertyValue
(
aPropID
aValue
aSubjectPrincipal
)
;
}
void
nsDOMCSSAttributeDeclaration
:
:
MutationClosureFunction
(
void
*
aData
)
{
MutationClosureData
*
data
=
static_cast
<
MutationClosureData
*
>
(
aData
)
;
data
-
>
mClosure
=
nullptr
;
data
-
>
mElement
-
>
InlineStyleDeclarationWillChange
(
*
data
)
;
}
