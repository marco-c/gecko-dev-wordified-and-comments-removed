#
include
"
nsDOMCSSAttrDeclaration
.
h
"
#
include
"
mozilla
/
css
/
Declaration
.
h
"
#
include
"
mozilla
/
css
/
StyleRule
.
h
"
#
include
"
mozilla
/
DeclarationBlock
.
h
"
#
include
"
mozilla
/
DeclarationBlockInlines
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
InternalMutationEvent
.
h
"
#
include
"
mozilla
/
ServoDeclarationBlock
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDOMMutationEvent
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsNodeUtils
.
h
"
#
include
"
nsWrapperCacheInlines
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
ActiveLayerTracker
.
h
"
using
namespace
mozilla
;
nsDOMCSSAttributeDeclaration
:
:
nsDOMCSSAttributeDeclaration
(
dom
:
:
Element
*
aElement
bool
aIsSMILOverride
)
:
mElement
(
aElement
)
mIsSMILOverride
(
aIsSMILOverride
)
{
NS_ASSERTION
(
aElement
"
Inline
style
for
a
NULL
element
?
"
)
;
}
nsDOMCSSAttributeDeclaration
:
:
~
nsDOMCSSAttributeDeclaration
(
)
{
}
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
nsDOMCSSAttributeDeclaration
mElement
)
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_BEGIN
(
nsDOMCSSAttributeDeclaration
)
if
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkip
(
tmp
-
>
mElement
true
)
)
{
if
(
tmp
-
>
PreservingWrapper
(
)
)
{
tmp
-
>
MarkWrapperLive
(
)
;
}
return
true
;
}
return
tmp
-
>
HasKnownLiveWrapper
(
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_BEGIN
(
nsDOMCSSAttributeDeclaration
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
|
|
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkipInCC
(
tmp
-
>
mElement
)
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_IN_CC_END
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_BEGIN
(
nsDOMCSSAttributeDeclaration
)
return
tmp
-
>
HasKnownLiveWrapper
(
)
|
|
(
tmp
-
>
mElement
&
&
Element
:
:
CanSkipThis
(
tmp
-
>
mElement
)
)
;
NS_IMPL_CYCLE_COLLECTION_CAN_SKIP_THIS_END
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
nsDOMCSSAttributeDeclaration
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_IMPL_QUERY_TAIL_INHERITING
(
nsDOMCSSDeclaration
)
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
nsDOMCSSAttributeDeclaration
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
nsDOMCSSAttributeDeclaration
)
nsresult
nsDOMCSSAttributeDeclaration
:
:
SetCSSDeclaration
(
DeclarationBlock
*
aDecl
)
{
NS_ASSERTION
(
mElement
"
Must
have
Element
to
set
the
declaration
!
"
)
;
aDecl
-
>
SetDirty
(
)
;
return
mIsSMILOverride
?
mElement
-
>
SetSMILOverrideStyleDeclaration
(
aDecl
true
)
:
mElement
-
>
SetInlineStyleDeclaration
(
aDecl
nullptr
true
)
;
}
nsIDocument
*
nsDOMCSSAttributeDeclaration
:
:
DocToUpdate
(
)
{
return
mElement
-
>
OwnerDoc
(
)
;
}
DeclarationBlock
*
nsDOMCSSAttributeDeclaration
:
:
GetCSSDeclaration
(
Operation
aOperation
)
{
if
(
!
mElement
)
return
nullptr
;
DeclarationBlock
*
declaration
;
if
(
mIsSMILOverride
)
{
declaration
=
mElement
-
>
GetSMILOverrideStyleDeclaration
(
)
;
}
else
{
declaration
=
mElement
-
>
GetInlineStyleDeclaration
(
)
;
}
if
(
!
mIsSMILOverride
&
&
(
(
aOperation
=
=
eOperation_Modify
)
|
|
(
aOperation
=
=
eOperation_RemoveProperty
&
&
declaration
)
)
)
{
nsNodeUtils
:
:
AttributeWillChange
(
mElement
kNameSpaceID_None
nsGkAtoms
:
:
style
nsIDOMMutationEvent
:
:
MODIFICATION
nullptr
)
;
}
if
(
declaration
)
{
if
(
aOperation
!
=
eOperation_Read
&
&
nsContentUtils
:
:
HasMutationListeners
(
mElement
NS_EVENT_BITS_MUTATION_ATTRMODIFIED
mElement
)
)
{
declaration
-
>
SetImmutable
(
)
;
}
return
declaration
;
}
if
(
aOperation
!
=
eOperation_Modify
)
{
return
nullptr
;
}
RefPtr
<
DeclarationBlock
>
decl
;
if
(
mElement
-
>
IsStyledByServo
(
)
)
{
decl
=
new
ServoDeclarationBlock
(
)
;
}
else
{
decl
=
new
css
:
:
Declaration
(
)
;
decl
-
>
AsGecko
(
)
-
>
InitializeEmpty
(
)
;
}
nsresult
rv
;
if
(
mIsSMILOverride
)
{
rv
=
mElement
-
>
SetSMILOverrideStyleDeclaration
(
decl
false
)
;
}
else
{
rv
=
mElement
-
>
SetInlineStyleDeclaration
(
decl
nullptr
false
)
;
}
if
(
NS_FAILED
(
rv
)
)
{
return
nullptr
;
}
return
decl
;
}
void
nsDOMCSSAttributeDeclaration
:
:
GetCSSParsingEnvironment
(
CSSParsingEnvironment
&
aCSSParseEnv
)
{
NS_ASSERTION
(
mElement
"
Something
is
severely
broken
-
-
there
should
be
an
Element
here
!
"
)
;
nsIDocument
*
doc
=
mElement
-
>
OwnerDoc
(
)
;
aCSSParseEnv
.
mSheetURI
=
doc
-
>
GetDocumentURI
(
)
;
aCSSParseEnv
.
mBaseURI
=
mElement
-
>
GetBaseURIForStyleAttr
(
)
;
aCSSParseEnv
.
mPrincipal
=
mElement
-
>
NodePrincipal
(
)
;
aCSSParseEnv
.
mCSSLoader
=
doc
-
>
CSSLoader
(
)
;
}
nsDOMCSSDeclaration
:
:
ServoCSSParsingEnvironment
nsDOMCSSAttributeDeclaration
:
:
GetServoCSSParsingEnvironment
(
)
const
{
return
{
mElement
-
>
GetURLDataForStyleAttr
(
)
mElement
-
>
OwnerDoc
(
)
-
>
GetCompatibilityMode
(
)
mElement
-
>
OwnerDoc
(
)
-
>
CSSLoader
(
)
}
;
}
NS_IMETHODIMP
nsDOMCSSAttributeDeclaration
:
:
GetParentRule
(
nsIDOMCSSRule
*
*
aParent
)
{
NS_ENSURE_ARG_POINTER
(
aParent
)
;
*
aParent
=
nullptr
;
return
NS_OK
;
}
nsINode
*
nsDOMCSSAttributeDeclaration
:
:
GetParentObject
(
)
{
return
mElement
;
}
NS_IMETHODIMP
nsDOMCSSAttributeDeclaration
:
:
SetPropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsAString
&
aValue
)
{
if
(
aPropID
=
=
eCSSProperty_opacity
|
|
aPropID
=
=
eCSSProperty_transform
|
|
aPropID
=
=
eCSSProperty_left
|
|
aPropID
=
=
eCSSProperty_top
|
|
aPropID
=
=
eCSSProperty_right
|
|
aPropID
=
=
eCSSProperty_bottom
|
|
aPropID
=
=
eCSSProperty_background_position_x
|
|
aPropID
=
=
eCSSProperty_background_position_y
|
|
aPropID
=
=
eCSSProperty_background_position
)
{
nsIFrame
*
frame
=
mElement
-
>
GetPrimaryFrame
(
)
;
if
(
frame
)
{
ActiveLayerTracker
:
:
NotifyInlineStyleRuleModified
(
frame
aPropID
aValue
this
)
;
}
}
return
nsDOMCSSDeclaration
:
:
SetPropertyValue
(
aPropID
aValue
)
;
}
