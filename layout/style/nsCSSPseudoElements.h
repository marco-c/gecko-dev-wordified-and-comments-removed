#
ifndef
nsCSSPseudoElements_h___
#
define
nsCSSPseudoElements_h___
#
include
"
nsIAtom
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
define
CSS_PSEUDO_ELEMENT_IS_CSS2
(
1
<
<
0
)
#
define
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
(
1
<
<
1
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
(
1
<
<
2
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
(
1
<
<
3
)
#
define
CSS_PSEUDO_ELEMENT_UA_SHEET_ONLY
(
1
<
<
4
)
namespace
mozilla
{
typedef
uint8_t
CSSPseudoElementTypeBase
;
enum
class
CSSPseudoElementType
:
CSSPseudoElementTypeBase
{
#
define
CSS_PSEUDO_ELEMENT
(
_name
_value_
_flags
)
\
_name
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
Count
AnonBox
=
Count
#
ifdef
MOZ_XUL
XULTree
#
endif
NotPseudo
MAX
}
;
}
class
nsICSSPseudoElement
:
public
nsIAtom
{
}
;
class
nsCSSPseudoElements
{
typedef
mozilla
:
:
CSSPseudoElementType
Type
;
typedef
mozilla
:
:
CSSEnabledState
EnabledState
;
public
:
static
void
AddRefAtoms
(
)
;
static
bool
IsPseudoElement
(
nsIAtom
*
aAtom
)
;
static
bool
IsCSS2PseudoElement
(
nsIAtom
*
aAtom
)
;
#
define
CSS_PSEUDO_ELEMENT
(
_name
_value
_flags
)
\
static
nsICSSPseudoElement
*
_name
;
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
static
Type
GetPseudoType
(
nsIAtom
*
aAtom
EnabledState
aEnabledState
)
;
static
nsIAtom
*
GetPseudoAtom
(
Type
aType
)
;
static
bool
PseudoElementContainsElements
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
)
;
}
static
bool
PseudoElementSupportsStyleAttribute
(
const
Type
aType
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
)
;
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
)
;
}
static
bool
PseudoElementSupportsUserActionState
(
const
Type
aType
)
;
static
bool
IsEnabled
(
Type
aType
EnabledState
aEnabledState
)
{
return
!
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_UA_SHEET_ONLY
)
|
|
(
aEnabledState
&
EnabledState
:
:
eInUASheets
)
;
}
private
:
static
bool
PseudoElementHasFlags
(
const
Type
aType
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
)
;
return
(
kPseudoElementFlags
[
size_t
(
aType
)
]
&
aFlags
)
=
=
aFlags
;
}
static
const
uint32_t
kPseudoElementFlags
[
Type
:
:
Count
]
;
}
;
#
endif
