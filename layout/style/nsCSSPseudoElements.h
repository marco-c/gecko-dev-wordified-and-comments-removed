#
ifndef
nsCSSPseudoElements_h___
#
define
nsCSSPseudoElements_h___
#
include
"
nsAtom
.
h
"
#
include
"
nsStaticAtom
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
include
"
mozilla
/
Compiler
.
h
"
#
define
CSS_PSEUDO_ELEMENT_IS_CSS2
(
1
<
<
0
)
#
define
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
(
1
<
<
1
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
(
1
<
<
2
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
(
1
<
<
3
)
#
define
CSS_PSEUDO_ELEMENT_UA_SHEET_ONLY
(
1
<
<
4
)
#
define
CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC
(
1
<
<
5
)
#
define
CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM
(
1
<
<
6
)
namespace
mozilla
{
typedef
uint8_t
CSSPseudoElementTypeBase
;
enum
class
CSSPseudoElementType
:
CSSPseudoElementTypeBase
{
#
define
CSS_PSEUDO_ELEMENT
(
_name
_value
_flags
)
\
_name
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
Count
InheritingAnonBox
=
Count
NonInheritingAnonBox
#
ifdef
MOZ_XUL
XULTree
#
endif
NotPseudo
MAX
}
;
}
class
nsICSSPseudoElement
:
public
nsAtom
{
}
;
class
nsCSSPseudoElements
{
typedef
mozilla
:
:
CSSPseudoElementType
Type
;
typedef
mozilla
:
:
CSSEnabledState
EnabledState
;
public
:
static
void
AddRefAtoms
(
)
;
static
bool
IsPseudoElement
(
nsAtom
*
aAtom
)
;
static
bool
IsCSS2PseudoElement
(
nsAtom
*
aAtom
)
;
static
const
size_t
kEagerPseudoCount
=
4
;
static
bool
IsEagerlyCascadedInServo
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_CSS2
)
;
}
#
define
CSS_PSEUDO_ELEMENT
(
_name
_value
_flags
)
\
NS_STATIC_ATOM_SUBCLASS_DECL
(
nsICSSPseudoElement
_name
)
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
static
Type
GetPseudoType
(
nsAtom
*
aAtom
EnabledState
aEnabledState
)
;
static
nsAtom
*
GetPseudoAtom
(
Type
aType
)
;
static
already_AddRefed
<
nsAtom
>
GetPseudoAtom
(
const
nsAString
&
aPseudoElement
)
;
static
bool
PseudoElementContainsElements
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
)
;
}
static
bool
PseudoElementSupportsStyleAttribute
(
const
Type
aType
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
)
;
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
)
;
}
static
bool
PseudoElementSupportsUserActionState
(
const
Type
aType
)
;
static
bool
PseudoElementIsJSCreatedNAC
(
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC
)
;
}
static
bool
PseudoElementIsFlexOrGridItem
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM
)
;
}
static
bool
IsEnabled
(
Type
aType
EnabledState
aEnabledState
)
{
return
!
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_UA_SHEET_ONLY
)
|
|
(
aEnabledState
&
EnabledState
:
:
eInUASheets
)
;
}
private
:
#
if
defined
(
ANDROID
)
&
&
defined
(
__i386__
)
&
&
defined
(
__GNUC__
)
&
&
\
!
defined
(
__clang__
)
#
if
(
MOZ_GCC_VERSION_AT_LEAST
(
4
8
0
)
&
&
MOZ_GCC_VERSION_AT_MOST
(
4
8
4
)
)
|
|
\
(
MOZ_GCC_VERSION_AT_LEAST
(
4
9
0
)
&
&
MOZ_GCC_VERSION_AT_MOST
(
4
9
2
)
)
__attribute__
(
(
noinline
)
)
#
endif
#
endif
static
bool
PseudoElementHasFlags
(
const
Type
aType
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
Count
)
;
return
(
kPseudoElementFlags
[
size_t
(
aType
)
]
&
aFlags
)
=
=
aFlags
;
}
static
const
uint32_t
kPseudoElementFlags
[
size_t
(
Type
:
:
Count
)
]
;
}
;
#
endif
