#
ifndef
nsCSSPseudoElements_h___
#
define
nsCSSPseudoElements_h___
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
include
"
mozilla
/
PseudoStyleType
.
h
"
#
include
"
mozilla
/
StaticPrefs_dom
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
define
CSS_PSEUDO_ELEMENT_IS_CSS2
(
1
<
<
0
)
#
define
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
(
1
<
<
1
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
(
1
<
<
2
)
#
define
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
(
1
<
<
3
)
#
define
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS
(
1
<
<
4
)
#
define
CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME
(
1
<
<
5
)
#
define
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME
\
(
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS
|
\
CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME
)
#
define
CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC
(
1
<
<
6
)
#
define
CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM
(
1
<
<
7
)
class
nsCSSPseudoElements
{
using
EnabledState
=
mozilla
:
:
CSSEnabledState
;
using
Request
=
mozilla
:
:
PseudoStyleRequest
;
using
Type
=
mozilla
:
:
PseudoStyleType
;
public
:
static
bool
IsEagerlyCascadedInServo
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_CSS2
)
;
}
public
:
#
ifdef
DEBUG
static
void
AssertAtoms
(
)
;
#
endif
#
define
CSS_PSEUDO_ELEMENT
(
name_
value_
flags_
)
\
static
nsCSSPseudoElementStaticAtom
*
name_
(
)
{
\
return
const_cast
<
nsCSSPseudoElementStaticAtom
*
>
(
\
static_cast
<
const
nsCSSPseudoElementStaticAtom
*
>
(
\
nsGkAtoms
:
:
PseudoElement_
#
#
name_
)
)
;
\
}
#
include
"
nsCSSPseudoElementList
.
h
"
#
undef
CSS_PSEUDO_ELEMENT
static
mozilla
:
:
Maybe
<
Request
>
ParsePseudoElement
(
const
nsAString
&
aPseudoElement
EnabledState
=
EnabledState
:
:
ForAllContent
)
;
static
nsAtom
*
GetPseudoAtom
(
Type
aType
)
;
static
bool
PseudoElementContainsElements
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_CONTAINS_ELEMENTS
)
;
}
static
bool
PseudoElementSupportsStyleAttribute
(
const
Type
aType
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
CSSPseudoElementsEnd
)
;
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_SUPPORTS_STYLE_ATTRIBUTE
)
;
}
static
bool
PseudoElementSupportsUserActionState
(
const
Type
aType
)
;
static
bool
PseudoElementIsJSCreatedNAC
(
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_JS_CREATED_NAC
)
;
}
static
bool
PseudoElementIsFlexOrGridItem
(
const
Type
aType
)
{
return
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_IS_FLEX_OR_GRID_ITEM
)
;
}
static
bool
EnabledInContent
(
Type
aType
)
{
switch
(
aType
)
{
case
Type
:
:
highlight
:
return
mozilla
:
:
StaticPrefs
:
:
dom_customHighlightAPI_enabled
(
)
;
case
Type
:
:
targetText
:
return
mozilla
:
:
StaticPrefs
:
:
dom_text_fragments_enabled
(
)
;
case
Type
:
:
sliderTrack
:
case
Type
:
:
sliderThumb
:
case
Type
:
:
sliderFill
:
return
mozilla
:
:
StaticPrefs
:
:
layout_css_modern_range_pseudos_enabled
(
)
;
case
Type
:
:
viewTransition
:
case
Type
:
:
viewTransitionGroup
:
case
Type
:
:
viewTransitionImagePair
:
case
Type
:
:
viewTransitionOld
:
case
Type
:
:
viewTransitionNew
:
return
mozilla
:
:
StaticPrefs
:
:
dom_viewTransitions_enabled
(
)
;
default
:
return
!
PseudoElementHasAnyFlag
(
aType
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS_AND_CHROME
)
;
}
}
static
bool
IsEnabled
(
Type
aType
EnabledState
aEnabledState
)
{
if
(
EnabledInContent
(
aType
)
)
{
return
true
;
}
if
(
(
aEnabledState
&
EnabledState
:
:
InUASheets
)
&
&
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS
)
)
{
return
true
;
}
if
(
(
aEnabledState
&
EnabledState
:
:
InChrome
)
&
&
PseudoElementHasFlags
(
aType
CSS_PSEUDO_ELEMENT_ENABLED_IN_CHROME
)
)
{
return
true
;
}
return
false
;
}
static
nsString
PseudoRequestAsString
(
const
Request
&
aPseudoRequest
)
;
private
:
static
bool
PseudoElementHasFlags
(
const
Type
aType
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
CSSPseudoElementsEnd
)
;
return
(
kPseudoElementFlags
[
size_t
(
aType
)
]
&
aFlags
)
=
=
aFlags
;
}
static
bool
PseudoElementHasAnyFlag
(
const
Type
aType
uint32_t
aFlags
)
{
MOZ_ASSERT
(
aType
<
Type
:
:
CSSPseudoElementsEnd
)
;
return
(
kPseudoElementFlags
[
size_t
(
aType
)
]
&
aFlags
)
!
=
0
;
}
static
nsStaticAtom
*
GetAtomBase
(
)
;
static
const
uint32_t
kPseudoElementFlags
[
size_t
(
Type
:
:
CSSPseudoElementsEnd
)
]
;
}
;
#
endif
