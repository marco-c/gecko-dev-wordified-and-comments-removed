#
ifndef
mozilla_GlobalStyleSheetCache_h__
#
define
mozilla_GlobalStyleSheetCache_h__
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
PreferenceSheet
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
mozilla
/
UserAgentStyleSheetID
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
class
nsIFile
;
class
nsIURI
;
namespace
mozilla
{
class
CSSStyleSheet
;
}
namespace
mozilla
{
namespace
css
{
enum
FailureAction
{
eCrash
=
0
eLogToConsole
}
;
}
class
GlobalStyleSheetCache
final
:
public
nsIObserver
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIMEMORYREPORTER
static
GlobalStyleSheetCache
*
Singleton
(
)
;
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
\
NotNull
<
StyleSheet
*
>
identifier_
#
#
Sheet
(
)
;
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
StyleSheet
*
GetUserContentSheet
(
)
;
StyleSheet
*
GetUserChromeSheet
(
)
;
static
void
Shutdown
(
)
;
static
void
SetUserContentCSSURL
(
nsIURI
*
aURI
)
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
static
void
SetSharedMemory
(
mozilla
:
:
ipc
:
:
SharedMemory
:
:
Handle
aHandle
uintptr_t
aAddress
)
;
mozilla
:
:
ipc
:
:
SharedMemoryHandle
CloneHandle
(
)
;
uintptr_t
GetSharedMemoryAddress
(
)
{
return
sSharedMemory
.
IsEmpty
(
)
?
0
:
uintptr_t
(
sSharedMemory
.
data
(
)
)
;
}
static
constexpr
size_t
kSharedMemorySize
=
1024
*
450
;
private
:
struct
Header
{
static
constexpr
uint32_t
kMagic
=
0x55415353
;
uint32_t
mMagic
;
const
StyleLockedCssRules
*
mSheets
[
size_t
(
UserAgentStyleSheetID
:
:
Count
)
]
;
uint8_t
mBuffer
[
1
]
;
}
;
GlobalStyleSheetCache
(
)
;
~
GlobalStyleSheetCache
(
)
;
void
InitFromProfile
(
)
;
void
InitSharedSheetsInParent
(
)
;
void
InitMemoryReporter
(
)
;
RefPtr
<
StyleSheet
>
LoadSheetURL
(
const
char
*
aURL
css
:
:
SheetParsingMode
aParsingMode
css
:
:
FailureAction
aFailureAction
)
;
RefPtr
<
StyleSheet
>
LoadSheetFile
(
nsIFile
*
aFile
css
:
:
SheetParsingMode
aParsingMode
)
;
RefPtr
<
StyleSheet
>
LoadSheet
(
nsIURI
*
aURI
css
:
:
SheetParsingMode
aParsingMode
css
:
:
FailureAction
aFailureAction
)
;
void
LoadSheetFromSharedMemory
(
const
char
*
aURL
RefPtr
<
StyleSheet
>
*
aSheet
css
:
:
SheetParsingMode
Header
*
UserAgentStyleSheetID
)
;
static
StaticRefPtr
<
GlobalStyleSheetCache
>
gStyleCache
;
static
StaticRefPtr
<
css
:
:
Loader
>
gCSSLoader
;
static
StaticRefPtr
<
nsIURI
>
gUserContentSheetURL
;
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
\
RefPtr
<
StyleSheet
>
m
#
#
identifier_
#
#
Sheet
;
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
RefPtr
<
StyleSheet
>
mUserChromeSheet
;
RefPtr
<
StyleSheet
>
mUserContentSheet
;
static
Span
<
uint8_t
>
sSharedMemory
;
static
size_t
sUsedSharedMemory
;
}
;
}
#
endif
