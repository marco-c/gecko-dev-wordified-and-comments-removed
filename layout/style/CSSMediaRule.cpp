#
include
"
mozilla
/
dom
/
CSSMediaRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSMediaRuleBinding
.
h
"
#
include
"
mozilla
/
dom
/
MediaList
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
namespace
mozilla
{
namespace
dom
{
CSSMediaRule
:
:
CSSMediaRule
(
RefPtr
<
RawServoMediaRule
>
aRawRule
StyleSheet
*
aSheet
css
:
:
Rule
*
aParentRule
uint32_t
aLine
uint32_t
aColumn
)
:
ConditionRule
(
Servo_MediaRule_GetRules
(
aRawRule
)
.
Consume
(
)
aSheet
aParentRule
aLine
aColumn
)
mRawRule
(
std
:
:
move
(
aRawRule
)
)
{
}
CSSMediaRule
:
:
~
CSSMediaRule
(
)
{
if
(
mMediaList
)
{
mMediaList
-
>
SetStyleSheet
(
nullptr
)
;
}
}
NS_IMPL_ADDREF_INHERITED
(
CSSMediaRule
css
:
:
ConditionRule
)
NS_IMPL_RELEASE_INHERITED
(
CSSMediaRule
css
:
:
ConditionRule
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CSSMediaRule
)
NS_INTERFACE_MAP_END_INHERITING
(
css
:
:
ConditionRule
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
CSSMediaRule
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN_INHERITED
(
CSSMediaRule
css
:
:
ConditionRule
)
if
(
tmp
-
>
mMediaList
)
{
tmp
-
>
mMediaList
-
>
SetStyleSheet
(
nullptr
)
;
tmp
-
>
mMediaList
=
nullptr
;
}
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN_INHERITED
(
CSSMediaRule
css
:
:
ConditionRule
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMediaList
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
void
CSSMediaRule
:
:
DropSheetReference
(
)
{
if
(
mMediaList
)
{
mMediaList
-
>
SetStyleSheet
(
nullptr
)
;
}
ConditionRule
:
:
DropSheetReference
(
)
;
}
void
CSSMediaRule
:
:
SetRawAfterClone
(
RefPtr
<
RawServoMediaRule
>
aRaw
)
{
mRawRule
=
std
:
:
move
(
aRaw
)
;
if
(
mMediaList
)
{
mMediaList
-
>
SetRawAfterClone
(
Servo_MediaRule_GetMedia
(
mRawRule
)
.
Consume
(
)
)
;
}
css
:
:
ConditionRule
:
:
SetRawAfterClone
(
Servo_MediaRule_GetRules
(
mRawRule
)
.
Consume
(
)
)
;
}
#
ifdef
DEBUG
void
CSSMediaRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
i
=
0
;
i
<
aIndent
;
i
+
+
)
{
str
.
AppendLiteral
(
"
"
)
;
}
Servo_MediaRule_Debug
(
mRawRule
&
str
)
;
fprintf_stderr
(
out
"
%
s
\
n
"
str
.
get
(
)
)
;
}
#
endif
void
CSSMediaRule
:
:
GetConditionText
(
nsACString
&
aConditionText
)
{
Media
(
)
-
>
GetMediaText
(
aConditionText
)
;
}
void
CSSMediaRule
:
:
SetConditionText
(
const
nsACString
&
aConditionText
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
)
{
return
;
}
Media
(
)
-
>
SetMediaText
(
aConditionText
)
;
}
void
CSSMediaRule
:
:
GetCssText
(
nsACString
&
aCssText
)
const
{
Servo_MediaRule_GetCssText
(
mRawRule
&
aCssText
)
;
}
dom
:
:
MediaList
*
CSSMediaRule
:
:
Media
(
)
{
if
(
!
mMediaList
)
{
mMediaList
=
new
MediaList
(
Servo_MediaRule_GetMedia
(
mRawRule
)
.
Consume
(
)
)
;
mMediaList
-
>
SetStyleSheet
(
GetStyleSheet
(
)
)
;
}
return
mMediaList
;
}
size_t
CSSMediaRule
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
JSObject
*
CSSMediaRule
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSMediaRule_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
}
