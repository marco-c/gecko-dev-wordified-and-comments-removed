#
include
"
mozilla
/
dom
/
CSSVariableReferenceValue
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
CSSVariableReferenceValueBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
:
:
dom
{
CSSVariableReferenceValue
:
:
CSSVariableReferenceValue
(
nsCOMPtr
<
nsISupports
>
aParent
)
:
mParent
(
std
:
:
move
(
aParent
)
)
{
MOZ_ASSERT
(
mParent
)
;
}
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CSSVariableReferenceValue
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CSSVariableReferenceValue
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CSSVariableReferenceValue
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CSSVariableReferenceValue
mParent
)
nsISupports
*
CSSVariableReferenceValue
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
CSSVariableReferenceValue
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSVariableReferenceValue_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CSSVariableReferenceValue
>
CSSVariableReferenceValue
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aVariable
CSSUnparsedValue
*
aFallback
ErrorResult
&
aRv
)
{
return
MakeAndAddRef
<
CSSVariableReferenceValue
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
void
CSSVariableReferenceValue
:
:
GetVariable
(
nsCString
&
aRetVal
)
const
{
}
void
CSSVariableReferenceValue
:
:
SetVariable
(
const
nsACString
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
CSSUnparsedValue
*
CSSVariableReferenceValue
:
:
GetFallback
(
)
const
{
return
nullptr
;
}
}
