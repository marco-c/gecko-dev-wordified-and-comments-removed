#
include
"
mozilla
/
dom
/
CSSKeywordValue
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
CSSKeywordValueBinding
.
h
"
namespace
mozilla
:
:
dom
{
CSSKeywordValue
:
:
CSSKeywordValue
(
nsCOMPtr
<
nsISupports
>
aParent
const
nsACString
&
aValue
)
:
CSSStyleValue
(
std
:
:
move
(
aParent
)
ValueType
:
:
Keyword
)
mValue
(
aValue
)
{
}
JSObject
*
CSSKeywordValue
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSKeywordValue_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CSSKeywordValue
>
CSSKeywordValue
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aValue
ErrorResult
&
aRv
)
{
if
(
aValue
.
IsEmpty
(
)
)
{
aRv
.
ThrowTypeError
(
"
CSSKeywordValue
does
not
support
empty
strings
"
)
;
return
nullptr
;
}
return
MakeAndAddRef
<
CSSKeywordValue
>
(
aGlobal
.
GetAsSupports
(
)
aValue
)
;
}
void
CSSKeywordValue
:
:
GetValue
(
nsCString
&
aRetVal
)
const
{
aRetVal
=
mValue
;
}
void
CSSKeywordValue
:
:
SetValue
(
const
nsACString
&
aArg
ErrorResult
&
aRv
)
{
if
(
aArg
.
IsEmpty
(
)
)
{
aRv
.
ThrowTypeError
(
"
CSSKeywordValue
does
not
support
empty
strings
"
)
;
return
;
}
mValue
=
aArg
;
}
CSSKeywordValue
&
CSSStyleValue
:
:
GetAsCSSKeywordValue
(
)
{
MOZ_DIAGNOSTIC_ASSERT
(
mValueType
=
=
ValueType
:
:
Keyword
)
;
return
*
static_cast
<
CSSKeywordValue
*
>
(
this
)
;
}
}
