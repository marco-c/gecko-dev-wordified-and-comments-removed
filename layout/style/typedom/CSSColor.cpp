#
include
"
mozilla
/
dom
/
CSSColor
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
CSSColorBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSColorValueBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSKeywordValueBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSNumericValueBinding
.
h
"
#
include
"
nsReadableUtils
.
h
"
namespace
mozilla
:
:
dom
{
CSSColor
:
:
CSSColor
(
nsCOMPtr
<
nsISupports
>
aParent
)
:
CSSColorValue
(
std
:
:
move
(
aParent
)
)
{
}
JSObject
*
CSSColor
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSColor_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CSSColor
>
CSSColor
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
CSSKeywordish
&
aColorSpace
const
Sequence
<
OwningCSSColorPercent
>
&
aChannels
const
CSSNumberish
&
aAlpha
ErrorResult
&
aRv
)
{
return
MakeAndAddRef
<
CSSColor
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
void
CSSColor
:
:
GetColorSpace
(
OwningCSSKeywordish
&
aRetVal
)
const
{
aRetVal
.
SetAsUTF8String
(
)
=
EmptyCString
(
)
;
}
void
CSSColor
:
:
SetColorSpace
(
const
CSSKeywordish
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSColor
:
:
OnSetChannels
(
CSSNumericValue
&
aValue
uint32_t
aIndex
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSColor
:
:
OnDeleteChannels
(
CSSNumericValue
&
aValue
uint32_t
aIndex
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSColor
:
:
GetAlpha
(
OwningCSSNumberish
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSColor
:
:
SetAlpha
(
const
CSSNumberish
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
