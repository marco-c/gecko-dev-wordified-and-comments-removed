#
include
"
mozilla
/
dom
/
CSSRotate
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
CSSNumericValueBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSRotateBinding
.
h
"
namespace
mozilla
:
:
dom
{
CSSRotate
:
:
CSSRotate
(
nsCOMPtr
<
nsISupports
>
aParent
)
:
CSSTransformComponent
(
std
:
:
move
(
aParent
)
)
{
}
JSObject
*
CSSRotate
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSRotate_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CSSRotate
>
CSSRotate
:
:
Constructor
(
const
GlobalObject
&
aGlobal
CSSNumericValue
&
aAngle
ErrorResult
&
aRv
)
{
return
MakeAndAddRef
<
CSSRotate
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
already_AddRefed
<
CSSRotate
>
CSSRotate
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
CSSNumberish
&
aX
const
CSSNumberish
&
aY
const
CSSNumberish
&
aZ
CSSNumericValue
&
aAngle
ErrorResult
&
aRv
)
{
return
MakeAndAddRef
<
CSSRotate
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
void
CSSRotate
:
:
GetX
(
OwningCSSNumberish
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSRotate
:
:
SetX
(
const
CSSNumberish
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSRotate
:
:
GetY
(
OwningCSSNumberish
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSRotate
:
:
SetY
(
const
CSSNumberish
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSRotate
:
:
GetZ
(
OwningCSSNumberish
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSRotate
:
:
SetZ
(
const
CSSNumberish
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
CSSNumericValue
*
CSSRotate
:
:
GetAngle
(
ErrorResult
&
aRv
)
const
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
void
CSSRotate
:
:
SetAngle
(
CSSNumericValue
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
