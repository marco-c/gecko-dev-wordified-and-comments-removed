#
ifndef
LAYOUT_STYLE_TYPEDOM_CSSOKLCH_H_
#
define
LAYOUT_STYLE_TYPEDOM_CSSOKLCH_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
CSSColorValue
.
h
"
#
include
"
mozilla
/
dom
/
CSSColorValueBindingFwd
.
h
"
template
<
class
T
>
struct
already_AddRefed
;
template
<
class
T
>
class
nsCOMPtr
;
class
nsISupports
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
class
CSSOKLCH
final
:
public
CSSColorValue
{
public
:
explicit
CSSOKLCH
(
nsCOMPtr
<
nsISupports
>
aParent
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
CSSOKLCH
>
Constructor
(
const
GlobalObject
&
aGlobal
const
CSSColorPercent
&
aL
const
CSSColorPercent
&
aC
const
CSSColorAngle
&
aH
const
CSSColorPercent
&
aAlpha
ErrorResult
&
aRv
)
;
void
GetL
(
OwningCSSColorPercent
&
aRetVal
)
const
;
void
SetL
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
;
void
GetC
(
OwningCSSColorPercent
&
aRetVal
)
const
;
void
SetC
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
;
void
GetH
(
OwningCSSColorAngle
&
aRetVal
)
const
;
void
SetH
(
const
CSSColorAngle
&
aArg
ErrorResult
&
aRv
)
;
void
GetAlpha
(
OwningCSSColorPercent
&
aRetVal
)
const
;
void
SetAlpha
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
;
private
:
virtual
~
CSSOKLCH
(
)
=
default
;
}
;
}
}
#
endif
