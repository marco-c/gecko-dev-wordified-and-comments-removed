#
ifndef
LAYOUT_STYLE_TYPEDOM_CSSNUMERICVALUE_H_
#
define
LAYOUT_STYLE_TYPEDOM_CSSNUMERICVALUE_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
CSSMathSumBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
CSSNumericValueBindingFwd
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleValue
.
h
"
#
include
"
mozilla
/
dom
/
CSSUnitValueBindingFwd
.
h
"
#
include
"
nsStringFwd
.
h
"
template
<
class
T
>
struct
already_AddRefed
;
template
<
class
T
>
class
nsCOMPtr
;
class
nsISupports
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
template
<
typename
T
>
class
Sequence
;
class
CSSNumericValue
:
public
CSSStyleValue
{
public
:
explicit
CSSNumericValue
(
nsCOMPtr
<
nsISupports
>
aParent
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
already_AddRefed
<
CSSNumericValue
>
Add
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSNumericValue
>
Sub
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSNumericValue
>
Mul
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSNumericValue
>
Div
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSNumericValue
>
Min
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSNumericValue
>
Max
(
const
Sequence
<
OwningCSSNumberish
>
&
aValues
ErrorResult
&
aRv
)
;
bool
Equals
(
const
Sequence
<
OwningCSSNumberish
>
&
aValue
)
;
already_AddRefed
<
CSSUnitValue
>
To
(
const
nsACString
&
aUnit
ErrorResult
&
aRv
)
;
already_AddRefed
<
CSSMathSum
>
ToSum
(
const
Sequence
<
nsCString
>
&
aUnits
ErrorResult
&
aRv
)
;
void
Type
(
CSSNumericType
&
aRetVal
)
;
static
already_AddRefed
<
CSSNumericValue
>
Parse
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aCssText
ErrorResult
&
aRv
)
;
protected
:
virtual
~
CSSNumericValue
(
)
=
default
;
}
;
}
}
#
endif
