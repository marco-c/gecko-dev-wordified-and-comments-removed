#
ifndef
LAYOUT_STYLE_TYPEDOM_CSSVARIABLEREFERENCEVALUE_H_
#
define
LAYOUT_STYLE_TYPEDOM_CSSVARIABLEREFERENCEVALUE_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
mozilla
/
dom
/
CSSUnparsedValueBindingFwd
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsWrapperCache
.
h
"
template
<
class
T
>
struct
already_AddRefed
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
class
CSSVariableReferenceValue
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
explicit
CSSVariableReferenceValue
(
nsCOMPtr
<
nsISupports
>
aParent
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
CSSVariableReferenceValue
)
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
static
already_AddRefed
<
CSSVariableReferenceValue
>
Constructor
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aVariable
CSSUnparsedValue
*
aFallback
ErrorResult
&
aRv
)
;
void
GetVariable
(
nsCString
&
aRetVal
)
const
;
void
SetVariable
(
const
nsACString
&
aArg
ErrorResult
&
aRv
)
;
CSSUnparsedValue
*
GetFallback
(
)
const
;
private
:
virtual
~
CSSVariableReferenceValue
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mParent
;
}
;
}
}
#
endif
