#
include
"
mozilla
/
dom
/
CSSLCH
.
h
"
#
include
"
mozilla
/
AlreadyAddRefed
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
dom
/
CSSColorValueBinding
.
h
"
#
include
"
mozilla
/
dom
/
CSSLCHBinding
.
h
"
namespace
mozilla
:
:
dom
{
CSSLCH
:
:
CSSLCH
(
nsCOMPtr
<
nsISupports
>
aParent
)
:
CSSColorValue
(
std
:
:
move
(
aParent
)
)
{
}
JSObject
*
CSSLCH
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSLCH_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
already_AddRefed
<
CSSLCH
>
CSSLCH
:
:
Constructor
(
const
GlobalObject
&
aGlobal
const
CSSColorPercent
&
aL
const
CSSColorPercent
&
aC
const
CSSColorAngle
&
aH
const
CSSColorPercent
&
aAlpha
ErrorResult
&
aRv
)
{
return
MakeAndAddRef
<
CSSLCH
>
(
aGlobal
.
GetAsSupports
(
)
)
;
}
void
CSSLCH
:
:
GetL
(
OwningCSSColorPercent
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSLCH
:
:
SetL
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSLCH
:
:
GetC
(
OwningCSSColorPercent
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSLCH
:
:
SetC
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSLCH
:
:
GetH
(
OwningCSSColorAngle
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSLCH
:
:
SetH
(
const
CSSColorAngle
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSLCH
:
:
GetAlpha
(
OwningCSSColorPercent
&
aRetVal
)
const
{
aRetVal
.
SetAsDouble
(
)
=
0
;
}
void
CSSLCH
:
:
SetAlpha
(
const
CSSColorPercent
&
aArg
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
}
