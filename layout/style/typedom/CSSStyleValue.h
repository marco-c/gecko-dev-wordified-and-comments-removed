#
ifndef
LAYOUT_STYLE_TYPEDOM_CSSSTYLEVALUE_H_
#
define
LAYOUT_STYLE_TYPEDOM_CSSSTYLEVALUE_H_
#
include
"
js
/
TypeDecls
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsISupportsImpl
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsWrapperCache
.
h
"
template
<
class
T
>
class
RefPtr
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
GlobalObject
;
class
CSSKeywordValue
;
class
CSSUnsupportedValue
;
class
CSSStyleValue
:
public
nsISupports
public
nsWrapperCache
{
public
:
enum
class
ValueType
{
Uninitialized
Unsupported
Keyword
}
;
explicit
CSSStyleValue
(
nsCOMPtr
<
nsISupports
>
aParent
)
;
CSSStyleValue
(
nsCOMPtr
<
nsISupports
>
aParent
ValueType
aValueType
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_WRAPPERCACHE_CLASS
(
CSSStyleValue
)
nsISupports
*
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
[
[
nodiscard
]
]
static
RefPtr
<
CSSStyleValue
>
Parse
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
const
nsACString
&
aCssText
ErrorResult
&
aRv
)
;
static
void
ParseAll
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
const
nsACString
&
aCssText
nsTArray
<
RefPtr
<
CSSStyleValue
>
>
&
aRetVal
ErrorResult
&
aRv
)
;
void
Stringify
(
nsAString
&
aRetVal
)
const
;
bool
IsCSSUnsupportedValue
(
)
const
;
CSSUnsupportedValue
&
GetAsCSSUnsupportedValue
(
)
;
bool
IsCSSKeywordValue
(
)
const
;
CSSKeywordValue
&
GetAsCSSKeywordValue
(
)
;
protected
:
virtual
~
CSSStyleValue
(
)
=
default
;
nsCOMPtr
<
nsISupports
>
mParent
;
const
ValueType
mValueType
;
}
;
}
}
#
endif
