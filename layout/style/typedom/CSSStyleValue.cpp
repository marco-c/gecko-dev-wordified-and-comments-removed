#
include
"
mozilla
/
dom
/
CSSStyleValue
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleValueBinding
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
namespace
mozilla
:
:
dom
{
CSSStyleValue
:
:
CSSStyleValue
(
nsCOMPtr
<
nsISupports
>
aParent
)
:
mParent
(
std
:
:
move
(
aParent
)
)
{
MOZ_ASSERT
(
mParent
)
;
}
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
CSSStyleValue
)
NS_IMPL_CYCLE_COLLECTING_RELEASE
(
CSSStyleValue
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
CSSStyleValue
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTION_WRAPPERCACHE
(
CSSStyleValue
mParent
)
nsISupports
*
CSSStyleValue
:
:
GetParentObject
(
)
const
{
return
mParent
;
}
JSObject
*
CSSStyleValue
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSStyleValue_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
RefPtr
<
CSSStyleValue
>
CSSStyleValue
:
:
Parse
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
const
nsACString
&
aCssText
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
return
nullptr
;
}
void
CSSStyleValue
:
:
ParseAll
(
const
GlobalObject
&
aGlobal
const
nsACString
&
aProperty
const
nsACString
&
aCssText
nsTArray
<
RefPtr
<
CSSStyleValue
>
>
&
aRetVal
ErrorResult
&
aRv
)
{
aRv
.
Throw
(
NS_ERROR_NOT_IMPLEMENTED
)
;
}
void
CSSStyleValue
:
:
Stringify
(
nsAString
&
aRetVal
)
const
{
}
}
