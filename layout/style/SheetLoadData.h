#
ifndef
mozilla_css_SheetLoadData_h
#
define
mozilla_css_SheetLoadData_h
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
PreloaderBase
.
h
"
#
include
"
mozilla
/
NotNull
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsIThreadInternal
.
h
"
#
include
"
nsProxyRelease
.
h
"
namespace
mozilla
{
class
StyleSheet
;
}
class
nsICSSLoaderObserver
;
class
nsINode
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsIReferrerInfo
;
struct
StyleUseCounters
;
namespace
mozilla
{
namespace
css
{
static_assert
(
eAuthorSheetFeatures
=
=
0
&
&
eUserSheetFeatures
=
=
1
&
&
eAgentSheetFeatures
=
=
2
"
sheet
parsing
mode
constants
won
'
t
fit
"
"
in
SheetLoadData
:
:
mParsingMode
"
)
;
class
SheetLoadData
final
:
public
PreloaderBase
public
nsIRunnable
public
nsIThreadObserver
{
using
MediaMatched
=
dom
:
:
LinkStyle
:
:
MediaMatched
;
using
IsAlternate
=
dom
:
:
LinkStyle
:
:
IsAlternate
;
using
IsPreload
=
Loader
:
:
IsPreload
;
using
UseSystemPrincipal
=
Loader
:
:
UseSystemPrincipal
;
protected
:
virtual
~
SheetLoadData
(
)
;
public
:
static
void
PrioritizeAsPreload
(
nsIChannel
*
aChannel
)
;
void
PrioritizeAsPreload
(
)
final
;
SheetLoadData
(
Loader
*
aLoader
const
nsAString
&
aTitle
nsIURI
*
aURI
StyleSheet
*
aSheet
bool
aSyncLoad
nsINode
*
aOwningNode
IsAlternate
aIsAlternate
MediaMatched
aMediaMatched
IsPreload
aIsPreload
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aTriggeringPrincipal
nsIReferrerInfo
*
aReferrerInfo
nsINode
*
aRequestingNode
)
;
SheetLoadData
(
Loader
*
aLoader
nsIURI
*
aURI
StyleSheet
*
aSheet
SheetLoadData
*
aParentData
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aTriggeringPrincipal
nsIReferrerInfo
*
aReferrerInfo
nsINode
*
aRequestingNode
)
;
SheetLoadData
(
Loader
*
aLoader
nsIURI
*
aURI
StyleSheet
*
aSheet
bool
aSyncLoad
UseSystemPrincipal
IsPreload
const
Encoding
*
aPreloadEncoding
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aTriggeringPrincipal
nsIReferrerInfo
*
aReferrerInfo
nsINode
*
aRequestingNode
)
;
nsIReferrerInfo
*
ReferrerInfo
(
)
const
{
return
mReferrerInfo
;
}
void
ScheduleLoadEventIfNeeded
(
)
;
NotNull
<
const
Encoding
*
>
DetermineNonBOMEncoding
(
const
nsACString
&
aSegment
nsIChannel
*
)
const
;
nsresult
VerifySheetReadyToParse
(
nsresult
aStatus
const
nsACString
&
aBytes1
const
nsACString
&
aBytes2
nsIChannel
*
aChannel
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIRUNNABLE
NS_DECL_NSITHREADOBSERVER
const
RefPtr
<
Loader
>
mLoader
;
const
nsString
mTitle
;
const
Encoding
*
mEncoding
;
nsCOMPtr
<
nsIURI
>
mURI
;
uint32_t
mLineNumber
;
const
RefPtr
<
StyleSheet
>
mSheet
;
RefPtr
<
SheetLoadData
>
mNext
;
const
RefPtr
<
SheetLoadData
>
mParentData
;
uint32_t
mExpirationTime
=
0
;
uint32_t
mPendingChildren
;
const
bool
mSyncLoad
:
1
;
const
bool
mIsNonDocumentSheet
:
1
;
bool
mIsLoading
:
1
;
bool
mIsBeingParsed
:
1
;
bool
mIsCancelled
:
1
;
bool
mMustNotify
:
1
;
const
bool
mWasAlternate
:
1
;
const
bool
mMediaMatched
:
1
;
const
bool
mUseSystemPrincipal
:
1
;
bool
mSheetAlreadyComplete
:
1
;
bool
mIsCrossOriginNoCORS
:
1
;
bool
mBlockResourceTiming
:
1
;
bool
mLoadFailed
:
1
;
const
IsPreload
mIsPreload
;
const
nsCOMPtr
<
nsINode
>
mOwningNode
;
const
nsCOMPtr
<
nsICSSLoaderObserver
>
mObserver
;
const
nsCOMPtr
<
nsIPrincipal
>
mTriggeringPrincipal
;
const
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
const
nsCOMPtr
<
nsINode
>
mRequestingNode
;
const
NotNull
<
const
Encoding
*
>
mGuessedEncoding
;
UniquePtr
<
StyleUseCounters
>
mUseCounters
;
const
nsCompatibility
mCompatMode
;
#
ifdef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
bool
mSheetCompleteCalled
=
false
;
bool
mIntentionallyDropped
=
false
;
#
endif
bool
ShouldDefer
(
)
const
{
return
mWasAlternate
|
|
!
mMediaMatched
;
}
void
SheetFinishedParsingAsync
(
)
{
MOZ_ASSERT
(
mIsBeingParsed
)
;
mIsBeingParsed
=
false
;
if
(
!
mPendingChildren
)
{
mLoader
-
>
SheetComplete
(
*
this
NS_OK
)
;
}
}
bool
IsLinkPreload
(
)
const
{
return
mIsPreload
=
=
IsPreload
:
:
FromLink
;
}
private
:
void
FireLoadEvent
(
nsIThreadInternal
*
aThread
)
;
}
;
using
SheetLoadDataHolder
=
nsMainThreadPtrHolder
<
SheetLoadData
>
;
}
}
inline
nsISupports
*
ToSupports
(
mozilla
:
:
css
:
:
SheetLoadData
*
p
)
{
return
NS_ISUPPORTS_CAST
(
nsIRunnable
*
p
)
;
}
#
endif
