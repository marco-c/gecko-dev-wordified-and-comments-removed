#
ifndef
mozilla_css_SheetLoadData_h
#
define
mozilla_css_SheetLoadData_h
#
include
"
nsIUnicharStreamLoader
.
h
"
#
include
"
nsIThreadInternal
.
h
"
namespace
mozilla
{
namespace
css
{
static_assert
(
eAuthorSheetFeatures
=
=
0
&
&
eUserSheetFeatures
=
=
1
&
&
eAgentSheetFeatures
=
=
2
"
sheet
parsing
mode
constants
won
'
t
fit
"
"
in
SheetLoadData
:
:
mParsingMode
"
)
;
class
SheetLoadData
final
:
public
nsIRunnable
public
nsIUnicharStreamLoaderObserver
public
nsIThreadObserver
{
protected
:
virtual
~
SheetLoadData
(
void
)
;
public
:
SheetLoadData
(
Loader
*
aLoader
const
nsAString
&
aTitle
nsIURI
*
aURI
StyleSheet
*
aSheet
nsIStyleSheetLinkingElement
*
aOwningElement
bool
aIsAlternate
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aLoaderPrincipal
nsINode
*
aRequestingNode
)
;
SheetLoadData
(
Loader
*
aLoader
nsIURI
*
aURI
StyleSheet
*
aSheet
SheetLoadData
*
aParentData
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aLoaderPrincipal
nsINode
*
aRequestingNode
)
;
SheetLoadData
(
Loader
*
aLoader
nsIURI
*
aURI
StyleSheet
*
aSheet
bool
aSyncLoad
bool
aUseSystemPrincipal
const
Encoding
*
aPreloadEncoding
nsICSSLoaderObserver
*
aObserver
nsIPrincipal
*
aLoaderPrincipal
nsINode
*
aRequestingNode
)
;
already_AddRefed
<
nsIURI
>
GetReferrerURI
(
)
;
void
ScheduleLoadEventIfNeeded
(
nsresult
aStatus
)
;
NotNull
<
const
Encoding
*
>
DetermineNonBOMEncoding
(
nsACString
const
&
aSegment
nsIChannel
*
aChannel
)
;
nsresult
VerifySheetReadyToParse
(
nsresult
aStatus
const
nsACString
&
aBytes
nsIChannel
*
aChannel
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIRUNNABLE
NS_DECL_NSITHREADOBSERVER
NS_DECL_NSIUNICHARSTREAMLOADEROBSERVER
RefPtr
<
Loader
>
mLoader
;
nsString
mTitle
;
const
Encoding
*
mEncoding
;
nsCOMPtr
<
nsIURI
>
mURI
;
uint32_t
mLineNumber
;
RefPtr
<
StyleSheet
>
mSheet
;
SheetLoadData
*
mNext
;
RefPtr
<
SheetLoadData
>
mParentData
;
uint32_t
mPendingChildren
;
bool
mSyncLoad
:
1
;
bool
mIsNonDocumentSheet
:
1
;
bool
mIsLoading
:
1
;
bool
mIsCancelled
:
1
;
bool
mMustNotify
:
1
;
bool
mWasAlternate
:
1
;
bool
mUseSystemPrincipal
:
1
;
bool
mSheetAlreadyComplete
:
1
;
nsCOMPtr
<
nsIStyleSheetLinkingElement
>
mOwningElement
;
nsCOMPtr
<
nsICSSLoaderObserver
>
mObserver
;
nsCOMPtr
<
nsIPrincipal
>
mLoaderPrincipal
;
nsCOMPtr
<
nsINode
>
mRequestingNode
;
const
Encoding
*
mPreloadEncoding
;
MOZ_INIT_OUTSIDE_CTOR
nsresult
mStatus
;
private
:
void
FireLoadEvent
(
nsIThreadInternal
*
aThread
)
;
}
;
}
}
#
endif
