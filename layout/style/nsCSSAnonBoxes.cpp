#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsAtomListUtils
.
h
"
#
include
"
nsStaticAtom
.
h
"
using
namespace
mozilla
;
#
define
CSS_ANON_BOX
(
name_
value_
skips_fixup_
)
\
nsICSSAnonBoxPseudo
*
nsCSSAnonBoxes
:
:
name_
;
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
#
define
CSS_ANON_BOX
(
name_
value_
skips_fixup_
)
\
NS_STATIC_ATOM_BUFFER
(
name_
#
#
_buffer
value_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
static
const
nsStaticAtom
CSSAnonBoxes_info
[
]
=
{
#
define
CSS_ANON_BOX
(
name_
value_
skips_fixup_
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM
(
name_
#
#
_buffer
(
nsIAtom
*
*
)
&
nsCSSAnonBoxes
:
:
name_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
#
define
CSS_ANON_BOX
(
name_
value_
skips_fixup_
)
\
NS_STATIC_ATOM
(
name_
#
#
_buffer
(
nsIAtom
*
*
)
&
nsCSSAnonBoxes
:
:
name_
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
name_
value_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
}
;
void
nsCSSAnonBoxes
:
:
AddRefAtoms
(
)
{
NS_RegisterStaticAtoms
(
CSSAnonBoxes_info
)
;
}
bool
nsCSSAnonBoxes
:
:
IsAnonBox
(
nsIAtom
*
aAtom
)
{
return
nsAtomListUtils
:
:
IsMember
(
aAtom
CSSAnonBoxes_info
ArrayLength
(
CSSAnonBoxes_info
)
)
;
}
#
ifdef
MOZ_XUL
bool
nsCSSAnonBoxes
:
:
IsTreePseudoElement
(
nsIAtom
*
aPseudo
)
{
MOZ_ASSERT
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aPseudo
)
)
;
return
StringBeginsWith
(
nsDependentAtomString
(
aPseudo
)
NS_LITERAL_STRING
(
"
:
-
moz
-
tree
-
"
)
)
;
}
#
endif
nsCSSAnonBoxes
:
:
NonInheriting
nsCSSAnonBoxes
:
:
NonInheritingTypeForPseudoTag
(
nsIAtom
*
aPseudo
)
{
MOZ_ASSERT
(
IsNonInheritingAnonBox
(
aPseudo
)
)
;
for
(
NonInheritingBase
i
=
0
;
i
<
ArrayLength
(
CSSAnonBoxes_info
)
;
+
+
i
)
{
if
(
*
CSSAnonBoxes_info
[
i
]
.
mAtom
=
=
aPseudo
)
{
return
static_cast
<
NonInheriting
>
(
i
)
;
}
}
MOZ_CRASH
(
"
Bogus
pseudo
passed
to
NonInheritingTypeForPseudoTag
"
)
;
}
nsIAtom
*
nsCSSAnonBoxes
:
:
GetNonInheritingPseudoAtom
(
NonInheriting
aBoxType
)
{
MOZ_ASSERT
(
aBoxType
<
NonInheriting
:
:
_Count
)
;
return
*
CSSAnonBoxes_info
[
static_cast
<
NonInheritingBase
>
(
aBoxType
)
]
.
mAtom
;
}
