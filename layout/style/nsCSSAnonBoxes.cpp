#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsGkAtomConsts
.
h
"
#
include
"
nsStaticAtomUtils
.
h
"
using
namespace
mozilla
;
bool
nsCSSAnonBoxes
:
:
IsTreePseudoElement
(
nsAtom
*
aPseudo
)
{
return
StringBeginsWith
(
nsDependentAtomString
(
aPseudo
)
u
"
:
-
moz
-
tree
-
"
_ns
)
;
}
#
ifdef
DEBUG
nsStaticAtom
*
nsCSSAnonBoxes
:
:
GetAtomBase
(
)
{
return
const_cast
<
nsStaticAtom
*
>
(
nsGkAtoms
:
:
GetAtomByIndex
(
kAtomIndex_AnonBoxes
)
)
;
}
void
nsCSSAnonBoxes
:
:
AssertAtoms
(
)
{
nsStaticAtom
*
base
=
GetAtomBase
(
)
;
size_t
index
=
0
;
#
define
CSS_ANON_BOX
(
name_
value_
)
\
{
\
RefPtr
<
nsAtom
>
atom
=
NS_Atomize
(
value_
)
;
\
MOZ_ASSERT
(
atom
=
=
nsGkAtoms
:
:
AnonBox_
#
#
name_
\
"
Static
atom
for
"
#
name_
"
has
incorrect
value
"
)
;
\
MOZ_ASSERT
(
atom
=
=
&
base
[
index
]
\
"
Static
atom
for
"
#
name_
"
not
at
expected
index
"
)
;
\
+
+
index
;
\
}
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
}
#
endif
