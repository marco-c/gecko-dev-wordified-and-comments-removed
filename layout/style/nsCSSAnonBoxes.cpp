#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsStaticAtom
.
h
"
using
namespace
mozilla
;
namespace
mozilla
{
namespace
detail
{
MOZ_PUSH_DISABLE_INTEGRAL_CONSTANT_OVERFLOW_WARNING
extern
constexpr
CSSAnonBoxAtoms
gCSSAnonBoxAtoms
=
{
#
define
CSS_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_INIT_STRING
(
value_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
#
define
CSS_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_INIT_ATOM
(
CSSAnonBoxAtoms
name_
value_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
}
;
MOZ_POP_DISABLE_INTEGRAL_CONSTANT_OVERFLOW_WARNING
}
}
#
define
CSS_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_SUBCLASS_DEFN_PTR
(
nsICSSAnonBoxPseudo
nsCSSAnonBoxes
name_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
static
const
nsStaticAtomSetup
sCSSAnonBoxAtomSetup
[
]
=
{
#
define
CSS_ANON_BOX
(
name_
value_
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_SUBCLASS_SETUP
(
\
mozilla
:
:
detail
:
:
gCSSAnonBoxAtoms
nsCSSAnonBoxes
name_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
#
define
CSS_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_SUBCLASS_SETUP
(
\
mozilla
:
:
detail
:
:
gCSSAnonBoxAtoms
nsCSSAnonBoxes
name_
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
name_
value_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
}
;
void
nsCSSAnonBoxes
:
:
RegisterStaticAtoms
(
)
{
NS_RegisterStaticAtoms
(
sCSSAnonBoxAtomSetup
)
;
}
bool
nsCSSAnonBoxes
:
:
IsAnonBox
(
nsAtom
*
aAtom
)
{
return
nsStaticAtomUtils
:
:
IsMember
(
aAtom
sCSSAnonBoxAtomSetup
)
;
}
#
ifdef
MOZ_XUL
bool
nsCSSAnonBoxes
:
:
IsTreePseudoElement
(
nsAtom
*
aPseudo
)
{
MOZ_ASSERT
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aPseudo
)
)
;
return
StringBeginsWith
(
nsDependentAtomString
(
aPseudo
)
NS_LITERAL_STRING
(
"
:
-
moz
-
tree
-
"
)
)
;
}
#
endif
nsCSSAnonBoxes
:
:
NonInheriting
nsCSSAnonBoxes
:
:
NonInheritingTypeForPseudoTag
(
nsAtom
*
aPseudo
)
{
MOZ_ASSERT
(
IsNonInheritingAnonBox
(
aPseudo
)
)
;
Maybe
<
uint32_t
>
index
=
nsStaticAtomUtils
:
:
Lookup
(
aPseudo
sCSSAnonBoxAtomSetup
)
;
MOZ_RELEASE_ASSERT
(
index
.
isSome
(
)
)
;
return
static_cast
<
NonInheriting
>
(
*
index
)
;
}
nsAtom
*
nsCSSAnonBoxes
:
:
GetNonInheritingPseudoAtom
(
NonInheriting
aBoxType
)
{
MOZ_ASSERT
(
aBoxType
<
NonInheriting
:
:
_Count
)
;
return
*
sCSSAnonBoxAtomSetup
[
static_cast
<
NonInheritingBase
>
(
aBoxType
)
]
.
mAtomp
;
}
