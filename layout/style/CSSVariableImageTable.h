#
ifndef
mozilla_CSSVariableImageTable_h
#
define
mozilla_CSSVariableImageTable_h
#
include
"
nsClassHashtable
.
h
"
#
include
"
nsCSSProperty
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
namespace
CSSVariableImageTable
{
namespace
detail
{
typedef
nsTArray
<
nsRefPtr
<
css
:
:
ImageValue
>
>
ImageValueArray
;
typedef
nsClassHashtable
<
nsGenericHashKey
<
nsCSSProperty
>
ImageValueArray
>
PerPropertyImageHashtable
;
typedef
nsClassHashtable
<
nsPtrHashKey
<
nsStyleContext
>
PerPropertyImageHashtable
>
CSSVariableImageHashtable
;
inline
CSSVariableImageHashtable
&
GetTable
(
)
{
static
CSSVariableImageHashtable
imageTable
;
return
imageTable
;
}
#
ifdef
DEBUG
inline
bool
&
IsReplacing
(
)
{
static
bool
isReplacing
=
false
;
return
isReplacing
;
}
#
endif
}
template
<
typename
Lambda
>
inline
void
ReplaceAll
(
nsStyleContext
*
aContext
nsCSSProperty
aProp
Lambda
aFunc
)
{
MOZ_ASSERT
(
aContext
)
;
auto
&
imageTable
=
detail
:
:
GetTable
(
)
;
{
auto
*
perPropertyImageTable
=
imageTable
.
Get
(
aContext
)
;
auto
*
imageList
=
perPropertyImageTable
?
perPropertyImageTable
-
>
Get
(
aProp
)
:
nullptr
;
if
(
imageList
)
{
imageList
-
>
ClearAndRetainStorage
(
)
;
}
}
#
ifdef
DEBUG
MOZ_ASSERT
(
!
detail
:
:
IsReplacing
(
)
)
;
detail
:
:
IsReplacing
(
)
=
true
;
#
endif
aFunc
(
)
;
#
ifdef
DEBUG
detail
:
:
IsReplacing
(
)
=
false
;
#
endif
auto
*
perPropertyImageTable
=
imageTable
.
Get
(
aContext
)
;
auto
*
imageList
=
perPropertyImageTable
?
perPropertyImageTable
-
>
Get
(
aProp
)
:
nullptr
;
if
(
imageList
)
{
if
(
imageList
-
>
IsEmpty
(
)
)
{
perPropertyImageTable
-
>
Remove
(
aProp
)
;
if
(
perPropertyImageTable
-
>
Count
(
)
=
=
0
)
{
imageTable
.
Remove
(
aContext
)
;
}
}
else
{
imageList
-
>
Compact
(
)
;
}
}
}
inline
void
Add
(
nsStyleContext
*
aContext
nsCSSProperty
aProp
css
:
:
ImageValue
*
aValue
)
{
MOZ_ASSERT
(
aValue
)
;
MOZ_ASSERT
(
aContext
)
;
MOZ_ASSERT
(
detail
:
:
IsReplacing
(
)
)
;
auto
&
imageTable
=
detail
:
:
GetTable
(
)
;
auto
*
perPropertyImageTable
=
imageTable
.
Get
(
aContext
)
;
if
(
!
perPropertyImageTable
)
{
perPropertyImageTable
=
new
detail
:
:
PerPropertyImageHashtable
(
)
;
imageTable
.
Put
(
aContext
perPropertyImageTable
)
;
}
auto
*
imageList
=
perPropertyImageTable
-
>
Get
(
aProp
)
;
if
(
!
imageList
)
{
imageList
=
new
detail
:
:
ImageValueArray
(
)
;
perPropertyImageTable
-
>
Put
(
aProp
imageList
)
;
}
imageList
-
>
AppendElement
(
aValue
)
;
}
inline
void
RemoveAll
(
nsStyleContext
*
aContext
)
{
detail
:
:
ImageValueArray
removedImages
;
auto
&
imageTable
=
detail
:
:
GetTable
(
)
;
auto
*
perPropertyImageTable
=
imageTable
.
Get
(
aContext
)
;
if
(
perPropertyImageTable
)
{
for
(
auto
it
=
perPropertyImageTable
-
>
Iter
(
)
;
!
it
.
Done
(
)
;
it
.
Next
(
)
)
{
auto
*
imageList
=
it
.
UserData
(
)
;
removedImages
.
AppendElements
(
Move
(
*
imageList
)
)
;
}
}
imageTable
.
Remove
(
aContext
)
;
}
}
}
#
endif
