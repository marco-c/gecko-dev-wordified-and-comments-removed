#
include
"
mozilla
/
dom
/
CSSFontPaletteValuesRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSFontPaletteValuesRuleBinding
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
namespace
mozilla
:
:
dom
{
size_t
CSSFontPaletteValuesRule
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
StyleCssRuleType
CSSFontPaletteValuesRule
:
:
Type
(
)
const
{
return
StyleCssRuleType
:
:
FontPaletteValues
;
}
#
ifdef
DEBUG
void
CSSFontPaletteValuesRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
i
=
0
;
i
<
aIndent
;
i
+
+
)
{
str
.
AppendLiteral
(
"
"
)
;
}
Servo_FontPaletteValuesRule_Debug
(
mRawRule
&
str
)
;
fprintf_stderr
(
out
"
%
s
\
n
"
str
.
get
(
)
)
;
}
#
endif
void
CSSFontPaletteValuesRule
:
:
SetRawAfterClone
(
RefPtr
<
RawServoFontPaletteValuesRule
>
aRaw
)
{
mRawRule
=
std
:
:
move
(
aRaw
)
;
}
void
CSSFontPaletteValuesRule
:
:
GetCssText
(
nsACString
&
aCssText
)
const
{
Servo_FontPaletteValuesRule_GetCssText
(
mRawRule
&
aCssText
)
;
}
void
CSSFontPaletteValuesRule
:
:
GetName
(
nsACString
&
aNameStr
)
const
{
Servo_FontPaletteValuesRule_GetName
(
mRawRule
&
aNameStr
)
;
}
void
CSSFontPaletteValuesRule
:
:
GetFontFamily
(
nsACString
&
aFamilyListStr
)
const
{
Servo_FontPaletteValuesRule_GetFontFamily
(
mRawRule
&
aFamilyListStr
)
;
}
void
CSSFontPaletteValuesRule
:
:
GetBasePalette
(
nsACString
&
aPaletteStr
)
const
{
Servo_FontPaletteValuesRule_GetBasePalette
(
mRawRule
&
aPaletteStr
)
;
}
void
CSSFontPaletteValuesRule
:
:
GetOverrideColors
(
nsACString
&
aColorsStr
)
const
{
Servo_FontPaletteValuesRule_GetOverrideColors
(
mRawRule
&
aColorsStr
)
;
}
bool
CSSFontPaletteValuesRule
:
:
IsCCLeaf
(
)
const
{
return
Rule
:
:
IsCCLeaf
(
)
;
}
JSObject
*
CSSFontPaletteValuesRule
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
CSSFontPaletteValuesRule_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
}
