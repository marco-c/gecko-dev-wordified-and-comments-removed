#
ifndef
nsStyleStructFwd_h_
#
define
nsStyleStructFwd_h_
#
include
"
nsStyleStructList
.
h
"
namespace
mozilla
{
enum
class
StyleStructID
:
uint32_t
{
#
define
ENUM_ENTRY
(
name
)
name
FOR_EACH_STYLE_STRUCT
(
ENUM_ENTRY
ENUM_ENTRY
)
#
undef
ENUM_ENTRY
}
;
struct
StyleStructConstants
{
static
const
uint32_t
kStyleStructCount
=
#
define
COUNT_STRUCT
(
name
)
1
+
FOR_EACH_STYLE_STRUCT
(
COUNT_STRUCT
COUNT_STRUCT
)
#
undef
COUNT_STRUCT
0
;
static
const
uint32_t
kInheritedStyleStructCount
=
#
define
COUNT_INHERITED
(
name
)
1
+
#
define
COUNT_RESET
(
name
)
FOR_EACH_STYLE_STRUCT
(
COUNT_INHERITED
COUNT_RESET
)
#
undef
COUNT_INHERITED
#
undef
COUNT_RESET
0
;
static
const
uint32_t
kResetStyleStructCount
=
#
define
COUNT_INHERITED
(
name
)
#
define
COUNT_RESET
(
name
)
1
+
FOR_EACH_STYLE_STRUCT
(
COUNT_INHERITED
COUNT_RESET
)
#
undef
COUNT_INHERITED
#
undef
COUNT_RESET
0
;
static_assert
(
kStyleStructCount
<
=
32
"
Bitmasks
must
be
bigger
!
"
)
;
static
const
uint32_t
kAllStructsMask
=
(
1
<
<
kStyleStructCount
)
-
1
;
static
const
uint32_t
kInheritedStructsMask
=
(
1
<
<
kInheritedStyleStructCount
)
-
1
;
static
const
uint32_t
kResetStructsMask
=
kAllStructsMask
&
(
~
kInheritedStructsMask
)
;
static
uint32_t
BitFor
(
StyleStructID
aID
)
{
return
1
<
<
static_cast
<
uint32_t
>
(
aID
)
;
}
}
;
}
#
endif
