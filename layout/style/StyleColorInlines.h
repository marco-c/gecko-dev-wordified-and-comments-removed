#
ifndef
mozilla_StyleColorInlines_h_
#
define
mozilla_StyleColorInlines_h_
#
include
"
nsColor
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
nsStyleUtil
.
h
"
namespace
mozilla
{
inline
StyleAbsoluteColor
StyleAbsoluteColor
:
:
FromColor
(
nscolor
aColor
)
{
return
StyleAbsoluteColor
:
:
Srgb
(
NS_GET_R
(
aColor
)
/
255
.
0f
NS_GET_G
(
aColor
)
/
255
.
0f
NS_GET_B
(
aColor
)
/
255
.
0f
NS_GET_A
(
aColor
)
/
255
.
0f
)
;
}
inline
StyleAbsoluteColor
StyleAbsoluteColor
:
:
Srgb
(
float
red
float
green
float
blue
float
alpha
)
{
return
StyleAbsoluteColor
{
StyleColorComponents
{
red
green
blue
}
alpha
StyleColorSpace
:
:
Srgb
StyleColorFlags
{
0
}
}
;
}
template
<
>
inline
StyleColor
StyleColor
:
:
FromColor
(
nscolor
aColor
)
{
return
StyleColor
:
:
Absolute
(
StyleAbsoluteColor
:
:
FromColor
(
aColor
)
)
;
}
template
<
>
inline
const
StyleColor
StyleColor
:
:
TRANSPARENT
=
StyleColor
:
:
Absolute
(
StyleAbsoluteColor
:
:
TRANSPARENT
)
;
template
<
>
inline
const
StyleColor
StyleColor
:
:
BLACK
=
StyleColor
:
:
Absolute
(
StyleAbsoluteColor
:
:
BLACK
)
;
template
<
>
inline
const
StyleColor
StyleColor
:
:
WHITE
=
StyleColor
:
:
Absolute
(
StyleAbsoluteColor
:
:
WHITE
)
;
template
<
>
StyleAbsoluteColor
StyleColor
:
:
ResolveColor
(
const
StyleAbsoluteColor
&
)
const
;
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
StyleAbsoluteColor
&
)
const
;
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
nscolor
)
const
;
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
ComputedStyle
&
)
const
;
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
nsIFrame
*
)
const
;
}
#
endif
