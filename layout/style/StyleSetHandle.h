#
ifndef
mozilla_StyleSetHandle_h
#
define
mozilla_StyleSetHandle_h
#
include
"
mozilla
/
AtomArray
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MediaFeatureChange
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoTypes
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsTArray
.
h
"
class
nsBindingManager
;
class
nsCSSCounterStyleRule
;
struct
nsFontFaceRuleContainer
;
class
nsAtom
;
class
nsICSSAnonBoxPseudo
;
class
nsIContent
;
class
nsIDocument
;
class
nsStyleSet
;
class
nsPresContext
;
class
gfxFontFeatureValueSet
;
namespace
mozilla
{
class
ComputedStyle
;
class
CSSStyleSheet
;
class
ServoStyleSet
;
namespace
dom
{
class
Element
;
class
ShadowRoot
;
}
namespace
css
{
class
Rule
;
}
class
StyleSetHandle
{
public
:
class
Ptr
{
public
:
friend
class
:
:
mozilla
:
:
StyleSetHandle
;
ServoStyleSet
*
AsServo
(
)
{
return
reinterpret_cast
<
ServoStyleSet
*
>
(
mValue
)
;
}
ServoStyleSet
*
GetAsServo
(
)
{
return
AsServo
(
)
;
}
const
ServoStyleSet
*
AsServo
(
)
const
{
return
const_cast
<
Ptr
*
>
(
this
)
-
>
AsServo
(
)
;
}
const
ServoStyleSet
*
GetAsServo
(
)
const
{
return
AsServo
(
)
;
}
inline
void
Delete
(
)
;
inline
void
Init
(
nsPresContext
*
aPresContext
)
;
inline
void
BeginShutdown
(
)
;
inline
void
Shutdown
(
)
;
inline
bool
GetAuthorStyleDisabled
(
)
const
;
inline
void
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
inline
void
BeginUpdate
(
)
;
inline
nsresult
EndUpdate
(
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
ComputedStyle
*
aParentContext
LazyComputeBehavior
aMayCompute
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
LazyComputeBehavior
aMayCompute
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveStyleForText
(
nsIContent
*
aTextNode
ComputedStyle
*
aParentContext
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveStyleForFirstLetterContinuation
(
ComputedStyle
*
aParentContext
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveStyleForPlaceholder
(
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolvePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
ComputedStyle
*
aParentContext
dom
:
:
Element
*
aPseudoElement
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveInheritingAnonymousBoxStyle
(
nsAtom
*
aPseudoTag
ComputedStyle
*
aParentContext
)
;
inline
already_AddRefed
<
ComputedStyle
>
ResolveNonInheritingAnonymousBoxStyle
(
nsAtom
*
aPseudoTag
)
;
#
ifdef
MOZ_XUL
inline
already_AddRefed
<
ComputedStyle
>
ResolveXULTreePseudoStyle
(
dom
:
:
Element
*
aParentElement
nsICSSAnonBoxPseudo
*
aPseudoTag
ComputedStyle
*
aParentContext
const
AtomArray
&
aInputWord
)
;
#
endif
inline
nsresult
AppendStyleSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
;
inline
nsresult
PrependStyleSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
;
inline
nsresult
RemoveStyleSheet
(
SheetType
aType
StyleSheet
*
aSheet
)
;
inline
nsresult
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
StyleSheet
>
>
&
aNewSheets
)
;
inline
nsresult
InsertStyleSheetBefore
(
SheetType
aType
StyleSheet
*
aNewSheet
StyleSheet
*
aReferenceSheet
)
;
inline
int32_t
SheetCount
(
SheetType
aType
)
const
;
inline
StyleSheet
*
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
;
inline
void
AppendAllXBLStyleSheets
(
nsTArray
<
StyleSheet
*
>
&
aArray
)
const
;
inline
nsresult
RemoveDocStyleSheet
(
StyleSheet
*
aSheet
)
;
inline
nsresult
AddDocStyleSheet
(
StyleSheet
*
aSheet
nsIDocument
*
aDocument
)
;
inline
void
RuleRemoved
(
StyleSheet
&
css
:
:
Rule
&
)
;
inline
void
RuleAdded
(
StyleSheet
&
css
:
:
Rule
&
)
;
inline
void
RuleChanged
(
StyleSheet
&
css
:
:
Rule
*
)
;
inline
void
RecordShadowStyleChange
(
mozilla
:
:
dom
:
:
ShadowRoot
&
aShadowRoot
)
;
inline
bool
StyleSheetsHaveChanged
(
)
const
;
inline
void
InvalidateStyleForCSSRuleChanges
(
)
;
inline
nsRestyleHint
MediumFeaturesChanged
(
mozilla
:
:
MediaFeatureChangeReason
)
;
inline
already_AddRefed
<
ComputedStyle
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
ComputedStyle
*
aParentContext
)
;
inline
already_AddRefed
<
ComputedStyle
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
)
;
inline
bool
AppendFontFaceRules
(
nsTArray
<
nsFontFaceRuleContainer
>
&
aArray
)
;
inline
nsCSSCounterStyleRule
*
CounterStyleRuleForName
(
nsAtom
*
aName
)
;
inline
already_AddRefed
<
gfxFontFeatureValueSet
>
BuildFontFeatureValueSet
(
)
;
inline
bool
EnsureUniqueInnerOnCSSSheets
(
)
;
inline
void
SetNeedsRestyleAfterEnsureUniqueInner
(
)
;
private
:
uintptr_t
mValue
;
}
;
StyleSetHandle
(
)
{
mPtr
.
mValue
=
0
;
}
StyleSetHandle
(
const
StyleSetHandle
&
aOth
)
{
mPtr
.
mValue
=
aOth
.
mPtr
.
mValue
;
}
MOZ_IMPLICIT
StyleSetHandle
(
nsStyleSet
*
aSet
)
{
*
this
=
aSet
;
}
MOZ_IMPLICIT
StyleSetHandle
(
ServoStyleSet
*
aSet
)
{
*
this
=
aSet
;
}
StyleSetHandle
&
operator
=
(
nsStyleSet
*
aStyleSet
)
{
mPtr
.
mValue
=
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
;
return
*
this
;
}
StyleSetHandle
&
operator
=
(
ServoStyleSet
*
aStyleSet
)
{
mPtr
.
mValue
=
aStyleSet
?
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
:
0
;
return
*
this
;
}
explicit
operator
bool
(
)
const
{
return
!
!
mPtr
.
mValue
;
}
bool
operator
!
(
)
const
{
return
!
mPtr
.
mValue
;
}
bool
operator
=
=
(
const
StyleSetHandle
&
aOth
)
const
{
return
mPtr
.
mValue
=
=
aOth
.
mPtr
.
mValue
;
}
bool
operator
!
=
(
const
StyleSetHandle
&
aOth
)
const
{
return
!
(
*
this
=
=
aOth
)
;
}
Ptr
*
operator
-
>
(
)
{
return
&
mPtr
;
}
const
Ptr
*
operator
-
>
(
)
const
{
return
&
mPtr
;
}
private
:
Ptr
mPtr
;
}
;
}
#
endif
