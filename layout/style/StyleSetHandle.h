#
ifndef
mozilla_StyleSetHandle_h
#
define
mozilla_StyleSetHandle_h
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
mozilla
/
StyleBackendType
.
h
"
#
include
"
mozilla
/
StyleSheetHandle
.
h
"
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsTArray
.
h
"
namespace
mozilla
{
class
CSSStyleSheet
;
class
ServoStyleSet
;
namespace
dom
{
class
Element
;
}
}
class
nsIAtom
;
class
nsIContent
;
class
nsIDocument
;
class
nsStyleContext
;
class
nsStyleSet
;
class
nsPresContext
;
struct
TreeMatchContext
;
namespace
mozilla
{
#
define
SERVO_BIT
0x1
class
StyleSetHandle
{
public
:
class
Ptr
{
public
:
friend
class
:
:
mozilla
:
:
StyleSetHandle
;
bool
IsGecko
(
)
const
{
return
!
IsServo
(
)
;
}
bool
IsServo
(
)
const
{
MOZ_ASSERT
(
mValue
"
StyleSetHandle
null
pointer
dereference
"
)
;
#
ifdef
MOZ_STYLO
return
mValue
&
SERVO_BIT
;
#
else
return
false
;
#
endif
}
StyleBackendType
BackendType
(
)
const
{
return
IsGecko
(
)
?
StyleBackendType
:
:
Gecko
:
StyleBackendType
:
:
Servo
;
}
nsStyleSet
*
AsGecko
(
)
{
MOZ_ASSERT
(
IsGecko
(
)
)
;
return
reinterpret_cast
<
nsStyleSet
*
>
(
mValue
)
;
}
ServoStyleSet
*
AsServo
(
)
{
MOZ_ASSERT
(
IsServo
(
)
)
;
return
reinterpret_cast
<
ServoStyleSet
*
>
(
mValue
&
~
SERVO_BIT
)
;
}
nsStyleSet
*
GetAsGecko
(
)
{
return
IsGecko
(
)
?
AsGecko
(
)
:
nullptr
;
}
ServoStyleSet
*
GetAsServo
(
)
{
return
IsServo
(
)
?
AsServo
(
)
:
nullptr
;
}
const
nsStyleSet
*
AsGecko
(
)
const
{
return
const_cast
<
Ptr
*
>
(
this
)
-
>
AsGecko
(
)
;
}
const
ServoStyleSet
*
AsServo
(
)
const
{
MOZ_ASSERT
(
IsServo
(
)
)
;
return
const_cast
<
Ptr
*
>
(
this
)
-
>
AsServo
(
)
;
}
const
nsStyleSet
*
GetAsGecko
(
)
const
{
return
IsGecko
(
)
?
AsGecko
(
)
:
nullptr
;
}
const
ServoStyleSet
*
GetAsServo
(
)
const
{
return
IsServo
(
)
?
AsServo
(
)
:
nullptr
;
}
inline
void
Delete
(
)
;
inline
void
Init
(
nsPresContext
*
aPresContext
)
;
inline
void
BeginShutdown
(
)
;
inline
void
Shutdown
(
)
;
inline
bool
GetAuthorStyleDisabled
(
)
const
;
inline
nsresult
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
;
inline
void
BeginUpdate
(
)
;
inline
nsresult
EndUpdate
(
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolveStyleForText
(
nsIContent
*
aTextNode
nsStyleContext
*
aParentContext
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolveStyleForOtherNonElement
(
nsStyleContext
*
aParentContext
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolvePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
dom
:
:
Element
*
aPseudoElement
)
;
inline
already_AddRefed
<
nsStyleContext
>
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
=
0
)
;
inline
nsresult
AppendStyleSheet
(
SheetType
aType
StyleSheetHandle
aSheet
)
;
inline
nsresult
PrependStyleSheet
(
SheetType
aType
StyleSheetHandle
aSheet
)
;
inline
nsresult
RemoveStyleSheet
(
SheetType
aType
StyleSheetHandle
aSheet
)
;
inline
nsresult
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
StyleSheetHandle
:
:
RefPtr
>
&
aNewSheets
)
;
inline
nsresult
InsertStyleSheetBefore
(
SheetType
aType
StyleSheetHandle
aNewSheet
StyleSheetHandle
aReferenceSheet
)
;
inline
int32_t
SheetCount
(
SheetType
aType
)
const
;
inline
StyleSheetHandle
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
;
inline
nsresult
RemoveDocStyleSheet
(
StyleSheetHandle
aSheet
)
;
inline
nsresult
AddDocStyleSheet
(
StyleSheetHandle
aSheet
nsIDocument
*
aDocument
)
;
inline
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
;
inline
already_AddRefed
<
nsStyleContext
>
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
mozilla
:
:
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
dom
:
:
Element
*
aPseudoElement
=
nullptr
)
;
inline
nsRestyleHint
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
EventStates
aStateMask
)
;
inline
nsRestyleHint
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
mozilla
:
:
CSSPseudoElementType
aPseudoType
dom
:
:
Element
*
aPseudoElement
EventStates
aStateMask
)
;
inline
void
RootStyleContextAdded
(
)
;
inline
void
RootStyleContextRemoved
(
)
;
private
:
uintptr_t
mValue
;
}
;
StyleSetHandle
(
)
{
mPtr
.
mValue
=
0
;
}
StyleSetHandle
(
const
StyleSetHandle
&
aOth
)
{
mPtr
.
mValue
=
aOth
.
mPtr
.
mValue
;
}
MOZ_IMPLICIT
StyleSetHandle
(
nsStyleSet
*
aSet
)
{
*
this
=
aSet
;
}
MOZ_IMPLICIT
StyleSetHandle
(
ServoStyleSet
*
aSet
)
{
*
this
=
aSet
;
}
StyleSetHandle
&
operator
=
(
nsStyleSet
*
aStyleSet
)
{
MOZ_ASSERT
(
!
(
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
&
SERVO_BIT
)
"
least
significant
bit
shouldn
'
t
be
set
;
we
use
it
for
state
"
)
;
mPtr
.
mValue
=
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
;
return
*
this
;
}
StyleSetHandle
&
operator
=
(
ServoStyleSet
*
aStyleSet
)
{
#
ifdef
MOZ_STYLO
MOZ_ASSERT
(
!
(
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
&
SERVO_BIT
)
"
least
significant
bit
shouldn
'
t
be
set
;
we
use
it
for
state
"
)
;
mPtr
.
mValue
=
aStyleSet
?
(
reinterpret_cast
<
uintptr_t
>
(
aStyleSet
)
|
SERVO_BIT
)
:
0
;
return
*
this
;
#
else
MOZ_CRASH
(
"
should
not
have
a
ServoStyleSet
object
when
MOZ_STYLO
is
"
"
disabled
"
)
;
#
endif
}
explicit
operator
bool
(
)
const
{
return
!
!
mPtr
.
mValue
;
}
bool
operator
!
(
)
const
{
return
!
mPtr
.
mValue
;
}
Ptr
*
operator
-
>
(
)
{
return
&
mPtr
;
}
const
Ptr
*
operator
-
>
(
)
const
{
return
&
mPtr
;
}
private
:
Ptr
mPtr
;
}
;
#
undef
SERVO_BIT
}
#
endif
