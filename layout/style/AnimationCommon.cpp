#
include
"
AnimationCommon
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
ActiveLayerTracker
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
nsRuleData
.
h
"
#
include
"
nsCSSPropertySet
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
LayerAnimationInfo
.
h
"
#
include
"
Layers
.
h
"
#
include
"
FrameLayerBuilder
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
RestyleManager
.
h
"
#
include
"
nsRuleProcessorData
.
h
"
#
include
"
nsStyleSet
.
h
"
#
include
"
nsStyleChangeList
.
h
"
using
mozilla
:
:
layers
:
:
Layer
;
using
mozilla
:
:
dom
:
:
Animation
;
using
mozilla
:
:
dom
:
:
KeyframeEffectReadOnly
;
namespace
mozilla
{
CommonAnimationManager
:
:
CommonAnimationManager
(
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
{
}
CommonAnimationManager
:
:
~
CommonAnimationManager
(
)
{
MOZ_ASSERT
(
!
mPresContext
"
Disconnect
should
have
been
called
"
)
;
}
void
CommonAnimationManager
:
:
Disconnect
(
)
{
RemoveAllElementCollections
(
)
;
mPresContext
=
nullptr
;
}
void
CommonAnimationManager
:
:
AddElementCollection
(
AnimationCollection
*
aCollection
)
{
mElementCollections
.
insertBack
(
aCollection
)
;
}
void
CommonAnimationManager
:
:
RemoveAllElementCollections
(
)
{
while
(
AnimationCollection
*
head
=
mElementCollections
.
getFirst
(
)
)
{
head
-
>
Destroy
(
)
;
}
}
AnimationCollection
*
CommonAnimationManager
:
:
GetAnimationCollection
(
const
nsIFrame
*
aFrame
)
{
nsIContent
*
content
=
aFrame
-
>
GetContent
(
)
;
if
(
!
content
)
{
return
nullptr
;
}
nsIAtom
*
animProp
;
if
(
aFrame
-
>
IsGeneratedContentFrame
(
)
)
{
nsIFrame
*
parent
=
aFrame
-
>
GetParent
(
)
;
if
(
parent
-
>
IsGeneratedContentFrame
(
)
)
{
return
nullptr
;
}
nsIAtom
*
name
=
content
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
;
if
(
name
=
=
nsGkAtoms
:
:
mozgeneratedcontentbefore
)
{
animProp
=
GetAnimationsBeforeAtom
(
)
;
}
else
if
(
name
=
=
nsGkAtoms
:
:
mozgeneratedcontentafter
)
{
animProp
=
GetAnimationsAfterAtom
(
)
;
}
else
{
return
nullptr
;
}
content
=
content
-
>
GetParent
(
)
;
if
(
!
content
)
{
return
nullptr
;
}
}
else
{
if
(
!
content
-
>
MayHaveAnimations
(
)
)
{
return
nullptr
;
}
animProp
=
GetAnimationsAtom
(
)
;
}
return
static_cast
<
AnimationCollection
*
>
(
content
-
>
GetProperty
(
animProp
)
)
;
}
AnimationCollection
*
CommonAnimationManager
:
:
GetAnimationsForCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
{
AnimationCollection
*
collection
=
GetAnimationCollection
(
aFrame
)
;
if
(
!
collection
|
|
!
collection
-
>
HasCurrentAnimationOfProperty
(
aProperty
)
|
|
!
collection
-
>
CanPerformOnCompositorThread
(
AnimationCollection
:
:
CanAnimate_AllowPartial
)
)
{
return
nullptr
;
}
return
collection
;
}
nsRestyleHint
CommonAnimationManager
:
:
HasStateDependentStyle
(
StateRuleProcessorData
*
aData
)
{
return
nsRestyleHint
(
0
)
;
}
nsRestyleHint
CommonAnimationManager
:
:
HasStateDependentStyle
(
PseudoElementStateRuleProcessorData
*
aData
)
{
return
nsRestyleHint
(
0
)
;
}
bool
CommonAnimationManager
:
:
HasDocumentStateDependentStyle
(
StateRuleProcessorData
*
aData
)
{
return
false
;
}
nsRestyleHint
CommonAnimationManager
:
:
HasAttributeDependentStyle
(
AttributeRuleProcessorData
*
aData
RestyleHintData
&
aRestyleHintDataResult
)
{
return
nsRestyleHint
(
0
)
;
}
bool
CommonAnimationManager
:
:
MediumFeaturesChanged
(
nsPresContext
*
aPresContext
)
{
return
false
;
}
void
CommonAnimationManager
:
:
RulesMatching
(
ElementRuleProcessorData
*
aData
)
{
MOZ_ASSERT
(
aData
-
>
mPresContext
=
=
mPresContext
"
pres
context
mismatch
"
)
;
nsIStyleRule
*
rule
=
GetAnimationRule
(
aData
-
>
mElement
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
)
;
if
(
rule
)
{
aData
-
>
mRuleWalker
-
>
Forward
(
rule
)
;
aData
-
>
mRuleWalker
-
>
CurrentNode
(
)
-
>
SetIsAnimationRule
(
)
;
}
}
void
CommonAnimationManager
:
:
RulesMatching
(
PseudoElementRuleProcessorData
*
aData
)
{
MOZ_ASSERT
(
aData
-
>
mPresContext
=
=
mPresContext
"
pres
context
mismatch
"
)
;
if
(
aData
-
>
mPseudoType
!
=
nsCSSPseudoElements
:
:
ePseudo_before
&
&
aData
-
>
mPseudoType
!
=
nsCSSPseudoElements
:
:
ePseudo_after
)
{
return
;
}
nsIStyleRule
*
rule
=
GetAnimationRule
(
aData
-
>
mElement
aData
-
>
mPseudoType
)
;
if
(
rule
)
{
aData
-
>
mRuleWalker
-
>
Forward
(
rule
)
;
aData
-
>
mRuleWalker
-
>
CurrentNode
(
)
-
>
SetIsAnimationRule
(
)
;
}
}
void
CommonAnimationManager
:
:
RulesMatching
(
AnonBoxRuleProcessorData
*
aData
)
{
}
#
ifdef
MOZ_XUL
void
CommonAnimationManager
:
:
RulesMatching
(
XULTreeRuleProcessorData
*
aData
)
{
}
#
endif
size_t
CommonAnimationManager
:
:
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
size_t
CommonAnimationManager
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
void
CommonAnimationManager
:
:
AddStyleUpdatesTo
(
RestyleTracker
&
aTracker
)
{
TimeStamp
now
=
mPresContext
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
for
(
AnimationCollection
*
collection
=
mElementCollections
.
getFirst
(
)
;
collection
;
collection
=
collection
-
>
getNext
(
)
)
{
collection
-
>
EnsureStyleRuleFor
(
now
)
;
dom
:
:
Element
*
elementToRestyle
=
collection
-
>
GetElementToRestyle
(
)
;
if
(
elementToRestyle
)
{
nsRestyleHint
rshint
=
collection
-
>
IsForTransitions
(
)
?
eRestyle_CSSTransitions
:
eRestyle_CSSAnimations
;
aTracker
.
AddPendingRestyle
(
elementToRestyle
rshint
nsChangeHint
(
0
)
)
;
}
}
}
bool
CommonAnimationManager
:
:
ExtractComputedValueForTransition
(
nsCSSProperty
aProperty
nsStyleContext
*
aStyleContext
StyleAnimationValue
&
aComputedValue
)
{
bool
result
=
StyleAnimationValue
:
:
ExtractComputedValue
(
aProperty
aStyleContext
aComputedValue
)
;
if
(
aProperty
=
=
eCSSProperty_visibility
)
{
MOZ_ASSERT
(
aComputedValue
.
GetUnit
(
)
=
=
StyleAnimationValue
:
:
eUnit_Enumerated
"
unexpected
unit
"
)
;
aComputedValue
.
SetIntValue
(
aComputedValue
.
GetIntValue
(
)
StyleAnimationValue
:
:
eUnit_Visibility
)
;
}
return
result
;
}
AnimationCollection
*
CommonAnimationManager
:
:
GetAnimations
(
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
bool
aCreateIfNeeded
)
{
if
(
!
aCreateIfNeeded
&
&
mElementCollections
.
isEmpty
(
)
)
{
return
nullptr
;
}
nsIAtom
*
propName
;
if
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
)
{
propName
=
GetAnimationsAtom
(
)
;
}
else
if
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_before
)
{
propName
=
GetAnimationsBeforeAtom
(
)
;
}
else
if
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_after
)
{
propName
=
GetAnimationsAfterAtom
(
)
;
}
else
{
NS_ASSERTION
(
!
aCreateIfNeeded
"
should
never
try
to
create
transitions
for
pseudo
"
"
other
than
:
before
or
:
after
"
)
;
return
nullptr
;
}
AnimationCollection
*
collection
=
static_cast
<
AnimationCollection
*
>
(
aElement
-
>
GetProperty
(
propName
)
)
;
if
(
!
collection
&
&
aCreateIfNeeded
)
{
collection
=
new
AnimationCollection
(
aElement
propName
this
)
;
nsresult
rv
=
aElement
-
>
SetProperty
(
propName
collection
&
AnimationCollection
:
:
PropertyDtor
false
)
;
if
(
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
SetProperty
failed
"
)
;
AnimationCollection
:
:
PropertyDtor
(
aElement
propName
collection
nullptr
)
;
return
nullptr
;
}
if
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
)
{
aElement
-
>
SetMayHaveAnimations
(
)
;
}
AddElementCollection
(
collection
)
;
}
return
collection
;
}
void
CommonAnimationManager
:
:
FlushAnimations
(
)
{
TimeStamp
now
=
mPresContext
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
for
(
AnimationCollection
*
collection
=
mElementCollections
.
getFirst
(
)
;
collection
;
collection
=
collection
-
>
getNext
(
)
)
{
if
(
collection
-
>
mStyleRuleRefreshTime
=
=
now
)
{
continue
;
}
MOZ_ASSERT
(
collection
-
>
mElement
-
>
GetComposedDoc
(
)
=
=
mPresContext
-
>
Document
(
)
"
Should
not
have
a
transition
/
animation
collection
for
an
"
"
element
that
is
not
part
of
the
document
tree
"
)
;
collection
-
>
RequestRestyle
(
AnimationCollection
:
:
RestyleType
:
:
Standard
)
;
}
}
nsIStyleRule
*
CommonAnimationManager
:
:
GetAnimationRule
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsCSSPseudoElements
:
:
Type
aPseudoType
)
{
MOZ_ASSERT
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
|
|
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_before
|
|
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_after
"
forbidden
pseudo
type
"
)
;
if
(
!
mPresContext
-
>
IsDynamic
(
)
)
{
return
nullptr
;
}
AnimationCollection
*
collection
=
GetAnimations
(
aElement
aPseudoType
false
)
;
if
(
!
collection
)
{
return
nullptr
;
}
RestyleManager
*
restyleManager
=
mPresContext
-
>
RestyleManager
(
)
;
if
(
restyleManager
-
>
SkipAnimationRules
(
)
)
{
return
nullptr
;
}
collection
-
>
EnsureStyleRuleFor
(
mPresContext
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
)
;
return
collection
-
>
mStyleRule
;
}
void
CommonAnimationManager
:
:
ClearIsRunningOnCompositor
(
const
nsIFrame
*
aFrame
nsCSSProperty
aProperty
)
{
AnimationCollection
*
collection
=
GetAnimationCollection
(
aFrame
)
;
if
(
collection
)
{
collection
-
>
ClearIsRunningOnCompositor
(
aProperty
)
;
}
}
NS_IMPL_ISUPPORTS
(
AnimValuesStyleRule
nsIStyleRule
)
void
AnimValuesStyleRule
:
:
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
{
nsStyleContext
*
contextParent
=
aRuleData
-
>
mStyleContext
-
>
GetParent
(
)
;
if
(
contextParent
&
&
contextParent
-
>
HasPseudoElementData
(
)
)
{
aRuleData
-
>
mConditions
.
SetUncacheable
(
)
;
return
;
}
for
(
uint32_t
i
=
0
i_end
=
mPropertyValuePairs
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
PropertyValuePair
&
cv
=
mPropertyValuePairs
[
i
]
;
if
(
aRuleData
-
>
mSIDs
&
nsCachedStyleData
:
:
GetBitForSID
(
nsCSSProps
:
:
kSIDTable
[
cv
.
mProperty
]
)
)
{
nsCSSValue
*
prop
=
aRuleData
-
>
ValueFor
(
cv
.
mProperty
)
;
if
(
prop
-
>
GetUnit
(
)
=
=
eCSSUnit_Null
)
{
#
ifdef
DEBUG
bool
ok
=
#
endif
StyleAnimationValue
:
:
UncomputeValue
(
cv
.
mProperty
cv
.
mValue
*
prop
)
;
MOZ_ASSERT
(
ok
"
could
not
store
computed
value
"
)
;
}
}
}
}
#
ifdef
DEBUG
void
AnimValuesStyleRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
index
=
aIndent
;
-
-
index
>
=
0
;
)
{
str
.
AppendLiteral
(
"
"
)
;
}
str
.
AppendLiteral
(
"
[
anim
values
]
{
"
)
;
for
(
uint32_t
i
=
0
i_end
=
mPropertyValuePairs
.
Length
(
)
;
i
<
i_end
;
+
+
i
)
{
const
PropertyValuePair
&
pair
=
mPropertyValuePairs
[
i
]
;
str
.
Append
(
nsCSSProps
:
:
GetStringValue
(
pair
.
mProperty
)
)
;
str
.
AppendLiteral
(
"
:
"
)
;
nsAutoString
value
;
StyleAnimationValue
:
:
UncomputeValue
(
pair
.
mProperty
pair
.
mValue
value
)
;
AppendUTF16toUTF8
(
value
str
)
;
str
.
AppendLiteral
(
"
;
"
)
;
}
str
.
AppendLiteral
(
"
}
\
n
"
)
;
fprintf_stderr
(
out
"
%
s
"
str
.
get
(
)
)
;
}
#
endif
bool
AnimationCollection
:
:
CanAnimatePropertyOnCompositor
(
const
dom
:
:
Element
*
aElement
nsCSSProperty
aProperty
CanAnimateFlags
aFlags
)
{
bool
shouldLog
=
nsLayoutUtils
:
:
IsAnimationLoggingEnabled
(
)
;
if
(
KeyframeEffectReadOnly
:
:
IsGeometricProperty
(
aProperty
)
)
{
if
(
shouldLog
)
{
nsCString
message
;
message
.
AppendLiteral
(
"
Performance
warning
:
Async
animation
of
"
"
'
transform
'
or
'
opacity
'
not
possible
due
to
animation
of
geometric
"
"
properties
on
the
same
element
"
)
;
LogAsyncAnimationFailure
(
message
aElement
)
;
}
return
false
;
}
if
(
aProperty
=
=
eCSSProperty_transform
)
{
nsIFrame
*
frame
=
nsLayoutUtils
:
:
GetStyleFrame
(
aElement
)
;
if
(
!
KeyframeEffectReadOnly
:
:
CanAnimateTransformOnCompositor
(
frame
shouldLog
?
aElement
:
nullptr
)
)
{
return
false
;
}
}
bool
propertyAllowed
=
(
aProperty
=
=
eCSSProperty_transform
)
|
|
(
aProperty
=
=
eCSSProperty_opacity
)
|
|
(
aFlags
&
CanAnimate_AllowPartial
)
;
return
propertyAllowed
;
}
bool
AnimationCollection
:
:
CanPerformOnCompositorThread
(
CanAnimateFlags
aFlags
)
const
{
if
(
!
nsLayoutUtils
:
:
AreAsyncAnimationsEnabled
(
)
)
{
if
(
nsLayoutUtils
:
:
IsAnimationLoggingEnabled
(
)
)
{
nsCString
message
;
message
.
AppendLiteral
(
"
Performance
warning
:
Async
animations
are
disabled
"
)
;
LogAsyncAnimationFailure
(
message
)
;
}
return
false
;
}
dom
:
:
Element
*
element
=
GetElementToRestyle
(
)
;
if
(
!
element
)
{
return
false
;
}
nsIFrame
*
frame
=
nsLayoutUtils
:
:
GetStyleFrame
(
element
)
;
if
(
!
frame
)
{
return
false
;
}
if
(
frame
-
>
RefusedAsyncAnimation
(
)
)
{
return
false
;
}
bool
existsProperty
=
false
;
for
(
size_t
animIdx
=
mAnimations
.
Length
(
)
;
animIdx
-
-
!
=
0
;
)
{
const
Animation
*
anim
=
mAnimations
[
animIdx
]
;
if
(
!
anim
-
>
IsPlaying
(
)
)
{
continue
;
}
const
KeyframeEffectReadOnly
*
effect
=
anim
-
>
GetEffect
(
)
;
MOZ_ASSERT
(
effect
"
A
playing
animation
should
have
an
effect
"
)
;
existsProperty
=
existsProperty
|
|
effect
-
>
Properties
(
)
.
Length
(
)
>
0
;
for
(
size_t
propIdx
=
0
propEnd
=
effect
-
>
Properties
(
)
.
Length
(
)
;
propIdx
!
=
propEnd
;
+
+
propIdx
)
{
const
AnimationProperty
&
prop
=
effect
-
>
Properties
(
)
[
propIdx
]
;
if
(
!
CanAnimatePropertyOnCompositor
(
element
prop
.
mProperty
aFlags
)
)
{
return
false
;
}
}
}
if
(
!
existsProperty
)
{
return
false
;
}
return
true
;
}
bool
AnimationCollection
:
:
HasCurrentAnimationOfProperty
(
nsCSSProperty
aProperty
)
const
{
for
(
Animation
*
animation
:
mAnimations
)
{
if
(
animation
-
>
HasCurrentEffect
(
)
&
&
animation
-
>
GetEffect
(
)
-
>
HasAnimationOfProperty
(
aProperty
)
)
{
return
true
;
}
}
return
false
;
}
nsString
AnimationCollection
:
:
PseudoTypeAsString
(
nsCSSPseudoElements
:
:
Type
aPseudoType
)
{
switch
(
aPseudoType
)
{
case
nsCSSPseudoElements
:
:
ePseudo_before
:
return
NS_LITERAL_STRING
(
"
:
:
before
"
)
;
case
nsCSSPseudoElements
:
:
ePseudo_after
:
return
NS_LITERAL_STRING
(
"
:
:
after
"
)
;
default
:
MOZ_ASSERT
(
aPseudoType
=
=
nsCSSPseudoElements
:
:
ePseudo_NotPseudoElement
"
Unexpected
pseudo
type
"
)
;
return
EmptyString
(
)
;
}
}
mozilla
:
:
dom
:
:
Element
*
AnimationCollection
:
:
GetElementToRestyle
(
)
const
{
if
(
IsForElement
(
)
)
{
return
mElement
;
}
nsIFrame
*
primaryFrame
=
mElement
-
>
GetPrimaryFrame
(
)
;
if
(
!
primaryFrame
)
{
return
nullptr
;
}
nsIFrame
*
pseudoFrame
;
if
(
IsForBeforePseudo
(
)
)
{
pseudoFrame
=
nsLayoutUtils
:
:
GetBeforeFrame
(
primaryFrame
)
;
}
else
if
(
IsForAfterPseudo
(
)
)
{
pseudoFrame
=
nsLayoutUtils
:
:
GetAfterFrame
(
primaryFrame
)
;
}
else
{
MOZ_ASSERT
(
false
"
unknown
mElementProperty
"
)
;
return
nullptr
;
}
if
(
!
pseudoFrame
)
{
return
nullptr
;
}
return
pseudoFrame
-
>
GetContent
(
)
-
>
AsElement
(
)
;
}
void
AnimationCollection
:
:
LogAsyncAnimationFailure
(
nsCString
&
aMessage
const
nsIContent
*
aContent
)
{
if
(
aContent
)
{
aMessage
.
AppendLiteral
(
"
[
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
NodeInfo
(
)
-
>
NameAtom
(
)
)
)
;
nsIAtom
*
id
=
aContent
-
>
GetID
(
)
;
if
(
id
)
{
aMessage
.
AppendLiteral
(
"
with
id
'
"
)
;
aMessage
.
Append
(
nsAtomCString
(
aContent
-
>
GetID
(
)
)
)
;
aMessage
.
Append
(
'
\
'
'
)
;
}
aMessage
.
Append
(
'
]
'
)
;
}
aMessage
.
Append
(
'
\
n
'
)
;
printf_stderr
(
"
%
s
"
aMessage
.
get
(
)
)
;
}
void
AnimationCollection
:
:
PropertyDtor
(
void
*
aObject
nsIAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
{
AnimationCollection
*
collection
=
static_cast
<
AnimationCollection
*
>
(
aPropertyValue
)
;
#
ifdef
DEBUG
MOZ_ASSERT
(
!
collection
-
>
mCalledPropertyDtor
"
can
'
t
call
dtor
twice
"
)
;
collection
-
>
mCalledPropertyDtor
=
true
;
#
endif
{
nsAutoAnimationMutationBatch
mb
(
collection
-
>
mElement
-
>
OwnerDoc
(
)
)
;
for
(
size_t
animIdx
=
collection
-
>
mAnimations
.
Length
(
)
;
animIdx
-
-
!
=
0
;
)
{
collection
-
>
mAnimations
[
animIdx
]
-
>
CancelFromStyle
(
)
;
}
}
delete
collection
;
}
void
AnimationCollection
:
:
Tick
(
)
{
for
(
size_t
animIdx
=
0
animEnd
=
mAnimations
.
Length
(
)
;
animIdx
!
=
animEnd
;
animIdx
+
+
)
{
mAnimations
[
animIdx
]
-
>
Tick
(
)
;
}
}
void
AnimationCollection
:
:
EnsureStyleRuleFor
(
TimeStamp
aRefreshTime
)
{
mHasPendingAnimationRestyle
=
false
;
if
(
!
mStyleChanging
)
{
mStyleRuleRefreshTime
=
aRefreshTime
;
return
;
}
if
(
!
mStyleRuleRefreshTime
.
IsNull
(
)
&
&
mStyleRuleRefreshTime
=
=
aRefreshTime
)
{
return
;
}
if
(
mManager
-
>
IsAnimationManager
(
)
)
{
static_cast
<
nsAnimationManager
*
>
(
mManager
)
-
>
MaybeUpdateCascadeResults
(
this
)
;
}
mStyleRuleRefreshTime
=
aRefreshTime
;
mStyleRule
=
nullptr
;
mStyleChanging
=
false
;
nsCSSPropertySet
properties
;
for
(
size_t
animIdx
=
mAnimations
.
Length
(
)
;
animIdx
-
-
!
=
0
;
)
{
mAnimations
[
animIdx
]
-
>
ComposeStyle
(
mStyleRule
properties
mStyleChanging
)
;
}
}
bool
AnimationCollection
:
:
CanThrottleTransformChanges
(
TimeStamp
aTime
)
{
if
(
!
nsLayoutUtils
:
:
AreAsyncAnimationsEnabled
(
)
)
{
return
false
;
}
if
(
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_ShowHideScrollbars
)
=
=
0
)
{
return
true
;
}
if
(
!
mStyleRuleRefreshTime
.
IsNull
(
)
&
&
(
aTime
-
mStyleRuleRefreshTime
)
<
TimeDuration
:
:
FromMilliseconds
(
200
)
)
{
return
true
;
}
dom
:
:
Element
*
element
=
GetElementToRestyle
(
)
;
if
(
!
element
)
{
return
false
;
}
nsIScrollableFrame
*
scrollable
=
nsLayoutUtils
:
:
GetNearestScrollableFrame
(
nsLayoutUtils
:
:
GetStyleFrame
(
element
)
)
;
if
(
!
scrollable
)
{
return
true
;
}
ScrollbarStyles
ss
=
scrollable
-
>
GetScrollbarStyles
(
)
;
if
(
ss
.
mVertical
=
=
NS_STYLE_OVERFLOW_HIDDEN
&
&
ss
.
mHorizontal
=
=
NS_STYLE_OVERFLOW_HIDDEN
&
&
scrollable
-
>
GetLogicalScrollPosition
(
)
=
=
nsPoint
(
0
0
)
)
{
return
true
;
}
return
false
;
}
bool
AnimationCollection
:
:
CanThrottleAnimation
(
TimeStamp
aTime
)
{
dom
:
:
Element
*
element
=
GetElementToRestyle
(
)
;
if
(
!
element
)
{
return
false
;
}
nsIFrame
*
frame
=
nsLayoutUtils
:
:
GetStyleFrame
(
element
)
;
if
(
!
frame
)
{
return
false
;
}
for
(
const
LayerAnimationInfo
:
:
Record
&
record
:
LayerAnimationInfo
:
:
sRecords
)
{
if
(
!
HasCurrentAnimationOfProperty
(
record
.
mProperty
)
)
{
continue
;
}
Layer
*
layer
=
FrameLayerBuilder
:
:
GetDedicatedLayer
(
frame
record
.
mLayerType
)
;
if
(
!
layer
|
|
mAnimationGeneration
>
layer
-
>
GetAnimationGeneration
(
)
)
{
return
false
;
}
if
(
record
.
mProperty
=
=
eCSSProperty_transform
&
&
!
CanThrottleTransformChanges
(
aTime
)
)
{
return
false
;
}
}
return
true
;
}
void
AnimationCollection
:
:
ClearIsRunningOnCompositor
(
nsCSSProperty
aProperty
)
{
for
(
Animation
*
anim
:
mAnimations
)
{
dom
:
:
KeyframeEffectReadOnly
*
effect
=
anim
-
>
GetEffect
(
)
;
if
(
effect
)
{
effect
-
>
SetIsRunningOnCompositor
(
aProperty
false
)
;
}
}
}
void
AnimationCollection
:
:
RequestRestyle
(
RestyleType
aRestyleType
)
{
MOZ_ASSERT
(
IsForElement
(
)
|
|
IsForBeforePseudo
(
)
|
|
IsForAfterPseudo
(
)
"
Unexpected
mElementProperty
;
might
restyle
too
much
"
)
;
nsPresContext
*
presContext
=
mManager
-
>
PresContext
(
)
;
if
(
!
presContext
)
{
return
;
}
if
(
aRestyleType
=
=
RestyleType
:
:
Layer
)
{
mStyleRuleRefreshTime
=
TimeStamp
(
)
;
mStyleChanging
=
true
;
presContext
-
>
ClearLastStyleUpdateForAllAnimations
(
)
;
presContext
-
>
RestyleManager
(
)
-
>
IncrementAnimationGeneration
(
)
;
UpdateAnimationGeneration
(
presContext
)
;
}
if
(
mHasPendingAnimationRestyle
)
{
return
;
}
if
(
aRestyleType
=
=
RestyleType
:
:
Throttled
)
{
TimeStamp
now
=
presContext
-
>
RefreshDriver
(
)
-
>
MostRecentRefresh
(
)
;
if
(
!
CanThrottleAnimation
(
now
)
)
{
aRestyleType
=
RestyleType
:
:
Standard
;
}
}
if
(
aRestyleType
>
=
RestyleType
:
:
Standard
)
{
mHasPendingAnimationRestyle
=
true
;
PostRestyleForAnimation
(
presContext
)
;
return
;
}
MOZ_ASSERT
(
aRestyleType
=
=
RestyleType
:
:
Throttled
"
Should
have
already
handled
all
non
-
throttled
restyles
"
)
;
presContext
-
>
Document
(
)
-
>
SetNeedStyleFlush
(
)
;
}
void
AnimationCollection
:
:
UpdateAnimationGeneration
(
nsPresContext
*
aPresContext
)
{
mAnimationGeneration
=
aPresContext
-
>
RestyleManager
(
)
-
>
GetAnimationGeneration
(
)
;
}
void
AnimationCollection
:
:
UpdateCheckGeneration
(
nsPresContext
*
aPresContext
)
{
mCheckGeneration
=
aPresContext
-
>
RestyleManager
(
)
-
>
GetAnimationGeneration
(
)
;
}
bool
AnimationCollection
:
:
HasCurrentAnimations
(
)
const
{
for
(
size_t
animIdx
=
mAnimations
.
Length
(
)
;
animIdx
-
-
!
=
0
;
)
{
if
(
mAnimations
[
animIdx
]
-
>
HasCurrentEffect
(
)
)
{
return
true
;
}
}
return
false
;
}
bool
AnimationCollection
:
:
HasCurrentAnimationsForProperties
(
const
nsCSSProperty
*
aProperties
size_t
aPropertyCount
)
const
{
for
(
size_t
animIdx
=
mAnimations
.
Length
(
)
;
animIdx
-
-
!
=
0
;
)
{
const
Animation
&
anim
=
*
mAnimations
[
animIdx
]
;
const
KeyframeEffectReadOnly
*
effect
=
anim
.
GetEffect
(
)
;
if
(
effect
&
&
effect
-
>
IsCurrent
(
)
&
&
effect
-
>
HasAnimationOfProperties
(
aProperties
aPropertyCount
)
)
{
return
true
;
}
}
return
false
;
}
nsPresContext
*
OwningElementRef
:
:
GetRenderedPresContext
(
)
const
{
if
(
!
mElement
)
{
return
nullptr
;
}
nsIDocument
*
doc
=
mElement
-
>
GetComposedDoc
(
)
;
if
(
!
doc
)
{
return
nullptr
;
}
nsIPresShell
*
shell
=
doc
-
>
GetShell
(
)
;
if
(
!
shell
)
{
return
nullptr
;
}
return
shell
-
>
GetPresContext
(
)
;
}
}
