#
ifndef
mozilla_CSSCounterStyleRule_h
#
define
mozilla_CSSCounterStyleRule_h
#
include
"
mozilla
/
css
/
Rule
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
struct
RawServoCounterStyleRule
;
namespace
mozilla
{
namespace
dom
{
class
CSSCounterStyleRule
final
:
public
css
:
:
Rule
{
public
:
CSSCounterStyleRule
(
already_AddRefed
<
RawServoCounterStyleRule
>
aRawRule
uint32_t
aLine
uint32_t
aColumn
)
:
mozilla
:
:
css
:
:
Rule
(
aLine
aColumn
)
mRawRule
(
std
:
:
move
(
aRawRule
)
)
{
}
private
:
CSSCounterStyleRule
(
const
CSSCounterStyleRule
&
aCopy
)
=
delete
;
~
CSSCounterStyleRule
(
)
=
default
;
public
:
bool
IsCCLeaf
(
)
const
final
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
final
;
#
endif
uint16_t
Type
(
)
const
override
;
void
GetCssText
(
nsAString
&
aCssText
)
const
override
;
void
GetName
(
nsAString
&
aName
)
;
void
SetName
(
const
nsAString
&
aName
)
;
#
define
CSS_COUNTER_DESC
(
name_
method_
)
\
void
Get
#
#
method_
(
nsAString
&
aValue
)
;
\
void
Set
#
#
method_
(
const
nsAString
&
aValue
)
;
#
include
"
nsCSSCounterDescList
.
h
"
#
undef
CSS_COUNTER_DESC
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
final
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
private
:
RefPtr
<
RawServoCounterStyleRule
>
mRawRule
;
}
;
}
}
#
endif
