#
include
"
mozilla
/
StyleColorInlines
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsStyleStruct
.
h
"
namespace
mozilla
{
template
<
>
bool
StyleColor
:
:
MaybeTransparent
(
)
const
{
return
!
IsAbsolute
(
)
|
|
AsAbsolute
(
)
.
alpha
!
=
1
.
0f
;
}
template
<
>
StyleAbsoluteColor
StyleColor
:
:
ResolveColor
(
const
StyleAbsoluteColor
&
aForegroundColor
)
const
{
if
(
IsAbsolute
(
)
)
{
return
AsAbsolute
(
)
;
}
if
(
IsCurrentColor
(
)
)
{
return
aForegroundColor
;
}
MOZ_ASSERT
(
IsColorMix
(
)
"
should
be
the
only
type
left
at
this
point
.
"
)
;
return
Servo_ResolveColor
(
this
&
aForegroundColor
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
nscolor
aColor
)
const
{
return
ResolveColor
(
StyleAbsoluteColor
:
:
FromColor
(
aColor
)
)
.
ToColor
(
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
StyleAbsoluteColor
&
aForegroundColor
)
const
{
return
ResolveColor
(
aForegroundColor
)
.
ToColor
(
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
ComputedStyle
&
aStyle
)
const
{
return
ResolveColor
(
aStyle
.
StyleText
(
)
-
>
mColor
)
.
ToColor
(
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
nsIFrame
*
aFrame
)
const
{
return
ResolveColor
(
aFrame
-
>
StyleText
(
)
-
>
mColor
)
.
ToColor
(
)
;
}
StyleAbsoluteColor
StyleAbsoluteColor
:
:
ToColorSpace
(
StyleColorSpace
aColorSpace
)
const
{
return
Servo_ConvertColorSpace
(
this
aColorSpace
)
;
}
nscolor
StyleAbsoluteColor
:
:
ToColor
(
)
const
{
auto
srgb
=
ToColorSpace
(
StyleColorSpace
:
:
Srgb
)
;
constexpr
float
MIN
=
0
.
0f
;
constexpr
float
MAX
=
1
.
0f
;
auto
isColorInGamut
=
(
srgb
.
components
.
_0
>
=
MIN
&
&
srgb
.
components
.
_0
<
=
MAX
&
&
srgb
.
components
.
_1
>
=
MIN
&
&
srgb
.
components
.
_1
<
=
MAX
&
&
srgb
.
components
.
_2
>
=
MIN
&
&
srgb
.
components
.
_2
<
=
MAX
)
;
if
(
!
isColorInGamut
)
{
if
(
StaticPrefs
:
:
layout_css_gamut_map_for_rendering_enabled
(
)
)
{
srgb
=
Servo_MapColorIntoGamutLimits
(
&
srgb
)
;
}
else
{
srgb
.
components
.
_0
=
std
:
:
clamp
(
srgb
.
components
.
_0
0
.
0f
1
.
0f
)
;
srgb
.
components
.
_1
=
std
:
:
clamp
(
srgb
.
components
.
_1
0
.
0f
1
.
0f
)
;
srgb
.
components
.
_2
=
std
:
:
clamp
(
srgb
.
components
.
_2
0
.
0f
1
.
0f
)
;
}
}
return
NS_RGBA
(
nsStyleUtil
:
:
FloatToColorComponent
(
srgb
.
components
.
_0
)
nsStyleUtil
:
:
FloatToColorComponent
(
srgb
.
components
.
_1
)
nsStyleUtil
:
:
FloatToColorComponent
(
srgb
.
components
.
_2
)
nsStyleUtil
:
:
FloatToColorComponent
(
srgb
.
alpha
)
)
;
}
}
