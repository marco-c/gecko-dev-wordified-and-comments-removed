#
include
"
mozilla
/
StyleColorInlines
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
ComputedStyleInlines
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsStyleStruct
.
h
"
namespace
mozilla
{
template
<
>
bool
StyleColor
:
:
MaybeTransparent
(
)
const
{
return
!
IsNumeric
(
)
|
|
AsNumeric
(
)
.
alpha
!
=
255
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
nscolor
aColor
)
const
{
return
CalcColor
(
StyleRGBA
:
:
FromColor
(
aColor
)
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
StyleRGBA
&
aForegroundColor
)
const
{
if
(
IsNumeric
(
)
)
{
return
AsNumeric
(
)
.
ToColor
(
)
;
}
if
(
IsCurrentColor
(
)
)
{
return
aForegroundColor
.
ToColor
(
)
;
}
MOZ_ASSERT
(
IsColorMix
(
)
)
;
return
Servo_ResolveColor
(
this
&
aForegroundColor
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
ComputedStyle
&
aStyle
)
const
{
if
(
IsNumeric
(
)
)
{
return
AsNumeric
(
)
.
ToColor
(
)
;
}
return
CalcColor
(
aStyle
.
StyleText
(
)
-
>
mColor
)
;
}
template
<
>
nscolor
StyleColor
:
:
CalcColor
(
const
nsIFrame
*
aFrame
)
const
{
if
(
IsNumeric
(
)
)
{
return
AsNumeric
(
)
.
ToColor
(
)
;
}
return
CalcColor
(
aFrame
-
>
StyleText
(
)
-
>
mColor
)
;
}
}
