#
ifndef
nsHTMLStyleSheet_h_
#
define
nsHTMLStyleSheet_h_
#
include
"
nsColor
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAtom
.
h
"
#
include
"
PLDHashTable
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsString
.
h
"
class
nsIDocument
;
class
nsMappedAttributes
;
struct
RawServoDeclarationBlock
;
class
nsHTMLStyleSheet
final
{
public
:
explicit
nsHTMLStyleSheet
(
nsIDocument
*
aDocument
)
;
void
SetOwningDocument
(
nsIDocument
*
aDocument
)
;
NS_INLINE_DECL_REFCOUNTING
(
nsHTMLStyleSheet
)
size_t
DOMSizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
void
Reset
(
)
;
nsresult
SetLinkColor
(
nscolor
aColor
)
;
nsresult
SetActiveLinkColor
(
nscolor
aColor
)
;
nsresult
SetVisitedLinkColor
(
nscolor
aColor
)
;
const
RefPtr
<
RawServoDeclarationBlock
>
&
GetServoUnvisitedLinkDecl
(
)
const
{
return
mServoUnvisitedLinkDecl
;
}
const
RefPtr
<
RawServoDeclarationBlock
>
&
GetServoVisitedLinkDecl
(
)
const
{
return
mServoVisitedLinkDecl
;
}
const
RefPtr
<
RawServoDeclarationBlock
>
&
GetServoActiveLinkDecl
(
)
const
{
return
mServoActiveLinkDecl
;
}
already_AddRefed
<
nsMappedAttributes
>
UniqueMappedAttributes
(
nsMappedAttributes
*
aMapped
)
;
void
DropMappedAttributes
(
nsMappedAttributes
*
aMapped
)
;
void
CalculateMappedServoDeclarations
(
)
;
private
:
nsHTMLStyleSheet
(
const
nsHTMLStyleSheet
&
aCopy
)
=
delete
;
nsHTMLStyleSheet
&
operator
=
(
const
nsHTMLStyleSheet
&
aCopy
)
=
delete
;
~
nsHTMLStyleSheet
(
)
{
}
nsresult
ImplLinkColorSetter
(
RefPtr
<
RawServoDeclarationBlock
>
&
aDecl
nscolor
aColor
)
;
public
:
private
:
nsIDocument
*
mDocument
;
RefPtr
<
RawServoDeclarationBlock
>
mServoUnvisitedLinkDecl
;
RefPtr
<
RawServoDeclarationBlock
>
mServoVisitedLinkDecl
;
RefPtr
<
RawServoDeclarationBlock
>
mServoActiveLinkDecl
;
PLDHashTable
mMappedAttrTable
;
bool
mMappedAttrsDirty
;
}
;
#
endif
