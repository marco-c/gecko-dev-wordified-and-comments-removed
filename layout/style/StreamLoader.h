#
ifndef
mozilla_css_StreamLoader_h
#
define
mozilla_css_StreamLoader_h
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIThreadRetargetableStreamListener
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
css
/
SheetLoadData
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
class
nsIInputStream
;
namespace
mozilla
:
:
css
{
class
StreamLoader
:
public
nsIThreadRetargetableStreamListener
{
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSITHREADRETARGETABLESTREAMLISTENER
explicit
StreamLoader
(
SheetLoadData
&
)
;
void
ChannelOpenFailed
(
nsresult
rv
)
{
#
ifdef
NIGHTLY_BUILD
mChannelOpenFailed
=
true
;
#
endif
}
private
:
virtual
~
StreamLoader
(
)
;
static
nsresult
WriteSegmentFun
(
nsIInputStream
*
void
*
const
char
*
uint32_t
uint32_t
uint32_t
*
)
;
void
HandleBOM
(
)
;
RefPtr
<
SheetLoadData
>
mSheetLoadData
;
nsresult
mStatus
;
Maybe
<
const
Encoding
*
>
mEncodingFromBOM
;
nsCString
mBytes
;
nsAutoCStringN
<
3
>
mBOMBytes
;
nsCOMPtr
<
nsIRequest
>
mRequest
;
nsCOMPtr
<
nsIURI
>
mFinalChannelURI
;
nsCOMPtr
<
nsIPrincipal
>
mChannelResultPrincipal
;
bool
mOnStopProcessingDone
{
false
}
;
RefPtr
<
SheetLoadDataHolder
>
mMainThreadSheetLoadData
;
#
ifdef
NIGHTLY_BUILD
bool
mChannelOpenFailed
=
false
;
#
endif
}
;
}
#
endif
