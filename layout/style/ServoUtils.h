#
ifndef
mozilla_ServoUtils_h
#
define
mozilla_ServoUtils_h
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
TypeTraits
.
h
"
#
include
"
MainThreadUtils
.
h
"
namespace
mozilla
{
void
AssertIsMainThreadOrServoFontMetricsLocked
(
)
;
class
ServoStyleSet
;
extern
ServoStyleSet
*
sInServoTraversal
;
inline
bool
IsInServoTraversal
(
)
{
MOZ_ASSERT
(
sInServoTraversal
|
|
NS_IsMainThread
(
)
)
;
return
sInServoTraversal
;
}
}
#
define
MOZ_DECL_STYLO_CONVERT_METHODS_SERVO
(
servotype_
)
\
inline
servotype_
*
AsServo
(
)
;
\
inline
const
servotype_
*
AsServo
(
)
const
;
\
inline
servotype_
*
GetAsServo
(
)
;
\
inline
const
servotype_
*
GetAsServo
(
)
const
;
#
define
MOZ_DECL_STYLO_CONVERT_METHODS
(
geckotype_
servotype_
)
\
MOZ_DECL_STYLO_CONVERT_METHODS_SERVO
(
servotype_
)
#
define
MOZ_DECL_STYLO_METHODS
(
geckotype_
servotype_
)
\
MOZ_DECL_STYLO_CONVERT_METHODS
(
geckotype_
servotype_
)
#
define
MOZ_DEFINE_STYLO_METHODS_SERVO
(
type_
servotype_
)
\
servotype_
*
type_
:
:
AsServo
(
)
{
\
return
static_cast
<
servotype_
*
>
(
this
)
;
\
}
\
const
servotype_
*
type_
:
:
AsServo
(
)
const
{
\
return
static_cast
<
const
servotype_
*
>
(
this
)
;
\
}
\
servotype_
*
type_
:
:
GetAsServo
(
)
{
\
return
AsServo
(
)
;
\
}
\
const
servotype_
*
type_
:
:
GetAsServo
(
)
const
{
\
return
AsServo
(
)
;
\
}
#
define
MOZ_DEFINE_STYLO_METHODS
(
type_
geckotype_
servotype_
)
\
MOZ_DEFINE_STYLO_METHODS_SERVO
(
type_
servotype_
)
#
define
MOZ_STYLO_THIS_TYPE
mozilla
:
:
RemovePointer
<
decltype
(
this
)
>
:
:
Type
#
define
MOZ_STYLO_SERVO_TYPE
mozilla
:
:
RemovePointer
<
decltype
(
AsServo
(
)
)
>
:
:
Type
#
define
MOZ_STYLO_FORWARD_CONCRETE
(
method_
geckoargs_
servoargs_
)
\
return
AsServo
(
)
-
>
method_
servoargs_
;
#
define
MOZ_STYLO_FORWARD
(
method_
args_
)
\
MOZ_STYLO_FORWARD_CONCRETE
(
method_
args_
args_
)
#
endif
