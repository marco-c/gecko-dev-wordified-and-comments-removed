#
ifndef
nsFontFaceLoader_h_
#
define
nsFontFaceLoader_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
TimeStamp
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIStreamLoader
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsCSSRules
.
h
"
class
nsIPrincipal
;
class
nsFontFaceLoader
:
public
nsIStreamLoaderObserver
{
public
:
nsFontFaceLoader
(
gfxUserFontEntry
*
aFontToLoad
nsIURI
*
aFontURI
mozilla
:
:
dom
:
:
FontFaceSet
*
aFontFaceSet
nsIChannel
*
aChannel
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSISTREAMLOADEROBSERVER
nsresult
Init
(
)
;
void
Cancel
(
)
;
void
DropChannel
(
)
{
mChannel
=
nullptr
;
}
void
StartedLoading
(
nsIStreamLoader
*
aStreamLoader
)
;
static
void
LoadTimerCallback
(
nsITimer
*
aTimer
void
*
aClosure
)
;
static
nsresult
CheckLoadAllowed
(
nsIPrincipal
*
aSourcePrincipal
nsIURI
*
aTargetURI
nsISupports
*
aContext
)
;
gfxUserFontEntry
*
GetUserFontEntry
(
)
const
{
return
mUserFontEntry
;
}
protected
:
virtual
~
nsFontFaceLoader
(
)
;
private
:
RefPtr
<
gfxUserFontEntry
>
mUserFontEntry
;
nsCOMPtr
<
nsIURI
>
mFontURI
;
RefPtr
<
mozilla
:
:
dom
:
:
FontFaceSet
>
mFontFaceSet
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsITimer
>
mLoadTimer
;
TimeStamp
mStartTime
;
nsIStreamLoader
*
mStreamLoader
;
}
;
#
endif
