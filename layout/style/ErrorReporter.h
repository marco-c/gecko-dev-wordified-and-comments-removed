#
ifndef
mozilla_css_ErrorReporter_h_
#
define
mozilla_css_ErrorReporter_h_
#
include
"
nsString
.
h
"
struct
nsCSSToken
;
class
nsIURI
;
namespace
mozilla
{
class
StyleSheet
;
namespace
dom
{
class
Document
;
}
namespace
css
{
class
Loader
;
class
MOZ_STACK_CLASS
ErrorReporter
final
{
public
:
ErrorReporter
(
const
StyleSheet
*
aSheet
const
Loader
*
aLoader
nsIURI
*
aURI
)
;
~
ErrorReporter
(
)
;
static
void
ReleaseGlobals
(
)
;
static
void
EnsureGlobalsInitialized
(
)
{
if
(
MOZ_UNLIKELY
(
!
sInitialized
)
)
{
InitGlobals
(
)
;
}
}
static
bool
ShouldReportErrors
(
const
dom
:
:
Document
&
)
;
static
bool
ShouldReportErrors
(
const
StyleSheet
*
aSheet
const
Loader
*
aLoader
)
;
void
OutputError
(
uint32_t
aLineNumber
uint32_t
aLineOffset
const
nsACString
&
aSource
const
nsACString
&
aSelectors
)
;
void
ClearError
(
)
;
void
ReportUnexpected
(
const
char
*
aMessage
)
;
void
ReportUnexpectedUnescaped
(
const
char
*
aMessage
const
nsAutoString
&
aParam
)
;
private
:
void
OutputError
(
)
;
void
AddToError
(
const
nsString
&
aErrorText
)
;
static
void
InitGlobals
(
)
;
static
bool
sInitialized
;
static
bool
sReportErrors
;
nsString
mError
;
nsString
mErrorLine
;
nsString
mFileName
;
nsString
mSelectors
;
const
StyleSheet
*
mSheet
;
const
Loader
*
mLoader
;
nsIURI
*
mURI
;
uint32_t
mErrorLineNumber
;
uint32_t
mPrevErrorLineNumber
;
uint32_t
mErrorColNumber
;
}
;
}
}
#
endif
