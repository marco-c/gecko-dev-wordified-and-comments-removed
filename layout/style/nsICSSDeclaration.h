#
ifndef
nsICSSDeclaration_h__
#
define
nsICSSDeclaration_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
mozilla
/
dom
/
CSSValue
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
nsCOMPtr
.
h
"
class
nsINode
;
class
nsIPrincipal
;
namespace
mozilla
{
namespace
css
{
class
Rule
;
}
namespace
dom
{
class
DocGroup
;
}
}
#
define
NS_ICSSDECLARATION_IID
\
{
0xdbeabbfa
0x6cb3
0x4f5c
\
{
0xae
0xc2
0xdd
0x55
0x8d
0x9d
0x68
0x1f
}
}
class
nsICSSDeclaration
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_ICSSDECLARATION_IID
)
virtual
nsINode
*
GetParentObject
(
)
=
0
;
mozilla
:
:
dom
:
:
DocGroup
*
GetDocGroup
(
)
;
NS_IMETHOD
GetPropertyValue
(
const
nsAString
&
aPropName
nsAString
&
aValue
)
=
0
;
virtual
already_AddRefed
<
mozilla
:
:
dom
:
:
CSSValue
>
GetPropertyCSSValue
(
const
nsAString
&
aPropertyName
mozilla
:
:
ErrorResult
&
aRv
)
=
0
;
NS_IMETHOD
RemoveProperty
(
const
nsAString
&
aPropertyName
nsAString
&
aReturn
)
=
0
;
NS_IMETHOD
SetProperty
(
const
nsAString
&
aPropertyName
const
nsAString
&
aValue
const
nsAString
&
aPriority
nsIPrincipal
*
aSubjectPrincipal
=
nullptr
)
=
0
;
NS_IMETHOD
GetLength
(
uint32_t
*
aLength
)
=
0
;
void
Item
(
uint32_t
aIndex
nsAString
&
aReturn
)
{
bool
found
;
IndexedGetter
(
aIndex
found
aReturn
)
;
if
(
!
found
)
{
aReturn
.
Truncate
(
)
;
}
}
virtual
void
SetCssText
(
const
nsAString
&
aString
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
rv
)
=
0
;
virtual
void
GetCssText
(
nsAString
&
aString
)
=
0
;
uint32_t
Length
(
)
{
uint32_t
length
;
GetLength
(
&
length
)
;
return
length
;
}
void
Item
(
uint32_t
aIndex
nsString
&
aPropName
)
{
Item
(
aIndex
static_cast
<
nsAString
&
>
(
aPropName
)
)
;
}
virtual
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsAString
&
aPropName
)
=
0
;
void
GetPropertyValue
(
const
nsAString
&
aPropName
nsString
&
aValue
mozilla
:
:
ErrorResult
&
rv
)
{
rv
=
GetPropertyValue
(
aPropName
aValue
)
;
}
virtual
void
GetPropertyPriority
(
const
nsAString
&
aPropName
nsAString
&
aPriority
)
=
0
;
void
SetProperty
(
const
nsAString
&
aPropName
const
nsAString
&
aValue
const
nsAString
&
aPriority
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
rv
)
{
rv
=
SetProperty
(
aPropName
aValue
aPriority
aSubjectPrincipal
)
;
}
void
RemoveProperty
(
const
nsAString
&
aPropName
nsString
&
aRetval
mozilla
:
:
ErrorResult
&
rv
)
{
rv
=
RemoveProperty
(
aPropName
aRetval
)
;
}
virtual
mozilla
:
:
css
:
:
Rule
*
GetParentRule
(
)
=
0
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
nsICSSDeclaration
NS_ICSSDECLARATION_IID
)
#
define
NS_DECL_NSIDOMCSSSTYLEDECLARATION_HELPER
\
void
GetCssText
(
nsAString
&
aCssText
)
override
;
\
void
SetCssText
(
const
nsAString
&
aCssText
\
nsIPrincipal
*
aSubjectPrincipal
\
mozilla
:
:
ErrorResult
&
aRv
)
override
;
\
NS_IMETHOD
GetPropertyValue
(
const
nsAString
&
propertyName
nsAString
&
_retval
)
override
;
\
NS_IMETHOD
RemoveProperty
(
const
nsAString
&
propertyName
nsAString
&
_retval
)
override
;
\
void
GetPropertyPriority
(
const
nsAString
&
propertyName
\
nsAString
&
aPriority
)
override
;
\
NS_IMETHOD
SetProperty
(
const
nsAString
&
propertyName
\
const
nsAString
&
value
\
const
nsAString
&
priority
\
nsIPrincipal
*
aSubjectPrincipal
=
nullptr
)
override
;
\
NS_IMETHOD
GetLength
(
uint32_t
*
aLength
)
override
;
\
mozilla
:
:
css
:
:
Rule
*
GetParentRule
(
)
override
;
#
endif
