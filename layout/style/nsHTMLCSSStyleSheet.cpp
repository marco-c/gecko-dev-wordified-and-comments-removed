#
include
"
nsHTMLCSSStyleSheet
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
DeclarationBlock
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsAttrValueInlines
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
nsHTMLCSSStyleSheet
:
:
nsHTMLCSSStyleSheet
(
)
=
default
;
nsHTMLCSSStyleSheet
:
:
~
nsHTMLCSSStyleSheet
(
)
{
for
(
auto
iter
=
mCachedStyleAttrs
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
MiscContainer
*
&
value
=
iter
.
Data
(
)
;
if
(
value
-
>
mType
=
=
nsAttrValue
:
:
eCSSDeclaration
)
{
DeclarationBlock
*
declaration
=
value
-
>
mValue
.
mCSSDeclaration
;
declaration
-
>
SetHTMLCSSStyleSheet
(
nullptr
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
unexpected
cached
nsAttrValue
type
"
)
;
}
value
-
>
mValue
.
mCached
=
0
;
iter
.
Remove
(
)
;
}
}
void
nsHTMLCSSStyleSheet
:
:
CacheStyleAttr
(
const
nsAString
&
aSerialized
MiscContainer
*
aValue
)
{
mCachedStyleAttrs
.
InsertOrUpdate
(
aSerialized
aValue
)
;
}
void
nsHTMLCSSStyleSheet
:
:
EvictStyleAttr
(
const
nsAString
&
aSerialized
MiscContainer
*
aValue
)
{
#
ifdef
DEBUG
{
NS_ASSERTION
(
aValue
=
=
mCachedStyleAttrs
.
Get
(
aSerialized
)
"
Cached
value
does
not
match
?
!
"
)
;
}
#
endif
mCachedStyleAttrs
.
Remove
(
aSerialized
)
;
}
MiscContainer
*
nsHTMLCSSStyleSheet
:
:
LookupStyleAttr
(
const
nsAString
&
aSerialized
)
{
return
mCachedStyleAttrs
.
Get
(
aSerialized
)
;
}
