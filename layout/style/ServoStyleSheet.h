#
ifndef
mozilla_ServoStyleSheet_h
#
define
mozilla_ServoStyleSheet_h
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInfo
.
h
"
#
include
"
mozilla
/
URLExtraData
.
h
"
#
include
"
nsCompatibility
.
h
"
#
include
"
nsStringFwd
.
h
"
namespace
mozilla
{
class
ServoCSSRuleList
;
namespace
css
{
class
Loader
;
class
LoaderReusableStyleSheets
;
class
SheetLoadData
;
}
struct
ServoStyleSheetInner
final
:
public
StyleSheetInfo
{
ServoStyleSheetInner
(
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
css
:
:
SheetParsingMode
aParsingMode
)
;
ServoStyleSheetInner
(
ServoStyleSheetInner
&
aCopy
ServoStyleSheet
*
aPrimarySheet
)
;
~
ServoStyleSheetInner
(
)
;
StyleSheetInfo
*
CloneFor
(
StyleSheet
*
aPrimarySheet
)
override
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
RefPtr
<
const
RawServoStyleSheetContents
>
mContents
;
RefPtr
<
URLExtraData
>
mURLData
;
}
;
#
define
NS_SERVO_STYLE_SHEET_IMPL_CID
\
{
0xa6f31472
0xab69
0x4beb
\
{
0x86
0x0f
0xc2
0x21
0x43
0x1e
0xad
0x77
}
}
class
ServoStyleSheet
:
public
StyleSheet
{
public
:
ServoStyleSheet
(
css
:
:
SheetParsingMode
aParsingMode
CORSMode
aCORSMode
net
:
:
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
)
;
already_AddRefed
<
ServoStyleSheet
>
CreateEmptyChildSheet
(
already_AddRefed
<
dom
:
:
MediaList
>
aMediaList
)
const
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
ServoStyleSheet
StyleSheet
)
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_SERVO_STYLE_SHEET_IMPL_CID
)
bool
HasRules
(
)
const
;
MOZ_MUST_USE
nsresult
ParseSheet
(
css
:
:
Loader
*
aLoader
Span
<
const
uint8_t
>
aInput
nsIURI
*
aSheetURI
nsIURI
*
aBaseURI
nsIPrincipal
*
aSheetPrincipal
css
:
:
SheetLoadData
*
aLoadData
uint32_t
aLineNumber
nsCompatibility
aCompatMode
css
:
:
LoaderReusableStyleSheets
*
aReusableSheets
=
nullptr
)
;
nsresult
ReparseSheet
(
const
nsAString
&
aInput
)
;
const
RawServoStyleSheetContents
*
RawContents
(
)
const
{
return
Inner
(
)
-
>
mContents
;
}
void
SetContentsForImport
(
const
RawServoStyleSheetContents
*
aContents
)
{
MOZ_ASSERT
(
!
Inner
(
)
-
>
mContents
)
;
Inner
(
)
-
>
mContents
=
aContents
;
}
URLExtraData
*
URLData
(
)
const
{
return
Inner
(
)
-
>
mURLData
;
}
void
DidDirty
(
)
override
{
}
already_AddRefed
<
StyleSheet
>
Clone
(
StyleSheet
*
aCloneParent
dom
:
:
CSSImportRule
*
aCloneOwnerRule
nsIDocument
*
aCloneDocument
nsINode
*
aCloneOwningNode
)
const
final
;
NS_IMETHOD
StyleSheetLoaded
(
StyleSheet
*
aSheet
bool
aWasAlternate
nsresult
aStatus
)
final
;
ServoCSSRuleList
*
GetCssRulesInternal
(
)
;
OriginFlags
GetOrigin
(
)
;
protected
:
virtual
~
ServoStyleSheet
(
)
;
void
LastRelease
(
)
;
ServoStyleSheetInner
*
Inner
(
)
const
{
return
static_cast
<
ServoStyleSheetInner
*
>
(
mInner
)
;
}
uint32_t
InsertRuleInternal
(
const
nsAString
&
aRule
uint32_t
aIndex
ErrorResult
&
aRv
)
;
void
DeleteRuleInternal
(
uint32_t
aIndex
ErrorResult
&
aRv
)
;
nsresult
InsertRuleIntoGroupInternal
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
;
void
EnabledStateChangedInternal
(
)
{
}
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
override
;
private
:
ServoStyleSheet
(
const
ServoStyleSheet
&
aCopy
ServoStyleSheet
*
aParentToUse
dom
:
:
CSSImportRule
*
aOwnerRuleToUse
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
void
FinishParse
(
)
;
void
DropRuleList
(
)
;
void
BuildChildListAfterInnerClone
(
)
;
RefPtr
<
ServoCSSRuleList
>
mRuleList
;
friend
class
StyleSheet
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
ServoStyleSheet
NS_SERVO_STYLE_SHEET_IMPL_CID
)
}
#
endif
