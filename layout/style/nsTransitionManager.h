#
ifndef
nsTransitionManager_h_
#
define
nsTransitionManager_h_
#
include
"
mozilla
/
dom
/
CSSTransition
.
h
"
#
include
"
AnimationCommon
.
h
"
#
include
"
nsISupportsImpl
.
h
"
class
nsPresContext
;
class
nsCSSPropertyIDSet
;
struct
nsStyleUIReset
;
namespace
mozilla
{
class
AnimatedPropertyIDSet
;
class
ComputedStyle
;
enum
class
PseudoStyleType
:
uint8_t
;
}
class
nsTransitionManager
final
:
public
mozilla
:
:
CommonAnimationManager
<
mozilla
:
:
dom
:
:
CSSTransition
>
{
public
:
explicit
nsTransitionManager
(
nsPresContext
*
aPresContext
)
:
mozilla
:
:
CommonAnimationManager
<
mozilla
:
:
dom
:
:
CSSTransition
>
(
aPresContext
)
{
}
~
nsTransitionManager
(
)
final
=
default
;
typedef
mozilla
:
:
AnimationCollection
<
mozilla
:
:
dom
:
:
CSSTransition
>
CSSTransitionCollection
;
bool
UpdateTransitions
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
PseudoStyleType
aPseudoType
const
mozilla
:
:
ComputedStyle
&
aOldStyle
const
mozilla
:
:
ComputedStyle
&
aNewStyle
)
;
protected
:
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
dom
:
:
CSSTransition
>
>
OwningCSSTransitionPtrArray
;
bool
DoUpdateTransitions
(
const
nsStyleUIReset
&
aStyle
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
PseudoStyleType
aPseudoType
CSSTransitionCollection
*
&
aElementTransitions
const
mozilla
:
:
ComputedStyle
&
aOldStyle
const
mozilla
:
:
ComputedStyle
&
aNewStyle
)
;
bool
ConsiderInitiatingTransition
(
const
mozilla
:
:
AnimatedPropertyID
&
const
nsStyleUIReset
&
aStyle
uint32_t
transitionIdx
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
PseudoStyleType
aPseudoType
CSSTransitionCollection
*
&
aElementTransitions
const
mozilla
:
:
ComputedStyle
&
aOldStyle
const
mozilla
:
:
ComputedStyle
&
aNewStyle
mozilla
:
:
AnimatedPropertyIDSet
&
aPropertiesChecked
)
;
already_AddRefed
<
mozilla
:
:
dom
:
:
CSSTransition
>
DoCreateTransition
(
const
mozilla
:
:
AnimatedPropertyID
&
aProperty
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
PseudoStyleType
aPseudoType
const
mozilla
:
:
ComputedStyle
&
aNewStyle
CSSTransitionCollection
*
&
aElementTransitions
mozilla
:
:
TimingParams
&
&
aTiming
mozilla
:
:
AnimationValue
&
&
aStartValue
mozilla
:
:
AnimationValue
&
&
aEndValue
mozilla
:
:
AnimationValue
&
&
aStartForReversingTest
double
aReversePortion
)
;
void
DoCancelTransition
(
mozilla
:
:
dom
:
:
Element
*
aElement
mozilla
:
:
PseudoStyleType
aPseudoType
CSSTransitionCollection
*
&
aElementTransitions
size_t
aIndex
)
;
}
;
#
endif
