#
ifndef
mozilla_ServoStyleContext_h
#
define
mozilla_ServoStyleContext_h
#
include
"
nsStyleContext
.
h
"
namespace
mozilla
{
class
ServoStyleContext
final
:
public
nsStyleContext
{
public
:
static
already_AddRefed
<
ServoStyleContext
>
Create
(
nsStyleContext
*
aParentContext
nsPresContext
*
aPresContext
nsIAtom
*
aPseudoTag
mozilla
:
:
CSSPseudoElementType
aPseudoType
already_AddRefed
<
ServoComputedValues
>
aComputedValues
)
;
ServoStyleContext
(
nsStyleContext
*
aParent
nsPresContext
*
aPresContext
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
already_AddRefed
<
ServoComputedValues
>
aComputedValues
)
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
ServoComputedValues
*
ComputedValues
(
)
const
{
return
mSource
;
}
~
ServoStyleContext
(
)
{
Destructor
(
)
;
}
void
ResolveSameStructsAs
(
nsPresContext
*
aPresContext
ServoStyleContext
*
aOther
)
{
uint64_t
ourBits
=
mBits
&
NS_STYLE_INHERIT_MASK
;
uint64_t
otherBits
=
aOther
-
>
mBits
&
NS_STYLE_INHERIT_MASK
;
MOZ_ASSERT
(
(
otherBits
|
ourBits
)
=
=
otherBits
"
otherBits
should
be
a
superset
"
)
;
uint64_t
newBits
=
(
ourBits
^
otherBits
)
&
NS_STYLE_INHERIT_MASK
;
#
define
STYLE_STRUCT
(
name_
checkdata_cb
)
\
if
(
nsStyle
#
#
name_
:
:
kHasFinishStyle
&
&
newBits
&
NS_STYLE_INHERIT_BIT
(
name_
)
)
{
\
const
nsStyle
#
#
name_
*
data
=
Servo_GetStyle
#
#
name_
(
ComputedValues
(
)
)
;
\
const_cast
<
nsStyle
#
#
name_
*
>
(
data
)
-
>
FinishStyle
(
aPresContext
)
;
\
}
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
mBits
|
=
newBits
;
}
private
:
nsPresContext
*
mPresContext
;
RefPtr
<
ServoComputedValues
>
mSource
;
}
;
}
#
endif
