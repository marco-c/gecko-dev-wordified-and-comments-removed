#
ifndef
mozilla_ServoCSSParser_h
#
define
mozilla_ServoCSSParser_h
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoStyleConsts
.
h
"
#
include
"
mozilla
/
ServoTypes
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsDOMCSSDeclaration
.
h
"
#
include
"
nsStringFwd
.
h
"
struct
nsCSSRect
;
struct
nsTimingFunction
;
struct
RawServoDeclarationBlock
;
namespace
mozilla
{
class
ServoStyleSet
;
class
SharedFontList
;
struct
URLExtraData
;
namespace
css
{
class
Loader
;
}
namespace
dom
{
class
Document
;
}
class
ServoCSSParser
{
public
:
using
ParsingEnvironment
=
nsDOMCSSDeclaration
:
:
ParsingEnvironment
;
static
bool
IsValidCSSColor
(
const
nsAString
&
aValue
)
;
static
bool
ComputeColor
(
ServoStyleSet
*
aStyleSet
nscolor
aCurrentColor
const
nsAString
&
aValue
nscolor
*
aResultColor
bool
*
aWasCurrentColor
=
nullptr
css
:
:
Loader
*
aLoader
=
nullptr
)
;
static
already_AddRefed
<
RawServoDeclarationBlock
>
ParseProperty
(
nsCSSPropertyID
aProperty
const
nsAString
&
aValue
const
ParsingEnvironment
&
aParsingEnvironment
ParsingMode
aParsingMode
=
ParsingMode
:
:
Default
)
;
static
bool
ParseEasing
(
const
nsAString
&
aValue
URLExtraData
*
aUrl
nsTimingFunction
&
aResult
)
;
static
bool
ParseTransformIntoMatrix
(
const
nsAString
&
aValue
bool
&
aContains3DTransform
gfx
:
:
Matrix4x4
&
aResult
)
;
static
bool
ParseFontShorthandForMatching
(
const
nsAString
&
aValue
URLExtraData
*
aUrl
RefPtr
<
SharedFontList
>
&
aList
StyleComputedFontStyleDescriptor
&
aStyle
float
&
aStretch
float
&
aWeight
)
;
static
already_AddRefed
<
URLExtraData
>
GetURLExtraData
(
dom
:
:
Document
*
)
;
static
ParsingEnvironment
GetParsingEnvironment
(
dom
:
:
Document
*
)
;
}
;
}
#
endif
