#
ifndef
mozilla_AnimationCollection_h
#
define
mozilla_AnimationCollection_h
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
class
nsAtom
;
class
nsIFrame
;
class
nsPresContext
;
namespace
mozilla
{
template
<
class
AnimationType
>
struct
AnimationTypeTraits
{
}
;
template
<
class
AnimationType
>
class
AnimationCollection
:
public
LinkedListElement
<
AnimationCollection
<
AnimationType
>
>
{
typedef
AnimationCollection
<
AnimationType
>
SelfType
;
typedef
AnimationTypeTraits
<
AnimationType
>
TraitsType
;
AnimationCollection
(
dom
:
:
Element
*
aElement
nsAtom
*
aElementProperty
)
:
mElement
(
aElement
)
mElementProperty
(
aElementProperty
)
{
MOZ_COUNT_CTOR
(
AnimationCollection
)
;
}
public
:
~
AnimationCollection
(
)
{
MOZ_ASSERT
(
mCalledPropertyDtor
"
must
call
destructor
through
element
property
dtor
"
)
;
MOZ_COUNT_DTOR
(
AnimationCollection
)
;
LinkedListElement
<
SelfType
>
:
:
remove
(
)
;
}
void
Destroy
(
)
{
mCalledDestroy
=
true
;
mElement
-
>
RemoveProperty
(
mElementProperty
)
;
}
static
void
PropertyDtor
(
void
*
aObject
nsAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
;
static
AnimationCollection
<
AnimationType
>
*
GetAnimationCollection
(
const
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
)
;
static
AnimationCollection
<
AnimationType
>
*
GetAnimationCollection
(
const
nsIFrame
*
aFrame
)
;
static
AnimationCollection
<
AnimationType
>
*
GetOrCreateAnimationCollection
(
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
bool
*
aCreatedCollection
)
;
dom
:
:
Element
*
mElement
;
nsAtom
*
mElementProperty
;
nsTArray
<
RefPtr
<
AnimationType
>
>
mAnimations
;
private
:
static
nsAtom
*
GetPropertyAtomForPseudoType
(
PseudoStyleType
aPseudoType
)
;
bool
mCalledDestroy
=
false
;
#
ifdef
DEBUG
bool
mCalledPropertyDtor
=
false
;
#
endif
}
;
}
#
endif
