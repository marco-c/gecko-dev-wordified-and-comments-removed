#
ifndef
mozilla_AnimationCollection_h
#
define
mozilla_AnimationCollection_h
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsTArray
.
h
"
class
nsIAtom
;
class
nsPresContext
;
namespace
mozilla
{
class
CommonAnimationManager
;
typedef
InfallibleTArray
<
RefPtr
<
dom
:
:
Animation
>
>
AnimationPtrArray
;
struct
AnimationCollection
:
public
LinkedListElement
<
AnimationCollection
>
{
AnimationCollection
(
dom
:
:
Element
*
aElement
nsIAtom
*
aElementProperty
CommonAnimationManager
*
aManager
)
:
mElement
(
aElement
)
mElementProperty
(
aElementProperty
)
mManager
(
aManager
)
mCheckGeneration
(
0
)
#
ifdef
DEBUG
mCalledPropertyDtor
(
false
)
#
endif
{
MOZ_COUNT_CTOR
(
AnimationCollection
)
;
}
~
AnimationCollection
(
)
{
MOZ_ASSERT
(
mCalledPropertyDtor
"
must
call
destructor
through
element
property
dtor
"
)
;
MOZ_COUNT_DTOR
(
AnimationCollection
)
;
remove
(
)
;
}
void
Destroy
(
)
{
mElement
-
>
DeleteProperty
(
mElementProperty
)
;
}
static
void
PropertyDtor
(
void
*
aObject
nsIAtom
*
aPropertyName
void
*
aPropertyValue
void
*
aData
)
;
public
:
bool
IsForElement
(
)
const
{
return
mElementProperty
=
=
nsGkAtoms
:
:
animationsProperty
|
|
mElementProperty
=
=
nsGkAtoms
:
:
transitionsProperty
;
}
bool
IsForBeforePseudo
(
)
const
{
return
mElementProperty
=
=
nsGkAtoms
:
:
animationsOfBeforeProperty
|
|
mElementProperty
=
=
nsGkAtoms
:
:
transitionsOfBeforeProperty
;
}
bool
IsForAfterPseudo
(
)
const
{
return
mElementProperty
=
=
nsGkAtoms
:
:
animationsOfAfterProperty
|
|
mElementProperty
=
=
nsGkAtoms
:
:
transitionsOfAfterProperty
;
}
CSSPseudoElementType
PseudoElementType
(
)
const
{
if
(
IsForElement
(
)
)
{
return
CSSPseudoElementType
:
:
NotPseudo
;
}
if
(
IsForBeforePseudo
(
)
)
{
return
CSSPseudoElementType
:
:
before
;
}
MOZ_ASSERT
(
IsForAfterPseudo
(
)
"
:
:
before
&
:
:
after
should
be
the
only
pseudo
-
elements
here
"
)
;
return
CSSPseudoElementType
:
:
after
;
}
static
nsString
PseudoTypeAsString
(
CSSPseudoElementType
aPseudoType
)
;
dom
:
:
Element
*
mElement
;
nsIAtom
*
mElementProperty
;
CommonAnimationManager
*
mManager
;
AnimationPtrArray
mAnimations
;
uint64_t
mCheckGeneration
;
void
UpdateCheckGeneration
(
nsPresContext
*
aPresContext
)
;
private
:
#
ifdef
DEBUG
bool
mCalledPropertyDtor
;
#
endif
}
;
}
#
endif
