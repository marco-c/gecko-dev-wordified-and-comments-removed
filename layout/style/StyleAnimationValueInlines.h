#
ifndef
mozilla_StyleAnimationValueInlines_h_
#
define
mozilla_StyleAnimationValueInlines_h_
#
include
"
mozilla
/
StyleAnimationValue
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
namespace
mozilla
{
bool
AnimationValue
:
:
operator
=
=
(
const
AnimationValue
&
aOther
)
const
{
if
(
mServo
)
{
return
Servo_AnimationValue_DeepEqual
(
mServo
aOther
.
mServo
)
;
}
return
mGecko
=
=
aOther
.
mGecko
;
}
float
AnimationValue
:
:
GetOpacity
(
)
const
{
return
mServo
?
Servo_AnimationValue_GetOpacity
(
mServo
)
:
mGecko
.
GetFloatValue
(
)
;
}
gfxSize
AnimationValue
:
:
GetScaleValue
(
const
nsIFrame
*
aFrame
)
const
{
if
(
mServo
)
{
RefPtr
<
nsCSSValueSharedList
>
list
;
Servo_AnimationValue_GetTransform
(
mServo
&
list
)
;
return
nsStyleTransformMatrix
:
:
GetScaleValue
(
list
aFrame
)
;
}
return
mGecko
.
GetScaleValue
(
aFrame
)
;
}
void
AnimationValue
:
:
SerializeSpecifiedValue
(
nsCSSPropertyID
aProperty
nsAString
&
aString
)
const
{
if
(
mServo
)
{
Servo_AnimationValue_Serialize
(
mServo
aProperty
&
aString
)
;
return
;
}
DebugOnly
<
bool
>
uncomputeResult
=
StyleAnimationValue
:
:
UncomputeValue
(
aProperty
mGecko
aString
)
;
MOZ_ASSERT
(
uncomputeResult
"
failed
to
uncompute
StyleAnimationValue
"
)
;
}
}
#
endif
