#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
DocumentStyleRootIterator
.
h
"
#
include
"
mozilla
/
ServoRestyleManager
.
h
"
#
include
"
mozilla
/
dom
/
ChildIterator
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
ElementInlines
.
h
"
#
include
"
nsAnimationManager
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsHTMLStyleSheet
.
h
"
#
include
"
nsIDocumentInlines
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsStyleSet
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
ServoStyleSet
:
:
ServoStyleSet
(
)
:
mPresContext
(
nullptr
)
mBatching
(
0
)
{
}
void
ServoStyleSet
:
:
Init
(
nsPresContext
*
aPresContext
)
{
mPresContext
=
aPresContext
;
mRawSet
.
reset
(
Servo_StyleSet_Init
(
aPresContext
)
)
;
for
(
auto
&
sheetArray
:
mSheets
)
{
for
(
auto
&
sheet
:
sheetArray
)
{
Servo_StyleSet_AppendStyleSheet
(
mRawSet
.
get
(
)
sheet
-
>
RawSheet
(
)
false
)
;
}
}
}
void
ServoStyleSet
:
:
BeginShutdown
(
)
{
DocumentStyleRootIterator
iter
(
mPresContext
-
>
Document
(
)
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
ServoRestyleManager
:
:
ClearServoDataFromSubtree
(
root
)
;
}
}
void
ServoStyleSet
:
:
Shutdown
(
)
{
mRawSet
=
nullptr
;
}
bool
ServoStyleSet
:
:
GetAuthorStyleDisabled
(
)
const
{
return
false
;
}
nsresult
ServoStyleSet
:
:
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
void
ServoStyleSet
:
:
BeginUpdate
(
)
{
+
+
mBatching
;
}
nsresult
ServoStyleSet
:
:
EndUpdate
(
)
{
MOZ_ASSERT
(
mBatching
>
0
)
;
if
(
-
-
mBatching
>
0
)
{
return
NS_OK
;
}
Servo_StyleSet_FlushStyleSheets
(
mRawSet
.
get
(
)
)
;
return
NS_OK
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleFor
(
Element
*
aElement
nsStyleContext
*
aParentContext
LazyComputeBehavior
aMayCompute
)
{
return
GetContext
(
aElement
aParentContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
aMayCompute
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
GetContext
(
nsIContent
*
aContent
nsStyleContext
*
aParentContext
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
LazyComputeBehavior
aMayCompute
)
{
MOZ_ASSERT
(
aContent
-
>
IsElement
(
)
)
;
Element
*
element
=
aContent
-
>
AsElement
(
)
;
ResolveMappedAttrDeclarationBlocks
(
)
;
RefPtr
<
ServoComputedValues
>
computedValues
;
if
(
aMayCompute
=
=
LazyComputeBehavior
:
:
Allow
)
{
computedValues
=
Servo_ResolveStyleLazily
(
element
nullptr
mRawSet
.
get
(
)
)
.
Consume
(
)
;
}
else
{
computedValues
=
ResolveServoStyle
(
element
)
;
}
MOZ_ASSERT
(
computedValues
)
;
return
GetContext
(
computedValues
.
forget
(
)
aParentContext
aPseudoTag
aPseudoType
element
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
GetContext
(
already_AddRefed
<
ServoComputedValues
>
aComputedValues
nsStyleContext
*
aParentContext
nsIAtom
*
aPseudoTag
CSSPseudoElementType
aPseudoType
Element
*
aElementForAnimation
)
{
bool
skipFixup
=
false
;
RefPtr
<
nsStyleContext
>
result
=
NS_NewStyleContext
(
aParentContext
mPresContext
aPseudoTag
aPseudoType
Move
(
aComputedValues
)
skipFixup
)
;
if
(
mPresContext
-
>
IsDynamic
(
)
&
&
aElementForAnimation
&
&
aElementForAnimation
-
>
IsInComposedDoc
(
)
)
{
mPresContext
-
>
AnimationManager
(
)
-
>
UpdateAnimations
(
result
aElementForAnimation
)
;
}
return
result
.
forget
(
)
;
}
void
ServoStyleSet
:
:
ResolveMappedAttrDeclarationBlocks
(
)
{
if
(
nsHTMLStyleSheet
*
sheet
=
mPresContext
-
>
Document
(
)
-
>
GetAttributeStyleSheet
(
)
)
{
sheet
-
>
CalculateMappedServoDeclarations
(
)
;
}
}
void
ServoStyleSet
:
:
PrepareAndTraverseSubtree
(
RawGeckoElementBorrowed
aRoot
mozilla
:
:
TraversalRootBehavior
aRootBehavior
)
{
ResolveMappedAttrDeclarationBlocks
(
)
;
Servo_TraverseSubtree
(
aRoot
mRawSet
.
get
(
)
aRootBehavior
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleFor
(
Element
*
aElement
nsStyleContext
*
aParentContext
LazyComputeBehavior
aMayCompute
TreeMatchContext
&
aTreeMatchContext
)
{
return
ResolveStyleFor
(
aElement
aParentContext
aMayCompute
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleForText
(
nsIContent
*
aTextNode
nsStyleContext
*
aParentContext
)
{
MOZ_ASSERT
(
aTextNode
&
&
aTextNode
-
>
IsNodeOfType
(
nsINode
:
:
eTEXT
)
)
;
MOZ_ASSERT
(
aTextNode
-
>
GetParent
(
)
)
;
MOZ_ASSERT
(
aParentContext
)
;
const
ServoComputedValues
*
parentComputedValues
=
aParentContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
;
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ComputedValues_Inherit
(
mRawSet
.
get
(
)
parentComputedValues
)
.
Consume
(
)
;
return
GetContext
(
computedValues
.
forget
(
)
aParentContext
nsCSSAnonBoxes
:
:
mozText
CSSPseudoElementType
:
:
AnonBox
nullptr
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleForOtherNonElement
(
nsStyleContext
*
aParentContext
)
{
const
ServoComputedValues
*
parent
=
aParentContext
?
aParentContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
:
nullptr
;
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ComputedValues_Inherit
(
mRawSet
.
get
(
)
parent
)
.
Consume
(
)
;
MOZ_ASSERT
(
computedValues
)
;
return
GetContext
(
computedValues
.
forget
(
)
aParentContext
nsCSSAnonBoxes
:
:
mozOtherNonElement
CSSPseudoElementType
:
:
AnonBox
nullptr
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolvePseudoElementStyle
(
Element
*
aOriginatingElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
Element
*
aPseudoElement
)
{
if
(
aPseudoElement
)
{
NS_ERROR
(
"
stylo
:
We
don
'
t
support
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
yet
"
)
;
}
MOZ_ASSERT
(
aType
<
CSSPseudoElementType
:
:
Count
)
;
nsIAtom
*
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
aType
)
;
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ResolvePseudoStyle
(
aOriginatingElement
pseudoTag
false
mRawSet
.
get
(
)
)
.
Consume
(
)
;
MOZ_ASSERT
(
computedValues
)
;
bool
isBeforeOrAfter
=
aType
=
=
CSSPseudoElementType
:
:
before
|
|
aType
=
=
CSSPseudoElementType
:
:
after
;
return
GetContext
(
computedValues
.
forget
(
)
aParentContext
pseudoTag
aType
isBeforeOrAfter
?
aOriginatingElement
:
nullptr
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveTransientStyle
(
Element
*
aElement
CSSPseudoElementType
aType
)
{
nsIAtom
*
pseudoTag
=
nullptr
;
if
(
aType
!
=
CSSPseudoElementType
:
:
NotPseudo
)
{
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
aType
)
;
}
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ResolveStyleLazily
(
aElement
pseudoTag
mRawSet
.
get
(
)
)
.
Consume
(
)
;
return
GetContext
(
computedValues
.
forget
(
)
nullptr
pseudoTag
aType
nullptr
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
)
{
MOZ_ASSERT
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aPseudoTag
)
)
;
MOZ_ASSERT
(
aFlags
=
=
0
|
|
aFlags
=
=
nsStyleSet
:
:
eSkipParentDisplayBasedStyleFixup
)
;
bool
skipFixup
=
aFlags
&
nsStyleSet
:
:
eSkipParentDisplayBasedStyleFixup
;
const
ServoComputedValues
*
parentStyle
=
aParentContext
?
aParentContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
:
nullptr
;
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ComputedValues_GetForAnonymousBox
(
parentStyle
aPseudoTag
mRawSet
.
get
(
)
)
.
Consume
(
)
;
#
ifdef
DEBUG
if
(
!
computedValues
)
{
nsString
pseudo
;
aPseudoTag
-
>
ToString
(
pseudo
)
;
NS_ERROR
(
nsPrintfCString
(
"
stylo
:
could
not
get
anon
-
box
:
%
s
"
NS_ConvertUTF16toUTF8
(
pseudo
)
.
get
(
)
)
.
get
(
)
)
;
MOZ_CRASH
(
)
;
}
#
endif
return
NS_NewStyleContext
(
aParentContext
mPresContext
aPseudoTag
CSSPseudoElementType
:
:
AnonBox
computedValues
.
forget
(
)
skipFixup
)
;
}
nsresult
ServoStyleSet
:
:
AppendStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
mSheets
[
aType
]
.
AppendElement
(
aSheet
)
;
if
(
mRawSet
)
{
Servo_StyleSet_AppendStyleSheet
(
mRawSet
.
get
(
)
aSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
PrependStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
mSheets
[
aType
]
.
InsertElementAt
(
0
aSheet
)
;
if
(
mRawSet
)
{
Servo_StyleSet_PrependStyleSheet
(
mRawSet
.
get
(
)
aSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
RemoveStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
if
(
mRawSet
)
{
Servo_StyleSet_RemoveStyleSheet
(
mRawSet
.
get
(
)
aSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
ServoStyleSheet
>
>
&
aNewSheets
)
{
if
(
mRawSet
)
{
for
(
ServoStyleSheet
*
sheet
:
mSheets
[
aType
]
)
{
Servo_StyleSet_RemoveStyleSheet
(
mRawSet
.
get
(
)
sheet
-
>
RawSheet
(
)
false
)
;
}
}
mSheets
[
aType
]
.
Clear
(
)
;
mSheets
[
aType
]
.
AppendElements
(
aNewSheets
)
;
if
(
mRawSet
)
{
for
(
ServoStyleSheet
*
sheet
:
mSheets
[
aType
]
)
{
Servo_StyleSet_AppendStyleSheet
(
mRawSet
.
get
(
)
sheet
-
>
RawSheet
(
)
false
)
;
}
}
if
(
!
mBatching
)
{
Servo_StyleSet_FlushStyleSheets
(
mRawSet
.
get
(
)
)
;
}
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
InsertStyleSheetBefore
(
SheetType
aType
ServoStyleSheet
*
aNewSheet
ServoStyleSheet
*
aReferenceSheet
)
{
MOZ_ASSERT
(
aNewSheet
)
;
MOZ_ASSERT
(
aReferenceSheet
)
;
MOZ_ASSERT
(
aNewSheet
-
>
IsApplicable
(
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aNewSheet
)
;
size_t
idx
=
mSheets
[
aType
]
.
IndexOf
(
aReferenceSheet
)
;
if
(
idx
=
=
mSheets
[
aType
]
.
NoIndex
)
{
return
NS_ERROR_INVALID_ARG
;
}
mSheets
[
aType
]
.
InsertElementAt
(
idx
aNewSheet
)
;
if
(
mRawSet
)
{
Servo_StyleSet_InsertStyleSheetBefore
(
mRawSet
.
get
(
)
aNewSheet
-
>
RawSheet
(
)
aReferenceSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
return
NS_OK
;
}
int32_t
ServoStyleSet
:
:
SheetCount
(
SheetType
aType
)
const
{
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
return
mSheets
[
aType
]
.
Length
(
)
;
}
ServoStyleSheet
*
ServoStyleSet
:
:
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
{
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
return
mSheets
[
aType
]
[
aIndex
]
;
}
nsresult
ServoStyleSet
:
:
RemoveDocStyleSheet
(
ServoStyleSheet
*
aSheet
)
{
return
RemoveStyleSheet
(
SheetType
:
:
Doc
aSheet
)
;
}
nsresult
ServoStyleSet
:
:
AddDocStyleSheet
(
ServoStyleSheet
*
aSheet
nsIDocument
*
aDocument
)
{
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
RefPtr
<
StyleSheet
>
strong
(
aSheet
)
;
mSheets
[
SheetType
:
:
Doc
]
.
RemoveElement
(
aSheet
)
;
size_t
index
=
aDocument
-
>
FindDocStyleSheetInsertionPoint
(
mSheets
[
SheetType
:
:
Doc
]
aSheet
)
;
mSheets
[
SheetType
:
:
Doc
]
.
InsertElementAt
(
index
aSheet
)
;
if
(
mRawSet
)
{
ServoStyleSheet
*
followingSheet
=
mSheets
[
SheetType
:
:
Doc
]
.
SafeElementAt
(
index
+
1
)
;
if
(
followingSheet
)
{
Servo_StyleSet_InsertStyleSheetBefore
(
mRawSet
.
get
(
)
aSheet
-
>
RawSheet
(
)
followingSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
else
{
Servo_StyleSet_AppendStyleSheet
(
mRawSet
.
get
(
)
aSheet
-
>
RawSheet
(
)
!
mBatching
)
;
}
}
return
NS_OK
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ProbePseudoElementStyle
(
Element
*
aOriginatingElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
{
MOZ_ASSERT
(
aType
<
CSSPseudoElementType
:
:
Count
)
;
nsIAtom
*
pseudoTag
=
nsCSSPseudoElements
:
:
GetPseudoAtom
(
aType
)
;
RefPtr
<
ServoComputedValues
>
computedValues
=
Servo_ResolvePseudoStyle
(
aOriginatingElement
pseudoTag
true
mRawSet
.
get
(
)
)
.
Consume
(
)
;
if
(
!
computedValues
)
{
return
nullptr
;
}
bool
isBeforeOrAfter
=
pseudoTag
=
=
nsCSSPseudoElements
:
:
before
|
|
pseudoTag
=
=
nsCSSPseudoElements
:
:
after
;
if
(
isBeforeOrAfter
)
{
const
nsStyleDisplay
*
display
=
Servo_GetStyleDisplay
(
computedValues
)
;
const
nsStyleContent
*
content
=
Servo_GetStyleContent
(
computedValues
)
;
if
(
display
-
>
mDisplay
=
=
StyleDisplay
:
:
None
|
|
content
-
>
ContentCount
(
)
=
=
0
)
{
return
nullptr
;
}
}
return
GetContext
(
computedValues
.
forget
(
)
aParentContext
pseudoTag
aType
isBeforeOrAfter
?
aOriginatingElement
:
nullptr
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ProbePseudoElementStyle
(
Element
*
aOriginatingElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
Element
*
aPseudoElement
)
{
if
(
aPseudoElement
)
{
NS_ERROR
(
"
stylo
:
We
don
'
t
support
CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE
yet
"
)
;
}
return
ProbePseudoElementStyle
(
aOriginatingElement
aType
aParentContext
)
;
}
nsRestyleHint
ServoStyleSet
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
EventStates
aStateMask
)
{
NS_WARNING
(
"
stylo
:
HasStateDependentStyle
always
returns
zero
!
"
)
;
return
nsRestyleHint
(
0
)
;
}
nsRestyleHint
ServoStyleSet
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
dom
:
:
Element
*
aPseudoElement
EventStates
aStateMask
)
{
NS_WARNING
(
"
stylo
:
HasStateDependentStyle
always
returns
zero
!
"
)
;
return
nsRestyleHint
(
0
)
;
}
void
ServoStyleSet
:
:
StyleDocument
(
)
{
DocumentStyleRootIterator
iter
(
mPresContext
-
>
Document
(
)
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
if
(
root
-
>
ShouldTraverseForServo
(
)
)
{
PrepareAndTraverseSubtree
(
root
TraversalRootBehavior
:
:
Normal
)
;
}
}
}
void
ServoStyleSet
:
:
StyleNewSubtree
(
Element
*
aRoot
)
{
MOZ_ASSERT
(
!
aRoot
-
>
HasServoData
(
)
)
;
PrepareAndTraverseSubtree
(
aRoot
TraversalRootBehavior
:
:
Normal
)
;
}
void
ServoStyleSet
:
:
StyleNewChildren
(
Element
*
aParent
)
{
PrepareAndTraverseSubtree
(
aParent
TraversalRootBehavior
:
:
UnstyledChildrenOnly
)
;
}
void
ServoStyleSet
:
:
NoteStyleSheetsChanged
(
)
{
Servo_StyleSet_NoteStyleSheetsChanged
(
mRawSet
.
get
(
)
)
;
}
#
ifdef
DEBUG
void
ServoStyleSet
:
:
AssertTreeIsClean
(
)
{
DocumentStyleRootIterator
iter
(
mPresContext
-
>
Document
(
)
)
;
while
(
Element
*
root
=
iter
.
GetNextStyleRoot
(
)
)
{
Servo_AssertTreeIsClean
(
root
)
;
}
}
#
endif
bool
ServoStyleSet
:
:
FillKeyframesForName
(
const
nsString
&
aName
const
nsTimingFunction
&
aTimingFunction
const
ServoComputedValues
*
aComputedValues
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
NS_ConvertUTF16toUTF8
name
(
aName
)
;
return
Servo_StyleSet_FillKeyframesForName
(
mRawSet
.
get
(
)
&
name
&
aTimingFunction
aComputedValues
&
aKeyframes
)
;
}
void
ServoStyleSet
:
:
RebuildData
(
)
{
Servo_StyleSet_RebuildData
(
mRawSet
.
get
(
)
)
;
}
ServoComputedValuesStrong
ServoStyleSet
:
:
RestyleWithAddedDeclaration
(
RawServoDeclarationBlock
*
aDeclarations
const
ServoComputedValues
*
aPreviousStyle
)
{
return
Servo_RestyleWithAddedDeclaration
(
mRawSet
.
get
(
)
aDeclarations
aPreviousStyle
)
;
}
already_AddRefed
<
ServoComputedValues
>
ServoStyleSet
:
:
ResolveServoStyle
(
Element
*
aElement
)
{
return
Servo_ResolveStyle
(
aElement
mRawSet
.
get
(
)
)
.
Consume
(
)
;
}
