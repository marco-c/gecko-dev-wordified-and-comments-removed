#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
nsCSSAnonBoxes
.
h
"
#
include
"
nsCSSPseudoElements
.
h
"
#
include
"
nsStyleContext
.
h
"
#
include
"
nsStyleSet
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
ServoStyleSet
:
:
ServoStyleSet
(
)
:
mPresContext
(
nullptr
)
mRawSet
(
Servo_InitStyleSet
(
)
)
mBatching
(
0
)
{
}
void
ServoStyleSet
:
:
Init
(
nsPresContext
*
aPresContext
)
{
mPresContext
=
aPresContext
;
}
void
ServoStyleSet
:
:
BeginShutdown
(
)
{
}
void
ServoStyleSet
:
:
Shutdown
(
)
{
mRawSet
=
nullptr
;
}
bool
ServoStyleSet
:
:
GetAuthorStyleDisabled
(
)
const
{
return
false
;
}
nsresult
ServoStyleSet
:
:
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
void
ServoStyleSet
:
:
BeginUpdate
(
)
{
+
+
mBatching
;
}
nsresult
ServoStyleSet
:
:
EndUpdate
(
)
{
MOZ_ASSERT
(
mBatching
>
0
)
;
if
(
-
-
mBatching
>
0
)
{
return
NS_OK
;
}
return
NS_OK
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleFor
(
Element
*
aElement
nsStyleContext
*
aParentContext
)
{
RefPtr
<
ServoComputedValues
>
computedValues
=
dont_AddRef
(
Servo_GetComputedValues
(
aElement
)
)
;
MOZ_ASSERT
(
computedValues
)
;
bool
skipFixup
=
false
;
return
NS_NewStyleContext
(
aParentContext
mPresContext
nullptr
CSSPseudoElementType
:
:
NotPseudo
computedValues
.
forget
(
)
skipFixup
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleFor
(
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveStyleForNonElement
(
nsStyleContext
*
aParentContext
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolvePseudoElementStyle
(
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
Element
*
aPseudoElement
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
)
{
MOZ_ASSERT
(
nsCSSAnonBoxes
:
:
IsAnonBox
(
aPseudoTag
)
)
;
MOZ_ASSERT
(
aFlags
=
=
0
|
|
aFlags
=
=
nsStyleSet
:
:
eSkipParentDisplayBasedStyleFixup
)
;
bool
skipFixup
=
aFlags
&
nsStyleSet
:
:
eSkipParentDisplayBasedStyleFixup
;
ServoComputedValues
*
parentStyle
=
aParentContext
?
aParentContext
-
>
StyleSource
(
)
.
AsServoComputedValues
(
)
:
nullptr
;
RefPtr
<
ServoComputedValues
>
computedValues
=
dont_AddRef
(
Servo_GetComputedValuesForAnonymousBox
(
parentStyle
aPseudoTag
)
)
;
MOZ_ASSERT
(
computedValues
)
;
return
NS_NewStyleContext
(
aParentContext
mPresContext
nullptr
CSSPseudoElementType
:
:
AnonBox
computedValues
.
forget
(
)
skipFixup
)
;
}
nsresult
ServoStyleSet
:
:
AppendStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
mSheets
[
aType
]
.
AppendElement
(
aSheet
)
;
Servo_AppendStyleSheet
(
aSheet
-
>
RawSheet
(
)
mRawSet
.
get
(
)
)
;
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
PrependStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
mSheets
[
aType
]
.
InsertElementAt
(
0
aSheet
)
;
Servo_PrependStyleSheet
(
aSheet
-
>
RawSheet
(
)
mRawSet
.
get
(
)
)
;
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
RemoveStyleSheet
(
SheetType
aType
ServoStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
aSheet
)
;
MOZ_ASSERT
(
aSheet
-
>
IsApplicable
(
)
)
;
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
mSheets
[
aType
]
.
RemoveElement
(
aSheet
)
;
Servo_RemoveStyleSheet
(
aSheet
-
>
RawSheet
(
)
mRawSet
.
get
(
)
)
;
return
NS_OK
;
}
nsresult
ServoStyleSet
:
:
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
ServoStyleSheet
>
>
&
aNewSheets
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
nsresult
ServoStyleSet
:
:
InsertStyleSheetBefore
(
SheetType
aType
ServoStyleSheet
*
aNewSheet
ServoStyleSheet
*
aReferenceSheet
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
int32_t
ServoStyleSet
:
:
SheetCount
(
SheetType
aType
)
const
{
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
return
mSheets
[
aType
]
.
Length
(
)
;
}
ServoStyleSheet
*
ServoStyleSet
:
:
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
{
MOZ_ASSERT
(
nsStyleSet
:
:
IsCSSSheetType
(
aType
)
)
;
return
mSheets
[
aType
]
[
aIndex
]
;
}
nsresult
ServoStyleSet
:
:
RemoveDocStyleSheet
(
ServoStyleSheet
*
aSheet
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
nsresult
ServoStyleSet
:
:
AddDocStyleSheet
(
ServoStyleSheet
*
aSheet
nsIDocument
*
aDocument
)
{
NS_ERROR
(
"
stylo
:
no
support
for
adding
doc
stylesheets
to
ServoStyleSet
"
)
;
return
NS_OK
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ProbePseudoElementStyle
(
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
already_AddRefed
<
nsStyleContext
>
ServoStyleSet
:
:
ProbePseudoElementStyle
(
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
Element
*
aPseudoElement
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
nsRestyleHint
ServoStyleSet
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
EventStates
aStateMask
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
nsRestyleHint
ServoStyleSet
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
dom
:
:
Element
*
aPseudoElement
EventStates
aStateMask
)
{
MOZ_CRASH
(
"
stylo
:
not
implemented
"
)
;
}
