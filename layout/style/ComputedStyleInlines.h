#
ifndef
ComputedStyleInlines_h
#
define
ComputedStyleInlines_h
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Assertions
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsStyleStructInlines
.
h
"
namespace
mozilla
{
namespace
detail
{
template
<
typename
T
const
T
*
(
ComputedStyle
:
:
*
Method
)
(
)
const
>
void
TriggerImageLoads
(
dom
:
:
Document
&
aDocument
const
ComputedStyle
*
aOldStyle
ComputedStyle
*
aStyle
)
{
if
constexpr
(
T
:
:
kHasTriggerImageLoads
)
{
auto
*
old
=
aOldStyle
?
(
aOldStyle
-
>
*
Method
)
(
)
:
nullptr
;
auto
*
current
=
const_cast
<
T
*
>
(
(
aStyle
-
>
*
Method
)
(
)
)
;
current
-
>
TriggerImageLoads
(
aDocument
old
)
;
}
else
{
Unused
<
<
aOldStyle
;
Unused
<
<
aStyle
;
}
}
}
void
ComputedStyle
:
:
StartImageLoads
(
dom
:
:
Document
&
aDocument
const
ComputedStyle
*
aOldStyle
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
#
define
STYLE_STRUCT
(
name_
)
\
detail
:
:
TriggerImageLoads
<
nsStyle
#
#
name_
&
ComputedStyle
:
:
Style
#
#
name_
>
(
\
aDocument
aOldStyle
this
)
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
}
StylePointerEvents
ComputedStyle
:
:
PointerEvents
(
)
const
{
if
(
IsRootElementStyle
(
)
)
{
return
StylePointerEvents
:
:
Auto
;
}
auto
&
ui
=
*
StyleUI
(
)
;
if
(
ui
.
IsInert
(
)
)
{
return
StylePointerEvents
:
:
None
;
}
return
ui
.
ComputedPointerEvents
(
)
;
}
StyleUserSelect
ComputedStyle
:
:
UserSelect
(
)
const
{
return
StyleUI
(
)
-
>
IsInert
(
)
?
StyleUserSelect
:
:
None
:
StyleUIReset
(
)
-
>
ComputedUserSelect
(
)
;
}
bool
ComputedStyle
:
:
IsFixedPosContainingBlockForNonSVGTextFrames
(
)
const
{
if
(
IsRootElementStyle
(
)
)
{
return
false
;
}
const
auto
&
disp
=
*
StyleDisplay
(
)
;
if
(
disp
.
mWillChange
.
bits
&
mozilla
:
:
StyleWillChangeBits
:
:
FIXPOS_CB_NON_SVG
)
{
return
true
;
}
const
auto
&
effects
=
*
StyleEffects
(
)
;
return
effects
.
HasFilters
(
)
|
|
effects
.
HasBackdropFilters
(
)
;
}
bool
ComputedStyle
:
:
IsFixedPosContainingBlock
(
const
nsIFrame
*
aContextFrame
)
const
{
if
(
mozilla
:
:
SVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
)
{
return
false
;
}
if
(
IsFixedPosContainingBlockForNonSVGTextFrames
(
)
)
{
return
true
;
}
const
auto
&
disp
=
*
StyleDisplay
(
)
;
if
(
disp
.
IsFixedPosContainingBlockForContainLayoutAndPaintSupportingFrames
(
)
&
&
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsContainLayoutAndPaint
)
)
{
return
true
;
}
if
(
disp
.
IsFixedPosContainingBlockForTransformSupportingFrames
(
)
&
&
aContextFrame
-
>
IsFrameOfType
(
nsIFrame
:
:
eSupportsCSSTransforms
)
)
{
return
true
;
}
return
false
;
}
bool
ComputedStyle
:
:
IsAbsPosContainingBlock
(
const
nsIFrame
*
aContextFrame
)
const
{
if
(
IsFixedPosContainingBlock
(
aContextFrame
)
)
{
return
true
;
}
return
StyleDisplay
(
)
-
>
IsPositionedStyle
(
)
&
&
!
mozilla
:
:
SVGUtils
:
:
IsInSVGTextSubtree
(
aContextFrame
)
;
}
}
#
endif
