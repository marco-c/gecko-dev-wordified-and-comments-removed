#
ifndef
ComputedStyleInlines_h
#
define
ComputedStyleInlines_h
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
mozilla
/
ServoComputedDataInlines
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
namespace
mozilla
{
#
define
STYLE_STRUCT
(
name_
)
\
const
nsStyle
#
#
name_
*
\
ComputedStyle
:
:
Style
#
#
name_
(
)
{
\
return
DoGetStyle
#
#
name_
<
true
>
(
)
;
\
}
\
const
nsStyle
#
#
name_
*
\
ComputedStyle
:
:
ThreadsafeStyle
#
#
name_
(
)
{
\
if
(
mozilla
:
:
IsInServoTraversal
(
)
)
{
\
return
ComputedData
(
)
-
>
GetStyle
#
#
name_
(
)
;
\
}
\
return
Style
#
#
name_
(
)
;
\
}
\
const
nsStyle
#
#
name_
*
ComputedStyle
:
:
PeekStyle
#
#
name_
(
)
{
\
return
DoGetStyle
#
#
name_
<
false
>
(
)
;
\
}
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
#
define
STYLE_STRUCT_INHERITED
(
name_
)
\
template
<
bool
aComputeData
>
\
const
nsStyle
#
#
name_
*
ComputedStyle
:
:
DoGetStyle
#
#
name_
(
)
{
\
const
auto
kStructID
=
StyleStructID
:
:
name_
;
\
const
bool
needToCompute
=
!
HasRequestedStruct
(
kStructID
)
;
\
if
(
!
aComputeData
&
&
needToCompute
)
{
\
return
nullptr
;
\
}
\
const
nsStyle
#
#
name_
*
data
=
ComputedData
(
)
-
>
GetStyle
#
#
name_
(
)
;
\
/
*
perform
any
remaining
main
thread
work
on
the
struct
*
/
\
if
(
needToCompute
)
{
\
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
\
MOZ_ASSERT
(
!
mozilla
:
:
IsInServoTraversal
(
)
)
;
\
const_cast
<
nsStyle
#
#
name_
*
>
(
data
)
-
>
FinishStyle
(
mPresContext
nullptr
)
;
\
/
*
the
ComputedStyle
owns
the
struct
*
/
\
SetRequestedStruct
(
kStructID
)
;
\
}
\
return
data
;
\
}
#
define
STYLE_STRUCT_RESET
(
name_
)
\
template
<
bool
aComputeData
>
\
const
nsStyle
#
#
name_
*
ComputedStyle
:
:
DoGetStyle
#
#
name_
(
)
{
\
const
auto
kStructID
=
StyleStructID
:
:
name_
;
\
const
bool
needToCompute
=
!
HasRequestedStruct
(
kStructID
)
;
\
if
(
!
aComputeData
&
&
needToCompute
)
{
\
return
nullptr
;
\
}
\
const
nsStyle
#
#
name_
*
data
=
ComputedData
(
)
-
>
GetStyle
#
#
name_
(
)
;
\
/
*
perform
any
remaining
main
thread
work
on
the
struct
*
/
\
if
(
needToCompute
)
{
\
const_cast
<
nsStyle
#
#
name_
*
>
(
data
)
-
>
FinishStyle
(
mPresContext
nullptr
)
;
\
/
*
the
ComputedStyle
owns
the
struct
*
/
\
SetRequestedStruct
(
kStructID
)
;
\
}
\
return
data
;
\
}
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT_RESET
#
undef
STYLE_STRUCT_INHERITED
void
ComputedStyle
:
:
StartBackgroundImageLoads
(
)
{
StyleBackground
(
)
;
}
void
ComputedStyle
:
:
ResolveSameStructsAs
(
const
ComputedStyle
*
aOther
)
{
auto
newBits
=
aOther
-
>
mRequestedStructs
&
~
mRequestedStructs
;
#
define
STYLE_STRUCT
(
name_
)
\
if
(
nsStyle
#
#
name_
:
:
kHasFinishStyle
&
&
\
(
newBits
&
StyleStructConstants
:
:
BitFor
(
StyleStructID
:
:
name_
)
)
)
{
\
const
nsStyle
#
#
name_
*
data
=
ComputedData
(
)
-
>
GetStyle
#
#
name_
(
)
;
\
const
nsStyle
#
#
name_
*
oldData
=
aOther
-
>
ComputedData
(
)
-
>
GetStyle
#
#
name_
(
)
;
\
const_cast
<
nsStyle
#
#
name_
*
>
(
data
)
-
>
FinishStyle
(
mPresContext
oldData
)
;
\
}
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
mRequestedStructs
|
=
newBits
;
}
}
#
endif
