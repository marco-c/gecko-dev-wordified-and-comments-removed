#
include
"
nsFontFaceUtils
.
h
"
#
include
"
gfxTextRun
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
RestyleManager
.
h
"
#
include
"
mozilla
/
SVGUtils
.
h
"
#
include
"
nsFontMetrics
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsPlaceholderFrame
.
h
"
#
include
"
nsTArray
.
h
"
using
namespace
mozilla
;
enum
class
FontUsageKind
{
None
=
0
Frame
FrameAndFontMetrics
}
;
static
FontUsageKind
StyleFontUsage
(
ComputedStyle
*
aComputedStyle
nsPresContext
*
aPresContext
const
gfxUserFontSet
*
aUserFontSet
const
gfxUserFontEntry
*
aFont
const
nsAString
&
aFamilyName
)
{
MOZ_ASSERT
(
NS_ConvertUTF8toUTF16
(
aFont
-
>
FamilyName
(
)
)
=
=
aFamilyName
)
;
if
(
!
aComputedStyle
-
>
StyleFont
(
)
-
>
mFont
.
fontlist
.
Contains
(
aFamilyName
)
)
{
return
FontUsageKind
:
:
None
;
}
RefPtr
<
nsFontMetrics
>
fm
=
nsLayoutUtils
:
:
GetFontMetricsForComputedStyle
(
aComputedStyle
aPresContext
1
.
0f
)
;
if
(
!
fm
-
>
GetThebesFontGroup
(
)
-
>
ContainsUserFont
(
aFont
)
)
{
return
FontUsageKind
:
:
None
;
}
if
(
aComputedStyle
-
>
DependsOnFontMetrics
(
)
)
{
MOZ_ASSERT
(
aPresContext
-
>
UsesFontMetricsFromStyle
(
)
)
;
return
FontUsageKind
:
:
FrameAndFontMetrics
;
}
return
FontUsageKind
:
:
Frame
;
}
static
FontUsageKind
FrameFontUsage
(
nsIFrame
*
aFrame
nsPresContext
*
aPresContext
const
gfxUserFontEntry
*
aFont
const
nsAString
&
aFamilyName
)
{
gfxUserFontSet
*
ufs
=
aPresContext
-
>
GetUserFontSet
(
)
;
FontUsageKind
kind
=
StyleFontUsage
(
aFrame
-
>
Style
(
)
aPresContext
ufs
aFont
aFamilyName
)
;
if
(
kind
=
=
FontUsageKind
:
:
FrameAndFontMetrics
)
{
return
kind
;
}
int32_t
contextIndex
=
0
;
for
(
ComputedStyle
*
extraContext
;
(
extraContext
=
aFrame
-
>
GetAdditionalComputedStyle
(
contextIndex
)
)
;
+
+
contextIndex
)
{
kind
=
std
:
:
max
(
kind
StyleFontUsage
(
extraContext
aPresContext
ufs
aFont
aFamilyName
)
)
;
if
(
kind
=
=
FontUsageKind
:
:
FrameAndFontMetrics
)
{
break
;
}
}
return
kind
;
}
static
void
ScheduleReflow
(
PresShell
*
aPresShell
nsIFrame
*
aFrame
)
{
nsIFrame
*
f
=
aFrame
;
if
(
f
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
|
|
SVGUtils
:
:
IsInSVGTextSubtree
(
f
)
)
{
if
(
f
-
>
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
while
(
f
)
{
if
(
!
f
-
>
HasAnyStateBits
(
NS_FRAME_IS_NONDISPLAY
)
)
{
if
(
f
-
>
IsSubtreeDirty
(
)
)
{
return
;
}
if
(
f
-
>
IsSVGOuterSVGFrame
(
)
|
|
!
(
f
-
>
IsFrameOfType
(
nsIFrame
:
:
eSVG
)
|
|
SVGUtils
:
:
IsInSVGTextSubtree
(
f
)
)
)
{
break
;
}
f
-
>
AddStateBits
(
NS_FRAME_HAS_DIRTY_CHILDREN
)
;
}
f
=
f
-
>
GetParent
(
)
;
}
MOZ_ASSERT
(
f
"
should
have
found
an
ancestor
frame
to
reflow
"
)
;
}
}
aPresShell
-
>
FrameNeedsReflow
(
f
IntrinsicDirty
:
:
StyleChange
NS_FRAME_IS_DIRTY
)
;
}
enum
class
ReflowAlreadyScheduled
{
No
Yes
}
;
void
nsFontFaceUtils
:
:
MarkDirtyForFontChange
(
nsIFrame
*
aSubtreeRoot
const
gfxUserFontEntry
*
aFont
)
{
MOZ_ASSERT
(
aFont
)
;
AutoTArray
<
nsIFrame
*
4
>
subtrees
;
subtrees
.
AppendElement
(
aSubtreeRoot
)
;
nsPresContext
*
pc
=
aSubtreeRoot
-
>
PresContext
(
)
;
PresShell
*
presShell
=
pc
-
>
PresShell
(
)
;
NS_ConvertUTF8toUTF16
familyName
(
aFont
-
>
FamilyName
(
)
)
;
do
{
nsIFrame
*
subtreeRoot
=
subtrees
.
PopLastElement
(
)
;
AutoTArray
<
std
:
:
pair
<
nsIFrame
*
ReflowAlreadyScheduled
>
32
>
stack
;
stack
.
AppendElement
(
std
:
:
make_pair
(
subtreeRoot
ReflowAlreadyScheduled
:
:
No
)
)
;
do
{
auto
pair
=
stack
.
PopLastElement
(
)
;
nsIFrame
*
f
=
pair
.
first
;
ReflowAlreadyScheduled
alreadyScheduled
=
pair
.
second
;
FontUsageKind
kind
=
FrameFontUsage
(
f
pc
aFont
familyName
)
;
if
(
kind
!
=
FontUsageKind
:
:
None
)
{
if
(
alreadyScheduled
=
=
ReflowAlreadyScheduled
:
:
No
)
{
ScheduleReflow
(
presShell
f
)
;
alreadyScheduled
=
ReflowAlreadyScheduled
:
:
Yes
;
}
if
(
kind
=
=
FontUsageKind
:
:
FrameAndFontMetrics
)
{
MOZ_ASSERT
(
f
-
>
GetContent
(
)
&
&
f
-
>
GetContent
(
)
-
>
IsElement
(
)
"
How
could
we
target
a
non
-
element
with
selectors
?
"
)
;
f
-
>
PresContext
(
)
-
>
RestyleManager
(
)
-
>
PostRestyleEvent
(
dom
:
:
Element
:
:
FromNode
(
f
-
>
GetContent
(
)
)
RestyleHint
:
:
RECASCADE_SELF
nsChangeHint
(
0
)
)
;
}
}
if
(
alreadyScheduled
=
=
ReflowAlreadyScheduled
:
:
No
|
|
pc
-
>
UsesFontMetricsFromStyle
(
)
)
{
if
(
f
-
>
IsPlaceholderFrame
(
)
)
{
nsIFrame
*
oof
=
nsPlaceholderFrame
:
:
GetRealFrameForPlaceholder
(
f
)
;
if
(
!
nsLayoutUtils
:
:
IsProperAncestorFrame
(
subtreeRoot
oof
)
)
{
subtrees
.
AppendElement
(
oof
)
;
}
}
for
(
const
auto
&
childList
:
f
-
>
ChildLists
(
)
)
{
for
(
nsIFrame
*
kid
:
childList
.
mList
)
{
stack
.
AppendElement
(
std
:
:
make_pair
(
kid
alreadyScheduled
)
)
;
}
}
}
}
while
(
!
stack
.
IsEmpty
(
)
)
;
}
while
(
!
subtrees
.
IsEmpty
(
)
)
;
}
