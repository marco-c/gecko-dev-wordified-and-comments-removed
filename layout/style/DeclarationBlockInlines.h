#
ifndef
mozilla_DeclarationBlockInlines_h
#
define
mozilla_DeclarationBlockInlines_h
#
include
"
mozilla
/
ServoDeclarationBlock
.
h
"
namespace
mozilla
{
MOZ_DEFINE_STYLO_METHODS
(
DeclarationBlock
css
:
:
Declaration
ServoDeclarationBlock
)
MozExternalRefCountType
DeclarationBlock
:
:
AddRef
(
)
{
MOZ_STYLO_FORWARD
(
AddRef
(
)
)
}
MozExternalRefCountType
DeclarationBlock
:
:
Release
(
)
{
MOZ_STYLO_FORWARD
(
Release
(
)
)
}
already_AddRefed
<
DeclarationBlock
>
DeclarationBlock
:
:
Clone
(
)
const
{
return
do_AddRef
(
new
ServoDeclarationBlock
(
*
AsServo
(
)
)
)
;
}
already_AddRefed
<
DeclarationBlock
>
DeclarationBlock
:
:
EnsureMutable
(
)
{
if
(
!
IsDirty
(
)
)
{
return
Clone
(
)
;
}
if
(
!
IsMutable
(
)
)
{
return
Clone
(
)
;
}
return
do_AddRef
(
this
)
;
}
void
DeclarationBlock
:
:
ToString
(
nsAString
&
aString
)
const
{
MOZ_STYLO_FORWARD
(
ToString
(
aString
)
)
}
uint32_t
DeclarationBlock
:
:
Count
(
)
const
{
MOZ_STYLO_FORWARD
(
Count
(
)
)
}
bool
DeclarationBlock
:
:
GetNthProperty
(
uint32_t
aIndex
nsAString
&
aReturn
)
const
{
MOZ_STYLO_FORWARD
(
GetNthProperty
(
aIndex
aReturn
)
)
}
void
DeclarationBlock
:
:
GetPropertyValue
(
const
nsAString
&
aProperty
nsAString
&
aValue
)
const
{
MOZ_STYLO_FORWARD
(
GetPropertyValue
(
aProperty
aValue
)
)
}
void
DeclarationBlock
:
:
GetPropertyValueByID
(
nsCSSPropertyID
aPropID
nsAString
&
aValue
)
const
{
MOZ_STYLO_FORWARD
(
GetPropertyValueByID
(
aPropID
aValue
)
)
}
bool
DeclarationBlock
:
:
GetPropertyIsImportant
(
const
nsAString
&
aProperty
)
const
{
MOZ_STYLO_FORWARD
(
GetPropertyIsImportant
(
aProperty
)
)
}
bool
DeclarationBlock
:
:
RemoveProperty
(
const
nsAString
&
aProperty
)
{
MOZ_STYLO_FORWARD
(
RemoveProperty
(
aProperty
)
)
}
bool
DeclarationBlock
:
:
RemovePropertyByID
(
nsCSSPropertyID
aProperty
)
{
MOZ_STYLO_FORWARD
(
RemovePropertyByID
(
aProperty
)
)
}
}
#
endif
