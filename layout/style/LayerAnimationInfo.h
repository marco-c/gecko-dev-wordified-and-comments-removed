#
ifndef
mozilla_LayerAnimationInfo_h
#
define
mozilla_LayerAnimationInfo_h
#
include
"
nsChangeHint
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
nsDisplayList
.
h
"
#
include
"
mozilla
/
Array
.
h
"
namespace
mozilla
{
struct
LayerAnimationInfo
{
static
DisplayItemType
GetDisplayItemTypeForProperty
(
nsCSSPropertyID
aProperty
)
;
static
inline
const
nsCSSPropertyIDSet
&
GetCSSPropertiesFor
(
DisplayItemType
aDisplayItemType
)
{
static
const
nsCSSPropertyIDSet
transformProperties
=
nsCSSPropertyIDSet
{
eCSSProperty_transform
}
;
static
const
nsCSSPropertyIDSet
opacityProperties
=
nsCSSPropertyIDSet
{
eCSSProperty_opacity
}
;
static
const
nsCSSPropertyIDSet
backgroundColorProperties
=
nsCSSPropertyIDSet
{
eCSSProperty_background_color
}
;
static
const
nsCSSPropertyIDSet
empty
=
nsCSSPropertyIDSet
(
)
;
switch
(
aDisplayItemType
)
{
case
DisplayItemType
:
:
TYPE_BACKGROUND_COLOR
:
return
backgroundColorProperties
;
case
DisplayItemType
:
:
TYPE_OPACITY
:
return
opacityProperties
;
case
DisplayItemType
:
:
TYPE_TRANSFORM
:
return
transformProperties
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Should
not
be
called
for
display
item
types
"
"
that
are
not
able
to
have
animations
on
the
"
"
compositor
"
)
;
return
empty
;
}
}
static
inline
nsChangeHint
GetChangeHintFor
(
DisplayItemType
aDisplayItemType
)
{
switch
(
aDisplayItemType
)
{
case
DisplayItemType
:
:
TYPE_BACKGROUND_COLOR
:
return
nsChangeHint_RepaintFrame
;
case
DisplayItemType
:
:
TYPE_OPACITY
:
return
nsChangeHint_UpdateOpacityLayer
;
case
DisplayItemType
:
:
TYPE_TRANSFORM
:
return
nsChangeHint_UpdateTransformLayer
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Should
not
be
called
for
display
item
types
"
"
that
are
not
able
to
have
animations
on
the
"
"
compositor
"
)
;
return
nsChangeHint
(
0
)
;
}
}
static
const
Array
<
DisplayItemType
nsCSSPropertyIDSet
:
:
CompositorAnimatableCount
(
)
>
sDisplayItemTypes
;
}
;
}
#
endif
