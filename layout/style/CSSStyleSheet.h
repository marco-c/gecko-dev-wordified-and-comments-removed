#
ifndef
mozilla_CSSStyleSheet_h
#
define
mozilla_CSSStyleSheet_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
IncrementalClearCOMRuleArray
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInfo
.
h
"
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleSheetBinding
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsIDOMCSSStyleSheet
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
nsString
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
class
CSSRuleListImpl
;
class
nsCSSRuleProcessor
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsMediaList
;
class
nsMediaQueryResultCacheKey
;
class
nsStyleSet
;
class
nsPresContext
;
class
nsXMLNameSpaceMap
;
namespace
mozilla
{
struct
ChildSheetListBuilder
;
class
CSSStyleSheet
;
namespace
css
{
class
Rule
;
class
GroupRule
;
class
ImportRule
;
}
namespace
dom
{
class
CSSRuleList
;
}
class
CSSStyleSheetInner
:
public
StyleSheetInfo
{
public
:
friend
class
mozilla
:
:
CSSStyleSheet
;
friend
class
:
:
nsCSSRuleProcessor
;
private
:
CSSStyleSheetInner
(
CSSStyleSheet
*
aPrimarySheet
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
)
;
CSSStyleSheetInner
(
CSSStyleSheetInner
&
aCopy
CSSStyleSheet
*
aPrimarySheet
)
;
~
CSSStyleSheetInner
(
)
;
CSSStyleSheetInner
*
CloneFor
(
CSSStyleSheet
*
aPrimarySheet
)
;
void
AddSheet
(
CSSStyleSheet
*
aSheet
)
;
void
RemoveSheet
(
CSSStyleSheet
*
aSheet
)
;
void
RebuildNameSpaces
(
)
;
nsresult
CreateNamespaceMap
(
)
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
AutoTArray
<
CSSStyleSheet
*
8
>
mSheets
;
IncrementalClearCOMRuleArray
mOrderedRules
;
nsAutoPtr
<
nsXMLNameSpaceMap
>
mNameSpaceMap
;
RefPtr
<
CSSStyleSheet
>
mFirstChild
;
}
;
#
define
NS_CSS_STYLE_SHEET_IMPL_CID
\
{
0x7985c7ac
0x9ddc
0x444d
\
{
0x98
0x99
0x0c
0x86
0xec
0x12
0x2f
0x54
}
}
class
CSSStyleSheet
final
:
public
nsIDOMCSSStyleSheet
public
nsICSSLoaderObserver
public
nsWrapperCache
public
StyleSheet
{
public
:
typedef
net
:
:
ReferrerPolicy
ReferrerPolicy
;
CSSStyleSheet
(
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
)
;
CSSStyleSheet
(
CORSMode
aCORSMode
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
CSSStyleSheet
nsIDOMCSSStyleSheet
)
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_CSS_STYLE_SHEET_IMPL_CID
)
nsIURI
*
GetSheetURI
(
)
const
;
nsIURI
*
GetBaseURI
(
)
const
;
void
GetTitle
(
nsString
&
aTitle
)
const
;
void
GetType
(
nsString
&
aType
)
const
;
bool
HasRules
(
)
const
;
bool
IsApplicable
(
)
const
;
void
SetEnabled
(
bool
aEnabled
)
;
bool
IsComplete
(
)
const
;
void
SetComplete
(
)
;
CSSStyleSheet
*
GetParentSheet
(
)
const
;
nsIDocument
*
GetOwningDocument
(
)
const
;
void
SetOwningDocument
(
nsIDocument
*
aDocument
)
;
uint64_t
FindOwningWindowInnerID
(
)
const
;
#
ifdef
DEBUG
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
;
#
endif
void
AppendStyleSheet
(
CSSStyleSheet
*
aSheet
)
;
void
AppendStyleRule
(
css
:
:
Rule
*
aRule
)
;
int32_t
StyleRuleCount
(
)
const
;
css
:
:
Rule
*
GetStyleRuleAt
(
int32_t
aIndex
)
const
;
nsresult
DeleteRuleFromGroup
(
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
;
nsresult
InsertRuleIntoGroup
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
uint32_t
*
_retval
)
;
void
SetURIs
(
nsIURI
*
aSheetURI
nsIURI
*
aOriginalSheetURI
nsIURI
*
aBaseURI
)
;
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
nsIPrincipal
*
Principal
(
)
const
{
return
mInner
-
>
mPrincipal
;
}
void
SetTitle
(
const
nsAString
&
aTitle
)
{
mTitle
=
aTitle
;
}
void
SetMedia
(
nsMediaList
*
aMedia
)
;
void
SetOwnerRule
(
css
:
:
ImportRule
*
aOwnerRule
)
{
mOwnerRule
=
aOwnerRule
;
}
css
:
:
ImportRule
*
GetOwnerRule
(
)
const
{
return
mOwnerRule
;
}
nsXMLNameSpaceMap
*
GetNameSpaceMap
(
)
const
{
return
mInner
-
>
mNameSpaceMap
;
}
already_AddRefed
<
CSSStyleSheet
>
Clone
(
CSSStyleSheet
*
aCloneParent
css
:
:
ImportRule
*
aCloneOwnerRule
nsIDocument
*
aCloneDocument
nsINode
*
aCloneOwningNode
)
const
;
bool
IsModified
(
)
const
{
return
mDirty
;
}
void
SetModifiedByChildRule
(
)
{
NS_ASSERTION
(
mDirty
"
sheet
must
be
marked
dirty
before
handing
out
child
rules
"
)
;
DidDirty
(
)
;
}
nsresult
AddRuleProcessor
(
nsCSSRuleProcessor
*
aProcessor
)
;
nsresult
DropRuleProcessor
(
nsCSSRuleProcessor
*
aProcessor
)
;
void
AddStyleSet
(
nsStyleSet
*
aStyleSet
)
;
void
DropStyleSet
(
nsStyleSet
*
aStyleSet
)
;
nsresult
InsertRuleInternal
(
const
nsAString
&
aRule
uint32_t
aIndex
uint32_t
*
aReturn
)
;
nsIURI
*
GetOriginalURI
(
)
const
{
return
mInner
-
>
mOriginalSheetURI
;
}
NS_IMETHOD
StyleSheetLoaded
(
StyleSheetHandle
aSheet
bool
aWasAlternate
nsresult
aStatus
)
override
;
void
EnsureUniqueInner
(
)
;
void
AppendAllChildSheets
(
nsTArray
<
CSSStyleSheet
*
>
&
aArray
)
;
bool
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
const
;
nsresult
ReparseSheet
(
const
nsAString
&
aInput
)
;
void
SetInRuleProcessorCache
(
)
{
mInRuleProcessorCache
=
true
;
}
NS_DECL_NSIDOMSTYLESHEET
NS_DECL_NSIDOMCSSSTYLESHEET
static
bool
RebuildChildList
(
css
:
:
Rule
*
aRule
void
*
aBuilder
)
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
CORSMode
GetCORSMode
(
)
const
{
return
mInner
-
>
mCORSMode
;
}
ReferrerPolicy
GetReferrerPolicy
(
)
const
{
return
mInner
-
>
mReferrerPolicy
;
}
void
GetIntegrity
(
dom
:
:
SRIMetadata
&
aResult
)
const
{
aResult
=
mInner
-
>
mIntegrity
;
}
dom
:
:
Element
*
GetScopeElement
(
)
const
{
return
mScopeElement
;
}
void
SetScopeElement
(
dom
:
:
Element
*
aScopeElement
)
{
mScopeElement
=
aScopeElement
;
}
void
GetType
(
nsString
&
aType
)
{
const_cast
<
const
CSSStyleSheet
*
>
(
this
)
-
>
GetType
(
aType
)
;
}
nsINode
*
GetOwnerNode
(
)
const
{
return
mOwningNode
;
}
CSSStyleSheet
*
GetParentStyleSheet
(
)
const
{
return
mParent
;
}
void
GetTitle
(
nsString
&
aTitle
)
{
const_cast
<
const
CSSStyleSheet
*
>
(
this
)
-
>
GetTitle
(
aTitle
)
;
}
nsMediaList
*
Media
(
)
;
bool
Disabled
(
)
const
{
return
mDisabled
;
}
nsIDOMCSSRule
*
GetDOMOwnerRule
(
)
const
;
dom
:
:
CSSRuleList
*
GetCssRules
(
ErrorResult
&
aRv
)
;
uint32_t
InsertRule
(
const
nsAString
&
aRule
uint32_t
aIndex
ErrorResult
&
aRv
)
{
uint32_t
retval
;
aRv
=
InsertRule
(
aRule
aIndex
&
retval
)
;
return
retval
;
}
void
DeleteRule
(
uint32_t
aIndex
ErrorResult
&
aRv
)
{
aRv
=
DeleteRule
(
aIndex
)
;
}
dom
:
:
ParentObject
GetParentObject
(
)
const
{
if
(
mOwningNode
)
{
return
dom
:
:
ParentObject
(
mOwningNode
)
;
}
return
dom
:
:
ParentObject
(
static_cast
<
nsIDOMCSSStyleSheet
*
>
(
mParent
)
mParent
)
;
}
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
WillDirty
(
)
;
void
DidDirty
(
)
;
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
ParsingMode
(
)
;
private
:
CSSStyleSheet
(
const
CSSStyleSheet
&
aCopy
CSSStyleSheet
*
aParentToUse
css
:
:
ImportRule
*
aOwnerRuleToUse
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
CSSStyleSheet
(
const
CSSStyleSheet
&
aCopy
)
=
delete
;
CSSStyleSheet
&
operator
=
(
const
CSSStyleSheet
&
aCopy
)
=
delete
;
protected
:
virtual
~
CSSStyleSheet
(
)
;
void
ClearRuleCascades
(
)
;
nsresult
SubjectSubsumesInnerPrincipal
(
)
;
nsresult
RegisterNamespaceRule
(
css
:
:
Rule
*
aRule
)
;
void
DropRuleCollection
(
)
;
void
DropMedia
(
)
;
void
UnlinkInner
(
)
;
void
TraverseInner
(
nsCycleCollectionTraversalCallback
&
)
;
protected
:
nsString
mTitle
;
RefPtr
<
nsMediaList
>
mMedia
;
RefPtr
<
CSSStyleSheet
>
mNext
;
CSSStyleSheet
*
mParent
;
css
:
:
ImportRule
*
mOwnerRule
;
RefPtr
<
CSSRuleListImpl
>
mRuleCollection
;
bool
mDirty
;
bool
mInRuleProcessorCache
;
RefPtr
<
dom
:
:
Element
>
mScopeElement
;
CSSStyleSheetInner
*
mInner
;
AutoTArray
<
nsCSSRuleProcessor
*
8
>
*
mRuleProcessors
;
nsTArray
<
nsStyleSet
*
>
mStyleSets
;
friend
class
:
:
nsMediaList
;
friend
class
:
:
nsCSSRuleProcessor
;
friend
struct
mozilla
:
:
ChildSheetListBuilder
;
}
;
NS_DEFINE_STATIC_IID_ACCESSOR
(
CSSStyleSheet
NS_CSS_STYLE_SHEET_IMPL_CID
)
}
#
endif
