#
ifndef
nsStyleUtil_h___
#
define
nsStyleUtil_h___
#
include
"
nsCoord
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsTArrayForwardDeclare
.
h
"
#
include
"
gfxFontFamilyList
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
nsCRT
.
h
"
class
nsCSSValue
;
class
nsStyleCoord
;
class
nsIContent
;
class
nsIPrincipal
;
class
nsIURI
;
struct
gfxFontFeature
;
struct
gfxAlternateValue
;
struct
nsCSSValueList
;
namespace
mozilla
{
class
FontSlantStyle
;
}
class
nsStyleUtil
{
public
:
static
bool
DashMatchCompare
(
const
nsAString
&
aAttributeValue
const
nsAString
&
aSelectorValue
const
nsStringComparator
&
aComparator
)
;
static
bool
ValueIncludes
(
const
nsAString
&
aValueList
const
nsAString
&
aValue
const
nsStringComparator
&
aComparator
)
;
static
void
AppendEscapedCSSString
(
const
nsAString
&
aString
nsAString
&
aResult
char16_t
quoteChar
=
'
"
'
)
;
static
void
AppendEscapedCSSIdent
(
const
nsAString
&
aIdent
nsAString
&
aResult
)
;
static
void
AppendEscapedCSSFontFamilyList
(
const
mozilla
:
:
FontFamilyList
&
aFamilyList
nsAString
&
aResult
)
;
static
void
AppendEscapedCSSFontFamilyList
(
mozilla
:
:
SharedFontList
*
aFontlist
nsAString
&
aResult
)
{
AppendEscapedCSSFontFamilyList
(
aFontlist
-
>
mNames
aResult
)
;
}
static
void
AppendFontSlantStyle
(
const
mozilla
:
:
FontSlantStyle
&
nsAString
&
aResult
)
;
private
:
static
void
AppendEscapedCSSFontFamilyList
(
const
nsTArray
<
mozilla
:
:
FontFamilyName
>
&
aNames
nsAString
&
aResult
)
;
public
:
static
void
AppendBitmaskCSSValue
(
nsCSSPropertyID
aProperty
int32_t
aMaskedValue
int32_t
aFirstMask
int32_t
aLastMask
nsAString
&
aResult
)
;
static
void
AppendAngleValue
(
const
nsStyleCoord
&
aValue
nsAString
&
aResult
)
;
static
void
AppendPaintOrderValue
(
uint8_t
aValue
nsAString
&
aResult
)
;
static
void
AppendFontTagAsString
(
uint32_t
aTag
nsAString
&
aResult
)
;
static
void
AppendFontFeatureSettings
(
const
nsTArray
<
gfxFontFeature
>
&
aFeatures
nsAString
&
aResult
)
;
static
void
AppendFontFeatureSettings
(
const
nsCSSValue
&
src
nsAString
&
aResult
)
;
static
void
AppendFontVariationSettings
(
const
nsTArray
<
gfxFontVariation
>
&
aVariations
nsAString
&
aResult
)
;
static
void
AppendFontVariationSettings
(
const
nsCSSValue
&
src
nsAString
&
aResult
)
;
static
void
AppendUnicodeRange
(
const
nsCSSValue
&
aValue
nsAString
&
aResult
)
;
static
void
AppendCSSNumber
(
float
aNumber
nsAString
&
aResult
)
{
aResult
.
AppendFloat
(
aNumber
)
;
}
static
void
AppendStepsTimingFunction
(
nsTimingFunction
:
:
Type
aType
uint32_t
aSteps
nsAString
&
aResult
)
;
static
void
AppendFramesTimingFunction
(
uint32_t
aFrames
nsAString
&
aResult
)
;
static
void
AppendCubicBezierTimingFunction
(
float
aX1
float
aY1
float
aX2
float
aY2
nsAString
&
aResult
)
;
static
void
AppendCubicBezierKeywordTimingFunction
(
nsTimingFunction
:
:
Type
aType
nsAString
&
aResult
)
;
static
void
AppendSerializedFontSrc
(
const
nsCSSValue
&
aValue
nsAString
&
aResult
)
;
static
void
GetFunctionalAlternatesName
(
int32_t
aFeature
nsAString
&
aFeatureName
)
;
static
void
SerializeFunctionalAlternates
(
const
nsTArray
<
gfxAlternateValue
>
&
aAlternates
nsAString
&
aResult
)
;
static
void
ComputeFunctionalAlternates
(
const
nsCSSValueList
*
aList
nsTArray
<
gfxAlternateValue
>
&
aAlternateValues
)
;
static
uint8_t
FloatToColorComponent
(
float
aAlpha
)
{
NS_ASSERTION
(
0
.
0
<
=
aAlpha
&
&
aAlpha
<
=
1
.
0
"
out
of
range
"
)
;
return
NSToIntRound
(
aAlpha
*
255
)
;
}
static
float
ColorComponentToFloat
(
uint8_t
aAlpha
)
;
static
bool
IsSignificantChild
(
nsIContent
*
aChild
bool
aWhitespaceIsSignificant
)
;
static
bool
ThreadSafeIsSignificantChild
(
const
nsIContent
*
aChild
bool
aWhitespaceIsSignificant
)
;
static
bool
ObjectPropsMightCauseOverflow
(
const
nsStylePosition
*
aStylePos
)
;
static
bool
CSPAllowsInlineStyle
(
mozilla
:
:
dom
:
:
Element
*
aContent
nsIPrincipal
*
aPrincipal
nsIPrincipal
*
aTriggeringPrincipal
nsIURI
*
aSourceURI
uint32_t
aLineNumber
const
nsAString
&
aStyleText
nsresult
*
aRv
)
;
template
<
size_t
N
>
static
bool
MatchesLanguagePrefix
(
const
char16_t
*
aLang
size_t
aLen
const
char16_t
(
&
aPrefix
)
[
N
]
)
{
return
!
NS_strncmp
(
aLang
aPrefix
N
-
1
)
&
&
(
aLen
=
=
N
-
1
|
|
aLang
[
N
-
1
]
=
=
'
-
'
)
;
}
template
<
size_t
N
>
static
bool
MatchesLanguagePrefix
(
const
nsAtom
*
aLang
const
char16_t
(
&
aPrefix
)
[
N
]
)
{
MOZ_ASSERT
(
aLang
)
;
return
MatchesLanguagePrefix
(
aLang
-
>
GetUTF16String
(
)
aLang
-
>
GetLength
(
)
aPrefix
)
;
}
template
<
size_t
N
>
static
bool
MatchesLanguagePrefix
(
const
nsAString
&
aLang
const
char16_t
(
&
aPrefix
)
[
N
]
)
{
return
MatchesLanguagePrefix
(
aLang
.
Data
(
)
aLang
.
Length
(
)
aPrefix
)
;
}
}
;
#
endif
