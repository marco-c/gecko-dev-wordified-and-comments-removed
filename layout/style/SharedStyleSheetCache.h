#
ifndef
mozilla_SharedStyleSheetCache_h__
#
define
mozilla_SharedStyleSheetCache_h__
#
include
"
mozilla
/
PrincipalHashKey
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
nsDataHashtable
.
h
"
#
include
"
nsIMemoryReporter
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsURIHashKey
.
h
"
namespace
mozilla
{
namespace
css
{
class
SheetLoadData
;
}
class
SharedStyleSheetCache
final
:
public
nsIMemoryReporter
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
SharedStyleSheetCache
(
const
SharedStyleSheetCache
&
)
=
delete
;
SharedStyleSheetCache
(
SharedStyleSheetCache
&
&
)
=
delete
;
static
already_AddRefed
<
SharedStyleSheetCache
>
Get
(
)
{
if
(
sInstance
)
{
return
do_AddRef
(
sInstance
)
;
}
return
Create
(
)
;
}
public
:
using
CacheResult
=
std
:
:
tuple
<
RefPtr
<
StyleSheet
>
css
:
:
Loader
:
:
SheetState
>
;
CacheResult
Lookup
(
css
:
:
Loader
&
const
SheetLoadDataHashKey
&
bool
aSyncLoad
)
;
MOZ_MUST_USE
bool
CoalesceLoad
(
const
SheetLoadDataHashKey
&
css
:
:
SheetLoadData
&
aNewLoad
css
:
:
Loader
:
:
SheetState
aExistingLoadState
)
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
)
const
;
void
LoadStarted
(
const
SheetLoadDataHashKey
&
css
:
:
SheetLoadData
&
)
;
void
DeferSheetLoad
(
const
SheetLoadDataHashKey
&
css
:
:
SheetLoadData
&
)
;
enum
class
StartLoads
{
Always
IfNonAlternate
}
;
void
StartDeferredLoadsForLoader
(
css
:
:
Loader
&
StartLoads
)
;
void
CancelLoadsForLoader
(
css
:
:
Loader
&
)
;
static
void
LoadCompleted
(
SharedStyleSheetCache
*
css
:
:
SheetLoadData
&
nsresult
)
;
void
RegisterLoader
(
css
:
:
Loader
&
)
;
void
UnregisterLoader
(
css
:
:
Loader
&
)
;
static
void
Clear
(
nsIPrincipal
*
aForPrincipal
=
nullptr
)
;
private
:
static
already_AddRefed
<
SharedStyleSheetCache
>
Create
(
)
;
void
CancelDeferredLoadsForLoader
(
css
:
:
Loader
&
)
;
static
void
LoadCompletedInternal
(
SharedStyleSheetCache
*
css
:
:
SheetLoadData
&
nsTArray
<
RefPtr
<
css
:
:
SheetLoadData
>
>
&
)
;
void
InsertIntoCompleteCacheIfNeeded
(
css
:
:
SheetLoadData
&
)
;
SharedStyleSheetCache
(
)
=
default
;
~
SharedStyleSheetCache
(
)
;
struct
CompleteSheet
{
uint32_t
mExpirationTime
=
0
;
UniquePtr
<
StyleUseCounters
>
mUseCounters
;
RefPtr
<
StyleSheet
>
mSheet
;
bool
Expired
(
)
const
;
}
;
void
WillStartPendingLoad
(
css
:
:
SheetLoadData
&
)
;
nsDataHashtable
<
SheetLoadDataHashKey
CompleteSheet
>
mCompleteSheets
;
nsRefPtrHashtable
<
SheetLoadDataHashKey
css
:
:
SheetLoadData
>
mPendingDatas
;
nsDataHashtable
<
SheetLoadDataHashKey
WeakPtr
<
css
:
:
SheetLoadData
>
>
mLoadingDatas
;
nsDataHashtable
<
PrincipalHashKey
uint32_t
>
mLoaderPrincipalRefCnt
;
static
SharedStyleSheetCache
*
sInstance
;
}
;
}
#
endif
