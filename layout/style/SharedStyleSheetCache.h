#
ifndef
mozilla_SharedStyleSheetCache_h__
#
define
mozilla_SharedStyleSheetCache_h__
#
include
"
mozilla
/
SharedSubResourceCache
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
namespace
mozilla
{
class
StyleSheet
;
class
SheetLoadDataHashKey
;
namespace
css
{
class
SheetLoadData
;
class
Loader
;
}
struct
SharedStyleSheetCacheTraits
{
using
Loader
=
css
:
:
Loader
;
using
Key
=
SheetLoadDataHashKey
;
using
Value
=
StyleSheet
;
using
LoadingValue
=
css
:
:
SheetLoadData
;
static
SheetLoadDataHashKey
KeyFromLoadingValue
(
const
LoadingValue
&
aValue
)
{
return
SheetLoadDataHashKey
(
aValue
)
;
}
}
;
class
SharedStyleSheetCache
final
:
public
SharedSubResourceCache
<
SharedStyleSheetCacheTraits
SharedStyleSheetCache
>
public
nsIMemoryReporter
{
public
:
using
Base
=
SharedSubResourceCache
<
SharedStyleSheetCacheTraits
SharedStyleSheetCache
>
;
NS_DECL_ISUPPORTS
NS_DECL_NSIMEMORYREPORTER
SharedStyleSheetCache
(
)
;
void
Init
(
)
;
static
void
LoadCompleted
(
SharedStyleSheetCache
*
css
:
:
SheetLoadData
&
nsresult
)
;
using
Base
:
:
LoadCompleted
;
static
void
LoadCompletedInternal
(
SharedStyleSheetCache
*
css
:
:
SheetLoadData
&
nsTArray
<
RefPtr
<
css
:
:
SheetLoadData
>
>
&
)
;
static
void
Clear
(
const
Maybe
<
nsCOMPtr
<
nsIPrincipal
>
>
&
aPrincipal
=
Nothing
(
)
const
Maybe
<
nsCString
>
&
aSchemelessSite
=
Nothing
(
)
const
Maybe
<
OriginAttributesPattern
>
&
aPattern
=
Nothing
(
)
)
;
protected
:
void
InsertIfNeeded
(
css
:
:
SheetLoadData
&
)
;
~
SharedStyleSheetCache
(
)
;
}
;
}
#
endif
