#
include
"
CounterStyleManager
.
h
"
#
include
<
type_traits
>
#
include
"
mozilla
/
ArenaObjectID
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
CheckedInt
.
h
"
#
include
"
mozilla
/
MathAlgorithms
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
Types
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPresContextInlines
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsUnicodeProperties
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
namespace
mozilla
{
using
AdditiveSymbol
=
StyleAdditiveSymbol
;
struct
NegativeType
{
nsString
before
after
;
}
;
struct
PadType
{
int32_t
width
;
nsString
symbol
;
}
;
#
define
LENGTH_LIMIT
150
static
bool
GetCyclicCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
Span
<
const
nsString
>
aSymbols
)
{
MOZ_ASSERT
(
aSymbols
.
Length
(
)
>
=
1
"
No
symbol
available
for
cyclic
counter
.
"
)
;
auto
n
=
CounterValue
(
aSymbols
.
Length
(
)
)
;
CounterValue
index
=
(
aOrdinal
-
1
)
%
n
;
aResult
=
aSymbols
[
index
>
=
0
?
index
:
index
+
n
]
;
return
true
;
}
static
bool
GetFixedCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
CounterValue
aStart
Span
<
const
nsString
>
aSymbols
)
{
CounterValue
index
=
aOrdinal
-
aStart
;
if
(
index
>
=
0
&
&
index
<
CounterValue
(
aSymbols
.
Length
(
)
)
)
{
aResult
=
aSymbols
[
index
]
;
return
true
;
}
else
{
return
false
;
}
}
static
bool
GetSymbolicCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
Span
<
const
nsString
>
aSymbols
)
{
MOZ_ASSERT
(
aSymbols
.
Length
(
)
>
=
1
"
No
symbol
available
for
symbolic
counter
.
"
)
;
MOZ_ASSERT
(
aOrdinal
>
=
0
"
Invalid
ordinal
.
"
)
;
if
(
aOrdinal
=
=
0
)
{
return
false
;
}
aResult
.
Truncate
(
)
;
auto
n
=
aSymbols
.
Length
(
)
;
const
nsString
&
symbol
=
aSymbols
[
(
aOrdinal
-
1
)
%
n
]
;
size_t
len
=
(
aOrdinal
+
n
-
1
)
/
n
;
auto
symbolLength
=
symbol
.
Length
(
)
;
if
(
symbolLength
>
0
)
{
if
(
len
>
LENGTH_LIMIT
|
|
symbolLength
>
LENGTH_LIMIT
|
|
len
*
symbolLength
>
LENGTH_LIMIT
)
{
return
false
;
}
for
(
size_t
i
=
0
;
i
<
len
;
+
+
i
)
{
aResult
.
Append
(
symbol
)
;
}
}
return
true
;
}
static
bool
GetAlphabeticCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
Span
<
const
nsString
>
aSymbols
)
{
MOZ_ASSERT
(
aSymbols
.
Length
(
)
>
=
2
"
Too
few
symbols
for
alphabetic
counter
.
"
)
;
MOZ_ASSERT
(
aOrdinal
>
=
0
"
Invalid
ordinal
.
"
)
;
if
(
aOrdinal
=
=
0
)
{
return
false
;
}
auto
n
=
aSymbols
.
Length
(
)
;
AutoTArray
<
int32_t
std
:
:
numeric_limits
<
CounterValue
>
:
:
digits
>
indexes
;
while
(
aOrdinal
>
0
)
{
-
-
aOrdinal
;
indexes
.
AppendElement
(
aOrdinal
%
n
)
;
aOrdinal
/
=
n
;
}
aResult
.
Truncate
(
)
;
for
(
auto
i
=
indexes
.
Length
(
)
;
i
>
0
;
-
-
i
)
{
aResult
.
Append
(
aSymbols
[
indexes
[
i
-
1
]
]
)
;
}
return
true
;
}
static
bool
GetNumericCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
Span
<
const
nsString
>
aSymbols
)
{
MOZ_ASSERT
(
aSymbols
.
Length
(
)
>
=
2
"
Too
few
symbols
for
numeric
counter
.
"
)
;
MOZ_ASSERT
(
aOrdinal
>
=
0
"
Invalid
ordinal
.
"
)
;
if
(
aOrdinal
=
=
0
)
{
aResult
=
aSymbols
[
0
]
;
return
true
;
}
auto
n
=
aSymbols
.
Length
(
)
;
AutoTArray
<
int32_t
std
:
:
numeric_limits
<
CounterValue
>
:
:
digits
>
indexes
;
while
(
aOrdinal
>
0
)
{
indexes
.
AppendElement
(
aOrdinal
%
n
)
;
aOrdinal
/
=
n
;
}
aResult
.
Truncate
(
)
;
for
(
auto
i
=
indexes
.
Length
(
)
;
i
>
0
;
-
-
i
)
{
aResult
.
Append
(
aSymbols
[
indexes
[
i
-
1
]
]
)
;
}
return
true
;
}
static
bool
GetAdditiveCounterText
(
CounterValue
aOrdinal
nsAString
&
aResult
Span
<
const
AdditiveSymbol
>
aSymbols
)
{
MOZ_ASSERT
(
aOrdinal
>
=
0
"
Invalid
ordinal
.
"
)
;
if
(
aOrdinal
=
=
0
)
{
const
AdditiveSymbol
&
last
=
aSymbols
[
aSymbols
.
Length
(
)
-
1
]
;
if
(
last
.
weight
=
=
0
)
{
aResult
=
last
.
symbol
;
return
true
;
}
return
false
;
}
aResult
.
Truncate
(
)
;
size_t
length
=
0
;
for
(
size_t
i
=
0
iEnd
=
aSymbols
.
Length
(
)
;
i
<
iEnd
;
+
+
i
)
{
const
AdditiveSymbol
&
symbol
=
aSymbols
[
i
]
;
if
(
symbol
.
weight
=
=
0
)
{
break
;
}
CounterValue
times
=
aOrdinal
/
symbol
.
weight
;
if
(
times
>
0
)
{
auto
symbolLength
=
symbol
.
symbol
.
Length
(
)
;
if
(
symbolLength
>
0
)
{
length
+
=
times
*
symbolLength
;
if
(
times
>
LENGTH_LIMIT
|
|
symbolLength
>
LENGTH_LIMIT
|
|
length
>
LENGTH_LIMIT
)
{
return
false
;
}
for
(
CounterValue
j
=
0
;
j
<
times
;
+
+
j
)
{
aResult
.
Append
(
symbol
.
symbol
)
;
}
}
aOrdinal
-
=
times
*
symbol
.
weight
;
}
}
return
aOrdinal
=
=
0
;
}
static
bool
DecimalToText
(
CounterValue
aOrdinal
nsAString
&
aResult
)
{
aResult
.
AppendInt
(
aOrdinal
)
;
return
true
;
}
#
define
NUM_BUF_SIZE
34
enum
CJKIdeographicLang
{
CHINESE
KOREAN
JAPANESE
}
;
struct
CJKIdeographicData
{
char16_t
digit
[
10
]
;
char16_t
unit
[
3
]
;
char16_t
unit10K
[
2
]
;
uint8_t
lang
;
bool
informal
;
}
;
static
const
CJKIdeographicData
gDataJapaneseInformal
=
{
{
0x3007
0x4e00
0x4e8c
0x4e09
0x56db
0x4e94
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x5341
0x767e
0x5343
}
{
0x4e07
0x5104
}
JAPANESE
true
}
;
static
const
CJKIdeographicData
gDataJapaneseFormal
=
{
{
0x96f6
0x58f1
0x5f10
0x53c2
0x56db
0x4f0d
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x62fe
0x767e
0x9621
}
{
0x842c
0x5104
}
JAPANESE
false
}
;
static
const
CJKIdeographicData
gDataKoreanHangulFormal
=
{
{
0xc601
0xc77c
0xc774
0xc0bc
0xc0ac
0xc624
0xc721
0xce60
0xd314
0xad6c
}
{
0xc2ed
0xbc31
0xcc9c
}
{
0xb9cc
0xc5b5
}
KOREAN
false
}
;
static
const
CJKIdeographicData
gDataKoreanHanjaInformal
=
{
{
0x96f6
0x4e00
0x4e8c
0x4e09
0x56db
0x4e94
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x5341
0x767e
0x5343
}
{
0x842c
0x5104
}
KOREAN
true
}
;
static
const
CJKIdeographicData
gDataKoreanHanjaFormal
=
{
{
0x96f6
0x58f9
0x8cb3
0x53c3
0x56db
0x4e94
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x62fe
0x767e
0x4edf
}
{
0x842c
0x5104
}
KOREAN
false
}
;
static
const
CJKIdeographicData
gDataSimpChineseInformal
=
{
{
0x96f6
0x4e00
0x4e8c
0x4e09
0x56db
0x4e94
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x5341
0x767e
0x5343
}
{
0x4e07
0x4ebf
}
CHINESE
true
}
;
static
const
CJKIdeographicData
gDataSimpChineseFormal
=
{
{
0x96f6
0x58f9
0x8d30
0x53c1
0x8086
0x4f0d
0x9646
0x67d2
0x634c
0x7396
}
{
0x62fe
0x4f70
0x4edf
}
{
0x4e07
0x4ebf
}
CHINESE
false
}
;
static
const
CJKIdeographicData
gDataTradChineseInformal
=
{
{
0x96f6
0x4e00
0x4e8c
0x4e09
0x56db
0x4e94
0x516d
0x4e03
0x516b
0x4e5d
}
{
0x5341
0x767e
0x5343
}
{
0x842c
0x5104
}
CHINESE
true
}
;
static
const
CJKIdeographicData
gDataTradChineseFormal
=
{
{
0x96f6
0x58f9
0x8cb3
0x53c3
0x8086
0x4f0d
0x9678
0x67d2
0x634c
0x7396
}
{
0x62fe
0x4f70
0x4edf
}
{
0x842c
0x5104
}
CHINESE
false
}
;
static
bool
CJKIdeographicToText
(
CounterValue
aOrdinal
nsAString
&
aResult
const
CJKIdeographicData
&
data
)
{
NS_ASSERTION
(
aOrdinal
>
=
0
"
Only
accept
non
-
negative
ordinal
"
)
;
char16_t
buf
[
NUM_BUF_SIZE
]
;
int32_t
idx
=
NUM_BUF_SIZE
;
int32_t
pos
=
0
;
bool
needZero
=
(
aOrdinal
=
=
0
)
;
int32_t
unitidx
=
0
unit10Kidx
=
0
;
do
{
unitidx
=
pos
%
4
;
if
(
unitidx
=
=
0
)
{
unit10Kidx
=
pos
/
4
;
}
auto
cur
=
static_cast
<
std
:
:
make_unsigned_t
<
CounterValue
>
>
(
aOrdinal
)
%
10
;
if
(
cur
=
=
0
)
{
if
(
needZero
)
{
needZero
=
false
;
buf
[
-
-
idx
]
=
data
.
digit
[
0
]
;
}
}
else
{
if
(
data
.
lang
=
=
CHINESE
)
{
needZero
=
true
;
}
if
(
unit10Kidx
!
=
0
)
{
if
(
data
.
lang
=
=
KOREAN
&
&
idx
!
=
NUM_BUF_SIZE
)
{
buf
[
-
-
idx
]
=
'
'
;
}
buf
[
-
-
idx
]
=
data
.
unit10K
[
unit10Kidx
-
1
]
;
}
if
(
unitidx
!
=
0
)
{
buf
[
-
-
idx
]
=
data
.
unit
[
unitidx
-
1
]
;
}
if
(
cur
!
=
1
)
{
buf
[
-
-
idx
]
=
data
.
digit
[
cur
]
;
}
else
{
bool
needOne
=
true
;
if
(
data
.
informal
)
{
switch
(
data
.
lang
)
{
case
CHINESE
:
if
(
unitidx
=
=
1
&
&
(
aOrdinal
=
=
1
|
|
(
pos
>
4
&
&
aOrdinal
%
1000
=
=
1
)
)
)
{
needOne
=
false
;
}
break
;
case
JAPANESE
:
if
(
unitidx
>
0
&
&
(
unitidx
!
=
3
|
|
(
pos
=
=
3
&
&
aOrdinal
=
=
1
)
)
)
{
needOne
=
false
;
}
break
;
case
KOREAN
:
if
(
unitidx
>
0
|
|
(
pos
=
=
4
&
&
(
aOrdinal
%
1000
)
=
=
1
)
)
{
needOne
=
false
;
}
break
;
}
}
if
(
needOne
)
{
buf
[
-
-
idx
]
=
data
.
digit
[
1
]
;
}
}
unit10Kidx
=
0
;
}
aOrdinal
/
=
10
;
pos
+
+
;
}
while
(
aOrdinal
>
0
)
;
aResult
.
Assign
(
buf
+
idx
NUM_BUF_SIZE
-
idx
)
;
return
true
;
}
#
define
HEBREW_GERESH
0x05F3
static
const
char16_t
gHebrewDigit
[
22
]
=
{
0x05D0
0x05D1
0x05D2
0x05D3
0x05D4
0x05D5
0x05D6
0x05D7
0x05D8
0x05D9
0x05DB
0x05DC
0x05DE
0x05E0
0x05E1
0x05E2
0x05E4
0x05E6
0x05E7
0x05E8
0x05E9
0x05EA
}
;
static
bool
HebrewToText
(
CounterValue
aOrdinal
nsAString
&
aResult
)
{
if
(
aOrdinal
<
1
|
|
aOrdinal
>
999999
)
{
return
false
;
}
bool
outputSep
=
false
;
nsAutoString
allText
thousandsGroup
;
do
{
thousandsGroup
.
Truncate
(
)
;
int32_t
n3
=
aOrdinal
%
1000
;
for
(
int32_t
n1
=
400
;
n1
>
0
;
)
{
if
(
n3
>
=
n1
)
{
n3
-
=
n1
;
thousandsGroup
.
Append
(
gHebrewDigit
[
(
n1
/
100
)
-
1
+
18
]
)
;
}
else
{
n1
-
=
100
;
}
}
int32_t
n2
;
if
(
n3
>
=
10
)
{
if
(
(
15
=
=
n3
)
|
|
(
16
=
=
n3
)
)
{
n2
=
9
;
thousandsGroup
.
Append
(
gHebrewDigit
[
n2
-
1
]
)
;
}
else
{
n2
=
n3
-
(
n3
%
10
)
;
thousandsGroup
.
Append
(
gHebrewDigit
[
(
n2
/
10
)
-
1
+
9
]
)
;
}
n3
-
=
n2
;
}
if
(
n3
>
0
)
thousandsGroup
.
Append
(
gHebrewDigit
[
n3
-
1
]
)
;
if
(
outputSep
)
thousandsGroup
.
Append
(
(
char16_t
)
HEBREW_GERESH
)
;
if
(
allText
.
IsEmpty
(
)
)
allText
=
thousandsGroup
;
else
allText
=
thousandsGroup
+
allText
;
aOrdinal
/
=
1000
;
outputSep
=
true
;
}
while
(
aOrdinal
>
=
1
)
;
aResult
=
allText
;
return
true
;
}
#
define
ETHIOPIC_ONE
0x1369
#
define
ETHIOPIC_TEN
0x1372
#
define
ETHIOPIC_HUNDRED
0x137B
#
define
ETHIOPIC_TEN_THOUSAND
0x137C
static
bool
EthiopicToText
(
CounterValue
aOrdinal
nsAString
&
aResult
)
{
if
(
aOrdinal
<
1
)
{
return
false
;
}
nsAutoString
asciiNumberString
;
DecimalToText
(
aOrdinal
asciiNumberString
)
;
uint8_t
asciiStringLength
=
asciiNumberString
.
Length
(
)
;
if
(
asciiStringLength
&
1
)
{
asciiNumberString
.
InsertLiteral
(
u
"
0
"
0
)
;
}
else
{
asciiStringLength
-
-
;
}
aResult
.
Truncate
(
)
;
for
(
uint8_t
indexFromLeft
=
0
groupIndexFromRight
=
asciiStringLength
>
>
1
;
indexFromLeft
<
=
asciiStringLength
;
indexFromLeft
+
=
2
groupIndexFromRight
-
-
)
{
uint8_t
tensValue
=
asciiNumberString
.
CharAt
(
indexFromLeft
)
&
0x0F
;
uint8_t
unitsValue
=
asciiNumberString
.
CharAt
(
indexFromLeft
+
1
)
&
0x0F
;
uint8_t
groupValue
=
tensValue
*
10
+
unitsValue
;
bool
oddGroup
=
(
groupIndexFromRight
&
1
)
;
if
(
aOrdinal
>
1
&
&
groupValue
=
=
1
&
&
(
oddGroup
|
|
indexFromLeft
=
=
0
)
)
{
unitsValue
=
0
;
}
if
(
tensValue
)
{
aResult
.
Append
(
(
char16_t
)
(
tensValue
+
ETHIOPIC_TEN
-
1
)
)
;
}
if
(
unitsValue
)
{
aResult
.
Append
(
(
char16_t
)
(
unitsValue
+
ETHIOPIC_ONE
-
1
)
)
;
}
if
(
oddGroup
)
{
if
(
groupValue
)
{
aResult
.
Append
(
(
char16_t
)
ETHIOPIC_HUNDRED
)
;
}
}
else
{
if
(
groupIndexFromRight
)
{
aResult
.
Append
(
(
char16_t
)
ETHIOPIC_TEN_THOUSAND
)
;
}
}
}
return
true
;
}
static
SpeakAs
GetDefaultSpeakAsForSystem
(
StyleCounterSystem
aSystem
)
{
MOZ_ASSERT
(
aSystem
!
=
StyleCounterSystem
:
:
Extends
"
Extends
system
does
not
have
static
default
speak
-
as
"
)
;
switch
(
aSystem
)
{
case
StyleCounterSystem
:
:
Alphabetic
:
return
SpeakAs
:
:
Spellout
;
case
StyleCounterSystem
:
:
Cyclic
:
return
SpeakAs
:
:
Bullets
;
default
:
return
SpeakAs
:
:
Numbers
;
}
}
static
bool
SystemUsesNegativeSign
(
StyleCounterSystem
aSystem
)
{
MOZ_ASSERT
(
aSystem
!
=
StyleCounterSystem
:
:
Extends
"
Cannot
check
this
for
extending
style
"
)
;
switch
(
aSystem
)
{
case
StyleCounterSystem
:
:
Symbolic
:
case
StyleCounterSystem
:
:
Alphabetic
:
case
StyleCounterSystem
:
:
Numeric
:
case
StyleCounterSystem
:
:
Additive
:
return
true
;
default
:
return
false
;
}
}
class
BuiltinCounterStyle
:
public
CounterStyle
{
public
:
constexpr
BuiltinCounterStyle
(
ListStyle
aStyle
nsStaticAtom
*
aName
)
:
CounterStyle
(
aStyle
)
mName
(
aName
)
{
}
nsStaticAtom
*
GetStyleName
(
)
const
{
return
mName
;
}
virtual
void
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
override
;
virtual
bool
IsBullet
(
)
override
;
virtual
void
GetNegative
(
NegativeType
&
aResult
)
override
;
virtual
bool
IsOrdinalInRange
(
CounterValue
aOrdinal
)
override
;
virtual
bool
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
override
;
virtual
void
GetPad
(
PadType
&
aResult
)
override
;
virtual
CounterStyle
*
GetFallback
(
)
override
;
virtual
SpeakAs
GetSpeakAs
(
)
override
;
virtual
bool
UseNegativeSign
(
)
override
;
virtual
bool
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
override
;
protected
:
constexpr
BuiltinCounterStyle
(
const
BuiltinCounterStyle
&
aOther
)
:
CounterStyle
(
aOther
.
mStyle
)
mName
(
aOther
.
mName
)
{
}
virtual
void
GetPrefixInternal
(
nsAString
&
aResult
)
override
;
virtual
void
GetSuffixInternal
(
nsAString
&
aResult
)
override
;
private
:
nsStaticAtom
*
mName
;
}
;
void
BuiltinCounterStyle
:
:
GetPrefixInternal
(
nsAString
&
aResult
)
{
aResult
.
Truncate
(
)
;
}
void
BuiltinCounterStyle
:
:
GetSuffixInternal
(
nsAString
&
aResult
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
aResult
.
Truncate
(
)
;
break
;
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
case
ListStyle
:
:
EthiopicNumeric
:
aResult
=
'
'
;
break
;
case
ListStyle
:
:
TradChineseInformal
:
case
ListStyle
:
:
TradChineseFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
JapaneseInformal
:
case
ListStyle
:
:
JapaneseFormal
:
aResult
=
0x3001
;
break
;
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
aResult
.
AssignLiteral
(
u
"
"
)
;
break
;
default
:
aResult
.
AssignLiteral
(
u
"
.
"
)
;
break
;
}
}
static
const
char16_t
kDiscCharacter
=
0x2022
;
static
const
char16_t
kCircleCharacter
=
0x25e6
;
static
const
char16_t
kSquareCharacter
=
0x25aa
;
static
const
char16_t
kRightPointingCharacter
=
0x25b8
;
static
const
char16_t
kLeftPointingCharacter
=
0x25c2
;
static
const
char16_t
kDownPointingCharacter
=
0x25be
;
void
BuiltinCounterStyle
:
:
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
{
bool
isRTL
;
GetInitialCounterText
(
aOrdinal
aWritingMode
aResult
isRTL
)
;
aIsBullet
=
true
;
break
;
}
default
:
CounterStyle
:
:
GetSpokenCounterText
(
aOrdinal
aWritingMode
aResult
aIsBullet
)
;
break
;
}
}
bool
BuiltinCounterStyle
:
:
IsBullet
(
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
return
true
;
default
:
return
false
;
}
}
static
const
char16_t
gJapaneseNegative
[
]
=
{
0x30de
0x30a4
0x30ca
0x30b9
0x0000
}
;
static
const
char16_t
gKoreanNegative
[
]
=
{
0xb9c8
0xc774
0xb108
0xc2a4
0x0020
0x0000
}
;
static
const
char16_t
gSimpChineseNegative
[
]
=
{
0x8d1f
0x0000
}
;
static
const
char16_t
gTradChineseNegative
[
]
=
{
0x8ca0
0x0000
}
;
void
BuiltinCounterStyle
:
:
GetNegative
(
NegativeType
&
aResult
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
JapaneseFormal
:
case
ListStyle
:
:
JapaneseInformal
:
aResult
.
before
=
gJapaneseNegative
;
break
;
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
aResult
.
before
=
gKoreanNegative
;
break
;
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
aResult
.
before
=
gSimpChineseNegative
;
break
;
case
ListStyle
:
:
TradChineseFormal
:
case
ListStyle
:
:
TradChineseInformal
:
aResult
.
before
=
gTradChineseNegative
;
break
;
default
:
aResult
.
before
.
AssignLiteral
(
u
"
-
"
)
;
}
aResult
.
after
.
Truncate
(
)
;
}
bool
BuiltinCounterStyle
:
:
IsOrdinalInRange
(
CounterValue
aOrdinal
)
{
switch
(
mStyle
)
{
default
:
case
ListStyle
:
:
None
:
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
case
ListStyle
:
:
Decimal
:
case
ListStyle
:
:
JapaneseFormal
:
case
ListStyle
:
:
JapaneseInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
TradChineseFormal
:
case
ListStyle
:
:
TradChineseInformal
:
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
return
true
;
case
ListStyle
:
:
EthiopicNumeric
:
return
aOrdinal
>
=
1
;
case
ListStyle
:
:
Hebrew
:
return
aOrdinal
>
=
1
&
&
aOrdinal
<
=
999999
;
}
}
bool
BuiltinCounterStyle
:
:
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
case
ListStyle
:
:
Decimal
:
return
true
;
case
ListStyle
:
:
Hebrew
:
return
aOrdinal
>
=
0
;
case
ListStyle
:
:
JapaneseFormal
:
case
ListStyle
:
:
JapaneseInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
TradChineseFormal
:
case
ListStyle
:
:
TradChineseInformal
:
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
case
ListStyle
:
:
EthiopicNumeric
:
return
IsOrdinalInRange
(
aOrdinal
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
counter
style
"
)
;
return
false
;
}
}
void
BuiltinCounterStyle
:
:
GetPad
(
PadType
&
aResult
)
{
aResult
.
width
=
0
;
aResult
.
symbol
.
Truncate
(
)
;
}
CounterStyle
*
BuiltinCounterStyle
:
:
GetFallback
(
)
{
return
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
}
SpeakAs
BuiltinCounterStyle
:
:
GetSpeakAs
(
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
return
SpeakAs
:
:
Bullets
;
default
:
return
SpeakAs
:
:
Numbers
;
}
}
bool
BuiltinCounterStyle
:
:
UseNegativeSign
(
)
{
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
case
ListStyle
:
:
Disc
:
case
ListStyle
:
:
Circle
:
case
ListStyle
:
:
Square
:
case
ListStyle
:
:
DisclosureClosed
:
case
ListStyle
:
:
DisclosureOpen
:
return
false
;
default
:
return
true
;
}
}
bool
BuiltinCounterStyle
:
:
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
aIsRTL
=
false
;
switch
(
mStyle
)
{
case
ListStyle
:
:
None
:
aResult
.
Truncate
(
)
;
return
true
;
case
ListStyle
:
:
Disc
:
aResult
.
Assign
(
kDiscCharacter
)
;
return
true
;
case
ListStyle
:
:
Circle
:
aResult
.
Assign
(
kCircleCharacter
)
;
return
true
;
case
ListStyle
:
:
Square
:
aResult
.
Assign
(
kSquareCharacter
)
;
return
true
;
case
ListStyle
:
:
DisclosureClosed
:
if
(
aWritingMode
.
IsVertical
(
)
)
{
aResult
.
Assign
(
kDownPointingCharacter
)
;
}
else
if
(
aWritingMode
.
IsBidiLTR
(
)
)
{
aResult
.
Assign
(
kRightPointingCharacter
)
;
}
else
{
aResult
.
Assign
(
kLeftPointingCharacter
)
;
}
return
true
;
case
ListStyle
:
:
DisclosureOpen
:
if
(
!
aWritingMode
.
IsVertical
(
)
)
{
aResult
.
Assign
(
kDownPointingCharacter
)
;
}
else
if
(
aWritingMode
.
IsVerticalLR
(
)
)
{
aResult
.
Assign
(
kRightPointingCharacter
)
;
}
else
{
aResult
.
Assign
(
kLeftPointingCharacter
)
;
}
return
true
;
case
ListStyle
:
:
Decimal
:
return
DecimalToText
(
aOrdinal
aResult
)
;
case
ListStyle
:
:
TradChineseInformal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataTradChineseInformal
)
;
case
ListStyle
:
:
TradChineseFormal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataTradChineseFormal
)
;
case
ListStyle
:
:
SimpChineseInformal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataSimpChineseInformal
)
;
case
ListStyle
:
:
SimpChineseFormal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataSimpChineseFormal
)
;
case
ListStyle
:
:
JapaneseInformal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataJapaneseInformal
)
;
case
ListStyle
:
:
JapaneseFormal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataJapaneseFormal
)
;
case
ListStyle
:
:
KoreanHangulFormal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataKoreanHangulFormal
)
;
case
ListStyle
:
:
KoreanHanjaInformal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataKoreanHanjaInformal
)
;
case
ListStyle
:
:
KoreanHanjaFormal
:
return
CJKIdeographicToText
(
aOrdinal
aResult
gDataKoreanHanjaFormal
)
;
case
ListStyle
:
:
Hebrew
:
aIsRTL
=
true
;
return
HebrewToText
(
aOrdinal
aResult
)
;
case
ListStyle
:
:
EthiopicNumeric
:
return
EthiopicToText
(
aOrdinal
aResult
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
builtin
counter
style
"
)
;
return
false
;
}
}
static
constexpr
BuiltinCounterStyle
gBuiltinStyleTable
[
]
=
{
#
define
BUILTIN_COUNTER_STYLE
(
value_
atom_
)
\
{
ListStyle
:
:
value_
nsGkAtoms
:
:
atom_
}
#
include
"
BuiltinCounterStyleList
.
h
"
#
undef
BUILTIN_COUNTER_STYLE
}
;
#
define
BUILTIN_COUNTER_STYLE
(
value_
atom_
)
\
static_assert
(
\
gBuiltinStyleTable
[
static_cast
<
size_t
>
(
ListStyle
:
:
value_
)
]
.
GetStyle
(
)
=
=
\
ListStyle
:
:
value_
\
"
Builtin
counter
style
"
#
atom_
"
has
unmatched
index
and
value
.
"
)
;
#
include
"
BuiltinCounterStyleList
.
h
"
#
undef
BUILTIN_COUNTER_STYLE
class
DependentBuiltinCounterStyle
final
:
public
BuiltinCounterStyle
{
public
:
DependentBuiltinCounterStyle
(
ListStyle
aStyle
CounterStyleManager
*
aManager
)
:
BuiltinCounterStyle
(
gBuiltinStyleTable
[
static_cast
<
size_t
>
(
aStyle
)
]
)
mManager
(
aManager
)
{
NS_ASSERTION
(
IsDependentStyle
(
)
"
Not
a
dependent
builtin
style
"
)
;
MOZ_ASSERT
(
!
IsCustomStyle
(
)
"
Not
a
builtin
style
"
)
;
}
virtual
CounterStyle
*
GetFallback
(
)
override
;
void
*
operator
new
(
size_t
sz
nsPresContext
*
aPresContext
)
{
return
aPresContext
-
>
PresShell
(
)
-
>
AllocateByObjectID
(
eArenaObjectID_DependentBuiltinCounterStyle
sz
)
;
}
void
Destroy
(
)
{
PresShell
*
presShell
=
mManager
-
>
PresContext
(
)
-
>
PresShell
(
)
;
this
-
>
~
DependentBuiltinCounterStyle
(
)
;
presShell
-
>
FreeByObjectID
(
eArenaObjectID_DependentBuiltinCounterStyle
this
)
;
}
private
:
~
DependentBuiltinCounterStyle
(
)
=
default
;
CounterStyleManager
*
mManager
;
}
;
CounterStyle
*
DependentBuiltinCounterStyle
:
:
GetFallback
(
)
{
switch
(
GetStyle
(
)
)
{
case
ListStyle
:
:
JapaneseInformal
:
case
ListStyle
:
:
JapaneseFormal
:
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
TradChineseInformal
:
case
ListStyle
:
:
TradChineseFormal
:
return
mManager
-
>
ResolveCounterStyle
(
nsGkAtoms
:
:
cjk_decimal
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Not
a
valid
dependent
builtin
style
"
)
;
return
BuiltinCounterStyle
:
:
GetFallback
(
)
;
}
}
class
CustomCounterStyle
final
:
public
CounterStyle
{
public
:
CustomCounterStyle
(
CounterStyleManager
*
aManager
const
RawServoCounterStyleRule
*
aRule
)
:
CounterStyle
(
ListStyle
:
:
Custom
)
mManager
(
aManager
)
mRule
(
aRule
)
mRuleGeneration
(
Servo_CounterStyleRule_GetGeneration
(
aRule
)
)
mSystem
(
Servo_CounterStyleRule_GetSystem
(
aRule
)
)
mFlags
(
0
)
mFallback
(
nullptr
)
mSpeakAsCounter
(
nullptr
)
mExtends
(
nullptr
)
mExtendsRoot
(
nullptr
)
{
}
void
ResetCachedData
(
)
;
void
ResetDependentData
(
)
;
const
RawServoCounterStyleRule
*
GetRule
(
)
const
{
return
mRule
;
}
uint32_t
GetRuleGeneration
(
)
const
{
return
mRuleGeneration
;
}
virtual
void
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
override
;
virtual
bool
IsBullet
(
)
override
;
virtual
void
GetNegative
(
NegativeType
&
aResult
)
override
;
virtual
bool
IsOrdinalInRange
(
CounterValue
aOrdinal
)
override
;
virtual
bool
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
override
;
virtual
void
GetPad
(
PadType
&
aResult
)
override
;
virtual
CounterStyle
*
GetFallback
(
)
override
;
virtual
SpeakAs
GetSpeakAs
(
)
override
;
virtual
bool
UseNegativeSign
(
)
override
;
virtual
void
CallFallbackStyle
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
override
;
virtual
CounterStyle
*
ResolveFallbackFor
(
CounterValue
aOrdinal
)
override
;
virtual
bool
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
override
;
bool
IsExtendsSystem
(
)
{
return
mSystem
=
=
StyleCounterSystem
:
:
Extends
;
}
void
*
operator
new
(
size_t
sz
nsPresContext
*
aPresContext
)
{
return
aPresContext
-
>
PresShell
(
)
-
>
AllocateByObjectID
(
eArenaObjectID_CustomCounterStyle
sz
)
;
}
void
Destroy
(
)
{
PresShell
*
presShell
=
mManager
-
>
PresContext
(
)
-
>
PresShell
(
)
;
this
-
>
~
CustomCounterStyle
(
)
;
presShell
-
>
FreeByObjectID
(
eArenaObjectID_CustomCounterStyle
this
)
;
}
protected
:
virtual
void
GetPrefixInternal
(
nsAString
&
aResult
)
override
;
virtual
void
GetSuffixInternal
(
nsAString
&
aResult
)
override
;
private
:
~
CustomCounterStyle
(
)
=
default
;
Span
<
const
nsString
>
GetSymbols
(
)
;
Span
<
const
AdditiveSymbol
>
GetAdditiveSymbols
(
)
;
SpeakAs
GetSpeakAsAutoValue
(
)
;
void
ComputeRawSpeakAs
(
SpeakAs
&
aSpeakAs
CounterStyle
*
&
aSpeakAsCounter
)
;
CounterStyle
*
ComputeSpeakAs
(
)
;
CounterStyle
*
ComputeExtends
(
)
;
CounterStyle
*
GetExtends
(
)
;
CounterStyle
*
GetExtendsRoot
(
)
;
bool
AdditiveSymbolsIncludeZero
(
)
;
CounterStyleManager
*
mManager
;
RefPtr
<
const
RawServoCounterStyleRule
>
mRule
;
uint32_t
mRuleGeneration
;
StyleCounterSystem
mSystem
;
MOZ_INIT_OUTSIDE_CTOR
SpeakAs
mSpeakAs
;
enum
{
FLAG_EXTENDS_VISITED
=
1
<
<
0
FLAG_EXTENDS_LOOP
=
1
<
<
1
FLAG_SPEAKAS_VISITED
=
1
<
<
2
FLAG_SPEAKAS_LOOP
=
1
<
<
3
FLAG_NEGATIVE_INITED
=
1
<
<
4
FLAG_PREFIX_INITED
=
1
<
<
5
FLAG_SUFFIX_INITED
=
1
<
<
6
FLAG_PAD_INITED
=
1
<
<
7
FLAG_SPEAKAS_INITED
=
1
<
<
8
}
;
uint16_t
mFlags
;
StyleOwnedSlice
<
nsString
>
mSymbols
;
StyleOwnedSlice
<
AdditiveSymbol
>
mAdditiveSymbols
;
NegativeType
mNegative
;
nsString
mPrefix
mSuffix
;
PadType
mPad
;
CounterStyle
*
mFallback
;
CounterStyle
*
mSpeakAsCounter
;
CounterStyle
*
mExtends
;
CounterStyle
*
mExtendsRoot
;
}
;
void
CustomCounterStyle
:
:
ResetCachedData
(
)
{
mSymbols
.
Clear
(
)
;
mAdditiveSymbols
.
Clear
(
)
;
mFlags
&
=
~
(
FLAG_NEGATIVE_INITED
|
FLAG_PREFIX_INITED
|
FLAG_SUFFIX_INITED
|
FLAG_PAD_INITED
|
FLAG_SPEAKAS_INITED
)
;
mFallback
=
nullptr
;
mSpeakAsCounter
=
nullptr
;
mExtends
=
nullptr
;
mExtendsRoot
=
nullptr
;
mRuleGeneration
=
Servo_CounterStyleRule_GetGeneration
(
mRule
)
;
}
void
CustomCounterStyle
:
:
ResetDependentData
(
)
{
mFlags
&
=
~
FLAG_SPEAKAS_INITED
;
mSpeakAsCounter
=
nullptr
;
mFallback
=
nullptr
;
mExtends
=
nullptr
;
mExtendsRoot
=
nullptr
;
if
(
IsExtendsSystem
(
)
)
{
mFlags
&
=
~
(
FLAG_NEGATIVE_INITED
|
FLAG_PREFIX_INITED
|
FLAG_SUFFIX_INITED
|
FLAG_PAD_INITED
)
;
}
}
void
CustomCounterStyle
:
:
GetPrefixInternal
(
nsAString
&
aResult
)
{
if
(
!
(
mFlags
&
FLAG_PREFIX_INITED
)
)
{
mFlags
|
=
FLAG_PREFIX_INITED
;
if
(
!
Servo_CounterStyleRule_GetPrefix
(
mRule
&
mPrefix
)
)
{
if
(
IsExtendsSystem
(
)
)
{
GetExtends
(
)
-
>
GetPrefixInternal
(
mPrefix
)
;
}
else
{
mPrefix
.
Truncate
(
)
;
}
}
}
aResult
=
mPrefix
;
}
void
CustomCounterStyle
:
:
GetSuffixInternal
(
nsAString
&
aResult
)
{
if
(
!
(
mFlags
&
FLAG_SUFFIX_INITED
)
)
{
mFlags
|
=
FLAG_SUFFIX_INITED
;
if
(
!
Servo_CounterStyleRule_GetSuffix
(
mRule
&
mSuffix
)
)
{
if
(
IsExtendsSystem
(
)
)
{
GetExtends
(
)
-
>
GetSuffixInternal
(
mSuffix
)
;
}
else
{
mSuffix
.
AssignLiteral
(
u
"
.
"
)
;
}
}
}
aResult
=
mSuffix
;
}
void
CustomCounterStyle
:
:
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
{
if
(
GetSpeakAs
(
)
!
=
SpeakAs
:
:
Other
)
{
CounterStyle
:
:
GetSpokenCounterText
(
aOrdinal
aWritingMode
aResult
aIsBullet
)
;
}
else
{
MOZ_ASSERT
(
mSpeakAsCounter
"
mSpeakAsCounter
should
have
been
initialized
.
"
)
;
mSpeakAsCounter
-
>
GetSpokenCounterText
(
aOrdinal
aWritingMode
aResult
aIsBullet
)
;
}
}
bool
CustomCounterStyle
:
:
IsBullet
(
)
{
switch
(
mSystem
)
{
case
StyleCounterSystem
:
:
Cyclic
:
return
true
;
case
StyleCounterSystem
:
:
Extends
:
return
GetExtendsRoot
(
)
-
>
IsBullet
(
)
;
default
:
return
false
;
}
}
void
CustomCounterStyle
:
:
GetNegative
(
NegativeType
&
aResult
)
{
if
(
!
(
mFlags
&
FLAG_NEGATIVE_INITED
)
)
{
mFlags
|
=
FLAG_NEGATIVE_INITED
;
if
(
!
Servo_CounterStyleRule_GetNegative
(
mRule
&
mNegative
.
before
&
mNegative
.
after
)
)
{
if
(
IsExtendsSystem
(
)
)
{
GetExtends
(
)
-
>
GetNegative
(
mNegative
)
;
}
else
{
mNegative
.
before
.
AssignLiteral
(
u
"
-
"
)
;
mNegative
.
after
.
Truncate
(
)
;
}
}
}
aResult
=
mNegative
;
}
bool
CustomCounterStyle
:
:
IsOrdinalInRange
(
CounterValue
aOrdinal
)
{
auto
inRange
=
Servo_CounterStyleRule_IsInRange
(
mRule
aOrdinal
)
;
switch
(
inRange
)
{
case
StyleIsOrdinalInRange
:
:
InRange
:
return
true
;
case
StyleIsOrdinalInRange
:
:
NotInRange
:
return
false
;
case
StyleIsOrdinalInRange
:
:
NoOrdinalSpecified
:
if
(
IsExtendsSystem
(
)
)
{
return
GetExtends
(
)
-
>
IsOrdinalInRange
(
aOrdinal
)
;
}
break
;
case
StyleIsOrdinalInRange
:
:
Auto
:
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unkown
result
from
IsInRange
?
"
)
;
}
return
IsOrdinalInAutoRange
(
aOrdinal
)
;
}
bool
CustomCounterStyle
:
:
AdditiveSymbolsIncludeZero
(
)
{
const
auto
symbols
=
GetAdditiveSymbols
(
)
;
return
!
symbols
.
IsEmpty
(
)
&
&
symbols
[
symbols
.
Length
(
)
-
1
]
.
weight
=
=
0
;
}
bool
CustomCounterStyle
:
:
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
{
switch
(
mSystem
)
{
case
StyleCounterSystem
:
:
Cyclic
:
case
StyleCounterSystem
:
:
Numeric
:
case
StyleCounterSystem
:
:
Fixed
:
return
true
;
case
StyleCounterSystem
:
:
Alphabetic
:
case
StyleCounterSystem
:
:
Symbolic
:
return
aOrdinal
>
=
1
;
case
StyleCounterSystem
:
:
Additive
:
return
aOrdinal
>
=
(
AdditiveSymbolsIncludeZero
(
)
?
0
:
1
)
;
case
StyleCounterSystem
:
:
Extends
:
return
GetExtendsRoot
(
)
-
>
IsOrdinalInAutoRange
(
aOrdinal
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
system
for
computing
auto
value
.
"
)
;
return
false
;
}
}
void
CustomCounterStyle
:
:
GetPad
(
PadType
&
aResult
)
{
if
(
!
(
mFlags
&
FLAG_PAD_INITED
)
)
{
mFlags
|
=
FLAG_PAD_INITED
;
if
(
!
Servo_CounterStyleRule_GetPad
(
mRule
&
mPad
.
width
&
mPad
.
symbol
)
)
{
if
(
IsExtendsSystem
(
)
)
{
GetExtends
(
)
-
>
GetPad
(
mPad
)
;
}
else
{
mPad
.
width
=
0
;
mPad
.
symbol
.
Truncate
(
)
;
}
}
}
aResult
=
mPad
;
}
CounterStyle
*
CustomCounterStyle
:
:
GetFallback
(
)
{
if
(
!
mFallback
)
{
mFallback
=
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
if
(
nsAtom
*
fallback
=
Servo_CounterStyleRule_GetFallback
(
mRule
)
)
{
mFallback
=
mManager
-
>
ResolveCounterStyle
(
fallback
)
;
}
else
if
(
IsExtendsSystem
(
)
)
{
mFallback
=
GetExtends
(
)
-
>
GetFallback
(
)
;
}
}
return
mFallback
;
}
SpeakAs
CustomCounterStyle
:
:
GetSpeakAs
(
)
{
if
(
!
(
mFlags
&
FLAG_SPEAKAS_INITED
)
)
{
ComputeSpeakAs
(
)
;
}
return
mSpeakAs
;
}
bool
CustomCounterStyle
:
:
UseNegativeSign
(
)
{
if
(
mSystem
=
=
StyleCounterSystem
:
:
Extends
)
{
return
GetExtendsRoot
(
)
-
>
UseNegativeSign
(
)
;
}
return
SystemUsesNegativeSign
(
mSystem
)
;
}
void
CustomCounterStyle
:
:
CallFallbackStyle
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
CounterStyle
*
fallback
=
GetFallback
(
)
;
mFallback
=
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
fallback
-
>
GetCounterText
(
aOrdinal
aWritingMode
aResult
aIsRTL
)
;
mFallback
=
fallback
;
}
CounterStyle
*
CustomCounterStyle
:
:
ResolveFallbackFor
(
CounterValue
aOrdinal
)
{
if
(
IsOrdinalInRange
(
aOrdinal
)
)
{
return
this
;
}
CounterStyle
*
fallback
=
GetFallback
(
)
;
mFallback
=
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
CounterStyle
*
result
=
fallback
-
>
ResolveFallbackFor
(
aOrdinal
)
;
mFallback
=
fallback
;
return
result
;
}
bool
CustomCounterStyle
:
:
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
switch
(
mSystem
)
{
case
StyleCounterSystem
:
:
Cyclic
:
return
GetCyclicCounterText
(
aOrdinal
aResult
GetSymbols
(
)
)
;
case
StyleCounterSystem
:
:
Fixed
:
{
int32_t
start
=
Servo_CounterStyleRule_GetFixedFirstValue
(
mRule
)
;
return
GetFixedCounterText
(
aOrdinal
aResult
start
GetSymbols
(
)
)
;
}
case
StyleCounterSystem
:
:
Symbolic
:
return
GetSymbolicCounterText
(
aOrdinal
aResult
GetSymbols
(
)
)
;
case
StyleCounterSystem
:
:
Alphabetic
:
return
GetAlphabeticCounterText
(
aOrdinal
aResult
GetSymbols
(
)
)
;
case
StyleCounterSystem
:
:
Numeric
:
return
GetNumericCounterText
(
aOrdinal
aResult
GetSymbols
(
)
)
;
case
StyleCounterSystem
:
:
Additive
:
return
GetAdditiveCounterText
(
aOrdinal
aResult
GetAdditiveSymbols
(
)
)
;
case
StyleCounterSystem
:
:
Extends
:
return
GetExtendsRoot
(
)
-
>
GetInitialCounterText
(
aOrdinal
aWritingMode
aResult
aIsRTL
)
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
system
.
"
)
;
return
false
;
}
}
Span
<
const
nsString
>
CustomCounterStyle
:
:
GetSymbols
(
)
{
if
(
mSymbols
.
IsEmpty
(
)
)
{
Servo_CounterStyleRule_GetSymbols
(
mRule
&
mSymbols
)
;
}
return
mSymbols
.
AsSpan
(
)
;
}
Span
<
const
AdditiveSymbol
>
CustomCounterStyle
:
:
GetAdditiveSymbols
(
)
{
if
(
mAdditiveSymbols
.
IsEmpty
(
)
)
{
Servo_CounterStyleRule_GetAdditiveSymbols
(
mRule
&
mAdditiveSymbols
)
;
}
return
mAdditiveSymbols
.
AsSpan
(
)
;
}
SpeakAs
CustomCounterStyle
:
:
GetSpeakAsAutoValue
(
)
{
auto
system
=
mSystem
;
if
(
IsExtendsSystem
(
)
)
{
CounterStyle
*
root
=
GetExtendsRoot
(
)
;
if
(
!
root
-
>
IsCustomStyle
(
)
)
{
return
root
-
>
GetSpeakAs
(
)
;
}
system
=
static_cast
<
CustomCounterStyle
*
>
(
root
)
-
>
mSystem
;
}
return
GetDefaultSpeakAsForSystem
(
system
)
;
}
void
CustomCounterStyle
:
:
ComputeRawSpeakAs
(
SpeakAs
&
aSpeakAs
CounterStyle
*
&
aSpeakAsCounter
)
{
NS_ASSERTION
(
!
(
mFlags
&
FLAG_SPEAKAS_INITED
)
"
ComputeRawSpeakAs
is
called
with
speak
-
as
inited
.
"
)
;
auto
speakAs
=
StyleCounterSpeakAs
:
:
None
(
)
;
Servo_CounterStyleRule_GetSpeakAs
(
mRule
&
speakAs
)
;
switch
(
speakAs
.
tag
)
{
case
StyleCounterSpeakAs
:
:
Tag
:
:
Auto
:
aSpeakAs
=
GetSpeakAsAutoValue
(
)
;
break
;
case
StyleCounterSpeakAs
:
:
Tag
:
:
Bullets
:
aSpeakAs
=
SpeakAs
:
:
Bullets
;
break
;
case
StyleCounterSpeakAs
:
:
Tag
:
:
Numbers
:
aSpeakAs
=
SpeakAs
:
:
Numbers
;
break
;
case
StyleCounterSpeakAs
:
:
Tag
:
:
Words
:
aSpeakAs
=
SpeakAs
:
:
Words
;
break
;
case
StyleCounterSpeakAs
:
:
Tag
:
:
Ident
:
aSpeakAs
=
SpeakAs
:
:
Other
;
aSpeakAsCounter
=
mManager
-
>
ResolveCounterStyle
(
speakAs
.
AsIdent
(
)
)
;
break
;
case
StyleCounterSpeakAs
:
:
Tag
:
:
None
:
{
if
(
!
IsExtendsSystem
(
)
)
{
aSpeakAs
=
GetSpeakAsAutoValue
(
)
;
}
else
{
CounterStyle
*
extended
=
GetExtends
(
)
;
if
(
!
extended
-
>
IsCustomStyle
(
)
)
{
aSpeakAs
=
extended
-
>
GetSpeakAs
(
)
;
}
else
{
CustomCounterStyle
*
custom
=
static_cast
<
CustomCounterStyle
*
>
(
extended
)
;
if
(
!
(
custom
-
>
mFlags
&
FLAG_SPEAKAS_INITED
)
)
{
custom
-
>
ComputeRawSpeakAs
(
aSpeakAs
aSpeakAsCounter
)
;
}
else
{
aSpeakAs
=
custom
-
>
mSpeakAs
;
aSpeakAsCounter
=
custom
-
>
mSpeakAsCounter
;
}
}
}
break
;
}
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
speak
-
as
value
"
)
;
}
}
CounterStyle
*
CustomCounterStyle
:
:
ComputeSpeakAs
(
)
{
if
(
mFlags
&
FLAG_SPEAKAS_INITED
)
{
if
(
mSpeakAs
=
=
SpeakAs
:
:
Other
)
{
return
mSpeakAsCounter
;
}
return
this
;
}
if
(
mFlags
&
FLAG_SPEAKAS_VISITED
)
{
mFlags
|
=
FLAG_SPEAKAS_LOOP
;
return
nullptr
;
}
CounterStyle
*
speakAsCounter
;
ComputeRawSpeakAs
(
mSpeakAs
speakAsCounter
)
;
bool
inLoop
=
false
;
if
(
mSpeakAs
!
=
SpeakAs
:
:
Other
)
{
mSpeakAsCounter
=
nullptr
;
}
else
if
(
!
speakAsCounter
-
>
IsCustomStyle
(
)
)
{
mSpeakAsCounter
=
speakAsCounter
;
}
else
{
mFlags
|
=
FLAG_SPEAKAS_VISITED
;
CounterStyle
*
target
=
static_cast
<
CustomCounterStyle
*
>
(
speakAsCounter
)
-
>
ComputeSpeakAs
(
)
;
mFlags
&
=
~
FLAG_SPEAKAS_VISITED
;
if
(
target
)
{
NS_ASSERTION
(
!
(
mFlags
&
FLAG_SPEAKAS_LOOP
)
"
Invalid
state
for
speak
-
as
loop
detecting
"
)
;
mSpeakAsCounter
=
target
;
}
else
{
mSpeakAs
=
GetSpeakAsAutoValue
(
)
;
mSpeakAsCounter
=
nullptr
;
if
(
mFlags
&
FLAG_SPEAKAS_LOOP
)
{
mFlags
&
=
~
FLAG_SPEAKAS_LOOP
;
}
else
{
inLoop
=
true
;
}
}
}
mFlags
|
=
FLAG_SPEAKAS_INITED
;
if
(
inLoop
)
{
return
nullptr
;
}
return
mSpeakAsCounter
?
mSpeakAsCounter
:
this
;
}
CounterStyle
*
CustomCounterStyle
:
:
ComputeExtends
(
)
{
if
(
!
IsExtendsSystem
(
)
|
|
mExtends
)
{
return
this
;
}
if
(
mFlags
&
FLAG_EXTENDS_VISITED
)
{
mFlags
|
=
FLAG_EXTENDS_LOOP
;
return
nullptr
;
}
nsAtom
*
extended
=
Servo_CounterStyleRule_GetExtended
(
mRule
)
;
CounterStyle
*
nextCounter
=
mManager
-
>
ResolveCounterStyle
(
extended
)
;
CounterStyle
*
target
=
nextCounter
;
if
(
nextCounter
-
>
IsCustomStyle
(
)
)
{
mFlags
|
=
FLAG_EXTENDS_VISITED
;
target
=
static_cast
<
CustomCounterStyle
*
>
(
nextCounter
)
-
>
ComputeExtends
(
)
;
mFlags
&
=
~
FLAG_EXTENDS_VISITED
;
}
if
(
target
)
{
NS_ASSERTION
(
!
(
mFlags
&
FLAG_EXTENDS_LOOP
)
"
Invalid
state
for
extends
loop
detecting
"
)
;
mExtends
=
nextCounter
;
return
this
;
}
else
{
mExtends
=
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
if
(
mFlags
&
FLAG_EXTENDS_LOOP
)
{
mFlags
&
=
~
FLAG_EXTENDS_LOOP
;
return
this
;
}
else
{
return
nullptr
;
}
}
}
CounterStyle
*
CustomCounterStyle
:
:
GetExtends
(
)
{
if
(
!
mExtends
)
{
ComputeExtends
(
)
;
}
return
mExtends
;
}
CounterStyle
*
CustomCounterStyle
:
:
GetExtendsRoot
(
)
{
if
(
!
mExtendsRoot
)
{
CounterStyle
*
extended
=
GetExtends
(
)
;
mExtendsRoot
=
extended
;
if
(
extended
-
>
IsCustomStyle
(
)
)
{
CustomCounterStyle
*
custom
=
static_cast
<
CustomCounterStyle
*
>
(
extended
)
;
if
(
custom
-
>
IsExtendsSystem
(
)
)
{
mExtendsRoot
=
custom
-
>
GetExtendsRoot
(
)
;
}
}
}
return
mExtendsRoot
;
}
AnonymousCounterStyle
:
:
AnonymousCounterStyle
(
const
nsAString
&
aContent
)
:
CounterStyle
(
ListStyle
:
:
Custom
)
mSingleString
(
true
)
mSymbolsType
(
StyleSymbolsType
:
:
Cyclic
)
{
mSymbols
.
SetCapacity
(
1
)
;
mSymbols
.
AppendElement
(
aContent
)
;
}
AnonymousCounterStyle
:
:
AnonymousCounterStyle
(
StyleSymbolsType
aType
nsTArray
<
nsString
>
aSymbols
)
:
CounterStyle
(
ListStyle
:
:
Custom
)
mSingleString
(
false
)
mSymbolsType
(
aType
)
mSymbols
(
std
:
:
move
(
aSymbols
)
)
{
}
void
AnonymousCounterStyle
:
:
GetPrefixInternal
(
nsAString
&
aResult
)
{
aResult
.
Truncate
(
)
;
}
void
AnonymousCounterStyle
:
:
GetSuffixInternal
(
nsAString
&
aResult
)
{
if
(
IsSingleString
(
)
)
{
aResult
.
Truncate
(
)
;
}
else
{
aResult
=
'
'
;
}
}
bool
AnonymousCounterStyle
:
:
IsBullet
(
)
{
return
mSymbolsType
=
=
StyleSymbolsType
:
:
Cyclic
;
}
void
AnonymousCounterStyle
:
:
GetNegative
(
NegativeType
&
aResult
)
{
aResult
.
before
.
AssignLiteral
(
u
"
-
"
)
;
aResult
.
after
.
Truncate
(
)
;
}
bool
AnonymousCounterStyle
:
:
IsOrdinalInRange
(
CounterValue
aOrdinal
)
{
switch
(
mSymbolsType
)
{
case
StyleSymbolsType
:
:
Cyclic
:
case
StyleSymbolsType
:
:
Numeric
:
case
StyleSymbolsType
:
:
Fixed
:
return
true
;
case
StyleSymbolsType
:
:
Alphabetic
:
case
StyleSymbolsType
:
:
Symbolic
:
return
aOrdinal
>
=
1
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
system
.
"
)
;
return
false
;
}
}
bool
AnonymousCounterStyle
:
:
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
{
return
AnonymousCounterStyle
:
:
IsOrdinalInRange
(
aOrdinal
)
;
}
void
AnonymousCounterStyle
:
:
GetPad
(
PadType
&
aResult
)
{
aResult
.
width
=
0
;
aResult
.
symbol
.
Truncate
(
)
;
}
CounterStyle
*
AnonymousCounterStyle
:
:
GetFallback
(
)
{
return
CounterStyleManager
:
:
GetDecimalStyle
(
)
;
}
StyleCounterSystem
AnonymousCounterStyle
:
:
GetSystem
(
)
const
{
switch
(
mSymbolsType
)
{
case
StyleSymbolsType
:
:
Cyclic
:
return
StyleCounterSystem
:
:
Cyclic
;
case
StyleSymbolsType
:
:
Numeric
:
return
StyleCounterSystem
:
:
Numeric
;
case
StyleSymbolsType
:
:
Fixed
:
return
StyleCounterSystem
:
:
Fixed
;
case
StyleSymbolsType
:
:
Alphabetic
:
return
StyleCounterSystem
:
:
Alphabetic
;
case
StyleSymbolsType
:
:
Symbolic
:
return
StyleCounterSystem
:
:
Symbolic
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
symbols
(
)
type
"
)
;
return
StyleCounterSystem
:
:
Cyclic
;
}
SpeakAs
AnonymousCounterStyle
:
:
GetSpeakAs
(
)
{
return
GetDefaultSpeakAsForSystem
(
GetSystem
(
)
)
;
}
bool
AnonymousCounterStyle
:
:
UseNegativeSign
(
)
{
return
SystemUsesNegativeSign
(
GetSystem
(
)
)
;
}
bool
AnonymousCounterStyle
:
:
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
switch
(
mSymbolsType
)
{
case
StyleSymbolsType
:
:
Cyclic
:
return
GetCyclicCounterText
(
aOrdinal
aResult
mSymbols
)
;
case
StyleSymbolsType
:
:
Numeric
:
return
GetNumericCounterText
(
aOrdinal
aResult
mSymbols
)
;
case
StyleSymbolsType
:
:
Fixed
:
return
GetFixedCounterText
(
aOrdinal
aResult
1
mSymbols
)
;
case
StyleSymbolsType
:
:
Alphabetic
:
return
GetAlphabeticCounterText
(
aOrdinal
aResult
mSymbols
)
;
case
StyleSymbolsType
:
:
Symbolic
:
return
GetSymbolicCounterText
(
aOrdinal
aResult
mSymbols
)
;
}
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
system
.
"
)
;
return
false
;
}
bool
CounterStyle
:
:
IsDependentStyle
(
)
const
{
switch
(
mStyle
)
{
case
ListStyle
:
:
Custom
:
case
ListStyle
:
:
JapaneseInformal
:
case
ListStyle
:
:
JapaneseFormal
:
case
ListStyle
:
:
KoreanHangulFormal
:
case
ListStyle
:
:
KoreanHanjaInformal
:
case
ListStyle
:
:
KoreanHanjaFormal
:
case
ListStyle
:
:
SimpChineseInformal
:
case
ListStyle
:
:
SimpChineseFormal
:
case
ListStyle
:
:
TradChineseInformal
:
case
ListStyle
:
:
TradChineseFormal
:
return
true
;
default
:
return
false
;
}
}
void
CounterStyle
:
:
GetCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
bool
success
=
IsOrdinalInRange
(
aOrdinal
)
;
aIsRTL
=
false
;
if
(
success
)
{
bool
useNegativeSign
=
UseNegativeSign
(
)
;
nsAutoString
initialText
;
CounterValue
ordinal
;
if
(
!
useNegativeSign
)
{
ordinal
=
aOrdinal
;
}
else
{
CheckedInt
<
CounterValue
>
absolute
(
Abs
(
aOrdinal
)
)
;
ordinal
=
absolute
.
isValid
(
)
?
absolute
.
value
(
)
:
std
:
:
numeric_limits
<
CounterValue
>
:
:
max
(
)
;
}
success
=
GetInitialCounterText
(
ordinal
aWritingMode
initialText
aIsRTL
)
;
if
(
success
)
{
aResult
.
Truncate
(
)
;
if
(
useNegativeSign
&
&
aOrdinal
<
0
)
{
NegativeType
negative
;
GetNegative
(
negative
)
;
aResult
.
Append
(
negative
.
before
)
;
initialText
.
Append
(
negative
.
after
)
;
}
PadType
pad
;
GetPad
(
pad
)
;
int32_t
diff
=
pad
.
width
-
narrow_cast
<
int32_t
>
(
unicode
:
:
CountGraphemeClusters
(
initialText
)
+
unicode
:
:
CountGraphemeClusters
(
aResult
)
)
;
if
(
diff
>
0
)
{
auto
length
=
pad
.
symbol
.
Length
(
)
;
if
(
diff
>
LENGTH_LIMIT
|
|
length
>
LENGTH_LIMIT
|
|
diff
*
length
>
LENGTH_LIMIT
)
{
success
=
false
;
}
else
if
(
length
>
0
)
{
for
(
int32_t
i
=
0
;
i
<
diff
;
+
+
i
)
{
aResult
.
Append
(
pad
.
symbol
)
;
}
}
}
if
(
success
)
{
aResult
.
Append
(
initialText
)
;
}
}
}
if
(
!
success
)
{
CallFallbackStyle
(
aOrdinal
aWritingMode
aResult
aIsRTL
)
;
}
}
void
CounterStyle
:
:
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
{
bool
isRTL
;
aIsBullet
=
false
;
switch
(
GetSpeakAs
(
)
)
{
case
SpeakAs
:
:
Bullets
:
aResult
.
Assign
(
kDiscCharacter
)
;
aIsBullet
=
true
;
break
;
case
SpeakAs
:
:
Numbers
:
DecimalToText
(
aOrdinal
aResult
)
;
break
;
case
SpeakAs
:
:
Spellout
:
case
SpeakAs
:
:
Words
:
GetCounterText
(
aOrdinal
WritingMode
(
)
aResult
isRTL
)
;
break
;
case
SpeakAs
:
:
Other
:
MOZ_ASSERT_UNREACHABLE
(
"
Invalid
speak
-
as
value
"
)
;
break
;
default
:
MOZ_ASSERT_UNREACHABLE
(
"
Unknown
speak
-
as
value
"
)
;
break
;
}
}
void
CounterStyle
:
:
CallFallbackStyle
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
{
GetFallback
(
)
-
>
GetCounterText
(
aOrdinal
aWritingMode
aResult
aIsRTL
)
;
}
CounterStyle
*
CounterStyle
:
:
ResolveFallbackFor
(
CounterValue
aOrdinal
)
{
if
(
IsOrdinalInRange
(
aOrdinal
)
)
{
return
this
;
}
return
GetFallback
(
)
-
>
ResolveFallbackFor
(
aOrdinal
)
;
}
CounterStyleManager
:
:
CounterStyleManager
(
nsPresContext
*
aPresContext
)
:
mPresContext
(
aPresContext
)
{
mStyles
.
InsertOrUpdate
(
nsGkAtoms
:
:
none
GetNoneStyle
(
)
)
;
mStyles
.
InsertOrUpdate
(
nsGkAtoms
:
:
decimal
GetDecimalStyle
(
)
)
;
mStyles
.
InsertOrUpdate
(
nsGkAtoms
:
:
disc
GetDiscStyle
(
)
)
;
}
CounterStyleManager
:
:
~
CounterStyleManager
(
)
{
MOZ_ASSERT
(
!
mPresContext
"
Disconnect
should
have
been
called
"
)
;
}
void
CounterStyleManager
:
:
DestroyCounterStyle
(
CounterStyle
*
aCounterStyle
)
{
if
(
aCounterStyle
-
>
IsCustomStyle
(
)
)
{
MOZ_ASSERT
(
!
aCounterStyle
-
>
AsAnonymous
(
)
"
Anonymous
counter
styles
"
"
are
not
managed
by
CounterStyleManager
"
)
;
static_cast
<
CustomCounterStyle
*
>
(
aCounterStyle
)
-
>
Destroy
(
)
;
}
else
if
(
aCounterStyle
-
>
IsDependentStyle
(
)
)
{
static_cast
<
DependentBuiltinCounterStyle
*
>
(
aCounterStyle
)
-
>
Destroy
(
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Builtin
counter
styles
should
not
be
destroyed
"
)
;
}
}
void
CounterStyleManager
:
:
Disconnect
(
)
{
CleanRetiredStyles
(
)
;
for
(
CounterStyle
*
style
:
mStyles
.
Values
(
)
)
{
if
(
style
-
>
IsDependentStyle
(
)
)
{
DestroyCounterStyle
(
style
)
;
}
}
mStyles
.
Clear
(
)
;
mPresContext
=
nullptr
;
}
CounterStyle
*
CounterStyleManager
:
:
ResolveCounterStyle
(
nsAtom
*
aName
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
CounterStyle
*
data
=
GetCounterStyle
(
aName
)
;
if
(
data
)
{
return
data
;
}
ServoStyleSet
*
styleSet
=
mPresContext
-
>
StyleSet
(
)
;
auto
*
rule
=
styleSet
-
>
CounterStyleRuleForName
(
aName
)
;
if
(
rule
)
{
MOZ_ASSERT
(
Servo_CounterStyleRule_GetName
(
rule
)
=
=
aName
)
;
data
=
new
(
mPresContext
)
CustomCounterStyle
(
this
rule
)
;
}
else
{
for
(
const
BuiltinCounterStyle
&
item
:
gBuiltinStyleTable
)
{
if
(
item
.
GetStyleName
(
)
=
=
aName
)
{
const
auto
style
=
item
.
GetStyle
(
)
;
data
=
item
.
IsDependentStyle
(
)
?
new
(
mPresContext
)
DependentBuiltinCounterStyle
(
style
this
)
:
GetBuiltinStyle
(
style
)
;
break
;
}
}
}
if
(
!
data
)
{
data
=
GetDecimalStyle
(
)
;
}
mStyles
.
InsertOrUpdate
(
aName
data
)
;
return
data
;
}
CounterStyle
*
CounterStyleManager
:
:
GetBuiltinStyle
(
ListStyle
aStyle
)
{
MOZ_ASSERT
(
size_t
(
aStyle
)
<
ArrayLength
(
gBuiltinStyleTable
)
"
Require
a
valid
builtin
style
constant
"
)
;
MOZ_ASSERT
(
!
gBuiltinStyleTable
[
size_t
(
aStyle
)
]
.
IsDependentStyle
(
)
"
Cannot
get
dependent
builtin
style
"
)
;
return
const_cast
<
BuiltinCounterStyle
*
>
(
&
gBuiltinStyleTable
[
size_t
(
aStyle
)
]
)
;
}
bool
CounterStyleManager
:
:
NotifyRuleChanged
(
)
{
bool
changed
=
false
;
for
(
auto
iter
=
mStyles
.
Iter
(
)
;
!
iter
.
Done
(
)
;
iter
.
Next
(
)
)
{
CounterStyle
*
style
=
iter
.
Data
(
)
;
bool
toBeUpdated
=
false
;
bool
toBeRemoved
=
false
;
ServoStyleSet
*
styleSet
=
mPresContext
-
>
StyleSet
(
)
;
auto
*
newRule
=
styleSet
-
>
CounterStyleRuleForName
(
iter
.
Key
(
)
)
;
if
(
!
newRule
)
{
if
(
style
-
>
IsCustomStyle
(
)
)
{
toBeRemoved
=
true
;
}
}
else
{
if
(
!
style
-
>
IsCustomStyle
(
)
)
{
toBeRemoved
=
true
;
}
else
{
auto
custom
=
static_cast
<
CustomCounterStyle
*
>
(
style
)
;
if
(
custom
-
>
GetRule
(
)
!
=
newRule
)
{
toBeRemoved
=
true
;
}
else
{
auto
generation
=
Servo_CounterStyleRule_GetGeneration
(
newRule
)
;
if
(
custom
-
>
GetRuleGeneration
(
)
!
=
generation
)
{
toBeUpdated
=
true
;
custom
-
>
ResetCachedData
(
)
;
}
}
}
}
changed
=
changed
|
|
toBeUpdated
|
|
toBeRemoved
;
if
(
toBeRemoved
)
{
if
(
style
-
>
IsDependentStyle
(
)
)
{
mRetiredStyles
.
AppendElement
(
style
)
;
}
iter
.
Remove
(
)
;
}
}
if
(
changed
)
{
for
(
CounterStyle
*
style
:
mStyles
.
Values
(
)
)
{
if
(
style
-
>
IsCustomStyle
(
)
)
{
CustomCounterStyle
*
custom
=
static_cast
<
CustomCounterStyle
*
>
(
style
)
;
custom
-
>
ResetDependentData
(
)
;
}
}
}
return
changed
;
}
void
CounterStyleManager
:
:
CleanRetiredStyles
(
)
{
nsTArray
<
CounterStyle
*
>
list
(
std
:
:
move
(
mRetiredStyles
)
)
;
for
(
CounterStyle
*
style
:
list
)
{
DestroyCounterStyle
(
style
)
;
}
}
}
