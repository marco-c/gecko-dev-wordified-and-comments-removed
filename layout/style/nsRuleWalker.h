#
ifndef
nsRuleWalker_h_
#
define
nsRuleWalker_h_
#
include
"
nsRuleNode
.
h
"
#
include
"
nsIStyleRule
.
h
"
#
include
"
Declaration
.
h
"
#
include
"
nsQueryObject
.
h
"
class
nsRuleWalker
{
public
:
nsRuleNode
*
CurrentNode
(
)
{
return
mCurrent
;
}
void
SetCurrentNode
(
nsRuleNode
*
aNode
)
{
NS_ASSERTION
(
aNode
"
Must
have
node
here
!
"
)
;
mCurrent
=
aNode
;
}
nsPresContext
*
PresContext
(
)
const
{
return
mRoot
-
>
PresContext
(
)
;
}
protected
:
void
DoForward
(
nsIStyleRule
*
aRule
)
{
mCurrent
=
mCurrent
-
>
Transition
(
aRule
mLevel
mImportance
)
;
MOZ_ASSERT
(
mCurrent
"
Transition
messed
up
"
)
;
}
public
:
void
Forward
(
nsIStyleRule
*
aRule
)
{
NS_PRECONDITION
(
!
RefPtr
<
mozilla
:
:
css
:
:
Declaration
>
(
do_QueryObject
(
aRule
)
)
"
Calling
the
wrong
Forward
(
)
overload
"
)
;
DoForward
(
aRule
)
;
}
void
Forward
(
mozilla
:
:
css
:
:
Declaration
*
aRule
)
{
DoForward
(
aRule
)
;
mCheckForImportantRules
=
mCheckForImportantRules
&
&
!
aRule
-
>
HasImportantData
(
)
;
}
void
ForwardOnPossiblyCSSRule
(
nsIStyleRule
*
aRule
)
{
DoForward
(
aRule
)
;
}
void
Reset
(
)
{
mCurrent
=
mRoot
;
}
bool
AtRoot
(
)
{
return
mCurrent
=
=
mRoot
;
}
void
SetLevel
(
mozilla
:
:
SheetType
aLevel
bool
aImportance
bool
aCheckForImportantRules
)
{
NS_ASSERTION
(
!
aCheckForImportantRules
|
|
!
aImportance
"
Shouldn
'
t
be
checking
for
important
rules
while
walking
"
"
important
rules
"
)
;
mLevel
=
aLevel
;
mImportance
=
aImportance
;
mCheckForImportantRules
=
aCheckForImportantRules
;
}
mozilla
:
:
SheetType
GetLevel
(
)
const
{
return
mLevel
;
}
bool
GetImportance
(
)
const
{
return
mImportance
;
}
bool
GetCheckForImportantRules
(
)
const
{
return
mCheckForImportantRules
;
}
bool
AuthorStyleDisabled
(
)
const
{
return
mAuthorStyleDisabled
;
}
enum
VisitedHandlingType
{
eRelevantLinkUnvisited
eRelevantLinkVisited
eLinksVisitedOrUnvisited
}
;
private
:
nsRuleNode
*
mCurrent
;
nsRuleNode
*
mRoot
;
mozilla
:
:
SheetType
mLevel
;
bool
mImportance
;
bool
mCheckForImportantRules
;
bool
mAuthorStyleDisabled
;
public
:
nsRuleWalker
(
nsRuleNode
*
aRoot
bool
aAuthorStyleDisabled
)
:
mCurrent
(
aRoot
)
mRoot
(
aRoot
)
mAuthorStyleDisabled
(
aAuthorStyleDisabled
)
{
NS_ASSERTION
(
mCurrent
"
Caller
screwed
up
and
gave
us
null
node
"
)
;
MOZ_COUNT_CTOR
(
nsRuleWalker
)
;
}
~
nsRuleWalker
(
)
{
MOZ_COUNT_DTOR
(
nsRuleWalker
)
;
}
}
;
#
endif
