#
ifndef
mozilla_css_Rule_h___
#
define
mozilla_css_Rule_h___
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsISupports
.
h
"
#
include
"
nsIDOMCSSRule
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIDocument
;
struct
nsRuleData
;
template
<
class
T
>
struct
already_AddRefed
;
class
nsHTMLCSSStyleSheet
;
namespace
mozilla
{
namespace
css
{
class
GroupRule
;
class
Rule
:
public
nsIDOMCSSRule
public
nsWrapperCache
{
protected
:
Rule
(
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mSheet
(
nullptr
)
mParentRule
(
nullptr
)
mLineNumber
(
aLineNumber
)
mColumnNumber
(
aColumnNumber
)
{
}
Rule
(
const
Rule
&
aCopy
)
:
mSheet
(
aCopy
.
mSheet
)
mParentRule
(
aCopy
.
mParentRule
)
mLineNumber
(
aCopy
.
mLineNumber
)
mColumnNumber
(
aCopy
.
mColumnNumber
)
{
}
virtual
~
Rule
(
)
{
}
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS
(
Rule
)
virtual
bool
IsCCLeaf
(
)
const
MOZ_MUST_OVERRIDE
;
NS_DECL_NSIDOMCSSRULE
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
=
0
;
#
endif
enum
{
UNKNOWN_RULE
=
0
CHARSET_RULE
IMPORT_RULE
NAMESPACE_RULE
STYLE_RULE
MEDIA_RULE
FONT_FACE_RULE
PAGE_RULE
KEYFRAME_RULE
KEYFRAMES_RULE
DOCUMENT_RULE
SUPPORTS_RULE
FONT_FEATURE_VALUES_RULE
COUNTER_STYLE_RULE
}
;
virtual
int32_t
GetType
(
)
const
=
0
;
StyleSheet
*
GetStyleSheet
(
)
const
{
return
mSheet
;
}
nsIDocument
*
GetDocument
(
)
const
{
StyleSheet
*
sheet
=
GetStyleSheet
(
)
;
return
sheet
?
sheet
-
>
GetAssociatedDocument
(
)
:
nullptr
;
}
virtual
void
SetStyleSheet
(
StyleSheet
*
aSheet
)
;
void
SetParentRule
(
GroupRule
*
aRule
)
{
mParentRule
=
aRule
;
}
uint32_t
GetLineNumber
(
)
const
{
return
mLineNumber
;
}
uint32_t
GetColumnNumber
(
)
const
{
return
mColumnNumber
;
}
virtual
already_AddRefed
<
Rule
>
Clone
(
)
const
=
0
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
MOZ_MUST_OVERRIDE
=
0
;
virtual
uint16_t
Type
(
)
const
=
0
;
virtual
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
=
0
;
void
GetCssText
(
nsAString
&
aCssText
)
const
{
GetCssTextImpl
(
aCssText
)
;
}
Rule
*
GetParentRule
(
)
const
;
StyleSheet
*
GetParentStyleSheet
(
)
const
{
return
GetStyleSheet
(
)
;
}
nsIDocument
*
GetParentObject
(
)
const
{
return
GetDocument
(
)
;
}
protected
:
bool
IsKnownLive
(
)
const
;
StyleSheet
*
mSheet
;
GroupRule
*
MOZ_NON_OWNING_REF
mParentRule
;
uint32_t
mLineNumber
;
uint32_t
mColumnNumber
;
}
;
}
}
#
endif
