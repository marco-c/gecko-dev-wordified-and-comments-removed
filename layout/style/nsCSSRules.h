#
ifndef
nsCSSRules_h_
#
define
nsCSSRules_h_
#
include
"
Declaration
.
h
"
#
include
"
StyleRule
.
h
"
#
include
"
gfxFontFeatures
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
mozilla
/
css
/
GroupRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSMediaRule
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsDOMCSSDeclaration
.
h
"
#
include
"
nsIDOMCSSConditionRule
.
h
"
#
include
"
nsIDOMCSSCounterStyleRule
.
h
"
#
include
"
nsIDOMCSSFontFeatureValuesRule
.
h
"
#
include
"
nsIDOMCSSGroupingRule
.
h
"
#
include
"
nsIDOMCSSMozDocumentRule
.
h
"
#
include
"
nsIDOMCSSPageRule
.
h
"
#
include
"
nsIDOMCSSSupportsRule
.
h
"
#
include
"
nsIDOMCSSKeyframeRule
.
h
"
#
include
"
nsIDOMCSSKeyframesRule
.
h
"
#
include
"
nsTArray
.
h
"
class
nsMediaList
;
namespace
mozilla
{
class
ErrorResult
;
namespace
dom
{
class
MediaList
;
}
namespace
css
{
class
MediaRule
final
:
public
dom
:
:
CSSMediaRule
{
public
:
MediaRule
(
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
private
:
MediaRule
(
const
MediaRule
&
aCopy
)
;
~
MediaRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaRule
dom
:
:
CSSMediaRule
)
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
void
SetStyleSheet
(
mozilla
:
:
StyleSheet
*
aSheet
)
override
;
mozilla
:
:
CSSStyleSheet
*
GetStyleSheet
(
)
const
{
mozilla
:
:
StyleSheet
*
sheet
=
GroupRule
:
:
GetStyleSheet
(
)
;
return
sheet
?
sheet
-
>
AsGecko
(
)
:
nullptr
;
}
virtual
already_AddRefed
<
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSCONDITIONRULE
virtual
bool
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
override
;
nsresult
SetMedia
(
nsMediaList
*
aMedia
)
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
using
CSSMediaRule
:
:
SetConditionText
;
dom
:
:
MediaList
*
Media
(
)
override
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
MOZ_MUST_OVERRIDE
;
protected
:
void
AppendConditionText
(
nsAString
&
aOutput
)
const
;
RefPtr
<
nsMediaList
>
mMedia
;
}
;
class
DocumentRule
final
:
public
ConditionRule
public
nsIDOMCSSMozDocumentRule
{
public
:
DocumentRule
(
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
private
:
DocumentRule
(
const
DocumentRule
&
aCopy
)
;
~
DocumentRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSGROUPINGRULE
NS_DECL_NSIDOMCSSCONDITIONRULE
NS_DECL_NSIDOMCSSMOZDOCUMENTRULE
virtual
bool
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
override
;
bool
UseForPresentation
(
nsPresContext
*
aPresContext
)
;
enum
Function
{
eURL
eURLPrefix
eDomain
eRegExp
}
;
struct
URL
{
Function
func
;
nsCString
url
;
URL
*
next
;
URL
(
)
:
next
(
nullptr
)
{
}
URL
(
const
URL
&
aOther
)
:
func
(
aOther
.
func
)
url
(
aOther
.
url
)
next
(
aOther
.
next
?
new
URL
(
*
aOther
.
next
)
:
nullptr
)
{
}
~
URL
(
)
;
}
;
void
SetURLs
(
URL
*
aURLs
)
{
mURLs
=
aURLs
;
}
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
virtual
void
SetConditionText
(
const
nsAString
&
aConditionText
ErrorResult
&
aRv
)
override
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
MOZ_MUST_OVERRIDE
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
void
AppendConditionText
(
nsAString
&
aOutput
)
const
;
nsAutoPtr
<
URL
>
mURLs
;
}
;
}
}
class
nsCSSFontFeatureValuesRule
final
:
public
mozilla
:
:
css
:
:
Rule
public
nsIDOMCSSFontFeatureValuesRule
{
public
:
nsCSSFontFeatureValuesRule
(
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
Rule
(
aLineNumber
aColumnNumber
)
{
}
nsCSSFontFeatureValuesRule
(
const
nsCSSFontFeatureValuesRule
&
aCopy
)
:
mozilla
:
:
css
:
:
Rule
(
aCopy
)
mFamilyList
(
aCopy
.
mFamilyList
)
mFeatureValues
(
aCopy
.
mFeatureValues
)
{
}
NS_DECL_ISUPPORTS_INHERITED
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSFONTFEATUREVALUESRULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
void
SetFontFamily
(
const
nsAString
&
aFamily
mozilla
:
:
ErrorResult
&
aRv
)
;
void
SetValueText
(
const
nsAString
&
aFamily
mozilla
:
:
ErrorResult
&
aRv
)
;
const
mozilla
:
:
FontFamilyList
&
GetFamilyList
(
)
{
return
mFamilyList
;
}
void
SetFamilyList
(
const
mozilla
:
:
FontFamilyList
&
aFamilyList
)
;
void
AddValueList
(
int32_t
aVariantAlternate
nsTArray
<
gfxFontFeatureValueSet
:
:
ValueList
>
&
aValueList
)
;
const
nsTArray
<
gfxFontFeatureValueSet
:
:
FeatureValues
>
&
GetFeatureValues
(
)
{
return
mFeatureValues
;
}
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
~
nsCSSFontFeatureValuesRule
(
)
{
}
mozilla
:
:
FontFamilyList
mFamilyList
;
nsTArray
<
gfxFontFeatureValueSet
:
:
FeatureValues
>
mFeatureValues
;
}
;
class
nsCSSKeyframeRule
;
class
nsCSSKeyframeStyleDeclaration
final
:
public
nsDOMCSSDeclaration
{
public
:
explicit
nsCSSKeyframeStyleDeclaration
(
nsCSSKeyframeRule
*
aRule
)
;
NS_IMETHOD
GetParentRule
(
nsIDOMCSSRule
*
*
aParent
)
override
;
void
DropReference
(
)
{
mRule
=
nullptr
;
}
virtual
mozilla
:
:
DeclarationBlock
*
GetCSSDeclaration
(
Operation
aOperation
)
override
;
virtual
nsresult
SetCSSDeclaration
(
mozilla
:
:
DeclarationBlock
*
aDecl
)
override
;
virtual
void
GetCSSParsingEnvironment
(
CSSParsingEnvironment
&
aCSSParseEnv
)
override
;
mozilla
:
:
URLExtraData
*
GetURLData
(
)
const
final
;
virtual
nsIDocument
*
DocToUpdate
(
)
override
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsCSSKeyframeStyleDeclaration
nsICSSDeclaration
)
virtual
nsINode
*
GetParentObject
(
)
override
;
protected
:
virtual
~
nsCSSKeyframeStyleDeclaration
(
)
;
nsCSSKeyframeRule
*
MOZ_NON_OWNING_REF
mRule
;
}
;
class
nsCSSKeyframeRule
final
:
public
mozilla
:
:
css
:
:
Rule
public
nsIDOMCSSKeyframeRule
{
public
:
nsCSSKeyframeRule
(
InfallibleTArray
<
float
>
&
&
aKeys
already_AddRefed
<
mozilla
:
:
css
:
:
Declaration
>
&
&
aDeclaration
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
Rule
(
aLineNumber
aColumnNumber
)
mKeys
(
mozilla
:
:
Move
(
aKeys
)
)
mDeclaration
(
mozilla
:
:
Move
(
aDeclaration
)
)
{
mDeclaration
-
>
SetOwningRule
(
this
)
;
}
private
:
nsCSSKeyframeRule
(
const
nsCSSKeyframeRule
&
aCopy
)
;
~
nsCSSKeyframeRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
nsCSSKeyframeRule
mozilla
:
:
css
:
:
Rule
)
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSKEYFRAMERULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
nsICSSDeclaration
*
Style
(
)
;
const
nsTArray
<
float
>
&
GetKeys
(
)
const
{
return
mKeys
;
}
mozilla
:
:
css
:
:
Declaration
*
Declaration
(
)
{
return
mDeclaration
;
}
void
ChangeDeclaration
(
mozilla
:
:
css
:
:
Declaration
*
aDeclaration
)
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
DoGetKeyText
(
nsAString
&
aKeyText
)
const
;
private
:
nsTArray
<
float
>
mKeys
;
RefPtr
<
mozilla
:
:
css
:
:
Declaration
>
mDeclaration
;
RefPtr
<
nsCSSKeyframeStyleDeclaration
>
mDOMDeclaration
;
}
;
class
nsCSSKeyframesRule
final
:
public
mozilla
:
:
css
:
:
GroupRule
public
nsIDOMCSSKeyframesRule
{
public
:
nsCSSKeyframesRule
(
const
nsSubstring
&
aName
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
GroupRule
(
aLineNumber
aColumnNumber
)
mName
(
aName
)
{
}
private
:
nsCSSKeyframesRule
(
const
nsCSSKeyframesRule
&
aCopy
)
;
~
nsCSSKeyframesRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSKEYFRAMESRULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
using
mozilla
:
:
css
:
:
GroupRule
:
:
CssRules
;
nsCSSKeyframeRule
*
FindRule
(
const
nsAString
&
aKey
)
;
virtual
bool
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
override
;
const
nsString
&
GetName
(
)
{
return
mName
;
}
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
uint32_t
FindRuleIndexForKey
(
const
nsAString
&
aKey
)
;
nsString
mName
;
}
;
class
nsCSSPageRule
;
class
nsCSSPageStyleDeclaration
final
:
public
nsDOMCSSDeclaration
{
public
:
explicit
nsCSSPageStyleDeclaration
(
nsCSSPageRule
*
aRule
)
;
NS_IMETHOD
GetParentRule
(
nsIDOMCSSRule
*
*
aParent
)
override
;
void
DropReference
(
)
{
mRule
=
nullptr
;
}
virtual
mozilla
:
:
DeclarationBlock
*
GetCSSDeclaration
(
Operation
aOperation
)
override
;
virtual
nsresult
SetCSSDeclaration
(
mozilla
:
:
DeclarationBlock
*
aDecl
)
override
;
virtual
void
GetCSSParsingEnvironment
(
CSSParsingEnvironment
&
aCSSParseEnv
)
override
;
mozilla
:
:
URLExtraData
*
GetURLData
(
)
const
final
;
virtual
nsIDocument
*
DocToUpdate
(
)
override
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsCSSPageStyleDeclaration
nsICSSDeclaration
)
virtual
nsINode
*
GetParentObject
(
)
override
;
protected
:
virtual
~
nsCSSPageStyleDeclaration
(
)
;
nsCSSPageRule
*
MOZ_NON_OWNING_REF
mRule
;
}
;
class
nsCSSPageRule
final
:
public
mozilla
:
:
css
:
:
Rule
public
nsIDOMCSSPageRule
{
public
:
nsCSSPageRule
(
mozilla
:
:
css
:
:
Declaration
*
aDeclaration
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
Rule
(
aLineNumber
aColumnNumber
)
mDeclaration
(
aDeclaration
)
{
mDeclaration
-
>
SetOwningRule
(
this
)
;
}
private
:
nsCSSPageRule
(
const
nsCSSPageRule
&
aCopy
)
;
~
nsCSSPageRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
nsCSSPageRule
mozilla
:
:
css
:
:
Rule
)
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSPAGERULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
nsICSSDeclaration
*
Style
(
)
;
mozilla
:
:
css
:
:
Declaration
*
Declaration
(
)
{
return
mDeclaration
;
}
void
ChangeDeclaration
(
mozilla
:
:
css
:
:
Declaration
*
aDeclaration
)
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
RefPtr
<
mozilla
:
:
css
:
:
Declaration
>
mDeclaration
;
RefPtr
<
nsCSSPageStyleDeclaration
>
mDOMDeclaration
;
}
;
namespace
mozilla
{
class
CSSSupportsRule
final
:
public
css
:
:
ConditionRule
public
nsIDOMCSSSupportsRule
{
public
:
CSSSupportsRule
(
bool
aConditionMet
const
nsString
&
aCondition
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
;
CSSSupportsRule
(
const
CSSSupportsRule
&
aCopy
)
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
virtual
bool
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
override
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIDOMCSSGROUPINGRULE
NS_DECL_NSIDOMCSSCONDITIONRULE
NS_DECL_NSIDOMCSSSUPPORTSRULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
virtual
void
SetConditionText
(
const
nsAString
&
aConditionText
ErrorResult
&
aRv
)
override
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
protected
:
virtual
~
CSSSupportsRule
(
)
;
bool
mUseGroup
;
nsString
mCondition
;
}
;
}
class
nsCSSCounterStyleRule
final
:
public
mozilla
:
:
css
:
:
Rule
public
nsIDOMCSSCounterStyleRule
{
public
:
explicit
nsCSSCounterStyleRule
(
const
nsAString
&
aName
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
Rule
(
aLineNumber
aColumnNumber
)
mName
(
aName
)
mGeneration
(
0
)
{
}
private
:
nsCSSCounterStyleRule
(
const
nsCSSCounterStyleRule
&
aCopy
)
;
~
nsCSSCounterStyleRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSCOUNTERSTYLERULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
static
bool
CheckDescValue
(
int32_t
aSystem
nsCSSCounterDesc
aDescID
const
nsCSSValue
&
aValue
)
;
const
nsString
&
GetName
(
)
const
{
return
mName
;
}
uint32_t
GetGeneration
(
)
const
{
return
mGeneration
;
}
int32_t
GetSystem
(
)
const
;
const
nsCSSValue
&
GetSystemArgument
(
)
const
;
const
nsCSSValue
&
GetDesc
(
nsCSSCounterDesc
aDescID
)
const
{
MOZ_ASSERT
(
aDescID
>
=
0
&
&
aDescID
<
eCSSCounterDesc_COUNT
"
descriptor
ID
out
of
range
"
)
;
return
mValues
[
aDescID
]
;
}
void
SetDesc
(
nsCSSCounterDesc
aDescID
const
nsCSSValue
&
aValue
)
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
typedef
NS_STDCALL_FUNCPROTO
(
nsresult
Getter
nsCSSCounterStyleRule
GetSymbols
(
nsAString
&
)
)
;
static
const
Getter
kGetters
[
]
;
nsresult
GetDescriptor
(
nsCSSCounterDesc
aDescID
nsAString
&
aValue
)
;
nsresult
SetDescriptor
(
nsCSSCounterDesc
aDescID
const
nsAString
&
aValue
)
;
nsString
mName
;
nsCSSValue
mValues
[
eCSSCounterDesc_COUNT
]
;
uint32_t
mGeneration
;
}
;
#
endif
