#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
BasePrincipal
.
h
"
#
include
"
mozilla
/
ComputedStyleInlines
.
h
"
#
include
"
mozilla
/
css
/
ErrorReporter
.
h
"
#
include
"
mozilla
/
css
/
GroupRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSImportRule
.
h
"
#
include
"
mozilla
/
dom
/
CSSRuleList
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
MediaList
.
h
"
#
include
"
mozilla
/
dom
/
Promise
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRootBinding
.
h
"
#
include
"
mozilla
/
NullPrincipal
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoCSSRuleList
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozAutoDocUpdate
.
h
"
#
include
"
SheetLoadData
.
h
"
namespace
mozilla
{
using
namespace
dom
;
StyleSheet
:
:
StyleSheet
(
css
:
:
SheetParsingMode
aParsingMode
CORSMode
aCORSMode
const
dom
:
:
SRIMetadata
&
aIntegrity
)
:
mParent
(
nullptr
)
mConstructorDocument
(
nullptr
)
mDocumentOrShadowRoot
(
nullptr
)
mOwningNode
(
nullptr
)
mOwnerRule
(
nullptr
)
mParsingMode
(
aParsingMode
)
mState
(
static_cast
<
State
>
(
0
)
)
mAssociationMode
(
NotOwnedByDocumentOrShadowRoot
)
mInner
(
new
StyleSheetInfo
(
aCORSMode
aIntegrity
aParsingMode
)
)
{
mInner
-
>
AddSheet
(
this
)
;
}
StyleSheet
:
:
StyleSheet
(
const
StyleSheet
&
aCopy
StyleSheet
*
aParentToUse
dom
:
:
CSSImportRule
*
aOwnerRuleToUse
dom
:
:
DocumentOrShadowRoot
*
aDocumentOrShadowRoot
nsINode
*
aOwningNodeToUse
)
:
mParent
(
aParentToUse
)
mConstructorDocument
(
aCopy
.
mConstructorDocument
)
mTitle
(
aCopy
.
mTitle
)
mDocumentOrShadowRoot
(
aDocumentOrShadowRoot
)
mOwningNode
(
aOwningNodeToUse
)
mOwnerRule
(
aOwnerRuleToUse
)
mParsingMode
(
aCopy
.
mParsingMode
)
mState
(
aCopy
.
mState
)
mAssociationMode
(
NotOwnedByDocumentOrShadowRoot
)
mInner
(
aCopy
.
mInner
)
{
MOZ_ASSERT
(
mInner
"
Should
only
copy
StyleSheets
with
an
mInner
.
"
)
;
mInner
-
>
AddSheet
(
this
)
;
if
(
HasForcedUniqueInner
(
)
)
{
MOZ_ASSERT
(
IsComplete
(
)
"
Why
have
rules
been
accessed
on
an
incomplete
sheet
?
"
)
;
EnsureUniqueInner
(
)
;
mState
&
=
~
(
State
:
:
ForcedUniqueInner
|
State
:
:
ModifiedRules
|
State
:
:
ModifiedRulesForDevtools
)
;
}
if
(
aCopy
.
mMedia
)
{
mMedia
=
aCopy
.
mMedia
-
>
Clone
(
)
;
}
}
already_AddRefed
<
StyleSheet
>
StyleSheet
:
:
Constructor
(
const
dom
:
:
GlobalObject
&
aGlobal
const
dom
:
:
CSSStyleSheetInit
&
aOptions
ErrorResult
&
aRv
)
{
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
do_QueryInterface
(
aGlobal
.
GetAsSupports
(
)
)
;
if
(
!
window
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
"
CSSStyleSheet
constructor
not
supported
when
there
"
"
is
no
document
"
)
;
return
nullptr
;
}
Document
*
constructorDocument
=
window
-
>
GetExtantDoc
(
)
;
if
(
!
constructorDocument
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_SUPPORTED_ERR
"
CSSStyleSheet
constructor
not
supported
when
there
"
"
is
no
document
"
)
;
return
nullptr
;
}
auto
sheet
=
MakeRefPtr
<
StyleSheet
>
(
css
:
:
SheetParsingMode
:
:
eAuthorSheetFeatures
CORSMode
:
:
CORS_NONE
dom
:
:
SRIMetadata
(
)
)
;
nsIURI
*
baseURI
=
constructorDocument
-
>
GetBaseURI
(
)
;
nsIURI
*
sheetURI
=
constructorDocument
-
>
GetDocumentURI
(
)
;
nsIURI
*
originalURI
=
nullptr
;
sheet
-
>
SetURIs
(
sheetURI
originalURI
baseURI
)
;
sheet
-
>
SetTitle
(
aOptions
.
mTitle
)
;
sheet
-
>
SetPrincipal
(
constructorDocument
-
>
NodePrincipal
(
)
)
;
sheet
-
>
SetReferrerInfo
(
constructorDocument
-
>
GetReferrerInfo
(
)
)
;
sheet
-
>
mConstructorDocument
=
constructorDocument
;
if
(
aOptions
.
mMedia
.
IsString
(
)
)
{
sheet
-
>
SetMedia
(
MediaList
:
:
Create
(
aOptions
.
mMedia
.
GetAsString
(
)
)
)
;
}
else
{
sheet
-
>
SetMedia
(
aOptions
.
mMedia
.
GetAsMediaList
(
)
-
>
Clone
(
)
)
;
}
sheet
-
>
SetDisabled
(
aOptions
.
mDisabled
)
;
sheet
-
>
SetComplete
(
)
;
return
sheet
.
forget
(
)
;
}
StyleSheet
:
:
~
StyleSheet
(
)
{
MOZ_ASSERT
(
!
mInner
"
Inner
should
have
been
dropped
in
LastRelease
"
)
;
}
bool
StyleSheet
:
:
HasRules
(
)
const
{
return
Servo_StyleSheet_HasRules
(
Inner
(
)
.
mContents
)
;
}
Document
*
StyleSheet
:
:
GetAssociatedDocument
(
)
const
{
return
mDocumentOrShadowRoot
?
mDocumentOrShadowRoot
-
>
AsNode
(
)
.
OwnerDoc
(
)
:
nullptr
;
}
Document
*
StyleSheet
:
:
GetComposedDoc
(
)
const
{
return
mDocumentOrShadowRoot
?
mDocumentOrShadowRoot
-
>
AsNode
(
)
.
GetComposedDoc
(
)
:
nullptr
;
}
bool
StyleSheet
:
:
IsKeptAliveByDocument
(
)
const
{
if
(
mAssociationMode
!
=
OwnedByDocumentOrShadowRoot
)
{
return
false
;
}
return
!
!
GetComposedDoc
(
)
;
}
void
StyleSheet
:
:
LastRelease
(
)
{
MOZ_ASSERT
(
mInner
"
Should
have
an
mInner
at
time
of
destruction
.
"
)
;
MOZ_ASSERT
(
mInner
-
>
mSheets
.
Contains
(
this
)
"
Our
mInner
should
include
us
.
"
)
;
UnparentChildren
(
)
;
mInner
-
>
RemoveSheet
(
this
)
;
mInner
=
nullptr
;
DropMedia
(
)
;
DropRuleList
(
)
;
}
void
StyleSheet
:
:
UnlinkInner
(
)
{
if
(
mInner
-
>
mSheets
.
Length
(
)
!
=
1
)
{
return
;
}
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
MOZ_ASSERT
(
child
-
>
mParent
=
=
this
"
We
have
a
unique
inner
!
"
)
;
child
-
>
mParent
=
nullptr
;
child
-
>
ClearAssociatedDocumentOrShadowRoot
(
)
;
}
Inner
(
)
.
mChildren
.
Clear
(
)
;
}
void
StyleSheet
:
:
TraverseInner
(
nsCycleCollectionTraversalCallback
&
cb
)
{
if
(
mInner
-
>
mSheets
.
Length
(
)
!
=
1
)
{
return
;
}
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
NS_CYCLE_COLLECTION_NOTE_EDGE_NAME
(
cb
"
child
sheet
"
)
;
cb
.
NoteXPCOMChild
(
child
)
;
}
}
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION
(
StyleSheet
)
NS_WRAPPERCACHE_INTERFACE_MAP_ENTRY
NS_INTERFACE_MAP_ENTRY
(
nsICSSLoaderObserver
)
NS_INTERFACE_MAP_ENTRY
(
nsISupports
)
NS_INTERFACE_MAP_END
NS_IMPL_CYCLE_COLLECTING_ADDREF
(
StyleSheet
)
NS_IMPL_CYCLE_COLLECTING_RELEASE_WITH_LAST_RELEASE
(
StyleSheet
LastRelease
(
)
)
NS_IMPL_CYCLE_COLLECTION_CLASS
(
StyleSheet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_BEGIN
(
StyleSheet
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mMedia
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mRuleList
)
NS_IMPL_CYCLE_COLLECTION_TRAVERSE
(
mConstructorDocument
)
tmp
-
>
TraverseInner
(
cb
)
;
NS_IMPL_CYCLE_COLLECTION_TRAVERSE_END
NS_IMPL_CYCLE_COLLECTION_UNLINK_BEGIN
(
StyleSheet
)
tmp
-
>
DropMedia
(
)
;
tmp
-
>
UnlinkInner
(
)
;
tmp
-
>
DropRuleList
(
)
;
NS_IMPL_CYCLE_COLLECTION_UNLINK
(
mConstructorDocument
)
NS_IMPL_CYCLE_COLLECTION_UNLINK_PRESERVED_WRAPPER
NS_IMPL_CYCLE_COLLECTION_UNLINK_END
NS_IMPL_CYCLE_COLLECTION_TRACE_WRAPPERCACHE
(
StyleSheet
)
dom
:
:
CSSStyleSheetParsingMode
StyleSheet
:
:
ParsingModeDOM
(
)
{
#
define
CHECK_MODE
(
X
Y
)
\
static_assert
(
\
static_cast
<
int
>
(
X
)
=
=
static_cast
<
int
>
(
Y
)
\
"
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
and
"
\
"
mozilla
:
:
css
:
:
SheetParsingMode
should
have
identical
values
"
)
;
CHECK_MODE
(
dom
:
:
CSSStyleSheetParsingMode
:
:
Agent
css
:
:
eAgentSheetFeatures
)
;
CHECK_MODE
(
dom
:
:
CSSStyleSheetParsingMode
:
:
User
css
:
:
eUserSheetFeatures
)
;
CHECK_MODE
(
dom
:
:
CSSStyleSheetParsingMode
:
:
Author
css
:
:
eAuthorSheetFeatures
)
;
#
undef
CHECK_MODE
return
static_cast
<
dom
:
:
CSSStyleSheetParsingMode
>
(
mParsingMode
)
;
}
void
StyleSheet
:
:
SetComplete
(
)
{
MOZ_ASSERT
(
!
HasForcedUniqueInner
(
)
"
Can
'
t
complete
a
sheet
that
'
s
already
been
forced
unique
.
"
)
;
MOZ_ASSERT
(
!
IsComplete
(
)
"
Already
complete
?
"
)
;
mState
|
=
State
:
:
Complete
;
if
(
!
Disabled
(
)
)
{
ApplicableStateChanged
(
true
)
;
}
}
void
StyleSheet
:
:
ApplicableStateChanged
(
bool
aApplicable
)
{
if
(
!
mDocumentOrShadowRoot
)
{
return
;
}
nsINode
&
node
=
mDocumentOrShadowRoot
-
>
AsNode
(
)
;
if
(
auto
*
shadow
=
ShadowRoot
:
:
FromNode
(
node
)
)
{
shadow
-
>
StyleSheetApplicableStateChanged
(
*
this
aApplicable
)
;
}
else
{
node
.
AsDocument
(
)
-
>
SetStyleSheetApplicableState
(
*
this
aApplicable
)
;
}
}
void
StyleSheet
:
:
SetDisabled
(
bool
aDisabled
)
{
if
(
IsReadOnly
(
)
)
{
return
;
}
if
(
aDisabled
=
=
Disabled
(
)
)
{
return
;
}
if
(
aDisabled
)
{
mState
|
=
State
:
:
Disabled
;
}
else
{
mState
&
=
~
State
:
:
Disabled
;
}
if
(
IsComplete
(
)
)
{
ApplicableStateChanged
(
!
aDisabled
)
;
}
}
void
StyleSheet
:
:
SetURLExtraData
(
)
{
Inner
(
)
.
mURLData
=
new
URLExtraData
(
GetBaseURI
(
)
GetReferrerInfo
(
)
Principal
(
)
)
;
}
StyleSheetInfo
:
:
StyleSheetInfo
(
CORSMode
aCORSMode
const
SRIMetadata
&
aIntegrity
css
:
:
SheetParsingMode
aParsingMode
)
:
mPrincipal
(
NullPrincipal
:
:
CreateWithoutOriginAttributes
(
)
)
mCORSMode
(
aCORSMode
)
mReferrerInfo
(
new
ReferrerInfo
(
nullptr
)
)
mIntegrity
(
aIntegrity
)
mContents
(
Servo_StyleSheet_Empty
(
aParsingMode
)
.
Consume
(
)
)
mURLData
(
URLExtraData
:
:
Dummy
(
)
)
#
ifdef
DEBUG
mPrincipalSet
(
false
)
#
endif
{
if
(
!
mPrincipal
)
{
MOZ_CRASH
(
"
NullPrincipal
:
:
Init
failed
"
)
;
}
MOZ_COUNT_CTOR
(
StyleSheetInfo
)
;
}
StyleSheetInfo
:
:
StyleSheetInfo
(
StyleSheetInfo
&
aCopy
StyleSheet
*
aPrimarySheet
)
:
mSheetURI
(
aCopy
.
mSheetURI
)
mOriginalSheetURI
(
aCopy
.
mOriginalSheetURI
)
mBaseURI
(
aCopy
.
mBaseURI
)
mPrincipal
(
aCopy
.
mPrincipal
)
mCORSMode
(
aCopy
.
mCORSMode
)
mReferrerInfo
(
aCopy
.
mReferrerInfo
)
mIntegrity
(
aCopy
.
mIntegrity
)
mSourceMapURL
(
aCopy
.
mSourceMapURL
)
mSourceMapURLFromComment
(
aCopy
.
mSourceMapURLFromComment
)
mSourceURL
(
aCopy
.
mSourceURL
)
mContents
(
Servo_StyleSheet_Clone
(
aCopy
.
mContents
.
get
(
)
aPrimarySheet
)
.
Consume
(
)
)
mURLData
(
aCopy
.
mURLData
)
#
ifdef
DEBUG
mPrincipalSet
(
aCopy
.
mPrincipalSet
)
#
endif
{
AddSheet
(
aPrimarySheet
)
;
MOZ_COUNT_CTOR
(
StyleSheetInfo
)
;
}
StyleSheetInfo
:
:
~
StyleSheetInfo
(
)
{
MOZ_COUNT_DTOR
(
StyleSheetInfo
)
;
}
StyleSheetInfo
*
StyleSheetInfo
:
:
CloneFor
(
StyleSheet
*
aPrimarySheet
)
{
return
new
StyleSheetInfo
(
*
this
aPrimarySheet
)
;
}
MOZ_DEFINE_MALLOC_SIZE_OF
(
ServoStyleSheetMallocSizeOf
)
MOZ_DEFINE_MALLOC_ENCLOSING_SIZE_OF
(
ServoStyleSheetMallocEnclosingSizeOf
)
size_t
StyleSheetInfo
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
n
+
=
Servo_StyleSheet_SizeOfIncludingThis
(
ServoStyleSheetMallocSizeOf
ServoStyleSheetMallocEnclosingSizeOf
mContents
)
;
return
n
;
}
void
StyleSheetInfo
:
:
AddSheet
(
StyleSheet
*
aSheet
)
{
mSheets
.
AppendElement
(
aSheet
)
;
}
void
StyleSheetInfo
:
:
RemoveSheet
(
StyleSheet
*
aSheet
)
{
if
(
aSheet
=
=
mSheets
[
0
]
&
&
mSheets
.
Length
(
)
>
1
)
{
StyleSheet
*
newParent
=
mSheets
[
1
]
;
for
(
StyleSheet
*
child
:
mChildren
)
{
child
-
>
mParent
=
newParent
;
child
-
>
SetAssociatedDocumentOrShadowRoot
(
newParent
-
>
mDocumentOrShadowRoot
newParent
-
>
mAssociationMode
)
;
}
}
if
(
1
=
=
mSheets
.
Length
(
)
)
{
NS_ASSERTION
(
aSheet
=
=
mSheets
.
ElementAt
(
0
)
"
bad
parent
"
)
;
delete
this
;
return
;
}
mSheets
.
RemoveElement
(
aSheet
)
;
}
void
StyleSheet
:
:
GetType
(
nsAString
&
aType
)
{
aType
.
AssignLiteral
(
"
text
/
css
"
)
;
}
void
StyleSheet
:
:
GetHref
(
nsAString
&
aHref
ErrorResult
&
aRv
)
{
if
(
nsIURI
*
sheetURI
=
Inner
(
)
.
mOriginalSheetURI
)
{
nsAutoCString
str
;
nsresult
rv
=
sheetURI
-
>
GetSpec
(
str
)
;
if
(
NS_FAILED
(
rv
)
)
{
aRv
.
Throw
(
rv
)
;
return
;
}
CopyUTF8toUTF16
(
str
aHref
)
;
}
else
{
SetDOMStringToNull
(
aHref
)
;
}
}
void
StyleSheet
:
:
GetTitle
(
nsAString
&
aTitle
)
{
if
(
!
mTitle
.
IsEmpty
(
)
)
{
aTitle
.
Assign
(
mTitle
)
;
}
else
{
SetDOMStringToNull
(
aTitle
)
;
}
}
void
StyleSheet
:
:
WillDirty
(
)
{
MOZ_ASSERT
(
!
IsReadOnly
(
)
)
;
if
(
IsComplete
(
)
)
{
EnsureUniqueInner
(
)
;
}
}
void
StyleSheet
:
:
AddStyleSet
(
ServoStyleSet
*
aStyleSet
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mStyleSets
.
Contains
(
aStyleSet
)
"
style
set
already
registered
"
)
;
mStyleSets
.
AppendElement
(
aStyleSet
)
;
}
void
StyleSheet
:
:
DropStyleSet
(
ServoStyleSet
*
aStyleSet
)
{
bool
found
=
mStyleSets
.
RemoveElement
(
aStyleSet
)
;
MOZ_DIAGNOSTIC_ASSERT
(
found
"
didn
'
t
find
style
set
"
)
;
#
ifndef
MOZ_DIAGNOSTIC_ASSERT_ENABLED
Unused
<
<
found
;
#
endif
}
#
define
NOTIFY
(
function_
args_
)
\
do
{
\
if
(
auto
*
shadow
=
GetContainingShadow
(
)
)
{
\
shadow
-
>
function_
args_
;
\
}
\
if
(
auto
*
doc
=
GetComposedDoc
(
)
)
{
\
doc
-
>
function_
args_
;
\
}
\
StyleSheet
*
current
=
this
;
\
do
{
\
for
(
ServoStyleSet
*
set
:
current
-
>
mStyleSets
)
{
\
set
-
>
function_
args_
;
\
}
\
current
=
current
-
>
mParent
;
\
}
while
(
current
)
;
\
}
while
(
0
)
void
StyleSheet
:
:
EnsureUniqueInner
(
)
{
MOZ_ASSERT
(
mInner
-
>
mSheets
.
Length
(
)
!
=
0
"
unexpected
number
of
outers
"
)
;
if
(
IsReadOnly
(
)
)
{
return
;
}
mState
|
=
State
:
:
ForcedUniqueInner
;
if
(
HasUniqueInner
(
)
)
{
return
;
}
StyleSheetInfo
*
clone
=
mInner
-
>
CloneFor
(
this
)
;
MOZ_ASSERT
(
clone
)
;
mInner
-
>
RemoveSheet
(
this
)
;
mInner
=
clone
;
BuildChildListAfterInnerClone
(
)
;
NOTIFY
(
SheetCloned
(
*
this
)
)
;
}
dom
:
:
CSSRuleList
*
StyleSheet
:
:
GetCssRules
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
AreRulesAvailable
(
aSubjectPrincipal
aRv
)
)
{
return
nullptr
;
}
return
GetCssRulesInternal
(
)
;
}
void
StyleSheet
:
:
GetSourceMapURL
(
nsAString
&
aSourceMapURL
)
{
if
(
mInner
-
>
mSourceMapURL
.
IsEmpty
(
)
)
{
aSourceMapURL
=
mInner
-
>
mSourceMapURLFromComment
;
}
else
{
aSourceMapURL
=
mInner
-
>
mSourceMapURL
;
}
}
void
StyleSheet
:
:
SetSourceMapURL
(
const
nsAString
&
aSourceMapURL
)
{
mInner
-
>
mSourceMapURL
=
aSourceMapURL
;
}
void
StyleSheet
:
:
SetSourceMapURLFromComment
(
const
nsAString
&
aSourceMapURLFromComment
)
{
mInner
-
>
mSourceMapURLFromComment
=
aSourceMapURLFromComment
;
}
void
StyleSheet
:
:
GetSourceURL
(
nsAString
&
aSourceURL
)
{
aSourceURL
=
mInner
-
>
mSourceURL
;
}
void
StyleSheet
:
:
SetSourceURL
(
const
nsAString
&
aSourceURL
)
{
mInner
-
>
mSourceURL
=
aSourceURL
;
}
css
:
:
Rule
*
StyleSheet
:
:
GetDOMOwnerRule
(
)
const
{
return
mOwnerRule
;
}
uint32_t
StyleSheet
:
:
InsertRule
(
const
nsAString
&
aRule
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
|
|
!
AreRulesAvailable
(
aSubjectPrincipal
aRv
)
)
{
return
0
;
}
return
InsertRuleInternal
(
aRule
aIndex
aRv
)
;
}
void
StyleSheet
:
:
DeleteRule
(
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
|
|
!
AreRulesAvailable
(
aSubjectPrincipal
aRv
)
)
{
return
;
}
return
DeleteRuleInternal
(
aIndex
aRv
)
;
}
int32_t
StyleSheet
:
:
AddRule
(
const
nsAString
&
aSelector
const
nsAString
&
aBlock
const
Optional
<
uint32_t
>
&
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
IsReadOnly
(
)
|
|
!
AreRulesAvailable
(
aSubjectPrincipal
aRv
)
)
{
return
-
1
;
}
nsAutoString
rule
;
rule
.
Append
(
aSelector
)
;
rule
.
AppendLiteral
(
"
{
"
)
;
if
(
!
aBlock
.
IsEmpty
(
)
)
{
rule
.
Append
(
aBlock
)
;
rule
.
Append
(
'
'
)
;
}
rule
.
Append
(
'
}
'
)
;
auto
index
=
aIndex
.
WasPassed
(
)
?
aIndex
.
Value
(
)
:
GetCssRulesInternal
(
)
-
>
Length
(
)
;
InsertRuleInternal
(
rule
index
aRv
)
;
return
-
1
;
}
already_AddRefed
<
dom
:
:
Promise
>
StyleSheet
:
:
Replace
(
const
nsAString
&
aText
ErrorResult
&
aRv
)
{
if
(
!
mConstructorDocument
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
"
The
replace
(
)
method
can
only
be
called
on
constructed
style
sheets
"
)
;
return
nullptr
;
}
nsIGlobalObject
*
globalObject
=
mConstructorDocument
-
>
GetScopeObject
(
)
;
RefPtr
<
dom
:
:
Promise
>
promise
=
dom
:
:
Promise
:
:
Create
(
globalObject
aRv
)
;
if
(
!
promise
)
{
return
nullptr
;
}
promise
-
>
MaybeResolve
(
this
)
;
return
promise
.
forget
(
)
;
}
void
StyleSheet
:
:
ReplaceSync
(
const
nsAString
&
aText
ErrorResult
&
aRv
)
{
if
(
!
mConstructorDocument
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_NOT_ALLOWED_ERR
"
The
replaceSync
(
)
method
can
only
be
called
on
"
"
constructed
style
sheets
"
)
;
return
;
}
}
nsresult
StyleSheet
:
:
DeleteRuleFromGroup
(
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
{
NS_ENSURE_ARG_POINTER
(
aGroup
)
;
NS_ASSERTION
(
IsComplete
(
)
"
No
deleting
from
an
incomplete
sheet
!
"
)
;
RefPtr
<
css
:
:
Rule
>
rule
=
aGroup
-
>
GetStyleRuleAt
(
aIndex
)
;
NS_ENSURE_TRUE
(
rule
NS_ERROR_ILLEGAL_VALUE
)
;
if
(
this
!
=
rule
-
>
GetStyleSheet
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
IsReadOnly
(
)
)
{
return
NS_OK
;
}
WillDirty
(
)
;
nsresult
result
=
aGroup
-
>
DeleteStyleRuleAt
(
aIndex
)
;
NS_ENSURE_SUCCESS
(
result
result
)
;
rule
-
>
DropReferences
(
)
;
RuleRemoved
(
*
rule
)
;
return
NS_OK
;
}
ShadowRoot
*
StyleSheet
:
:
GetContainingShadow
(
)
const
{
auto
*
docOrShadow
=
GetAssociatedDocumentOrShadowRoot
(
)
;
if
(
!
docOrShadow
)
{
return
nullptr
;
}
return
ShadowRoot
:
:
FromNode
(
docOrShadow
-
>
AsNode
(
)
)
;
}
void
StyleSheet
:
:
RuleAdded
(
css
:
:
Rule
&
aRule
)
{
SetModifiedRules
(
)
;
NOTIFY
(
RuleAdded
(
*
this
aRule
)
)
;
}
void
StyleSheet
:
:
RuleRemoved
(
css
:
:
Rule
&
aRule
)
{
SetModifiedRules
(
)
;
NOTIFY
(
RuleRemoved
(
*
this
aRule
)
)
;
}
void
StyleSheet
:
:
RuleChanged
(
css
:
:
Rule
*
aRule
)
{
SetModifiedRules
(
)
;
NOTIFY
(
RuleChanged
(
*
this
aRule
)
)
;
}
NS_IMETHODIMP
StyleSheet
:
:
StyleSheetLoaded
(
StyleSheet
*
aSheet
bool
aWasDeferred
nsresult
aStatus
)
{
if
(
!
aSheet
-
>
GetParentSheet
(
)
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
this
=
=
aSheet
-
>
GetParentSheet
(
)
"
We
are
being
notified
of
a
sheet
load
for
a
sheet
that
is
not
"
"
our
child
!
"
)
;
if
(
NS_FAILED
(
aStatus
)
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
aSheet
-
>
GetOwnerRule
(
)
)
;
NOTIFY
(
ImportRuleLoaded
(
*
aSheet
-
>
GetOwnerRule
(
)
*
aSheet
)
)
;
return
NS_OK
;
}
#
undef
NOTIFY
nsresult
StyleSheet
:
:
InsertRuleIntoGroup
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
{
NS_ASSERTION
(
IsComplete
(
)
"
No
inserting
into
an
incomplete
sheet
!
"
)
;
if
(
this
!
=
aGroup
-
>
GetStyleSheet
(
)
)
{
return
NS_ERROR_INVALID_ARG
;
}
if
(
IsReadOnly
(
)
)
{
return
NS_OK
;
}
WillDirty
(
)
;
nsresult
result
=
InsertRuleIntoGroupInternal
(
aRule
aGroup
aIndex
)
;
NS_ENSURE_SUCCESS
(
result
result
)
;
RuleAdded
(
*
aGroup
-
>
GetStyleRuleAt
(
aIndex
)
)
;
return
NS_OK
;
}
uint64_t
StyleSheet
:
:
FindOwningWindowInnerID
(
)
const
{
uint64_t
windowID
=
0
;
if
(
Document
*
doc
=
GetAssociatedDocument
(
)
)
{
windowID
=
doc
-
>
InnerWindowID
(
)
;
}
if
(
windowID
=
=
0
&
&
mOwningNode
)
{
windowID
=
mOwningNode
-
>
OwnerDoc
(
)
-
>
InnerWindowID
(
)
;
}
RefPtr
<
css
:
:
Rule
>
ownerRule
;
if
(
windowID
=
=
0
&
&
(
ownerRule
=
GetDOMOwnerRule
(
)
)
)
{
RefPtr
<
StyleSheet
>
sheet
=
ownerRule
-
>
GetStyleSheet
(
)
;
if
(
sheet
)
{
windowID
=
sheet
-
>
FindOwningWindowInnerID
(
)
;
}
}
if
(
windowID
=
=
0
&
&
mParent
)
{
windowID
=
mParent
-
>
FindOwningWindowInnerID
(
)
;
}
return
windowID
;
}
void
StyleSheet
:
:
RemoveFromParent
(
)
{
if
(
!
mParent
)
{
return
;
}
MOZ_ASSERT
(
mParent
-
>
ChildSheets
(
)
.
Contains
(
this
)
)
;
mParent
-
>
Inner
(
)
.
mChildren
.
RemoveElement
(
this
)
;
mParent
=
nullptr
;
ClearAssociatedDocumentOrShadowRoot
(
)
;
}
void
StyleSheet
:
:
UnparentChildren
(
)
{
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
if
(
child
-
>
mParent
=
=
this
)
{
child
-
>
mParent
=
nullptr
;
MOZ_ASSERT
(
child
-
>
mAssociationMode
=
=
NotOwnedByDocumentOrShadowRoot
"
How
did
we
get
to
the
destructor
exactly
if
we
'
re
owned
"
"
by
a
document
?
"
)
;
child
-
>
mDocumentOrShadowRoot
=
nullptr
;
}
}
}
void
StyleSheet
:
:
SubjectSubsumesInnerPrincipal
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
StyleSheetInfo
&
info
=
Inner
(
)
;
if
(
aSubjectPrincipal
.
Subsumes
(
info
.
mPrincipal
)
)
{
return
;
}
if
(
GetCORSMode
(
)
=
=
CORS_NONE
&
&
!
nsContentUtils
:
:
BypassCSSOMOriginCheck
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_SECURITY_ERR
)
;
return
;
}
if
(
!
IsComplete
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_ACCESS_ERR
)
;
return
;
}
WillDirty
(
)
;
info
.
mPrincipal
=
&
aSubjectPrincipal
;
}
bool
StyleSheet
:
:
AreRulesAvailable
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
{
if
(
!
IsComplete
(
)
)
{
aRv
.
Throw
(
NS_ERROR_DOM_INVALID_ACCESS_ERR
)
;
return
false
;
}
SubjectSubsumesInnerPrincipal
(
aSubjectPrincipal
aRv
)
;
if
(
NS_WARN_IF
(
aRv
.
Failed
(
)
)
)
{
return
false
;
}
return
true
;
}
void
StyleSheet
:
:
SetAssociatedDocumentOrShadowRoot
(
DocumentOrShadowRoot
*
aDocOrShadowRoot
AssociationMode
aAssociationMode
)
{
MOZ_ASSERT
(
aDocOrShadowRoot
|
|
aAssociationMode
=
=
NotOwnedByDocumentOrShadowRoot
)
;
mDocumentOrShadowRoot
=
aDocOrShadowRoot
;
mAssociationMode
=
aAssociationMode
;
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
if
(
child
-
>
mParent
=
=
this
)
{
child
-
>
SetAssociatedDocumentOrShadowRoot
(
aDocOrShadowRoot
aAssociationMode
)
;
}
}
}
void
StyleSheet
:
:
AppendStyleSheet
(
StyleSheet
&
aSheet
)
{
WillDirty
(
)
;
AppendStyleSheetSilently
(
aSheet
)
;
}
void
StyleSheet
:
:
AppendStyleSheetSilently
(
StyleSheet
&
aSheet
)
{
MOZ_ASSERT
(
!
IsReadOnly
(
)
)
;
Inner
(
)
.
mChildren
.
AppendElement
(
&
aSheet
)
;
aSheet
.
mParent
=
this
;
aSheet
.
SetAssociatedDocumentOrShadowRoot
(
mDocumentOrShadowRoot
mAssociationMode
)
;
}
size_t
StyleSheet
:
:
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
0
;
n
+
=
aMallocSizeOf
(
this
)
;
if
(
Inner
(
)
.
mSheets
.
LastElement
(
)
=
=
this
)
{
n
+
=
Inner
(
)
.
SizeOfIncludingThis
(
aMallocSizeOf
)
;
}
return
n
;
}
#
ifdef
DEBUG
void
StyleSheet
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
int32_t
index
;
nsAutoCString
str
;
for
(
index
=
aIndent
;
-
-
index
>
=
0
;
)
{
str
.
AppendLiteral
(
"
"
)
;
}
str
.
AppendLiteral
(
"
CSS
Style
Sheet
:
"
)
;
nsAutoCString
urlSpec
;
nsresult
rv
=
GetSheetURI
(
)
-
>
GetSpec
(
urlSpec
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
urlSpec
.
IsEmpty
(
)
)
{
str
.
Append
(
urlSpec
)
;
}
if
(
mMedia
)
{
str
.
AppendLiteral
(
"
media
:
"
)
;
nsAutoString
buffer
;
mMedia
-
>
GetText
(
buffer
)
;
AppendUTF16toUTF8
(
buffer
str
)
;
}
str
.
Append
(
'
\
n
'
)
;
fprintf_stderr
(
out
"
%
s
"
str
.
get
(
)
)
;
for
(
const
StyleSheet
*
child
:
ChildSheets
(
)
)
{
child
-
>
List
(
out
aIndent
+
1
)
;
}
}
#
endif
void
StyleSheet
:
:
SetMedia
(
already_AddRefed
<
dom
:
:
MediaList
>
aMedia
)
{
mMedia
=
aMedia
;
if
(
mMedia
)
{
mMedia
-
>
SetStyleSheet
(
this
)
;
}
}
void
StyleSheet
:
:
DropMedia
(
)
{
if
(
mMedia
)
{
mMedia
-
>
SetStyleSheet
(
nullptr
)
;
mMedia
=
nullptr
;
}
}
dom
:
:
MediaList
*
StyleSheet
:
:
Media
(
)
{
if
(
!
mMedia
)
{
mMedia
=
dom
:
:
MediaList
:
:
Create
(
nsString
(
)
)
;
mMedia
-
>
SetStyleSheet
(
this
)
;
}
return
mMedia
;
}
JSObject
*
StyleSheet
:
:
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
{
return
dom
:
:
CSSStyleSheet_Binding
:
:
Wrap
(
aCx
this
aGivenProto
)
;
}
void
StyleSheet
:
:
BuildChildListAfterInnerClone
(
)
{
MOZ_ASSERT
(
Inner
(
)
.
mSheets
.
Length
(
)
=
=
1
"
Should
'
ve
just
cloned
"
)
;
MOZ_ASSERT
(
Inner
(
)
.
mSheets
[
0
]
=
=
this
)
;
MOZ_ASSERT
(
Inner
(
)
.
mChildren
.
IsEmpty
(
)
)
;
auto
*
contents
=
Inner
(
)
.
mContents
.
get
(
)
;
RefPtr
<
ServoCssRules
>
rules
=
Servo_StyleSheet_GetRules
(
contents
)
.
Consume
(
)
;
uint32_t
index
=
0
;
while
(
true
)
{
uint32_t
line
column
;
RefPtr
<
RawServoImportRule
>
import
=
Servo_CssRules_GetImportRuleAt
(
rules
index
&
line
&
column
)
.
Consume
(
)
;
if
(
!
import
)
{
break
;
}
auto
*
sheet
=
const_cast
<
StyleSheet
*
>
(
Servo_ImportRule_GetSheet
(
import
)
)
;
MOZ_ASSERT
(
sheet
)
;
AppendStyleSheetSilently
(
*
sheet
)
;
index
+
+
;
}
}
already_AddRefed
<
StyleSheet
>
StyleSheet
:
:
CreateEmptyChildSheet
(
already_AddRefed
<
dom
:
:
MediaList
>
aMediaList
)
const
{
RefPtr
<
StyleSheet
>
child
=
new
StyleSheet
(
ParsingMode
(
)
CORSMode
:
:
CORS_NONE
SRIMetadata
(
)
)
;
child
-
>
mMedia
=
aMediaList
;
return
child
.
forget
(
)
;
}
static
bool
AllowParallelParse
(
css
:
:
Loader
&
aLoader
nsIURI
*
aSheetURI
)
{
Document
*
doc
=
aLoader
.
GetDocument
(
)
;
if
(
doc
&
&
css
:
:
ErrorReporter
:
:
ShouldReportErrors
(
*
doc
)
)
{
return
false
;
}
if
(
dom
:
:
IsChromeURI
(
aSheetURI
)
)
{
return
false
;
}
return
true
;
}
RefPtr
<
StyleSheetParsePromise
>
StyleSheet
:
:
ParseSheet
(
css
:
:
Loader
&
aLoader
const
nsACString
&
aBytes
css
:
:
SheetLoadData
&
aLoadData
)
{
MOZ_ASSERT
(
mParsePromise
.
IsEmpty
(
)
)
;
RefPtr
<
StyleSheetParsePromise
>
p
=
mParsePromise
.
Ensure
(
__func__
)
;
SetURLExtraData
(
)
;
const
StyleUseCounters
*
useCounters
=
aLoader
.
GetDocument
(
)
?
aLoader
.
GetDocument
(
)
-
>
GetStyleUseCounters
(
)
:
nullptr
;
if
(
!
AllowParallelParse
(
aLoader
GetSheetURI
(
)
)
)
{
RefPtr
<
RawServoStyleSheetContents
>
contents
=
Servo_StyleSheet_FromUTF8Bytes
(
&
aLoader
this
&
aLoadData
&
aBytes
mParsingMode
Inner
(
)
.
mURLData
aLoadData
.
mLineNumber
aLoader
.
GetCompatibilityMode
(
)
nullptr
useCounters
StyleSanitizationKind
:
:
None
nullptr
)
.
Consume
(
)
;
FinishAsyncParse
(
contents
.
forget
(
)
)
;
}
else
{
auto
holder
=
MakeRefPtr
<
css
:
:
SheetLoadDataHolder
>
(
__func__
&
aLoadData
)
;
Servo_StyleSheet_FromUTF8BytesAsync
(
holder
Inner
(
)
.
mURLData
&
aBytes
mParsingMode
aLoadData
.
mLineNumber
aLoader
.
GetCompatibilityMode
(
)
!
!
useCounters
)
;
}
return
p
;
}
void
StyleSheet
:
:
FinishAsyncParse
(
already_AddRefed
<
RawServoStyleSheetContents
>
aSheetContents
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
mParsePromise
.
IsEmpty
(
)
)
;
Inner
(
)
.
mContents
=
aSheetContents
;
FinishParse
(
)
;
mParsePromise
.
Resolve
(
true
__func__
)
;
}
void
StyleSheet
:
:
ParseSheetSync
(
css
:
:
Loader
*
aLoader
const
nsACString
&
aBytes
css
:
:
SheetLoadData
*
aLoadData
uint32_t
aLineNumber
css
:
:
LoaderReusableStyleSheets
*
aReusableSheets
)
{
nsCompatibility
compatMode
=
aLoader
?
aLoader
-
>
GetCompatibilityMode
(
)
:
eCompatibility_FullStandards
;
const
StyleUseCounters
*
useCounters
=
aLoader
&
&
aLoader
-
>
GetDocument
(
)
?
aLoader
-
>
GetDocument
(
)
-
>
GetStyleUseCounters
(
)
:
nullptr
;
SetURLExtraData
(
)
;
Inner
(
)
.
mContents
=
Servo_StyleSheet_FromUTF8Bytes
(
aLoader
this
aLoadData
&
aBytes
mParsingMode
Inner
(
)
.
mURLData
aLineNumber
compatMode
aReusableSheets
useCounters
StyleSanitizationKind
:
:
None
nullptr
)
.
Consume
(
)
;
FinishParse
(
)
;
}
void
StyleSheet
:
:
FinishParse
(
)
{
nsString
sourceMapURL
;
Servo_StyleSheet_GetSourceMapURL
(
Inner
(
)
.
mContents
&
sourceMapURL
)
;
SetSourceMapURLFromComment
(
sourceMapURL
)
;
nsString
sourceURL
;
Servo_StyleSheet_GetSourceURL
(
Inner
(
)
.
mContents
&
sourceURL
)
;
SetSourceURL
(
sourceURL
)
;
}
nsresult
StyleSheet
:
:
ReparseSheet
(
const
nsACString
&
aInput
)
{
if
(
!
IsComplete
(
)
)
{
return
NS_ERROR_DOM_INVALID_ACCESS_ERR
;
}
if
(
IsReadOnly
(
)
)
{
return
NS_OK
;
}
RefPtr
<
css
:
:
Loader
>
loader
;
if
(
Document
*
doc
=
GetAssociatedDocument
(
)
)
{
loader
=
doc
-
>
CSSLoader
(
)
;
NS_ASSERTION
(
loader
"
Document
with
no
CSS
loader
!
"
)
;
}
else
{
loader
=
new
css
:
:
Loader
;
}
WillDirty
(
)
;
css
:
:
LoaderReusableStyleSheets
reusableSheets
;
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
if
(
child
-
>
GetOriginalURI
(
)
)
{
reusableSheets
.
AddReusableSheet
(
child
)
;
}
}
for
(
StyleSheet
*
child
:
ChildSheets
(
)
)
{
child
-
>
mParent
=
nullptr
;
child
-
>
ClearAssociatedDocumentOrShadowRoot
(
)
;
}
Inner
(
)
.
mChildren
.
Clear
(
)
;
uint32_t
lineNumber
=
1
;
if
(
mOwningNode
)
{
nsCOMPtr
<
nsIStyleSheetLinkingElement
>
link
=
do_QueryInterface
(
mOwningNode
)
;
if
(
link
)
{
lineNumber
=
link
-
>
GetLineNumber
(
)
;
}
}
{
ServoCSSRuleList
*
ruleList
=
GetCssRulesInternal
(
)
;
MOZ_ASSERT
(
ruleList
)
;
uint32_t
ruleCount
=
ruleList
-
>
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
ruleCount
;
+
+
i
)
{
css
:
:
Rule
*
rule
=
ruleList
-
>
GetRule
(
i
)
;
MOZ_ASSERT
(
rule
)
;
RuleRemoved
(
*
rule
)
;
}
}
DropRuleList
(
)
;
ParseSheetSync
(
loader
aInput
nullptr
lineNumber
&
reusableSheets
)
;
{
ServoCSSRuleList
*
ruleList
=
GetCssRulesInternal
(
)
;
MOZ_ASSERT
(
ruleList
)
;
uint32_t
ruleCount
=
ruleList
-
>
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
ruleCount
;
+
+
i
)
{
css
:
:
Rule
*
rule
=
ruleList
-
>
GetRule
(
i
)
;
MOZ_ASSERT
(
rule
)
;
RuleAdded
(
*
rule
)
;
}
}
mState
&
=
~
State
:
:
ModifiedRulesForDevtools
;
return
NS_OK
;
}
void
StyleSheet
:
:
DropRuleList
(
)
{
if
(
mRuleList
)
{
mRuleList
-
>
DropReferences
(
)
;
mRuleList
=
nullptr
;
}
}
already_AddRefed
<
StyleSheet
>
StyleSheet
:
:
Clone
(
StyleSheet
*
aCloneParent
dom
:
:
CSSImportRule
*
aCloneOwnerRule
dom
:
:
DocumentOrShadowRoot
*
aCloneDocumentOrShadowRoot
nsINode
*
aCloneOwningNode
)
const
{
RefPtr
<
StyleSheet
>
clone
=
new
StyleSheet
(
*
this
aCloneParent
aCloneOwnerRule
aCloneDocumentOrShadowRoot
aCloneOwningNode
)
;
return
clone
.
forget
(
)
;
}
ServoCSSRuleList
*
StyleSheet
:
:
GetCssRulesInternal
(
)
{
if
(
!
mRuleList
)
{
EnsureUniqueInner
(
)
;
RefPtr
<
ServoCssRules
>
rawRules
=
Servo_StyleSheet_GetRules
(
Inner
(
)
.
mContents
)
.
Consume
(
)
;
MOZ_ASSERT
(
rawRules
)
;
mRuleList
=
new
ServoCSSRuleList
(
rawRules
.
forget
(
)
this
nullptr
)
;
}
return
mRuleList
;
}
uint32_t
StyleSheet
:
:
InsertRuleInternal
(
const
nsAString
&
aRule
uint32_t
aIndex
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
IsReadOnly
(
)
)
;
GetCssRulesInternal
(
)
;
aRv
=
mRuleList
-
>
InsertRule
(
aRule
aIndex
)
;
if
(
aRv
.
Failed
(
)
)
{
return
0
;
}
css
:
:
Rule
*
rule
=
mRuleList
-
>
GetRule
(
aIndex
)
;
RuleAdded
(
*
rule
)
;
return
aIndex
;
}
void
StyleSheet
:
:
DeleteRuleInternal
(
uint32_t
aIndex
ErrorResult
&
aRv
)
{
MOZ_ASSERT
(
!
IsReadOnly
(
)
)
;
GetCssRulesInternal
(
)
;
if
(
aIndex
>
=
mRuleList
-
>
Length
(
)
)
{
aRv
.
ThrowDOMException
(
NS_ERROR_DOM_INDEX_SIZE_ERR
nsPrintfCString
(
"
Cannot
delete
rule
at
index
%
u
"
"
because
the
number
of
rules
is
only
%
u
"
aIndex
mRuleList
-
>
Length
(
)
)
)
;
return
;
}
RefPtr
<
css
:
:
Rule
>
rule
=
mRuleList
-
>
GetRule
(
aIndex
)
;
aRv
=
mRuleList
-
>
DeleteRule
(
aIndex
)
;
MOZ_ASSERT
(
!
aRv
.
ErrorCodeIs
(
NS_ERROR_DOM_INDEX_SIZE_ERR
)
"
IndexSizeError
should
have
been
handled
earlier
"
)
;
if
(
!
aRv
.
Failed
(
)
)
{
RuleRemoved
(
*
rule
)
;
}
}
nsresult
StyleSheet
:
:
InsertRuleIntoGroupInternal
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
{
MOZ_ASSERT
(
!
IsReadOnly
(
)
)
;
auto
rules
=
static_cast
<
ServoCSSRuleList
*
>
(
aGroup
-
>
CssRules
(
)
)
;
MOZ_ASSERT
(
rules
-
>
GetParentRule
(
)
=
=
aGroup
)
;
return
rules
-
>
InsertRule
(
aRule
aIndex
)
;
}
StyleOrigin
StyleSheet
:
:
GetOrigin
(
)
const
{
return
Servo_StyleSheet_GetOrigin
(
Inner
(
)
.
mContents
)
;
}
void
StyleSheet
:
:
SetSharedContents
(
const
ServoCssRules
*
aSharedRules
)
{
MOZ_ASSERT
(
!
IsComplete
(
)
)
;
SetURLExtraData
(
)
;
Inner
(
)
.
mContents
=
Servo_StyleSheet_FromSharedData
(
Inner
(
)
.
mURLData
aSharedRules
)
.
Consume
(
)
;
}
const
ServoCssRules
*
StyleSheet
:
:
ToShared
(
RawServoSharedMemoryBuilder
*
aBuilder
)
{
MOZ_ASSERT
(
GetReferrerInfo
(
)
-
>
ReferrerPolicy
(
)
=
=
ReferrerPolicy
:
:
_empty
)
;
MOZ_ASSERT
(
GetReferrerInfo
(
)
-
>
GetSendReferrer
(
)
)
;
MOZ_ASSERT
(
!
nsCOMPtr
<
nsIURI
>
(
GetReferrerInfo
(
)
-
>
GetComputedReferrer
(
)
)
)
;
MOZ_ASSERT
(
GetCORSMode
(
)
=
=
CORS_NONE
)
;
MOZ_ASSERT
(
Inner
(
)
.
mIntegrity
.
IsEmpty
(
)
)
;
MOZ_ASSERT
(
Principal
(
)
-
>
IsSystemPrincipal
(
)
)
;
return
Servo_SharedMemoryBuilder_AddStylesheet
(
aBuilder
Inner
(
)
.
mContents
)
;
}
bool
StyleSheet
:
:
IsReadOnly
(
)
const
{
return
IsComplete
(
)
&
&
GetOrigin
(
)
=
=
StyleOrigin
:
:
UserAgent
;
}
}
