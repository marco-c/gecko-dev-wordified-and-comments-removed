#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
dom
/
ShadowRoot
.
h
"
#
include
"
mozilla
/
ServoStyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
CSSStyleSheet
.
h
"
namespace
mozilla
{
StyleSheet
:
:
StyleSheet
(
StyleBackendType
aType
)
:
mDocument
(
nullptr
)
mOwningNode
(
nullptr
)
mParsingMode
(
css
:
:
eUserSheetFeatures
)
mType
(
aType
)
mDisabled
(
false
)
{
}
StyleSheet
:
:
StyleSheet
(
const
StyleSheet
&
aCopy
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
:
mDocument
(
aDocumentToUse
)
mOwningNode
(
aOwningNodeToUse
)
mParsingMode
(
aCopy
.
mParsingMode
)
mType
(
aCopy
.
mType
)
mDisabled
(
aCopy
.
mDisabled
)
{
}
bool
StyleSheet
:
:
IsComplete
(
)
const
{
return
SheetInfo
(
)
.
mComplete
;
}
void
StyleSheet
:
:
SetComplete
(
)
{
NS_ASSERTION
(
!
IsGecko
(
)
|
|
!
AsGecko
(
)
.
mDirty
"
Can
'
t
set
a
dirty
sheet
complete
!
"
)
;
SheetInfo
(
)
.
mComplete
=
true
;
if
(
mDocument
&
&
!
mDisabled
)
{
mDocument
-
>
BeginUpdate
(
UPDATE_STYLE
)
;
mDocument
-
>
SetStyleSheetApplicableState
(
AsHandle
(
)
true
)
;
mDocument
-
>
EndUpdate
(
UPDATE_STYLE
)
;
}
if
(
mOwningNode
&
&
!
mDisabled
&
&
mOwningNode
-
>
HasFlag
(
NODE_IS_IN_SHADOW_TREE
)
&
&
mOwningNode
-
>
IsContent
(
)
)
{
dom
:
:
ShadowRoot
*
shadowRoot
=
mOwningNode
-
>
AsContent
(
)
-
>
GetContainingShadow
(
)
;
shadowRoot
-
>
StyleSheetChanged
(
)
;
}
}
StyleSheetInfo
&
StyleSheet
:
:
SheetInfo
(
)
{
if
(
IsServo
(
)
)
{
return
AsServo
(
)
;
}
return
*
AsGecko
(
)
.
mInner
;
}
}
