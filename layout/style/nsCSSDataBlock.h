#
ifndef
nsCSSDataBlock_h__
#
define
nsCSSDataBlock_h__
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsCSSPropertyIDSet
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsStyleStruct
.
h
"
struct
nsRuleData
;
class
nsCSSExpandedDataBlock
;
class
nsIDocument
;
namespace
mozilla
{
namespace
css
{
class
Declaration
;
}
}
class
nsCSSCompressedDataBlock
{
private
:
friend
class
nsCSSExpandedDataBlock
;
explicit
nsCSSCompressedDataBlock
(
uint32_t
aNumProps
)
:
mStyleBits
(
0
)
mNumProps
(
aNumProps
)
{
}
public
:
~
nsCSSCompressedDataBlock
(
)
;
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
const
;
const
nsCSSValue
*
ValueFor
(
nsCSSPropertyID
aProperty
)
const
;
bool
TryReplaceValue
(
nsCSSPropertyID
aProperty
nsCSSExpandedDataBlock
&
aFromBlock
bool
*
aChanged
)
;
nsCSSCompressedDataBlock
*
Clone
(
)
const
;
static
nsCSSCompressedDataBlock
*
CreateEmptyBlock
(
)
;
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
bool
HasDefaultBorderImageSlice
(
)
const
;
bool
HasDefaultBorderImageWidth
(
)
const
;
bool
HasDefaultBorderImageOutset
(
)
const
;
bool
HasDefaultBorderImageRepeat
(
)
const
;
bool
HasInheritedStyleData
(
)
const
{
return
mStyleBits
&
NS_STYLE_INHERITED_STRUCT_MASK
;
}
private
:
void
*
operator
new
(
size_t
aBaseSize
uint32_t
aNumProps
)
{
MOZ_ASSERT
(
aBaseSize
=
=
sizeof
(
nsCSSCompressedDataBlock
)
"
unexpected
size
for
nsCSSCompressedDataBlock
"
)
;
return
:
:
operator
new
(
aBaseSize
+
DataSize
(
aNumProps
)
)
;
}
public
:
typedef
int16_t
CompressedCSSProperty
;
static
const
size_t
MaxCompressedCSSProperty
=
INT16_MAX
;
private
:
static
size_t
DataSize
(
uint32_t
aNumProps
)
{
return
size_t
(
aNumProps
)
*
(
sizeof
(
nsCSSValue
)
+
sizeof
(
CompressedCSSProperty
)
)
;
}
int32_t
mStyleBits
;
uint32_t
mNumProps
;
nsCSSValue
*
Values
(
)
const
{
return
(
nsCSSValue
*
)
(
this
+
1
)
;
}
CompressedCSSProperty
*
CompressedProperties
(
)
const
{
return
(
CompressedCSSProperty
*
)
(
Values
(
)
+
mNumProps
)
;
}
nsCSSValue
*
ValueAtIndex
(
uint32_t
i
)
const
{
MOZ_ASSERT
(
i
<
mNumProps
"
value
index
out
of
range
"
)
;
return
Values
(
)
+
i
;
}
nsCSSPropertyID
PropertyAtIndex
(
uint32_t
i
)
const
{
MOZ_ASSERT
(
i
<
mNumProps
"
property
index
out
of
range
"
)
;
nsCSSPropertyID
prop
=
(
nsCSSPropertyID
)
CompressedProperties
(
)
[
i
]
;
MOZ_ASSERT
(
!
nsCSSProps
:
:
IsShorthand
(
prop
)
"
out
of
range
"
)
;
return
prop
;
}
void
CopyValueToIndex
(
uint32_t
i
nsCSSValue
*
aValue
)
{
new
(
ValueAtIndex
(
i
)
)
nsCSSValue
(
*
aValue
)
;
}
void
RawCopyValueToIndex
(
uint32_t
i
nsCSSValue
*
aValue
)
{
memcpy
(
ValueAtIndex
(
i
)
aValue
sizeof
(
nsCSSValue
)
)
;
}
void
SetPropertyAtIndex
(
uint32_t
i
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
i
<
mNumProps
"
set
property
index
out
of
range
"
)
;
CompressedProperties
(
)
[
i
]
=
(
CompressedCSSProperty
)
aProperty
;
}
void
SetNumPropsToZero
(
)
{
mNumProps
=
0
;
}
}
;
static_assert
(
sizeof
(
nsCSSCompressedDataBlock
)
=
=
8
"
nsCSSCompressedDataBlock
'
s
size
has
changed
"
)
;
static_assert
(
NS_ALIGNMENT_OF
(
nsCSSValue
)
=
=
4
|
|
NS_ALIGNMENT_OF
(
nsCSSValue
)
=
=
8
"
nsCSSValue
doesn
'
t
align
with
nsCSSCompressedDataBlock
"
)
;
static_assert
(
NS_ALIGNMENT_OF
(
nsCSSCompressedDataBlock
:
:
CompressedCSSProperty
)
=
=
2
"
CompressedCSSProperty
doesn
'
t
align
with
nsCSSValue
"
)
;
static_assert
(
eCSSProperty_COUNT_no_shorthands
<
=
nsCSSCompressedDataBlock
:
:
MaxCompressedCSSProperty
"
nsCSSPropertyID
doesn
'
t
fit
in
StoredSizeOfCSSProperty
"
)
;
class
nsCSSExpandedDataBlock
{
friend
class
nsCSSCompressedDataBlock
;
public
:
nsCSSExpandedDataBlock
(
)
;
~
nsCSSExpandedDataBlock
(
)
;
private
:
nsCSSValue
mValues
[
eCSSProperty_COUNT_no_shorthands
]
;
public
:
void
Expand
(
nsCSSCompressedDataBlock
*
aNormalBlock
nsCSSCompressedDataBlock
*
aImportantBlock
)
;
void
Compress
(
nsCSSCompressedDataBlock
*
*
aNormalBlock
nsCSSCompressedDataBlock
*
*
aImportantBlock
const
nsTArray
<
uint32_t
>
&
aOrder
)
;
void
AddLonghandProperty
(
nsCSSPropertyID
aProperty
const
nsCSSValue
&
aValue
)
;
void
Clear
(
)
;
void
ClearProperty
(
nsCSSPropertyID
aPropID
)
;
void
ClearLonghandProperty
(
nsCSSPropertyID
aPropID
)
;
bool
TransferFromBlock
(
nsCSSExpandedDataBlock
&
aFromBlock
nsCSSPropertyID
aPropID
mozilla
:
:
CSSEnabledState
aEnabledState
bool
aIsImportant
bool
aOverrideImportant
bool
aMustCallValueAppended
mozilla
:
:
css
:
:
Declaration
*
aDeclaration
nsIDocument
*
aSheetDocument
)
;
void
MapRuleInfoInto
(
nsCSSPropertyID
aPropID
nsRuleData
*
aRuleData
)
const
;
void
AssertInitialState
(
)
{
#
ifdef
DEBUG
DoAssertInitialState
(
)
;
#
endif
}
private
:
void
ComputeNumProps
(
uint32_t
*
aNumPropsNormal
uint32_t
*
aNumPropsImportant
)
;
void
DoExpand
(
nsCSSCompressedDataBlock
*
aBlock
bool
aImportant
)
;
bool
DoTransferFromBlock
(
nsCSSExpandedDataBlock
&
aFromBlock
nsCSSPropertyID
aPropID
bool
aIsImportant
bool
aOverrideImportant
bool
aMustCallValueAppended
mozilla
:
:
css
:
:
Declaration
*
aDeclaration
nsIDocument
*
aSheetDocument
)
;
#
ifdef
DEBUG
void
DoAssertInitialState
(
)
;
#
endif
nsCSSPropertyIDSet
mPropertiesSet
;
nsCSSPropertyIDSet
mPropertiesImportant
;
nsCSSValue
*
PropertyAt
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
property
out
of
range
"
)
;
return
&
mValues
[
aProperty
]
;
}
const
nsCSSValue
*
PropertyAt
(
nsCSSPropertyID
aProperty
)
const
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
property
out
of
range
"
)
;
return
&
mValues
[
aProperty
]
;
}
void
SetPropertyBit
(
nsCSSPropertyID
aProperty
)
{
mPropertiesSet
.
AddProperty
(
aProperty
)
;
}
void
ClearPropertyBit
(
nsCSSPropertyID
aProperty
)
{
mPropertiesSet
.
RemoveProperty
(
aProperty
)
;
}
bool
HasPropertyBit
(
nsCSSPropertyID
aProperty
)
{
return
mPropertiesSet
.
HasProperty
(
aProperty
)
;
}
void
SetImportantBit
(
nsCSSPropertyID
aProperty
)
{
mPropertiesImportant
.
AddProperty
(
aProperty
)
;
}
void
ClearImportantBit
(
nsCSSPropertyID
aProperty
)
{
mPropertiesImportant
.
RemoveProperty
(
aProperty
)
;
}
bool
HasImportantBit
(
nsCSSPropertyID
aProperty
)
{
return
mPropertiesImportant
.
HasProperty
(
aProperty
)
;
}
void
ClearSets
(
)
{
mPropertiesSet
.
Empty
(
)
;
mPropertiesImportant
.
Empty
(
)
;
}
}
;
#
endif
