#
include
"
PreferenceSheet
.
h
"
#
include
"
ServoCSSParser
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
Encoding
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_browser
.
h
"
#
include
"
mozilla
/
StaticPrefs_devtools
.
h
"
#
include
"
mozilla
/
StaticPrefs_widget
.
h
"
#
include
"
mozilla
/
StaticPrefs_ui
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsContentUtils
.
h
"
#
define
AVG2
(
a
b
)
(
(
(
a
)
+
(
b
)
+
1
)
>
>
1
)
namespace
mozilla
{
using
dom
:
:
Document
;
bool
PreferenceSheet
:
:
sInitialized
;
PreferenceSheet
:
:
Prefs
PreferenceSheet
:
:
sContentPrefs
;
PreferenceSheet
:
:
Prefs
PreferenceSheet
:
:
sChromePrefs
;
PreferenceSheet
:
:
Prefs
PreferenceSheet
:
:
sPrintPrefs
;
static
void
GetColor
(
const
char
*
aPrefName
nscolor
&
aColor
)
{
nsAutoCString
value
;
Preferences
:
:
GetCString
(
aPrefName
value
)
;
if
(
value
.
IsEmpty
(
)
|
|
Encoding
:
:
UTF8ValidUpTo
(
value
)
!
=
value
.
Length
(
)
)
{
return
;
}
nscolor
result
;
if
(
!
ServoCSSParser
:
:
ComputeColor
(
nullptr
NS_RGB
(
0
0
0
)
value
&
result
)
)
{
return
;
}
aColor
=
result
;
}
auto
PreferenceSheet
:
:
PrefsKindFor
(
const
Document
&
aDoc
)
-
>
PrefsKind
{
if
(
aDoc
.
IsDevToolsDocument
(
)
&
&
StaticPrefs
:
:
devtools_toolbox_force_chrome_prefs
(
)
)
{
return
PrefsKind
:
:
Chrome
;
}
if
(
aDoc
.
IsInChromeDocShell
(
)
)
{
return
PrefsKind
:
:
Chrome
;
}
if
(
aDoc
.
IsBeingUsedAsImage
(
)
&
&
aDoc
.
IsDocumentURISchemeChrome
(
)
)
{
return
PrefsKind
:
:
Chrome
;
}
if
(
aDoc
.
IsStaticDocument
(
)
)
{
return
PrefsKind
:
:
Print
;
}
return
PrefsKind
:
:
Content
;
}
static
bool
UseAccessibilityTheme
(
bool
aIsChrome
)
{
return
!
aIsChrome
&
&
!
!
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
IntID
:
:
UseAccessibilityTheme
0
)
;
}
static
bool
UseDocumentColors
(
bool
aIsChrome
bool
aUseAcccessibilityTheme
)
{
switch
(
StaticPrefs
:
:
browser_display_document_color_use
(
)
)
{
case
1
:
return
true
;
case
2
:
return
aIsChrome
;
default
:
return
!
aUseAcccessibilityTheme
;
}
}
bool
PreferenceSheet
:
:
Prefs
:
:
NonNativeThemeShouldUseSystemColors
(
)
const
{
return
StaticPrefs
:
:
widget_non_native_theme_always_use_system_colors
(
)
|
|
!
mUseDocumentColors
;
}
void
PreferenceSheet
:
:
Prefs
:
:
Load
(
bool
aIsChrome
)
{
*
this
=
{
}
;
mIsChrome
=
aIsChrome
;
mUseAccessibilityTheme
=
UseAccessibilityTheme
(
aIsChrome
)
;
const
bool
useStandins
=
nsContentUtils
:
:
UseStandinsForNativeColors
(
)
;
const
bool
usePrefColors
=
!
useStandins
&
&
!
aIsChrome
&
&
!
StaticPrefs
:
:
browser_display_use_system_colors
(
)
;
if
(
usePrefColors
)
{
GetColor
(
"
browser
.
display
.
background_color
"
mColors
.
mDefaultBackground
)
;
GetColor
(
"
browser
.
display
.
foreground_color
"
mColors
.
mDefault
)
;
GetColor
(
"
browser
.
anchor_color
"
mColors
.
mLink
)
;
GetColor
(
"
browser
.
active_color
"
mColors
.
mActiveLink
)
;
GetColor
(
"
browser
.
visited_color
"
mColors
.
mVisitedLink
)
;
}
else
{
using
ColorID
=
LookAndFeel
:
:
ColorID
;
const
auto
standins
=
LookAndFeel
:
:
UseStandins
(
useStandins
)
;
const
auto
scheme
=
aIsChrome
?
LookAndFeel
:
:
ColorSchemeForChrome
(
)
:
LookAndFeel
:
:
ColorScheme
:
:
Light
;
mColors
.
mDefault
=
LookAndFeel
:
:
Color
(
useStandins
?
ColorID
:
:
Windowtext
:
ColorID
:
:
WindowForeground
scheme
standins
mColors
.
mDefault
)
;
mColors
.
mDefaultBackground
=
LookAndFeel
:
:
Color
(
useStandins
?
ColorID
:
:
Window
:
ColorID
:
:
WindowBackground
scheme
standins
mColors
.
mDefaultBackground
)
;
mColors
.
mLink
=
LookAndFeel
:
:
Color
(
ColorID
:
:
MozNativehyperlinktext
scheme
standins
mColors
.
mLink
)
;
if
(
auto
color
=
LookAndFeel
:
:
GetColor
(
ColorID
:
:
MozNativevisitedhyperlinktext
scheme
standins
)
)
{
mColors
.
mVisitedLink
=
*
color
;
}
else
if
(
mUseAccessibilityTheme
)
{
mColors
.
mVisitedLink
=
NS_RGB
(
AVG2
(
NS_GET_R
(
mColors
.
mDefault
)
NS_GET_R
(
mColors
.
mDefaultBackground
)
)
NS_GET_G
(
mColors
.
mDefault
)
AVG2
(
NS_GET_B
(
mColors
.
mDefault
)
NS_GET_B
(
mColors
.
mDefaultBackground
)
)
)
;
}
else
{
}
if
(
mUseAccessibilityTheme
)
{
mColors
.
mActiveLink
=
mColors
.
mLink
;
}
}
GetColor
(
"
browser
.
display
.
focus_text_color
"
mColors
.
mFocusText
)
;
GetColor
(
"
browser
.
display
.
focus_background_color
"
mColors
.
mFocusBackground
)
;
mColors
.
mDefaultBackground
=
NS_ComposeColors
(
NS_RGB
(
0xFF
0xFF
0xFF
)
mColors
.
mDefaultBackground
)
;
mUseDocumentColors
=
UseDocumentColors
(
aIsChrome
mUseAccessibilityTheme
)
;
}
void
PreferenceSheet
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sInitialized
)
;
sInitialized
=
true
;
sContentPrefs
.
Load
(
false
)
;
sChromePrefs
.
Load
(
true
)
;
sPrintPrefs
=
sContentPrefs
;
if
(
!
sPrintPrefs
.
mUseDocumentColors
)
{
sPrintPrefs
.
mColors
=
Prefs
(
)
.
mColors
;
}
nsAutoString
useDocumentColorPref
;
switch
(
StaticPrefs
:
:
browser_display_document_color_use
(
)
)
{
case
1
:
useDocumentColorPref
.
AssignLiteral
(
"
always
"
)
;
break
;
case
2
:
useDocumentColorPref
.
AssignLiteral
(
"
never
"
)
;
break
;
default
:
useDocumentColorPref
.
AssignLiteral
(
"
default
"
)
;
break
;
}
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
A11Y_THEME
useDocumentColorPref
sContentPrefs
.
mUseAccessibilityTheme
)
;
if
(
!
sContentPrefs
.
mUseDocumentColors
)
{
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
A11Y_HCM_FOREGROUND
sContentPrefs
.
mColors
.
mDefault
)
;
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
A11Y_HCM_BACKGROUND
sContentPrefs
.
mColors
.
mDefaultBackground
)
;
}
Telemetry
:
:
ScalarSet
(
Telemetry
:
:
ScalarID
:
:
A11Y_BACKPLATE
StaticPrefs
:
:
browser_display_permit_backplate
(
)
)
;
}
bool
PreferenceSheet
:
:
AffectedByPref
(
const
nsACString
&
aPref
)
{
const
char
*
prefNames
[
]
=
{
StaticPrefs
:
:
GetPrefName_devtools_toolbox_force_chrome_prefs
(
)
StaticPrefs
:
:
GetPrefName_privacy_resistFingerprinting
(
)
StaticPrefs
:
:
GetPrefName_ui_use_standins_for_native_colors
(
)
"
browser
.
anchor_color
"
"
browser
.
active_color
"
"
browser
.
visited_color
"
}
;
if
(
StringBeginsWith
(
aPref
"
browser
.
display
.
"
_ns
)
)
{
return
true
;
}
for
(
const
char
*
pref
:
prefNames
)
{
if
(
aPref
.
Equals
(
pref
)
)
{
return
true
;
}
}
return
false
;
}
}
#
undef
AVG2
