#
include
"
PreferenceSheet
.
h
"
#
include
"
ServoCSSParser
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
mozilla
/
StaticPrefs
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsContentUtils
.
h
"
using
mozilla
:
:
dom
:
:
Document
;
namespace
mozilla
{
bool
PreferenceSheet
:
:
sInitialized
;
PreferenceSheet
:
:
Prefs
PreferenceSheet
:
:
sContentPrefs
;
PreferenceSheet
:
:
Prefs
PreferenceSheet
:
:
sChromePrefs
;
static
void
GetColor
(
const
char
*
aPrefName
nscolor
&
aColor
)
{
nsAutoString
value
;
Preferences
:
:
GetString
(
aPrefName
value
)
;
if
(
value
.
IsEmpty
(
)
)
{
return
;
}
nscolor
result
;
if
(
!
ServoCSSParser
:
:
ComputeColor
(
nullptr
NS_RGB
(
0
0
0
)
value
&
result
)
)
{
return
;
}
aColor
=
result
;
}
bool
PreferenceSheet
:
:
ShouldUseChromePrefs
(
const
Document
&
aDoc
)
{
return
aDoc
.
IsInChromeDocShell
(
)
|
|
(
aDoc
.
IsBeingUsedAsImage
(
)
&
&
aDoc
.
IsDocumentURISchemeChrome
(
)
)
;
}
bool
PreferenceSheet
:
:
UseAccessibilityTheme
(
bool
aIsChrome
)
{
return
!
aIsChrome
&
&
!
!
LookAndFeel
:
:
GetInt
(
LookAndFeel
:
:
eIntID_UseAccessibilityTheme
0
)
;
}
void
PreferenceSheet
:
:
Prefs
:
:
Load
(
bool
aIsChrome
)
{
*
this
=
{
}
;
mUnderlineLinks
=
StaticPrefs
:
:
browser_underline_anchors
(
)
;
mUseFocusColors
=
StaticPrefs
:
:
browser_display_use_focus_colors
(
)
;
mFocusRingWidth
=
StaticPrefs
:
:
browser_display_focus_ring_width
(
)
;
mFocusRingStyle
=
StaticPrefs
:
:
browser_display_focus_ring_style
(
)
;
mFocusRingOnAnything
=
StaticPrefs
:
:
browser_display_focus_ring_on_anything
(
)
;
const
bool
usePrefColors
=
!
aIsChrome
&
&
!
UseAccessibilityTheme
(
aIsChrome
)
&
&
!
StaticPrefs
:
:
browser_display_use_system_colors
(
)
;
if
(
nsContentUtils
:
:
UseStandinsForNativeColors
(
)
)
{
mDefaultColor
=
LookAndFeel
:
:
GetColorUsingStandins
(
LookAndFeel
:
:
eColorID_windowtext
mDefaultColor
)
;
mDefaultBackgroundColor
=
LookAndFeel
:
:
GetColorUsingStandins
(
LookAndFeel
:
:
eColorID_window
mDefaultBackgroundColor
)
;
}
else
if
(
usePrefColors
)
{
GetColor
(
"
browser
.
display
.
background_color
"
mDefaultBackgroundColor
)
;
GetColor
(
"
browser
.
display
.
foreground_color
"
mDefaultColor
)
;
}
else
{
mDefaultColor
=
LookAndFeel
:
:
GetColor
(
LookAndFeel
:
:
eColorID_WindowForeground
mDefaultColor
)
;
mDefaultBackgroundColor
=
LookAndFeel
:
:
GetColor
(
LookAndFeel
:
:
eColorID_WindowBackground
mDefaultBackgroundColor
)
;
}
GetColor
(
"
browser
.
anchor_color
"
mLinkColor
)
;
GetColor
(
"
browser
.
active_color
"
mActiveLinkColor
)
;
GetColor
(
"
browser
.
visited_color
"
mVisitedLinkColor
)
;
GetColor
(
"
browser
.
display
.
focus_text_color
"
mFocusTextColor
)
;
GetColor
(
"
browser
.
display
.
focus_background_color
"
mFocusBackgroundColor
)
;
mDefaultBackgroundColor
=
NS_ComposeColors
(
NS_RGB
(
0xFF
0xFF
0xFF
)
mDefaultBackgroundColor
)
;
}
void
PreferenceSheet
:
:
Initialize
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sInitialized
)
;
sInitialized
=
true
;
sContentPrefs
.
Load
(
false
)
;
sChromePrefs
.
Load
(
true
)
;
}
}
