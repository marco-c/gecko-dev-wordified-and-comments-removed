#
ifndef
nsComputedDOMStyle_h__
#
define
nsComputedDOMStyle_h__
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
StyleColorInlines
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nscore
.
h
"
#
include
"
nsDOMCSSDeclaration
.
h
"
#
include
"
mozilla
/
ComputedStyle
.
h
"
#
include
"
nsIWeakReferenceUtils
.
h
"
#
include
"
mozilla
/
gfx
/
Types
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsStubMutationObserver
.
h
"
#
include
"
nsStyleStruct
.
h
"
#
include
"
mozilla
/
WritingModes
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
namespace
mozilla
{
enum
class
FlushType
:
uint8_t
;
namespace
dom
{
class
DocGroup
;
class
Element
;
}
class
PresShell
;
struct
ComputedGridTrackInfo
;
}
struct
ComputedStyleMap
;
struct
nsCSSKTableEntry
;
class
nsIFrame
;
class
nsDOMCSSValueList
;
struct
nsMargin
;
class
nsROCSSPrimitiveValue
;
class
nsStyleGradient
;
class
nsComputedDOMStyle
final
:
public
nsDOMCSSDeclaration
public
nsStubMutationObserver
{
private
:
template
<
typename
T
>
using
Span
=
mozilla
:
:
Span
<
T
>
;
using
KTableEntry
=
nsCSSKTableEntry
;
using
CSSValue
=
mozilla
:
:
dom
:
:
CSSValue
;
using
StyleGeometryBox
=
mozilla
:
:
StyleGeometryBox
;
using
Element
=
mozilla
:
:
dom
:
:
Element
;
using
Document
=
mozilla
:
:
dom
:
:
Document
;
using
StyleFlexBasis
=
mozilla
:
:
StyleFlexBasis
;
using
StyleSize
=
mozilla
:
:
StyleSize
;
using
StyleMaxSize
=
mozilla
:
:
StyleMaxSize
;
using
LengthPercentage
=
mozilla
:
:
LengthPercentage
;
using
LengthPercentageOrAuto
=
mozilla
:
:
LengthPercentageOrAuto
;
using
StyleExtremumLength
=
mozilla
:
:
StyleExtremumLength
;
using
ComputedStyle
=
mozilla
:
:
ComputedStyle
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SKIPPABLE_SCRIPT_HOLDER_CLASS_AMBIGUOUS
(
nsComputedDOMStyle
nsICSSDeclaration
)
NS_DECL_NSIDOMCSSSTYLEDECLARATION_HELPER
nsresult
GetPropertyValue
(
const
nsCSSPropertyID
aPropID
nsAString
&
aValue
)
override
;
void
SetPropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsACString
&
aValue
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
aRv
)
override
;
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsACString
&
aPropName
)
final
;
enum
StyleType
{
eDefaultOnly
eAll
}
;
nsComputedDOMStyle
(
Element
*
aElement
const
nsAString
&
aPseudoElt
Document
*
aDocument
StyleType
aStyleType
)
;
nsINode
*
GetParentObject
(
)
override
{
return
mElement
;
}
static
already_AddRefed
<
ComputedStyle
>
GetComputedStyle
(
Element
*
aElement
nsAtom
*
aPseudo
StyleType
aStyleType
=
eAll
)
;
static
already_AddRefed
<
ComputedStyle
>
GetComputedStyleNoFlush
(
Element
*
aElement
nsAtom
*
aPseudo
StyleType
aStyleType
=
eAll
)
{
return
DoGetComputedStyleNoFlush
(
aElement
aPseudo
nsContentUtils
:
:
GetPresShellForContent
(
aElement
)
aStyleType
)
;
}
static
already_AddRefed
<
ComputedStyle
>
GetUnanimatedComputedStyleNoFlush
(
Element
*
aElement
nsAtom
*
aPseudo
)
;
void
SetExposeVisitedStyle
(
bool
aExpose
)
{
NS_ASSERTION
(
aExpose
!
=
mExposeVisitedStyle
"
should
always
be
changing
"
)
;
mExposeVisitedStyle
=
aExpose
;
}
void
GetCSSImageURLs
(
const
nsACString
&
aPropertyName
nsTArray
<
nsCString
>
&
aImageURLs
mozilla
:
:
ErrorResult
&
aRv
)
final
;
mozilla
:
:
DeclarationBlock
*
GetOrCreateCSSDeclaration
(
Operation
aOperation
mozilla
:
:
DeclarationBlock
*
*
aCreated
)
final
;
virtual
nsresult
SetCSSDeclaration
(
mozilla
:
:
DeclarationBlock
*
mozilla
:
:
MutationClosureData
*
)
override
;
virtual
mozilla
:
:
dom
:
:
Document
*
DocToUpdate
(
)
override
;
nsDOMCSSDeclaration
:
:
ParsingEnvironment
GetParsingEnvironment
(
nsIPrincipal
*
aSubjectPrincipal
)
const
final
;
static
already_AddRefed
<
nsROCSSPrimitiveValue
>
MatrixToCSSValue
(
const
mozilla
:
:
gfx
:
:
Matrix4x4
&
aMatrix
)
;
static
void
SetToRGBAColor
(
nsROCSSPrimitiveValue
*
aValue
nscolor
aColor
)
;
static
void
RegisterPrefChangeCallbacks
(
)
;
static
void
UnregisterPrefChangeCallbacks
(
)
;
NS_DECL_NSIMUTATIONOBSERVER_PARENTCHAINCHANGED
private
:
nsresult
GetPropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsACString
&
aMaybeCustomPropertyNme
nsAString
&
aValue
)
;
virtual
~
nsComputedDOMStyle
(
)
;
void
AssertFlushedPendingReflows
(
)
{
NS_ASSERTION
(
mFlushedPendingReflows
"
property
getter
should
have
been
marked
layout
-
dependent
"
)
;
}
nsMargin
GetAdjustedValuesForBoxSizing
(
)
;
void
UpdateCurrentStyleSources
(
nsCSSPropertyID
)
;
void
ClearCurrentStyleSources
(
)
;
void
ClearComputedStyle
(
)
;
void
SetResolvedComputedStyle
(
RefPtr
<
ComputedStyle
>
&
&
aContext
uint64_t
aGeneration
)
;
void
SetFrameComputedStyle
(
ComputedStyle
*
aStyle
uint64_t
aGeneration
)
;
static
already_AddRefed
<
ComputedStyle
>
DoGetComputedStyleNoFlush
(
Element
*
aElement
nsAtom
*
aPseudo
mozilla
:
:
PresShell
*
aPresShell
StyleType
aStyleType
)
;
#
define
STYLE_STRUCT
(
name_
)
\
const
nsStyle
#
#
name_
*
Style
#
#
name_
(
)
{
\
return
mComputedStyle
-
>
Style
#
#
name_
(
)
;
\
}
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
typedef
bool
(
nsComputedDOMStyle
:
:
*
PercentageBaseGetter
)
(
nscoord
&
)
;
already_AddRefed
<
CSSValue
>
GetOffsetWidthFor
(
mozilla
:
:
Side
)
;
already_AddRefed
<
CSSValue
>
GetAbsoluteOffset
(
mozilla
:
:
Side
)
;
nscoord
GetUsedAbsoluteOffset
(
mozilla
:
:
Side
)
;
already_AddRefed
<
CSSValue
>
GetNonStaticPositionOffset
(
mozilla
:
:
Side
aSide
bool
aResolveAuto
PercentageBaseGetter
aWidthGetter
PercentageBaseGetter
aHeightGetter
)
;
already_AddRefed
<
CSSValue
>
GetStaticOffset
(
mozilla
:
:
Side
aSide
)
;
already_AddRefed
<
CSSValue
>
GetPaddingWidthFor
(
mozilla
:
:
Side
aSide
)
;
already_AddRefed
<
CSSValue
>
GetBorderWidthFor
(
mozilla
:
:
Side
aSide
)
;
already_AddRefed
<
CSSValue
>
GetMarginWidthFor
(
mozilla
:
:
Side
aSide
)
;
already_AddRefed
<
CSSValue
>
GetTransformValue
(
const
mozilla
:
:
StyleTransform
&
)
;
already_AddRefed
<
nsROCSSPrimitiveValue
>
GetGridTrackSize
(
const
mozilla
:
:
StyleTrackSize
&
)
;
already_AddRefed
<
nsROCSSPrimitiveValue
>
GetGridTrackBreadth
(
const
mozilla
:
:
StyleTrackBreadth
&
)
;
void
SetValueToTrackBreadth
(
nsROCSSPrimitiveValue
*
const
mozilla
:
:
StyleTrackBreadth
&
)
;
already_AddRefed
<
CSSValue
>
GetGridTemplateColumnsRows
(
const
mozilla
:
:
StyleGridTemplateComponent
&
aTrackList
const
mozilla
:
:
ComputedGridTrackInfo
&
aTrackInfo
)
;
bool
GetLineHeightCoord
(
nscoord
&
aCoord
)
;
bool
ShouldHonorMinSizeAutoInAxis
(
mozilla
:
:
PhysicalAxis
aAxis
)
;
already_AddRefed
<
CSSValue
>
DoGetWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetHeight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMaxHeight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMaxWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMinHeight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMinWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetLeft
(
)
;
already_AddRefed
<
CSSValue
>
DoGetTop
(
)
;
already_AddRefed
<
CSSValue
>
DoGetRight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBottom
(
)
;
already_AddRefed
<
CSSValue
>
DoGetOsxFontSmoothing
(
)
;
already_AddRefed
<
CSSValue
>
DoGetGridTemplateColumns
(
)
;
already_AddRefed
<
CSSValue
>
DoGetGridTemplateRows
(
)
;
already_AddRefed
<
CSSValue
>
DoGetImageLayerPosition
(
const
nsStyleImageLayers
&
aLayers
)
;
already_AddRefed
<
CSSValue
>
DoGetMask
(
)
;
already_AddRefed
<
CSSValue
>
DoGetPaddingTop
(
)
;
already_AddRefed
<
CSSValue
>
DoGetPaddingBottom
(
)
;
already_AddRefed
<
CSSValue
>
DoGetPaddingLeft
(
)
;
already_AddRefed
<
CSSValue
>
DoGetPaddingRight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBorderSpacing
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBorderTopWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBorderBottomWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBorderLeftWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetBorderRightWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMarginTopWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMarginBottomWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMarginLeftWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetMarginRightWidth
(
)
;
already_AddRefed
<
CSSValue
>
DoGetLineHeight
(
)
;
already_AddRefed
<
CSSValue
>
DoGetTextDecoration
(
)
;
already_AddRefed
<
CSSValue
>
DoGetTransform
(
)
;
already_AddRefed
<
CSSValue
>
DoGetTransformOrigin
(
)
;
already_AddRefed
<
CSSValue
>
DoGetPerspectiveOrigin
(
)
;
already_AddRefed
<
CSSValue
>
DoGetColumnRuleWidth
(
)
;
already_AddRefed
<
CSSValue
>
DummyGetter
(
)
;
void
SetValueFromComplexColor
(
nsROCSSPrimitiveValue
*
aValue
const
mozilla
:
:
StyleColor
&
aColor
)
;
void
SetValueToPosition
(
const
mozilla
:
:
Position
&
aPosition
nsDOMCSSValueList
*
aValueList
)
;
void
SetValueToURLValue
(
const
mozilla
:
:
StyleComputedUrl
*
aURL
nsROCSSPrimitiveValue
*
aValue
)
;
void
SetValueToSize
(
nsROCSSPrimitiveValue
*
aValue
const
mozilla
:
:
StyleSize
&
)
;
void
SetValueToLengthPercentageOrAuto
(
nsROCSSPrimitiveValue
*
aValue
const
LengthPercentageOrAuto
&
bool
aClampNegativeCalc
)
;
void
SetValueToLengthPercentage
(
nsROCSSPrimitiveValue
*
aValue
const
LengthPercentage
&
bool
aClampNegativeCalc
)
;
void
SetValueToMaxSize
(
nsROCSSPrimitiveValue
*
aValue
const
StyleMaxSize
&
)
;
void
SetValueToExtremumLength
(
nsROCSSPrimitiveValue
*
aValue
StyleExtremumLength
)
;
bool
GetCBContentWidth
(
nscoord
&
aWidth
)
;
bool
GetCBContentHeight
(
nscoord
&
aHeight
)
;
bool
GetCBPaddingRectWidth
(
nscoord
&
aWidth
)
;
bool
GetCBPaddingRectHeight
(
nscoord
&
aHeight
)
;
bool
GetScrollFrameContentWidth
(
nscoord
&
aWidth
)
;
bool
GetScrollFrameContentHeight
(
nscoord
&
aHeight
)
;
bool
GetFrameBorderRectWidth
(
nscoord
&
aWidth
)
;
bool
GetFrameBorderRectHeight
(
nscoord
&
aHeight
)
;
bool
NeedsToFlushStyle
(
nsCSSPropertyID
)
const
;
bool
NeedsToFlushLayout
(
nsCSSPropertyID
)
const
;
void
Flush
(
Document
&
mozilla
:
:
FlushType
)
;
nsIFrame
*
GetOuterFrame
(
)
const
;
static
ComputedStyleMap
*
GetComputedStyleMap
(
)
;
nsWeakPtr
mDocumentWeak
;
RefPtr
<
Element
>
mElement
;
RefPtr
<
ComputedStyle
>
mComputedStyle
;
RefPtr
<
nsAtom
>
mPseudo
;
nsIFrame
*
mOuterFrame
;
nsIFrame
*
mInnerFrame
;
mozilla
:
:
PresShell
*
mPresShell
;
StyleType
mStyleType
;
uint64_t
mComputedStyleGeneration
=
0
;
uint32_t
mPresShellId
=
0
;
bool
mExposeVisitedStyle
;
bool
mResolvedComputedStyle
;
#
ifdef
DEBUG
bool
mFlushedPendingReflows
=
false
;
#
endif
friend
struct
ComputedStyleMap
;
}
;
already_AddRefed
<
nsComputedDOMStyle
>
NS_NewComputedDOMStyle
(
mozilla
:
:
dom
:
:
Element
*
aElement
const
nsAString
&
aPseudoElt
mozilla
:
:
dom
:
:
Document
*
aDocument
nsComputedDOMStyle
:
:
StyleType
aStyleType
=
nsComputedDOMStyle
:
:
eAll
)
;
#
endif
