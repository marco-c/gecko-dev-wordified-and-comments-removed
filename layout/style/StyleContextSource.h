#
ifndef
mozilla_StyleContextSource_h
#
define
mozilla_StyleContextSource_h
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
nsRuleNode
.
h
"
namespace
mozilla
{
struct
NonOwningStyleContextSource
{
MOZ_IMPLICIT
NonOwningStyleContextSource
(
nsRuleNode
*
aRuleNode
)
:
mBits
(
reinterpret_cast
<
uintptr_t
>
(
aRuleNode
)
)
{
}
explicit
NonOwningStyleContextSource
(
const
ServoComputedValues
*
aComputedValues
)
:
mBits
(
reinterpret_cast
<
uintptr_t
>
(
aComputedValues
)
|
1
)
{
}
bool
operator
=
=
(
const
NonOwningStyleContextSource
&
aOther
)
const
{
MOZ_ASSERT
(
IsServoComputedValues
(
)
=
=
aOther
.
IsServoComputedValues
(
)
"
Comparing
Servo
to
Gecko
-
probably
a
bug
"
)
;
return
mBits
=
=
aOther
.
mBits
;
}
bool
operator
!
=
(
const
NonOwningStyleContextSource
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
IsNull
(
)
const
{
return
!
mBits
;
}
bool
IsGeckoRuleNodeOrNull
(
)
const
{
return
!
IsServoComputedValues
(
)
;
}
bool
IsServoComputedValues
(
)
const
{
#
ifdef
MOZ_STYLO
return
mBits
&
1
;
#
else
return
false
;
#
endif
}
nsRuleNode
*
AsGeckoRuleNode
(
)
const
{
MOZ_ASSERT
(
IsGeckoRuleNodeOrNull
(
)
&
&
!
IsNull
(
)
)
;
return
reinterpret_cast
<
nsRuleNode
*
>
(
mBits
)
;
}
const
ServoComputedValues
*
AsServoComputedValues
(
)
const
{
MOZ_ASSERT
(
IsServoComputedValues
(
)
)
;
return
reinterpret_cast
<
ServoComputedValues
*
>
(
mBits
&
~
1
)
;
}
private
:
uintptr_t
mBits
;
}
;
}
#
endif
