#
include
<
algorithm
>
#
include
"
mozilla
/
Assertions
.
h
"
#
ifndef
mozilla_HandleRefPtr_h
#
define
mozilla_HandleRefPtr_h
namespace
mozilla
{
template
<
typename
T
>
class
HandleRefPtr
{
public
:
HandleRefPtr
(
)
{
}
HandleRefPtr
(
HandleRefPtr
<
T
>
&
aRhs
)
{
assign
(
aRhs
.
mHandle
)
;
}
HandleRefPtr
(
HandleRefPtr
<
T
>
&
&
aRhs
)
{
std
:
:
swap
(
mHandle
aRhs
.
mHandle
)
;
}
MOZ_IMPLICIT
HandleRefPtr
(
T
aRhs
)
{
assign
(
aRhs
)
;
}
HandleRefPtr
<
T
>
&
operator
=
(
HandleRefPtr
<
T
>
&
aRhs
)
{
assign
(
aRhs
.
mHandle
)
;
return
*
this
;
}
HandleRefPtr
<
T
>
&
operator
=
(
T
aRhs
)
{
assign
(
aRhs
)
;
return
*
this
;
}
~
HandleRefPtr
(
)
{
assign
(
nullptr
)
;
}
explicit
operator
bool
(
)
const
{
return
!
!
mHandle
;
}
bool
operator
!
(
)
const
{
return
!
mHandle
;
}
operator
T
(
)
const
{
return
mHandle
;
}
T
operator
-
>
(
)
const
{
return
mHandle
;
}
bool
operator
=
=
(
const
HandleRefPtr
<
T
>
&
aOther
)
const
{
return
mHandle
=
=
aOther
.
mHandle
;
}
bool
operator
!
=
(
const
HandleRefPtr
<
T
>
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
void
swap
(
HandleRefPtr
<
T
>
&
aOther
)
{
std
:
:
swap
(
mHandle
aOther
.
mHandle
)
;
}
private
:
void
assign
(
T
aPtr
)
{
if
(
aPtr
)
{
aPtr
-
>
AddRef
(
)
;
}
std
:
:
swap
(
mHandle
aPtr
)
;
if
(
aPtr
)
{
aPtr
-
>
Release
(
)
;
}
}
T
mHandle
;
}
;
}
#
endif
