#
ifndef
RuleNodeCacheConditions_h_
#
define
RuleNodeCacheConditions_h_
#
ifdef
MOZ_OLD_STYLE
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsTArray
.
h
"
class
nsStyleContext
;
namespace
mozilla
{
class
RuleNodeCacheConditions
{
public
:
RuleNodeCacheConditions
(
)
:
mFontSize
(
0
)
mBits
(
0
)
mWritingMode
(
0
)
{
}
RuleNodeCacheConditions
(
const
RuleNodeCacheConditions
&
aOther
)
:
mFontSize
(
aOther
.
mFontSize
)
mBits
(
aOther
.
mBits
)
mWritingMode
(
aOther
.
mWritingMode
)
{
}
RuleNodeCacheConditions
&
operator
=
(
const
RuleNodeCacheConditions
&
aOther
)
{
mFontSize
=
aOther
.
mFontSize
;
mBits
=
aOther
.
mBits
;
mWritingMode
=
aOther
.
mWritingMode
;
return
*
this
;
}
bool
operator
=
=
(
const
RuleNodeCacheConditions
&
aOther
)
const
{
return
mFontSize
=
=
aOther
.
mFontSize
&
&
mBits
=
=
aOther
.
mBits
&
&
mWritingMode
=
=
aOther
.
mWritingMode
;
}
bool
operator
!
=
(
const
RuleNodeCacheConditions
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
bool
Matches
(
nsStyleContext
*
aStyleContext
)
const
;
void
SetFontSizeDependency
(
nscoord
aCoord
)
{
MOZ_ASSERT
(
!
(
mBits
&
eHaveFontSize
)
|
|
mFontSize
=
=
aCoord
)
;
mFontSize
=
aCoord
;
mBits
|
=
eHaveFontSize
;
}
void
SetWritingModeDependency
(
uint8_t
aWritingMode
)
{
MOZ_ASSERT
(
!
(
mBits
&
eHaveWritingMode
)
|
|
mWritingMode
=
=
aWritingMode
)
;
mWritingMode
=
aWritingMode
;
mBits
|
=
eHaveWritingMode
;
}
void
SetUncacheable
(
)
{
mBits
|
=
eUncacheable
;
}
void
Clear
(
)
{
*
this
=
RuleNodeCacheConditions
(
)
;
}
bool
Cacheable
(
)
const
{
return
!
(
mBits
&
eUncacheable
)
;
}
bool
CacheableWithDependencies
(
)
const
{
return
Cacheable
(
)
&
&
mBits
;
}
bool
CacheableWithoutDependencies
(
)
const
{
return
mBits
=
=
0
;
}
#
ifdef
DEBUG
void
List
(
)
const
;
#
endif
private
:
enum
{
eUncacheable
=
1
<
<
0
eHaveFontSize
=
1
<
<
1
eHaveWritingMode
=
1
<
<
2
}
;
nscoord
mFontSize
;
uint8_t
mBits
;
uint8_t
mWritingMode
;
}
;
}
#
else
namespace
mozilla
{
class
RuleNodeCacheConditions
{
}
;
}
#
endif
#
endif
