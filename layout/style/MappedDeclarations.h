#
ifndef
mozilla_MappedDeclarations_h
#
define
mozilla_MappedDeclarations_h
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsColor
.
h
"
class
nsAttrValue
;
namespace
mozilla
{
class
MappedDeclarations
final
{
public
:
explicit
MappedDeclarations
(
nsIDocument
*
aDoc
already_AddRefed
<
RawServoDeclarationBlock
>
aDecls
)
:
mDocument
(
aDoc
)
mDecl
(
aDecls
)
{
MOZ_ASSERT
(
mDecl
)
;
}
~
MappedDeclarations
(
)
{
MOZ_ASSERT
(
!
mDecl
"
Forgot
to
take
the
block
?
"
)
;
}
nsIDocument
*
Document
(
)
{
return
mDocument
;
}
already_AddRefed
<
RawServoDeclarationBlock
>
TakeDeclarationBlock
(
)
{
MOZ_ASSERT
(
mDecl
)
;
return
mDecl
.
forget
(
)
;
}
bool
PropertyIsSet
(
nsCSSPropertyID
aId
)
const
{
return
Servo_DeclarationBlock_PropertyIsSet
(
mDecl
aId
)
;
}
void
SetIdentStringValue
(
nsCSSPropertyID
aId
const
nsString
&
aValue
)
{
RefPtr
<
nsAtom
>
atom
=
NS_AtomizeMainThread
(
aValue
)
;
SetIdentAtomValue
(
aId
atom
)
;
}
void
SetIdentStringValueIfUnset
(
nsCSSPropertyID
aId
const
nsString
&
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetIdentStringValue
(
aId
aValue
)
;
}
}
void
SetIdentAtomValue
(
nsCSSPropertyID
aId
nsAtom
*
aValue
)
;
void
SetIdentAtomValueIfUnset
(
nsCSSPropertyID
aId
nsAtom
*
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetIdentAtomValue
(
aId
aValue
)
;
}
}
void
SetKeywordValue
(
nsCSSPropertyID
aId
int32_t
aValue
)
{
Servo_DeclarationBlock_SetKeywordValue
(
mDecl
aId
aValue
)
;
}
void
SetKeywordValueIfUnset
(
nsCSSPropertyID
aId
int32_t
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetKeywordValue
(
aId
aValue
)
;
}
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetKeywordValue
(
nsCSSPropertyID
aId
T
aValue
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
32
bits
"
)
;
SetKeywordValue
(
aId
static_cast
<
int32_t
>
(
aValue
)
)
;
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetKeywordValueIfUnset
(
nsCSSPropertyID
aId
T
aValue
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
32
bits
"
)
;
SetKeywordValueIfUnset
(
aId
static_cast
<
int32_t
>
(
aValue
)
)
;
}
void
SetIntValue
(
nsCSSPropertyID
aId
int32_t
aValue
)
{
Servo_DeclarationBlock_SetIntValue
(
mDecl
aId
aValue
)
;
}
void
SetPixelValue
(
nsCSSPropertyID
aId
float
aValue
)
{
Servo_DeclarationBlock_SetPixelValue
(
mDecl
aId
aValue
)
;
}
void
SetPixelValueIfUnset
(
nsCSSPropertyID
aId
float
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetPixelValue
(
aId
aValue
)
;
}
}
void
SetLengthValue
(
nsCSSPropertyID
aId
const
nsCSSValue
&
aValue
)
{
MOZ_ASSERT
(
aValue
.
IsLengthUnit
(
)
)
;
Servo_DeclarationBlock_SetLengthValue
(
mDecl
aId
aValue
.
GetFloatValue
(
)
aValue
.
GetUnit
(
)
)
;
}
void
SetNumberValue
(
nsCSSPropertyID
aId
float
aValue
)
{
Servo_DeclarationBlock_SetNumberValue
(
mDecl
aId
aValue
)
;
}
void
SetPercentValue
(
nsCSSPropertyID
aId
float
aValue
)
{
Servo_DeclarationBlock_SetPercentValue
(
mDecl
aId
aValue
)
;
}
void
SetPercentValueIfUnset
(
nsCSSPropertyID
aId
float
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetPercentValue
(
aId
aValue
)
;
}
}
void
SetAutoValue
(
nsCSSPropertyID
aId
)
{
Servo_DeclarationBlock_SetAutoValue
(
mDecl
aId
)
;
}
void
SetAutoValueIfUnset
(
nsCSSPropertyID
aId
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetAutoValue
(
aId
)
;
}
}
void
SetCurrentColor
(
nsCSSPropertyID
aId
)
{
Servo_DeclarationBlock_SetCurrentColor
(
mDecl
aId
)
;
}
void
SetCurrentColorIfUnset
(
nsCSSPropertyID
aId
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetCurrentColor
(
aId
)
;
}
}
void
SetColorValue
(
nsCSSPropertyID
aId
nscolor
aValue
)
{
Servo_DeclarationBlock_SetColorValue
(
mDecl
aId
aValue
)
;
}
void
SetColorValueIfUnset
(
nsCSSPropertyID
aId
nscolor
aValue
)
{
if
(
!
PropertyIsSet
(
aId
)
)
{
SetColorValue
(
aId
aValue
)
;
}
}
void
SetFontFamily
(
const
nsString
&
aValue
)
{
Servo_DeclarationBlock_SetFontFamily
(
mDecl
aValue
)
;
}
void
SetTextDecorationColorOverride
(
)
{
Servo_DeclarationBlock_SetTextDecorationColorOverride
(
mDecl
)
;
}
void
SetBackgroundImage
(
const
nsAttrValue
&
value
)
;
private
:
nsIDocument
*
const
mDocument
;
RefPtr
<
RawServoDeclarationBlock
>
mDecl
;
}
;
}
#
endif
