#
ifndef
mozilla_StyleSetHandleInlines_h
#
define
mozilla_StyleSetHandleInlines_h
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
nsStyleSet
.
h
"
#
define
FORWARD
(
method_
args_
)
\
return
IsGecko
(
)
?
AsGecko
(
)
-
>
method_
args_
:
AsServo
(
)
-
>
method_
args_
;
namespace
mozilla
{
void
StyleSetHandle
:
:
Ptr
:
:
Delete
(
)
{
if
(
mValue
)
{
if
(
IsGecko
(
)
)
{
delete
AsGecko
(
)
;
}
else
{
delete
AsServo
(
)
;
}
}
}
void
StyleSetHandle
:
:
Ptr
:
:
Init
(
nsPresContext
*
aPresContext
)
{
FORWARD
(
Init
(
aPresContext
)
)
;
}
void
StyleSetHandle
:
:
Ptr
:
:
BeginShutdown
(
)
{
FORWARD
(
BeginShutdown
(
)
)
;
}
void
StyleSetHandle
:
:
Ptr
:
:
Shutdown
(
)
{
FORWARD
(
Shutdown
(
)
)
;
}
bool
StyleSetHandle
:
:
Ptr
:
:
GetAuthorStyleDisabled
(
)
const
{
FORWARD
(
GetAuthorStyleDisabled
(
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
SetAuthorStyleDisabled
(
bool
aStyleDisabled
)
{
FORWARD
(
SetAuthorStyleDisabled
(
aStyleDisabled
)
)
;
}
void
StyleSetHandle
:
:
Ptr
:
:
BeginUpdate
(
)
{
FORWARD
(
BeginUpdate
(
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
EndUpdate
(
)
{
FORWARD
(
EndUpdate
(
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
)
{
FORWARD
(
ResolveStyleFor
(
aElement
aParentContext
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ResolveStyleFor
(
dom
:
:
Element
*
aElement
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
)
{
FORWARD
(
ResolveStyleFor
(
aElement
aParentContext
aTreeMatchContext
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ResolveStyleForNonElement
(
nsStyleContext
*
aParentContext
)
{
FORWARD
(
ResolveStyleForNonElement
(
aParentContext
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ResolvePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
dom
:
:
Element
*
aPseudoElement
)
{
FORWARD
(
ResolvePseudoElementStyle
(
aParentElement
aType
aParentContext
aPseudoElement
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ResolveAnonymousBoxStyle
(
nsIAtom
*
aPseudoTag
nsStyleContext
*
aParentContext
uint32_t
aFlags
)
{
FORWARD
(
ResolveAnonymousBoxStyle
(
aPseudoTag
aParentContext
aFlags
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
AppendStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
{
FORWARD
(
AppendStyleSheet
(
aType
aSheet
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
PrependStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
{
FORWARD
(
PrependStyleSheet
(
aType
aSheet
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
RemoveStyleSheet
(
SheetType
aType
CSSStyleSheet
*
aSheet
)
{
FORWARD
(
RemoveStyleSheet
(
aType
aSheet
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
ReplaceSheets
(
SheetType
aType
const
nsTArray
<
RefPtr
<
CSSStyleSheet
>
>
&
aNewSheets
)
{
FORWARD
(
ReplaceSheets
(
aType
aNewSheets
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
InsertStyleSheetBefore
(
SheetType
aType
CSSStyleSheet
*
aNewSheet
CSSStyleSheet
*
aReferenceSheet
)
{
FORWARD
(
InsertStyleSheetBefore
(
aType
aNewSheet
aReferenceSheet
)
)
;
}
int32_t
StyleSetHandle
:
:
Ptr
:
:
SheetCount
(
SheetType
aType
)
const
{
FORWARD
(
SheetCount
(
aType
)
)
;
}
CSSStyleSheet
*
StyleSetHandle
:
:
Ptr
:
:
StyleSheetAt
(
SheetType
aType
int32_t
aIndex
)
const
{
FORWARD
(
StyleSheetAt
(
aType
aIndex
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
RemoveDocStyleSheet
(
CSSStyleSheet
*
aSheet
)
{
FORWARD
(
RemoveDocStyleSheet
(
aSheet
)
)
;
}
nsresult
StyleSetHandle
:
:
Ptr
:
:
AddDocStyleSheet
(
CSSStyleSheet
*
aSheet
nsIDocument
*
aDocument
)
{
FORWARD
(
AddDocStyleSheet
(
aSheet
aDocument
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
)
{
FORWARD
(
ProbePseudoElementStyle
(
aParentElement
aType
aParentContext
)
)
;
}
already_AddRefed
<
nsStyleContext
>
StyleSetHandle
:
:
Ptr
:
:
ProbePseudoElementStyle
(
dom
:
:
Element
*
aParentElement
CSSPseudoElementType
aType
nsStyleContext
*
aParentContext
TreeMatchContext
&
aTreeMatchContext
dom
:
:
Element
*
aPseudoElement
)
{
FORWARD
(
ProbePseudoElementStyle
(
aParentElement
aType
aParentContext
aTreeMatchContext
aPseudoElement
)
)
;
}
nsRestyleHint
StyleSetHandle
:
:
Ptr
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
EventStates
aStateMask
)
{
FORWARD
(
HasStateDependentStyle
(
aElement
aStateMask
)
)
;
}
nsRestyleHint
StyleSetHandle
:
:
Ptr
:
:
HasStateDependentStyle
(
dom
:
:
Element
*
aElement
CSSPseudoElementType
aPseudoType
dom
:
:
Element
*
aPseudoElement
EventStates
aStateMask
)
{
FORWARD
(
HasStateDependentStyle
(
aElement
aPseudoType
aPseudoElement
aStateMask
)
)
;
}
}
#
undef
FORWARD
#
endif
