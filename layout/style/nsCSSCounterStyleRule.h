#
ifndef
nsCSSCounterStyleRule_h
#
define
nsCSSCounterStyleRule_h
#
include
"
mozilla
/
css
/
Rule
.
h
"
#
include
"
nsCSSValue
.
h
"
#
include
"
nsIDOMCSSCounterStyleRule
.
h
"
class
nsCSSCounterStyleRule
final
:
public
mozilla
:
:
css
:
:
Rule
public
nsIDOMCSSCounterStyleRule
{
public
:
explicit
nsCSSCounterStyleRule
(
nsIAtom
*
aName
uint32_t
aLineNumber
uint32_t
aColumnNumber
)
:
mozilla
:
:
css
:
:
Rule
(
aLineNumber
aColumnNumber
)
mName
(
aName
)
mGeneration
(
0
)
{
MOZ_ASSERT
(
aName
"
Must
have
non
-
null
name
"
)
;
}
private
:
nsCSSCounterStyleRule
(
const
nsCSSCounterStyleRule
&
aCopy
)
;
~
nsCSSCounterStyleRule
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
virtual
bool
IsCCLeaf
(
)
const
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
virtual
int32_t
GetType
(
)
const
override
;
using
Rule
:
:
GetType
;
virtual
already_AddRefed
<
mozilla
:
:
css
:
:
Rule
>
Clone
(
)
const
override
;
NS_DECL_NSIDOMCSSCOUNTERSTYLERULE
uint16_t
Type
(
)
const
override
;
void
GetCssTextImpl
(
nsAString
&
aCssText
)
const
override
;
static
bool
CheckDescValue
(
int32_t
aSystem
nsCSSCounterDesc
aDescID
const
nsCSSValue
&
aValue
)
;
nsIAtom
*
Name
(
)
const
{
return
mName
;
}
uint32_t
GetGeneration
(
)
const
{
return
mGeneration
;
}
int32_t
GetSystem
(
)
const
;
const
nsCSSValue
&
GetSystemArgument
(
)
const
;
const
nsCSSValue
&
GetDesc
(
nsCSSCounterDesc
aDescID
)
const
{
MOZ_ASSERT
(
aDescID
>
=
0
&
&
aDescID
<
eCSSCounterDesc_COUNT
"
descriptor
ID
out
of
range
"
)
;
return
mValues
[
aDescID
]
;
}
void
SetDesc
(
nsCSSCounterDesc
aDescID
const
nsCSSValue
&
aValue
)
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
private
:
typedef
decltype
(
&
nsCSSCounterStyleRule
:
:
GetSymbols
)
Getter
;
static
const
Getter
kGetters
[
]
;
nsresult
GetDescriptor
(
nsCSSCounterDesc
aDescID
nsAString
&
aValue
)
;
nsresult
SetDescriptor
(
nsCSSCounterDesc
aDescID
const
nsAString
&
aValue
)
;
nsCOMPtr
<
nsIAtom
>
mName
;
nsCSSValue
mValues
[
eCSSCounterDesc_COUNT
]
;
uint32_t
mGeneration
;
}
;
#
endif
