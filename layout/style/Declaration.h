#
ifndef
mozilla_css_Declaration_h
#
define
mozilla_css_Declaration_h
#
ifndef
MOZILLA_INTERNAL_API
#
error
"
This
file
should
only
be
included
within
libxul
"
#
endif
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
CSSVariableDeclarations
.
h
"
#
include
"
nsCSSDataBlock
.
h
"
#
include
"
nsCSSProperty
.
h
"
#
include
"
nsCSSProps
.
h
"
#
include
"
nsIStyleRule
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTArray
.
h
"
#
include
<
stdio
.
h
>
#
define
NS_CSS_DECLARATION_IMPL_CID
\
{
0xfeec07b8
0x3fe6
0x491e
\
{
0x90
0xd5
0xcc
0x93
0xf8
0x53
0xe0
0x48
}
}
class
nsHTMLCSSStyleSheet
;
namespace
mozilla
{
namespace
css
{
class
Rule
;
class
Declaration
;
class
ImportantStyleData
final
:
public
nsIStyleRule
{
public
:
NS_DECL_ISUPPORTS
inline
:
:
mozilla
:
:
css
:
:
Declaration
*
Declaration
(
)
;
virtual
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
virtual
bool
MightMapInheritedStyleData
(
)
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
private
:
ImportantStyleData
(
)
{
}
~
ImportantStyleData
(
)
{
}
friend
class
:
:
mozilla
:
:
css
:
:
Declaration
;
}
;
class
Declaration
final
:
public
nsIStyleRule
{
public
:
Declaration
(
)
;
Declaration
(
const
Declaration
&
aCopy
)
;
NS_DECLARE_STATIC_IID_ACCESSOR
(
NS_CSS_DECLARATION_IMPL_CID
)
NS_DECL_ISUPPORTS
private
:
~
Declaration
(
)
;
public
:
virtual
void
MapRuleInfoInto
(
nsRuleData
*
aRuleData
)
override
;
virtual
bool
MightMapInheritedStyleData
(
)
override
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
out
=
stdout
int32_t
aIndent
=
0
)
const
override
;
#
endif
void
ValueAppended
(
nsCSSProperty
aProperty
)
;
void
RemoveProperty
(
nsCSSProperty
aProperty
)
;
bool
HasProperty
(
nsCSSProperty
aProperty
)
const
;
void
GetValue
(
nsCSSProperty
aProperty
nsAString
&
aValue
)
const
;
void
GetAuthoredValue
(
nsCSSProperty
aProperty
nsAString
&
aValue
)
const
;
bool
HasImportantData
(
)
const
{
return
mImportantData
|
|
mImportantVariables
;
}
bool
GetValueIsImportant
(
nsCSSProperty
aProperty
)
const
;
bool
GetValueIsImportant
(
const
nsAString
&
aProperty
)
const
;
void
AddVariableDeclaration
(
const
nsAString
&
aName
CSSVariableDeclarations
:
:
Type
aType
const
nsString
&
aValue
bool
aIsImportant
bool
aOverrideImportant
)
;
void
RemoveVariableDeclaration
(
const
nsAString
&
aName
)
;
void
GetVariableDeclaration
(
const
nsAString
&
aName
nsAString
&
aValue
)
const
;
bool
GetVariableValueIsImportant
(
const
nsAString
&
aName
)
const
;
uint32_t
Count
(
)
const
{
return
mOrder
.
Length
(
)
;
}
bool
GetNthProperty
(
uint32_t
aIndex
nsAString
&
aReturn
)
const
;
void
ToString
(
nsAString
&
aString
)
const
;
nsCSSCompressedDataBlock
*
GetNormalBlock
(
)
const
{
return
mData
;
}
nsCSSCompressedDataBlock
*
GetImportantBlock
(
)
const
{
return
mImportantData
;
}
void
InitializeEmpty
(
)
;
void
CompressFrom
(
nsCSSExpandedDataBlock
*
aExpandedData
)
{
MOZ_ASSERT
(
!
mData
"
oops
"
)
;
MOZ_ASSERT
(
!
mImportantData
"
oops
"
)
;
aExpandedData
-
>
Compress
(
getter_Transfers
(
mData
)
getter_Transfers
(
mImportantData
)
mOrder
)
;
aExpandedData
-
>
AssertInitialState
(
)
;
}
void
ExpandTo
(
nsCSSExpandedDataBlock
*
aExpandedData
)
{
AssertMutable
(
)
;
aExpandedData
-
>
AssertInitialState
(
)
;
MOZ_ASSERT
(
mData
"
oops
"
)
;
aExpandedData
-
>
Expand
(
mData
.
forget
(
)
mImportantData
.
forget
(
)
)
;
}
void
MapImportantRuleInfoInto
(
nsRuleData
*
aRuleData
)
const
{
MOZ_ASSERT
(
mData
"
called
while
expanded
"
)
;
MOZ_ASSERT
(
mImportantData
|
|
mImportantVariables
"
must
have
important
data
or
variables
"
)
;
if
(
mImportantData
)
{
mImportantData
-
>
MapRuleInfoInto
(
aRuleData
)
;
}
if
(
mImportantVariables
)
{
mImportantVariables
-
>
MapRuleInfoInto
(
aRuleData
)
;
}
}
bool
MapsImportantInheritedStyleData
(
)
const
;
bool
TryReplaceValue
(
nsCSSProperty
aProperty
bool
aIsImportant
nsCSSExpandedDataBlock
&
aFromBlock
bool
*
aChanged
)
{
AssertMutable
(
)
;
MOZ_ASSERT
(
mData
"
called
while
expanded
"
)
;
if
(
nsCSSProps
:
:
IsShorthand
(
aProperty
)
)
{
*
aChanged
=
false
;
return
false
;
}
nsCSSCompressedDataBlock
*
block
=
aIsImportant
?
mImportantData
:
mData
;
if
(
!
block
)
{
*
aChanged
=
false
;
return
false
;
}
#
ifdef
DEBUG
{
nsCSSCompressedDataBlock
*
other
=
aIsImportant
?
mData
:
mImportantData
;
MOZ_ASSERT
(
!
other
|
|
!
other
-
>
ValueFor
(
aProperty
)
|
|
!
block
-
>
ValueFor
(
aProperty
)
"
Property
both
important
and
not
?
"
)
;
}
#
endif
return
block
-
>
TryReplaceValue
(
aProperty
aFromBlock
aChanged
)
;
}
bool
HasNonImportantValueFor
(
nsCSSProperty
aProperty
)
const
{
MOZ_ASSERT
(
!
nsCSSProps
:
:
IsShorthand
(
aProperty
)
"
must
be
longhand
"
)
;
return
!
!
mData
-
>
ValueFor
(
aProperty
)
;
}
bool
IsMutable
(
)
const
{
return
!
mImmutable
;
}
already_AddRefed
<
Declaration
>
EnsureMutable
(
)
;
void
AssertMutable
(
)
const
{
MOZ_ASSERT
(
IsMutable
(
)
"
someone
forgot
to
call
EnsureMutable
"
)
;
}
void
SetImmutable
(
)
const
{
mImmutable
=
true
;
}
void
ClearData
(
)
{
AssertMutable
(
)
;
mData
=
nullptr
;
mImportantData
=
nullptr
;
mVariables
=
nullptr
;
mImportantVariables
=
nullptr
;
mOrder
.
Clear
(
)
;
mVariableOrder
.
Clear
(
)
;
}
void
SetOwningRule
(
Rule
*
aRule
)
{
MOZ_ASSERT
(
!
mContainer
.
mOwningRule
|
|
!
aRule
"
should
never
overwrite
one
rule
with
another
"
)
;
mContainer
.
mOwningRule
=
aRule
;
}
Rule
*
GetOwningRule
(
)
const
{
if
(
mContainer
.
mRaw
&
0x1
)
{
return
nullptr
;
}
return
mContainer
.
mOwningRule
;
}
void
SetHTMLCSSStyleSheet
(
nsHTMLCSSStyleSheet
*
aHTMLCSSStyleSheet
)
{
MOZ_ASSERT
(
!
mContainer
.
mHTMLCSSStyleSheet
|
|
!
aHTMLCSSStyleSheet
"
should
never
overwrite
one
sheet
with
another
"
)
;
mContainer
.
mHTMLCSSStyleSheet
=
aHTMLCSSStyleSheet
;
if
(
aHTMLCSSStyleSheet
)
{
mContainer
.
mRaw
|
=
uintptr_t
(
1
)
;
}
}
nsHTMLCSSStyleSheet
*
GetHTMLCSSStyleSheet
(
)
const
{
if
(
!
(
mContainer
.
mRaw
&
0x1
)
)
{
return
nullptr
;
}
auto
c
=
mContainer
;
c
.
mRaw
&
=
~
uintptr_t
(
1
)
;
return
c
.
mHTMLCSSStyleSheet
;
}
ImportantStyleData
*
GetImportantStyleData
(
)
{
if
(
HasImportantData
(
)
)
{
return
&
mImportantStyleData
;
}
return
nullptr
;
}
private
:
Declaration
&
operator
=
(
const
Declaration
&
aCopy
)
=
delete
;
bool
operator
=
=
(
const
Declaration
&
aCopy
)
const
=
delete
;
void
GetValue
(
nsCSSProperty
aProperty
nsAString
&
aValue
nsCSSValue
:
:
Serialization
aValueSerialization
)
const
;
static
void
AppendImportanceToString
(
bool
aIsImportant
nsAString
&
aString
)
;
bool
AppendValueToString
(
nsCSSProperty
aProperty
nsAString
&
aResult
)
const
;
bool
AppendValueToString
(
nsCSSProperty
aProperty
nsAString
&
aResult
nsCSSValue
:
:
Serialization
aValueSerialization
)
const
;
void
AppendPropertyAndValueToString
(
nsCSSProperty
aProperty
nsAutoString
&
aValue
nsAString
&
aResult
)
const
;
void
AppendVariableAndValueToString
(
const
nsAString
&
aName
nsAString
&
aResult
)
const
;
void
GetImageLayerValue
(
nsCSSCompressedDataBlock
*
data
nsAString
&
aValue
nsCSSValue
:
:
Serialization
aSerialization
const
nsCSSProperty
aTable
[
]
)
const
;
void
GetImageLayerPositionValue
(
nsCSSCompressedDataBlock
*
data
nsAString
&
aValue
nsCSSValue
:
:
Serialization
aSerialization
const
nsCSSProperty
aTable
[
]
)
const
;
public
:
nsCSSProperty
GetPropertyAt
(
uint32_t
aIndex
)
const
{
uint32_t
value
=
mOrder
[
aIndex
]
;
if
(
value
>
=
eCSSProperty_COUNT
)
{
return
eCSSPropertyExtra_variable
;
}
return
nsCSSProperty
(
value
)
;
}
void
GetCustomPropertyNameAt
(
uint32_t
aIndex
nsAString
&
aResult
)
const
{
MOZ_ASSERT
(
mOrder
[
aIndex
]
>
=
eCSSProperty_COUNT
)
;
uint32_t
variableIndex
=
mOrder
[
aIndex
]
-
eCSSProperty_COUNT
;
aResult
.
Truncate
(
)
;
aResult
.
AppendLiteral
(
"
-
-
"
)
;
aResult
.
Append
(
mVariableOrder
[
variableIndex
]
)
;
}
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
AutoTArray
<
uint32_t
8
>
mOrder
;
nsTArray
<
nsString
>
mVariableOrder
;
nsAutoPtr
<
nsCSSCompressedDataBlock
>
mData
;
nsAutoPtr
<
nsCSSCompressedDataBlock
>
mImportantData
;
nsAutoPtr
<
CSSVariableDeclarations
>
mVariables
;
nsAutoPtr
<
CSSVariableDeclarations
>
mImportantVariables
;
union
{
uintptr_t
mRaw
;
Rule
*
mOwningRule
;
nsHTMLCSSStyleSheet
*
mHTMLCSSStyleSheet
;
}
mContainer
;
friend
class
ImportantStyleData
;
ImportantStyleData
mImportantStyleData
;
mutable
bool
mImmutable
;
}
;
inline
:
:
mozilla
:
:
css
:
:
Declaration
*
ImportantStyleData
:
:
Declaration
(
)
{
union
{
char
*
ch
;
:
:
mozilla
:
:
css
:
:
Declaration
*
declaration
;
ImportantStyleData
*
importantData
;
}
u
;
u
.
importantData
=
this
;
u
.
ch
-
=
offsetof
(
:
:
mozilla
:
:
css
:
:
Declaration
mImportantStyleData
)
;
return
u
.
declaration
;
}
NS_DEFINE_STATIC_IID_ACCESSOR
(
Declaration
NS_CSS_DECLARATION_IMPL_CID
)
}
}
#
endif
