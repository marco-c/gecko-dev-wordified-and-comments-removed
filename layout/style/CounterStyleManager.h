#
ifndef
mozilla_CounterStyleManager_h_
#
define
mozilla_CounterStyleManager_h_
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsStringFwd
.
h
"
#
include
"
nsTHashMap
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
class
nsPresContext
;
namespace
mozilla
{
enum
class
SpeakAs
:
uint8_t
{
Bullets
=
0
Numbers
=
1
Words
=
2
Spellout
=
3
Other
=
255
}
;
class
WritingMode
;
typedef
int32_t
CounterValue
;
class
CounterStyleManager
;
class
AnonymousCounterStyle
;
struct
NegativeType
;
struct
PadType
;
class
CounterStyle
{
protected
:
explicit
constexpr
CounterStyle
(
ListStyle
aStyle
)
:
mStyle
(
aStyle
)
{
}
private
:
CounterStyle
(
const
CounterStyle
&
aOther
)
=
delete
;
void
operator
=
(
const
CounterStyle
&
other
)
=
delete
;
public
:
constexpr
ListStyle
GetStyle
(
)
const
{
return
mStyle
;
}
bool
IsNone
(
)
const
{
return
mStyle
=
=
ListStyle
:
:
None
;
}
bool
IsCustomStyle
(
)
const
{
return
mStyle
=
=
ListStyle
:
:
Custom
;
}
bool
IsDependentStyle
(
)
const
;
virtual
void
GetPrefix
(
nsAString
&
aResult
)
=
0
;
virtual
void
GetSuffix
(
nsAString
&
aResult
)
=
0
;
void
GetCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
;
virtual
void
GetSpokenCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsBullet
)
;
virtual
bool
IsBullet
(
)
=
0
;
virtual
void
GetNegative
(
NegativeType
&
aResult
)
=
0
;
virtual
bool
IsOrdinalInRange
(
CounterValue
aOrdinal
)
=
0
;
virtual
bool
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
=
0
;
virtual
void
GetPad
(
PadType
&
aResult
)
=
0
;
virtual
CounterStyle
*
GetFallback
(
)
=
0
;
virtual
SpeakAs
GetSpeakAs
(
)
=
0
;
virtual
bool
UseNegativeSign
(
)
=
0
;
virtual
void
CallFallbackStyle
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
;
virtual
bool
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
=
0
;
virtual
AnonymousCounterStyle
*
AsAnonymous
(
)
{
return
nullptr
;
}
protected
:
const
ListStyle
mStyle
;
}
;
class
MOZ_STACK_CLASS
AnonymousCounterStyle
final
:
public
CounterStyle
{
public
:
explicit
AnonymousCounterStyle
(
const
nsAString
&
aContent
)
;
AnonymousCounterStyle
(
StyleSymbolsType
Span
<
const
StyleSymbol
>
aSymbols
)
;
void
GetPrefix
(
nsAString
&
aResult
)
override
;
void
GetSuffix
(
nsAString
&
aResult
)
override
;
bool
IsBullet
(
)
override
;
void
GetNegative
(
NegativeType
&
aResult
)
override
;
bool
IsOrdinalInRange
(
CounterValue
aOrdinal
)
override
;
bool
IsOrdinalInAutoRange
(
CounterValue
aOrdinal
)
override
;
void
GetPad
(
PadType
&
aResult
)
override
;
CounterStyle
*
GetFallback
(
)
override
;
SpeakAs
GetSpeakAs
(
)
override
;
bool
UseNegativeSign
(
)
override
;
bool
GetInitialCounterText
(
CounterValue
aOrdinal
WritingMode
aWritingMode
nsAString
&
aResult
bool
&
aIsRTL
)
override
;
AnonymousCounterStyle
*
AsAnonymous
(
)
override
{
return
this
;
}
auto
GetSymbols
(
)
const
{
return
mSymbols
;
}
StyleCounterSystem
GetSystem
(
)
const
;
~
AnonymousCounterStyle
(
)
=
default
;
StyleSymbolsType
mSymbolsType
;
Span
<
const
StyleSymbol
>
mSymbols
;
}
;
class
CounterStyleManager
final
{
private
:
~
CounterStyleManager
(
)
;
public
:
explicit
CounterStyleManager
(
nsPresContext
*
aPresContext
)
;
void
Disconnect
(
)
;
bool
IsInitial
(
)
const
{
return
mStyles
.
Count
(
)
=
=
3
;
}
CounterStyle
*
GetCounterStyle
(
nsAtom
*
aName
)
const
{
return
mStyles
.
Get
(
aName
)
;
}
CounterStyle
*
ResolveCounterStyle
(
nsAtom
*
aName
)
;
template
<
typename
F
>
void
WithCounterStyleNameOrSymbols
(
const
StyleCounterStyle
&
aStyle
F
&
&
aCallback
)
{
using
Tag
=
StyleCounterStyle
:
:
Tag
;
switch
(
aStyle
.
tag
)
{
case
Tag
:
:
None
:
case
Tag
:
:
String
:
MOZ_CRASH
(
"
Unexpected
counter
style
"
)
;
case
Tag
:
:
Symbols
:
{
AnonymousCounterStyle
s
(
aStyle
.
AsSymbols
(
)
.
ty
aStyle
.
AsSymbols
(
)
.
symbols
.
_0
.
AsSpan
(
)
)
;
return
aCallback
(
&
s
)
;
}
case
Tag
:
:
Name
:
{
return
aCallback
(
ResolveCounterStyle
(
aStyle
.
AsName
(
)
.
AsAtom
(
)
)
)
;
}
}
}
static
CounterStyle
*
GetBuiltinStyle
(
ListStyle
aStyle
)
;
static
CounterStyle
*
GetNoneStyle
(
)
{
return
GetBuiltinStyle
(
ListStyle
:
:
None
)
;
}
static
CounterStyle
*
GetDecimalStyle
(
)
{
return
GetBuiltinStyle
(
ListStyle
:
:
Decimal
)
;
}
static
CounterStyle
*
GetDiscStyle
(
)
{
return
GetBuiltinStyle
(
ListStyle
:
:
Disc
)
;
}
bool
NotifyRuleChanged
(
)
;
void
CleanRetiredStyles
(
)
;
nsPresContext
*
PresContext
(
)
const
{
return
mPresContext
;
}
NS_INLINE_DECL_REFCOUNTING
(
CounterStyleManager
)
private
:
void
DestroyCounterStyle
(
CounterStyle
*
aCounterStyle
)
;
nsPresContext
*
mPresContext
;
nsTHashMap
<
RefPtr
<
nsAtom
>
CounterStyle
*
>
mStyles
;
nsTArray
<
CounterStyle
*
>
mRetiredStyles
;
}
;
}
#
endif
