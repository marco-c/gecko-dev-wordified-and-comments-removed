#
ifndef
mozilla_dom_FontFaceSetImpl_h
#
define
mozilla_dom_FontFaceSetImpl_h
#
include
"
mozilla
/
dom
/
FontFace
.
h
"
#
include
"
mozilla
/
dom
/
FontFaceSetBinding
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
gfxUserFontSet
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsIDOMEventListener
.
h
"
struct
gfxFontFaceSrc
;
class
gfxFontSrcPrincipal
;
class
gfxUserFontEntry
;
class
nsFontFaceLoader
;
class
nsIChannel
;
class
nsIPrincipal
;
class
nsPIDOMWindowInner
;
struct
RawServoFontFaceRule
;
namespace
mozilla
{
class
PostTraversalTask
;
class
SharedFontList
;
namespace
dom
{
class
FontFace
;
}
}
namespace
mozilla
:
:
dom
{
class
FontFaceSetImpl
:
public
nsISupports
public
gfxUserFontSet
{
NS_DECL_THREADSAFE_ISUPPORTS
public
:
already_AddRefed
<
gfxFontSrcPrincipal
>
GetStandardFontLoadPrincipal
(
)
const
override
;
void
RecordFontLoadDone
(
uint32_t
aFontSize
TimeStamp
aDoneTime
)
override
;
bool
BypassCache
(
)
final
{
return
mBypassCache
;
}
protected
:
virtual
nsresult
CreateChannelForSyncLoadFontData
(
nsIChannel
*
*
aOutChannel
gfxUserFontEntry
*
aFontToLoad
const
gfxFontFaceSrc
*
aFontFaceSrc
)
=
0
;
bool
GetPrivateBrowsing
(
)
override
{
return
mPrivateBrowsing
;
}
nsresult
SyncLoadFontData
(
gfxUserFontEntry
*
aFontToLoad
const
gfxFontFaceSrc
*
aFontFaceSrc
uint8_t
*
&
aBuffer
uint32_t
&
aBufferLength
)
override
;
nsresult
LogMessage
(
gfxUserFontEntry
*
aUserFontEntry
uint32_t
aSrcIndex
const
char
*
aMessage
uint32_t
aFlags
=
nsIScriptError
:
:
errorFlag
nsresult
aStatus
=
NS_OK
)
override
;
void
DoRebuildUserFontSet
(
)
override
;
already_AddRefed
<
gfxUserFontEntry
>
CreateUserFontEntry
(
const
nsTArray
<
gfxFontFaceSrc
>
&
aFontFaceSrcList
WeightRange
aWeight
StretchRange
aStretch
SlantStyleRange
aStyle
const
nsTArray
<
gfxFontFeature
>
&
aFeatureSettings
const
nsTArray
<
gfxFontVariation
>
&
aVariationSettings
uint32_t
aLanguageOverride
gfxCharacterMap
*
aUnicodeRanges
StyleFontDisplay
aFontDisplay
RangeFlags
aRangeFlags
float
aAscentOverride
float
aDescentOverride
float
aLineGapOverride
float
aSizeAdjust
)
override
;
explicit
FontFaceSetImpl
(
FontFaceSet
*
aOwner
)
;
public
:
virtual
void
Destroy
(
)
;
void
RemoveLoader
(
nsFontFaceLoader
*
aLoader
)
;
virtual
bool
UpdateRules
(
const
nsTArray
<
nsFontFaceRuleContainer
>
&
aRules
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
implemented
!
"
)
;
return
false
;
}
virtual
RawServoFontFaceRule
*
FindRuleForEntry
(
gfxFontEntry
*
aFontEntry
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
implemented
!
"
)
;
return
nullptr
;
}
static
already_AddRefed
<
gfxUserFontEntry
>
FindOrCreateUserFontEntryFromFontFace
(
FontFaceImpl
*
aFontFace
)
;
void
OnFontFaceStatusChanged
(
FontFaceImpl
*
aFontFace
)
;
virtual
void
DidRefresh
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
implemented
!
"
)
;
}
static
bool
PrefEnabled
(
)
;
virtual
void
FlushUserFontSet
(
)
{
}
static
nsPresContext
*
GetPresContextFor
(
gfxUserFontSet
*
aUserFontSet
)
{
const
auto
*
set
=
static_cast
<
FontFaceSetImpl
*
>
(
aUserFontSet
)
;
return
set
?
set
-
>
GetPresContext
(
)
:
nullptr
;
}
void
RefreshStandardFontLoadPrincipal
(
)
;
virtual
dom
:
:
Document
*
Document
(
)
const
{
return
nullptr
;
}
virtual
void
EnsureReady
(
)
{
}
dom
:
:
FontFaceSetLoadStatus
Status
(
)
;
virtual
bool
Add
(
FontFaceImpl
*
aFontFace
ErrorResult
&
aRv
)
;
void
Clear
(
)
;
bool
Delete
(
FontFaceImpl
*
aFontFace
)
;
virtual
void
CacheFontLoadability
(
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Not
implemented
!
"
)
;
}
virtual
void
MarkUserFontSetDirty
(
)
{
}
void
CheckLoadingFinished
(
)
;
void
FindMatchingFontFaces
(
const
nsACString
&
aFont
const
nsAString
&
aText
nsTArray
<
FontFace
*
>
&
aFontFaces
ErrorResult
&
aRv
)
;
void
DispatchCheckLoadingFinishedAfterDelay
(
)
;
protected
:
~
FontFaceSetImpl
(
)
override
;
virtual
uint64_t
GetInnerWindowID
(
)
=
0
;
bool
HasAvailableFontFace
(
FontFaceImpl
*
aFontFace
)
;
virtual
bool
MightHavePendingFontLoads
(
)
;
void
CheckLoadingStarted
(
)
;
void
CheckLoadingFinishedAfterDelay
(
)
;
struct
FontFaceRecord
{
RefPtr
<
FontFaceImpl
>
mFontFace
;
Maybe
<
StyleOrigin
>
mOrigin
;
}
;
static
already_AddRefed
<
gfxUserFontEntry
>
FindOrCreateUserFontEntryFromFontFace
(
const
nsACString
&
aFamilyName
FontFaceImpl
*
aFontFace
StyleOrigin
)
;
virtual
RawServoFontFaceRule
*
FindRuleForUserFontEntry
(
gfxUserFontEntry
*
aUserFontEntry
)
{
return
nullptr
;
}
virtual
void
FindMatchingFontFaces
(
const
nsTHashSet
<
FontFace
*
>
&
aMatchingFaces
nsTArray
<
FontFace
*
>
&
aFontFaces
)
;
nsresult
CheckFontLoad
(
const
gfxFontFaceSrc
*
aFontFaceSrc
gfxFontSrcPrincipal
*
*
aPrincipal
bool
*
aBypassCache
)
;
void
InsertNonRuleFontFace
(
FontFaceImpl
*
aFontFace
bool
&
aFontSetModified
)
;
bool
HasLoadingFontFaces
(
)
;
bool
ReadyPromiseIsPending
(
)
const
;
virtual
void
UpdateHasLoadingFontFaces
(
)
;
void
ParseFontShorthandForMatching
(
const
nsACString
&
aFont
StyleFontFamilyList
&
aFamilyList
FontWeight
&
aWeight
FontStretch
&
aStretch
FontSlantStyle
&
aStyle
ErrorResult
&
aRv
)
;
virtual
TimeStamp
GetNavigationStartTimeStamp
(
)
=
0
;
virtual
already_AddRefed
<
gfxFontSrcPrincipal
>
CreateStandardFontLoadPrincipal
(
)
const
=
0
;
FontFaceSet
*
MOZ_NON_OWNING_REF
mOwner
;
mutable
RefPtr
<
gfxFontSrcPrincipal
>
mStandardFontLoadPrincipal
;
nsTHashtable
<
nsPtrHashKey
<
nsFontFaceLoader
>
>
mLoaders
;
nsTArray
<
FontFaceRecord
>
mNonRuleFaces
;
dom
:
:
FontFaceSetLoadStatus
mStatus
;
nsTHashMap
<
nsPtrHashKey
<
const
gfxFontFaceSrc
>
bool
>
mAllowedFontLoads
;
bool
mNonRuleFacesDirty
;
bool
mHasLoadingFontFaces
;
bool
mHasLoadingFontFacesIsDirty
;
bool
mDelayedLoadCheck
;
bool
mBypassCache
;
bool
mPrivateBrowsing
;
}
;
}
#
endif
