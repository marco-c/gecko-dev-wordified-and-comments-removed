#
ifndef
nsCSSAnonBoxes_h___
#
define
nsCSSAnonBoxes_h___
#
include
"
nsIAtom
.
h
"
class
nsICSSAnonBoxPseudo
:
public
nsIAtom
{
}
;
class
nsCSSAnonBoxes
{
public
:
static
void
AddRefAtoms
(
)
;
static
bool
IsAnonBox
(
nsIAtom
*
aAtom
)
;
#
ifdef
MOZ_XUL
static
bool
IsTreePseudoElement
(
nsIAtom
*
aPseudo
)
;
#
endif
static
bool
IsNonElement
(
nsIAtom
*
aPseudo
)
{
return
aPseudo
=
=
mozText
|
|
aPseudo
=
=
oofPlaceholder
|
|
aPseudo
=
=
firstLetterContinuation
;
}
#
define
CSS_ANON_BOX
(
_name
_value
_skips_fixup
)
static
nsICSSAnonBoxPseudo
*
_name
;
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
typedef
uint8_t
NonInheritingBase
;
enum
class
NonInheriting
:
NonInheritingBase
{
#
define
CSS_ANON_BOX
(
_name
_value
_skips_fixup
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
_name
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
_Count
}
;
static
bool
IsNonInheritingAnonBox
(
nsIAtom
*
aPseudo
)
{
return
#
define
CSS_ANON_BOX
(
_name
_value
_skips_fixup
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
_name
=
=
aPseudo
|
|
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
false
;
}
static
bool
AnonBoxSkipsParentDisplayBasedStyleFixup
(
nsIAtom
*
aPseudo
)
{
MOZ_ASSERT
(
!
IsNonInheritingAnonBox
(
aPseudo
)
"
only
call
this
for
inheriting
anonymous
boxes
"
)
;
return
#
define
CSS_ANON_BOX
(
name_
value_
skips_fixup_
)
\
(
skips_fixup_
&
&
name_
=
=
aPseudo
)
|
|
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
false
;
}
static
NonInheriting
NonInheritingTypeForPseudoTag
(
nsIAtom
*
aPseudo
)
;
static
nsIAtom
*
GetNonInheritingPseudoAtom
(
NonInheriting
aBoxType
)
;
}
;
#
endif
