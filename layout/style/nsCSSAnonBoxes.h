#
ifndef
nsCSSAnonBoxes_h___
#
define
nsCSSAnonBoxes_h___
#
include
"
nsAtom
.
h
"
#
include
"
nsStaticAtom
.
h
"
class
nsICSSAnonBoxPseudo
:
public
nsAtom
{
}
;
class
nsCSSAnonBoxes
{
public
:
static
void
AddRefAtoms
(
)
;
static
bool
IsAnonBox
(
nsAtom
*
aAtom
)
;
#
ifdef
MOZ_XUL
static
bool
IsTreePseudoElement
(
nsAtom
*
aPseudo
)
;
#
endif
static
bool
IsNonElement
(
nsAtom
*
aPseudo
)
{
return
aPseudo
=
=
mozText
|
|
aPseudo
=
=
oofPlaceholder
|
|
aPseudo
=
=
firstLetterContinuation
;
}
#
define
CSS_ANON_BOX
(
name_
value_
)
\
NS_STATIC_ATOM_SUBCLASS_DECL
(
nsICSSAnonBoxPseudo
name_
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
typedef
uint8_t
NonInheritingBase
;
enum
class
NonInheriting
:
NonInheritingBase
{
#
define
CSS_ANON_BOX
(
_name
_value
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
_name
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
_Count
}
;
static
bool
IsNonInheritingAnonBox
(
nsAtom
*
aPseudo
)
{
return
#
define
CSS_ANON_BOX
(
_name
_value
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
_name
=
=
aPseudo
|
|
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
false
;
}
#
ifdef
DEBUG
static
bool
IsInheritingAnonBox
(
nsAtom
*
aPseudo
)
{
return
#
define
CSS_ANON_BOX
(
_name
_value
)
_name
=
=
aPseudo
|
|
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
false
;
}
#
endif
static
bool
IsWrapperAnonBox
(
nsAtom
*
aPseudo
)
{
return
aPseudo
&
&
(
#
define
CSS_ANON_BOX
(
_name
_value
)
#
define
CSS_WRAPPER_ANON_BOX
(
_name
_value
)
_name
=
=
aPseudo
|
|
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_WRAPPER_ANON_BOX
#
undef
CSS_ANON_BOX
false
)
;
}
static
NonInheriting
NonInheritingTypeForPseudoTag
(
nsAtom
*
aPseudo
)
;
static
nsAtom
*
GetNonInheritingPseudoAtom
(
NonInheriting
aBoxType
)
;
}
;
#
endif
