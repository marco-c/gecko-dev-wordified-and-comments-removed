#
ifndef
nsCSSAnonBoxes_h___
#
define
nsCSSAnonBoxes_h___
#
include
"
nsAtom
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
mozilla
/
PseudoStyleType
.
h
"
class
nsCSSAnonBoxes
{
using
PseudoStyleType
=
mozilla
:
:
PseudoStyleType
;
using
PseudoStyle
=
mozilla
:
:
PseudoStyle
;
public
:
#
ifdef
MOZ_XUL
static
bool
IsTreePseudoElement
(
nsAtom
*
aPseudo
)
;
#
endif
static
bool
IsNonElement
(
PseudoStyleType
aPseudo
)
{
return
aPseudo
=
=
PseudoStyleType
:
:
mozText
|
|
aPseudo
=
=
PseudoStyleType
:
:
oofPlaceholder
|
|
aPseudo
=
=
PseudoStyleType
:
:
firstLetterContinuation
;
}
enum
class
NonInheriting
:
uint8_t
{
#
define
CSS_ANON_BOX
(
_name
_value
)
#
define
CSS_NON_INHERITING_ANON_BOX
(
_name
_value
)
_name
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_NON_INHERITING_ANON_BOX
#
undef
CSS_ANON_BOX
_Count
}
;
static
NonInheriting
NonInheritingTypeForPseudoType
(
PseudoStyleType
aType
)
{
MOZ_ASSERT
(
PseudoStyle
:
:
IsNonInheritingAnonBox
(
aType
)
)
;
static_assert
(
sizeof
(
PseudoStyleType
)
=
=
sizeof
(
uint8_t
)
"
"
)
;
return
static_cast
<
NonInheriting
>
(
static_cast
<
uint8_t
>
(
aType
)
-
static_cast
<
uint8_t
>
(
PseudoStyleType
:
:
NonInheritingAnonBoxesStart
)
)
;
}
#
ifdef
DEBUG
static
void
AssertAtoms
(
)
;
#
endif
#
define
CSS_ANON_BOX
(
name_
value_
)
\
static
nsCSSAnonBoxPseudoStaticAtom
*
name_
(
)
{
\
return
const_cast
<
nsCSSAnonBoxPseudoStaticAtom
*
>
(
\
static_cast
<
const
nsCSSAnonBoxPseudoStaticAtom
*
>
(
\
nsGkAtoms
:
:
AnonBox_
#
#
name_
)
)
;
\
}
#
include
"
nsCSSAnonBoxList
.
h
"
#
undef
CSS_ANON_BOX
}
;
#
endif
