#
ifndef
mozilla_dom_MediaList_h
#
define
mozilla_dom_MediaList_h
#
include
"
mozilla
/
dom
/
BindingDeclarations
.
h
"
#
include
"
mozilla
/
ErrorResult
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsMediaQueryResultCacheKey
;
namespace
mozilla
{
class
StyleSheet
;
namespace
dom
{
class
Document
;
class
MediaList
final
:
public
nsISupports
public
nsWrapperCache
{
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
MediaList
)
explicit
MediaList
(
already_AddRefed
<
RawServoMediaList
>
aRawList
)
:
mRawList
(
aRawList
)
{
}
static
already_AddRefed
<
MediaList
>
Create
(
const
nsAString
&
aMedia
CallerType
aCallerType
=
CallerType
:
:
NonSystem
)
;
already_AddRefed
<
MediaList
>
Clone
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
nsISupports
*
GetParentObject
(
)
const
{
return
nullptr
;
}
void
GetText
(
nsAString
&
aMediaText
)
;
void
SetText
(
const
nsAString
&
aMediaText
)
;
bool
Matches
(
const
Document
&
)
const
;
void
SetStyleSheet
(
StyleSheet
*
aSheet
)
;
void
Stringify
(
nsAString
&
aString
)
{
GetMediaText
(
aString
)
;
}
void
GetMediaText
(
nsAString
&
aMediaText
)
;
void
SetMediaText
(
const
nsAString
&
aMediaText
)
;
uint32_t
Length
(
)
;
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsAString
&
aReturn
)
;
void
Item
(
uint32_t
aIndex
nsAString
&
aResult
)
;
void
DeleteMedium
(
const
nsAString
&
aMedium
ErrorResult
&
aRv
)
;
void
AppendMedium
(
const
nsAString
&
aMedium
ErrorResult
&
aRv
)
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
+
SizeOfExcludingThis
(
aMallocSizeOf
)
;
}
protected
:
MediaList
(
const
nsAString
&
aMedia
CallerType
)
;
MediaList
(
)
;
void
SetTextInternal
(
const
nsAString
&
aMediaText
CallerType
)
;
nsresult
Delete
(
const
nsAString
&
aOldMedium
)
;
nsresult
Append
(
const
nsAString
&
aNewMedium
)
;
~
MediaList
(
)
{
MOZ_ASSERT
(
!
mStyleSheet
"
Backpointer
should
have
been
cleared
"
)
;
}
StyleSheet
*
mStyleSheet
=
nullptr
;
private
:
template
<
typename
Func
>
inline
nsresult
DoMediaChange
(
Func
aCallback
)
;
RefPtr
<
RawServoMediaList
>
mRawList
;
}
;
}
}
#
endif
