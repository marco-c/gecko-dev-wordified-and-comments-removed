#
include
"
mozilla
/
css
/
ErrorReporter
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
Services
.
h
"
#
include
"
mozilla
/
SystemGroup
.
h
"
#
include
"
nsCSSScanner
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIFactory
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsIScriptError
.
h
"
#
include
"
nsISensitiveInfoHiddenURI
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsStyleUtil
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsNetUtil
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
namespace
{
class
ShortTermURISpecCache
:
public
Runnable
{
public
:
ShortTermURISpecCache
(
)
:
Runnable
(
"
ShortTermURISpecCache
"
)
mPending
(
false
)
{
}
nsString
const
&
GetSpec
(
nsIURI
*
aURI
)
{
if
(
mURI
!
=
aURI
)
{
mURI
=
aURI
;
if
(
NS_FAILED
(
NS_GetSanitizedURIStringFromURI
(
mURI
mSpec
)
)
)
{
mSpec
.
AssignLiteral
(
"
[
nsIURI
:
:
GetSpec
failed
]
"
)
;
}
}
return
mSpec
;
}
bool
IsInUse
(
)
const
{
return
mURI
!
=
nullptr
;
}
bool
IsPending
(
)
const
{
return
mPending
;
}
void
SetPending
(
)
{
mPending
=
true
;
}
NS_IMETHOD
Run
(
)
override
{
mURI
=
nullptr
;
mSpec
.
Truncate
(
)
;
mPending
=
false
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIURI
>
mURI
;
nsString
mSpec
;
bool
mPending
;
}
;
}
bool
ErrorReporter
:
:
sReportErrors
=
false
;
bool
ErrorReporter
:
:
sInitialized
=
false
;
static
nsIConsoleService
*
sConsoleService
;
static
nsIFactory
*
sScriptErrorFactory
;
static
nsIStringBundle
*
sStringBundle
;
static
ShortTermURISpecCache
*
sSpecCache
;
#
define
CSS_ERRORS_PREF
"
layout
.
css
.
report_errors
"
void
ErrorReporter
:
:
InitGlobals
(
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
!
sInitialized
"
should
not
have
been
called
"
)
;
sInitialized
=
true
;
if
(
NS_FAILED
(
Preferences
:
:
AddBoolVarCache
(
&
sReportErrors
CSS_ERRORS_PREF
true
)
)
)
{
return
;
}
nsCOMPtr
<
nsIConsoleService
>
cs
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
;
if
(
!
cs
)
{
return
;
}
nsCOMPtr
<
nsIFactory
>
sf
=
do_GetClassObject
(
NS_SCRIPTERROR_CONTRACTID
)
;
if
(
!
sf
)
{
return
;
}
nsCOMPtr
<
nsIStringBundleService
>
sbs
=
services
:
:
GetStringBundleService
(
)
;
if
(
!
sbs
)
{
return
;
}
nsCOMPtr
<
nsIStringBundle
>
sb
;
nsresult
rv
=
sbs
-
>
CreateBundle
(
"
chrome
:
/
/
global
/
locale
/
css
.
properties
"
getter_AddRefs
(
sb
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
sb
)
{
return
;
}
cs
.
forget
(
&
sConsoleService
)
;
sf
.
forget
(
&
sScriptErrorFactory
)
;
sb
.
forget
(
&
sStringBundle
)
;
}
namespace
mozilla
{
namespace
css
{
void
ErrorReporter
:
:
ReleaseGlobals
(
)
{
NS_IF_RELEASE
(
sConsoleService
)
;
NS_IF_RELEASE
(
sScriptErrorFactory
)
;
NS_IF_RELEASE
(
sStringBundle
)
;
NS_IF_RELEASE
(
sSpecCache
)
;
}
ErrorReporter
:
:
ErrorReporter
(
const
StyleSheet
*
aSheet
const
Loader
*
aLoader
nsIURI
*
aURI
)
:
mSheet
(
aSheet
)
mLoader
(
aLoader
)
mURI
(
aURI
)
mInnerWindowID
(
0
)
mErrorLineNumber
(
0
)
mPrevErrorLineNumber
(
0
)
mErrorColNumber
(
0
)
{
}
ErrorReporter
:
:
~
ErrorReporter
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
sSpecCache
&
&
sSpecCache
-
>
IsInUse
(
)
&
&
!
sSpecCache
-
>
IsPending
(
)
)
{
nsCOMPtr
<
nsIRunnable
>
runnable
(
sSpecCache
)
;
nsresult
rv
=
SystemGroup
:
:
Dispatch
(
TaskCategory
:
:
Other
runnable
.
forget
(
)
)
;
if
(
NS_FAILED
(
rv
)
)
{
sSpecCache
-
>
Run
(
)
;
}
else
{
sSpecCache
-
>
SetPending
(
)
;
}
}
}
bool
ErrorReporter
:
:
ShouldReportErrors
(
const
nsIDocument
&
aDoc
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsIDocShell
*
shell
=
aDoc
.
GetDocShell
(
)
;
if
(
!
shell
)
{
return
false
;
}
bool
report
=
false
;
shell
-
>
GetCssErrorReportingEnabled
(
&
report
)
;
return
report
;
}
bool
ErrorReporter
:
:
ShouldReportErrors
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
EnsureGlobalsInitialized
(
)
;
if
(
!
sReportErrors
)
{
return
false
;
}
if
(
mInnerWindowID
)
{
return
true
;
}
if
(
mSheet
)
{
nsINode
*
owner
=
mSheet
-
>
GetOwnerNode
(
)
?
mSheet
-
>
GetOwnerNode
(
)
:
mSheet
-
>
GetAssociatedDocument
(
)
;
if
(
owner
&
&
ShouldReportErrors
(
*
owner
-
>
OwnerDoc
(
)
)
)
{
return
true
;
}
}
if
(
mLoader
&
&
mLoader
-
>
GetDocument
(
)
&
&
ShouldReportErrors
(
*
mLoader
-
>
GetDocument
(
)
)
)
{
return
true
;
}
return
false
;
}
void
ErrorReporter
:
:
OutputError
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
MOZ_ASSERT
(
ShouldReportErrors
(
)
)
;
if
(
mError
.
IsEmpty
(
)
)
{
return
;
}
if
(
mInnerWindowID
=
=
0
&
&
(
mSheet
|
|
mLoader
)
)
{
if
(
mSheet
)
{
mInnerWindowID
=
mSheet
-
>
FindOwningWindowInnerID
(
)
;
}
if
(
mInnerWindowID
=
=
0
&
&
mLoader
)
{
nsIDocument
*
doc
=
mLoader
-
>
GetDocument
(
)
;
if
(
doc
)
{
mInnerWindowID
=
doc
-
>
InnerWindowID
(
)
;
}
}
mSheet
=
nullptr
;
mLoader
=
nullptr
;
}
if
(
mFileName
.
IsEmpty
(
)
)
{
if
(
mURI
)
{
if
(
!
sSpecCache
)
{
sSpecCache
=
new
ShortTermURISpecCache
;
NS_ADDREF
(
sSpecCache
)
;
}
mFileName
=
sSpecCache
-
>
GetSpec
(
mURI
)
;
mURI
=
nullptr
;
}
else
{
mFileName
.
AssignLiteral
(
"
from
DOM
"
)
;
}
}
nsresult
rv
;
nsCOMPtr
<
nsIScriptError
>
errorObject
=
do_CreateInstance
(
sScriptErrorFactory
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
errorObject
-
>
InitWithSanitizedSource
(
mError
mFileName
mErrorLine
mErrorLineNumber
mErrorColNumber
nsIScriptError
:
:
warningFlag
"
CSS
Parser
"
mInnerWindowID
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
sConsoleService
-
>
LogMessage
(
errorObject
)
;
}
}
ClearError
(
)
;
}
void
ErrorReporter
:
:
OutputError
(
uint32_t
aLineNumber
uint32_t
aColNumber
const
nsACString
&
aSourceLine
)
{
mErrorLineNumber
=
aLineNumber
;
mErrorColNumber
=
aColNumber
;
if
(
mErrorLine
.
IsEmpty
(
)
|
|
mErrorLineNumber
!
=
mPrevErrorLineNumber
)
{
mErrorLine
.
Truncate
(
)
;
if
(
!
AppendUTF8toUTF16
(
aSourceLine
mErrorLine
fallible
)
)
{
mErrorLine
.
Truncate
(
)
;
}
mPrevErrorLineNumber
=
aLineNumber
;
}
OutputError
(
)
;
}
void
ErrorReporter
:
:
ClearError
(
)
{
mError
.
Truncate
(
)
;
}
void
ErrorReporter
:
:
AddToError
(
const
nsString
&
aErrorText
)
{
MOZ_ASSERT
(
ShouldReportErrors
(
)
)
;
if
(
mError
.
IsEmpty
(
)
)
{
mError
=
aErrorText
;
}
else
{
mError
.
AppendLiteral
(
"
"
)
;
mError
.
Append
(
aErrorText
)
;
}
}
void
ErrorReporter
:
:
ReportUnexpected
(
const
char
*
aMessage
)
{
MOZ_ASSERT
(
ShouldReportErrors
(
)
)
;
nsAutoString
str
;
sStringBundle
-
>
GetStringFromName
(
aMessage
str
)
;
AddToError
(
str
)
;
}
void
ErrorReporter
:
:
ReportUnexpectedUnescaped
(
const
char
*
aMessage
const
nsAutoString
&
aParam
)
{
MOZ_ASSERT
(
ShouldReportErrors
(
)
)
;
const
char16_t
*
params
[
1
]
=
{
aParam
.
get
(
)
}
;
nsAutoString
str
;
sStringBundle
-
>
FormatStringFromName
(
aMessage
params
ArrayLength
(
params
)
str
)
;
AddToError
(
str
)
;
}
}
}
