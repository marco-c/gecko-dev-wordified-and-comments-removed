#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
nsAppDirectoryServiceDefs
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StyleSheet
.
h
"
#
include
"
mozilla
/
StyleSheetInlines
.
h
"
#
include
"
mozilla
/
Telemetry
.
h
"
#
include
"
mozilla
/
css
/
Loader
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
ipc
/
SharedMemory
.
h
"
#
include
"
MainThreadUtils
.
h
"
#
include
"
nsColor
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIConsoleService
.
h
"
#
include
"
nsIFile
.
h
"
#
include
"
nsIObserverService
.
h
"
#
include
"
nsIXULRuntime
.
h
"
#
include
"
nsNetUtil
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPrintfCString
.
h
"
#
include
"
nsServiceManagerUtils
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
include
<
mozilla
/
ServoBindings
.
h
>
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
NS_IMPL_ISUPPORTS
(
nsLayoutStylesheetCache
nsIObserver
nsIMemoryReporter
)
nsresult
nsLayoutStylesheetCache
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
if
(
!
strcmp
(
aTopic
"
profile
-
before
-
change
"
)
)
{
mUserContentSheet
=
nullptr
;
mUserChromeSheet
=
nullptr
;
}
else
if
(
!
strcmp
(
aTopic
"
profile
-
do
-
change
"
)
)
{
InitFromProfile
(
)
;
}
else
{
MOZ_ASSERT_UNREACHABLE
(
"
Unexpected
observer
topic
.
"
)
;
}
return
NS_OK
;
}
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
\
NotNull
<
StyleSheet
*
>
nsLayoutStylesheetCache
:
:
identifier_
#
#
Sheet
(
)
{
\
if
(
!
m
#
#
identifier_
#
#
Sheet
)
{
\
LoadSheetURL
(
url_
&
m
#
#
identifier_
#
#
Sheet
eAgentSheetFeatures
eCrash
)
;
\
}
\
return
WrapNotNull
(
m
#
#
identifier_
#
#
Sheet
)
;
\
}
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
StyleSheet
*
nsLayoutStylesheetCache
:
:
GetUserContentSheet
(
)
{
return
mUserContentSheet
;
}
StyleSheet
*
nsLayoutStylesheetCache
:
:
GetUserChromeSheet
(
)
{
return
mUserChromeSheet
;
}
StyleSheet
*
nsLayoutStylesheetCache
:
:
ChromePreferenceSheet
(
)
{
if
(
!
mChromePreferenceSheet
)
{
BuildPreferenceSheet
(
&
mChromePreferenceSheet
PreferenceSheet
:
:
ChromePrefs
(
)
)
;
}
return
mChromePreferenceSheet
;
}
StyleSheet
*
nsLayoutStylesheetCache
:
:
ContentPreferenceSheet
(
)
{
if
(
!
mContentPreferenceSheet
)
{
BuildPreferenceSheet
(
&
mContentPreferenceSheet
PreferenceSheet
:
:
ContentPrefs
(
)
)
;
}
return
mContentPreferenceSheet
;
}
void
nsLayoutStylesheetCache
:
:
Shutdown
(
)
{
gCSSLoader
=
nullptr
;
NS_WARNING_ASSERTION
(
!
gStyleCache
|
|
!
gUserContentSheetURL
"
Got
the
URL
but
never
used
?
"
)
;
gStyleCache
=
nullptr
;
gUserContentSheetURL
=
nullptr
;
for
(
auto
&
r
:
URLExtraData
:
:
sShared
)
{
r
=
nullptr
;
}
sSharedMemory
=
nullptr
;
}
void
nsLayoutStylesheetCache
:
:
SetUserContentCSSURL
(
nsIURI
*
aURI
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
"
Only
used
in
content
processes
.
"
)
;
gUserContentSheetURL
=
aURI
;
}
MOZ_DEFINE_MALLOC_SIZE_OF
(
LayoutStylesheetCacheMallocSizeOf
)
NS_IMETHODIMP
nsLayoutStylesheetCache
:
:
CollectReports
(
nsIHandleReportCallback
*
aHandleReport
nsISupports
*
aData
bool
aAnonymize
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
layout
/
style
-
sheet
-
cache
/
unshared
"
KIND_HEAP
UNITS_BYTES
SizeOfIncludingThis
(
LayoutStylesheetCacheMallocSizeOf
)
"
Memory
used
for
built
-
in
style
sheets
that
are
not
"
"
shared
between
processes
.
"
)
;
if
(
XRE_IsParentProcess
(
)
)
{
MOZ_COLLECT_REPORT
(
"
explicit
/
layout
/
style
-
sheet
-
cache
/
shared
"
KIND_NONHEAP
UNITS_BYTES
mSharedMemory
?
mUsedSharedMemory
:
0
"
Memory
used
for
built
-
in
style
sheets
that
are
shared
to
"
"
child
processes
.
"
)
;
}
return
NS_OK
;
}
size_t
nsLayoutStylesheetCache
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
size_t
n
=
aMallocSizeOf
(
this
)
;
#
define
MEASURE
(
s
)
n
+
=
s
?
s
-
>
SizeOfIncludingThis
(
aMallocSizeOf
)
:
0
;
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
MEASURE
(
m
#
#
identifier_
#
#
Sheet
)
;
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
MEASURE
(
mChromePreferenceSheet
)
;
MEASURE
(
mContentPreferenceSheet
)
;
MEASURE
(
mUserChromeSheet
)
;
MEASURE
(
mUserContentSheet
)
;
return
n
;
}
nsLayoutStylesheetCache
:
:
nsLayoutStylesheetCache
(
)
:
mUsedSharedMemory
(
0
)
{
nsCOMPtr
<
nsIObserverService
>
obsSvc
=
mozilla
:
:
services
:
:
GetObserverService
(
)
;
NS_ASSERTION
(
obsSvc
"
No
global
observer
service
?
"
)
;
if
(
obsSvc
)
{
obsSvc
-
>
AddObserver
(
this
"
profile
-
before
-
change
"
false
)
;
obsSvc
-
>
AddObserver
(
this
"
profile
-
do
-
change
"
false
)
;
}
InitFromProfile
(
)
;
if
(
XRE_IsParentProcess
(
)
)
{
XULSheet
(
)
;
}
if
(
gUserContentSheetURL
)
{
MOZ_ASSERT
(
XRE_IsContentProcess
(
)
"
Only
used
in
content
processes
.
"
)
;
LoadSheet
(
gUserContentSheetURL
&
mUserContentSheet
eUserSheetFeatures
eLogToConsole
)
;
gUserContentSheetURL
=
nullptr
;
}
if
(
StaticPrefs
:
:
layout_css_shared_memory_ua_sheets_enabled
(
)
)
{
if
(
XRE_IsParentProcess
(
)
)
{
MOZ_ASSERT
(
!
sSharedMemory
)
;
InitSharedSheetsInParent
(
)
;
}
else
if
(
sSharedMemory
)
{
mSharedMemory
=
sSharedMemory
.
forget
(
)
;
}
}
if
(
mSharedMemory
)
{
Header
*
header
=
static_cast
<
Header
*
>
(
mSharedMemory
-
>
mShm
.
memory
(
)
)
;
MOZ_RELEASE_ASSERT
(
header
-
>
mMagic
=
=
Header
:
:
kMagic
)
;
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
\
if
(
shared_
)
{
\
LoadSheetFromSharedMemory
(
url_
&
m
#
#
identifier_
#
#
Sheet
\
eAgentSheetFeatures
mSharedMemory
header
\
UserAgentStyleSheetID
:
:
identifier_
)
;
\
}
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
}
}
void
nsLayoutStylesheetCache
:
:
LoadSheetFromSharedMemory
(
const
char
*
aURL
RefPtr
<
StyleSheet
>
*
aSheet
SheetParsingMode
aParsingMode
Shm
*
aSharedMemory
Header
*
aHeader
UserAgentStyleSheetID
aSheetID
)
{
auto
i
=
size_t
(
aSheetID
)
;
auto
sheet
=
MakeRefPtr
<
StyleSheet
>
(
aParsingMode
CORS_NONE
mozilla
:
:
net
:
:
RP_Unset
dom
:
:
SRIMetadata
(
)
)
;
nsCOMPtr
<
nsIURI
>
uri
;
MOZ_ALWAYS_SUCCEEDS
(
NS_NewURI
(
getter_AddRefs
(
uri
)
aURL
)
)
;
sheet
-
>
SetPrincipal
(
nsContentUtils
:
:
GetSystemPrincipal
(
)
)
;
sheet
-
>
SetURIs
(
uri
uri
uri
)
;
sheet
-
>
SetSharedContents
(
aSharedMemory
aHeader
-
>
mSheets
[
i
]
)
;
sheet
-
>
SetComplete
(
)
;
URLExtraData
:
:
sShared
[
i
]
=
sheet
-
>
URLData
(
)
;
*
aSheet
=
sheet
.
forget
(
)
;
}
void
nsLayoutStylesheetCache
:
:
InitSharedSheetsInParent
(
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
mSharedMemory
=
new
Shm
(
)
;
mSharedMemory
-
>
mShm
.
Create
(
kSharedMemorySize
)
;
#
ifdef
HAVE_64BIT_BUILD
constexpr
size_t
kOffset
=
0x200000000ULL
;
#
else
constexpr
size_t
kOffset
=
0x20000000
;
#
endif
void
*
address
=
nullptr
;
if
(
void
*
p
=
base
:
:
SharedMemory
:
:
FindFreeAddressSpace
(
2
*
kOffset
)
)
{
address
=
reinterpret_cast
<
void
*
>
(
uintptr_t
(
p
)
+
kOffset
)
;
}
if
(
!
mSharedMemory
-
>
mShm
.
Map
(
kSharedMemorySize
address
)
)
{
mSharedMemory
-
>
mShm
.
Map
(
kSharedMemorySize
)
;
}
Header
*
header
=
static_cast
<
Header
*
>
(
mSharedMemory
-
>
mShm
.
memory
(
)
)
;
header
-
>
mMagic
=
Header
:
:
kMagic
;
#
ifdef
DEBUG
for
(
auto
ptr
:
header
-
>
mSheets
)
{
MOZ_RELEASE_ASSERT
(
!
ptr
"
expected
shared
memory
to
have
been
zeroed
"
)
;
}
#
endif
UniquePtr
<
RawServoSharedMemoryBuilder
>
builder
(
Servo_SharedMemoryBuilder_Create
(
header
-
>
mBuffer
kSharedMemorySize
-
offsetof
(
Header
mBuffer
)
)
)
;
#
define
STYLE_SHEET
(
identifier_
url_
shared_
)
\
if
(
shared_
)
{
\
StyleSheet
*
sheet
=
identifier_
#
#
Sheet
(
)
;
\
size_t
i
=
size_t
(
UserAgentStyleSheetID
:
:
identifier_
)
;
\
URLExtraData
:
:
sShared
[
i
]
=
sheet
-
>
URLData
(
)
;
\
header
-
>
mSheets
[
i
]
=
sheet
-
>
ToShared
(
builder
.
get
(
)
)
;
\
}
#
include
"
mozilla
/
UserAgentStyleSheetList
.
h
"
#
undef
STYLE_SHEET
size_t
pageSize
=
ipc
:
:
SharedMemory
:
:
SystemPageSize
(
)
;
mUsedSharedMemory
=
(
Servo_SharedMemoryBuilder_GetLength
(
builder
.
get
(
)
)
+
pageSize
-
1
)
&
~
(
pageSize
-
1
)
;
}
nsLayoutStylesheetCache
:
:
~
nsLayoutStylesheetCache
(
)
{
mozilla
:
:
UnregisterWeakMemoryReporter
(
this
)
;
}
void
nsLayoutStylesheetCache
:
:
InitMemoryReporter
(
)
{
mozilla
:
:
RegisterWeakMemoryReporter
(
this
)
;
}
nsLayoutStylesheetCache
*
nsLayoutStylesheetCache
:
:
Singleton
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
if
(
!
gStyleCache
)
{
gStyleCache
=
new
nsLayoutStylesheetCache
;
gStyleCache
-
>
InitMemoryReporter
(
)
;
}
return
gStyleCache
;
}
void
nsLayoutStylesheetCache
:
:
InitFromProfile
(
)
{
nsCOMPtr
<
nsIXULRuntime
>
appInfo
=
do_GetService
(
"
mozilla
.
org
/
xre
/
app
-
info
;
1
"
)
;
if
(
appInfo
)
{
bool
inSafeMode
=
false
;
appInfo
-
>
GetInSafeMode
(
&
inSafeMode
)
;
if
(
inSafeMode
)
return
;
}
nsCOMPtr
<
nsIFile
>
contentFile
;
nsCOMPtr
<
nsIFile
>
chromeFile
;
NS_GetSpecialDirectory
(
NS_APP_USER_CHROME_DIR
getter_AddRefs
(
contentFile
)
)
;
if
(
!
contentFile
)
{
return
;
}
contentFile
-
>
Clone
(
getter_AddRefs
(
chromeFile
)
)
;
if
(
!
chromeFile
)
return
;
contentFile
-
>
Append
(
NS_LITERAL_STRING
(
"
userContent
.
css
"
)
)
;
chromeFile
-
>
Append
(
NS_LITERAL_STRING
(
"
userChrome
.
css
"
)
)
;
LoadSheetFile
(
contentFile
&
mUserContentSheet
eUserSheetFeatures
eLogToConsole
)
;
LoadSheetFile
(
chromeFile
&
mUserChromeSheet
eUserSheetFeatures
eLogToConsole
)
;
if
(
XRE_IsParentProcess
(
)
)
{
Telemetry
:
:
Accumulate
(
Telemetry
:
:
USER_CHROME_CSS_LOADED
mUserChromeSheet
!
=
nullptr
)
;
}
}
void
nsLayoutStylesheetCache
:
:
LoadSheetURL
(
const
char
*
aURL
RefPtr
<
StyleSheet
>
*
aSheet
SheetParsingMode
aParsingMode
FailureAction
aFailureAction
)
{
nsCOMPtr
<
nsIURI
>
uri
;
NS_NewURI
(
getter_AddRefs
(
uri
)
aURL
)
;
LoadSheet
(
uri
aSheet
aParsingMode
aFailureAction
)
;
if
(
!
aSheet
)
{
NS_ERROR
(
nsPrintfCString
(
"
Could
not
load
%
s
"
aURL
)
.
get
(
)
)
;
}
}
void
nsLayoutStylesheetCache
:
:
LoadSheetFile
(
nsIFile
*
aFile
RefPtr
<
StyleSheet
>
*
aSheet
SheetParsingMode
aParsingMode
FailureAction
aFailureAction
)
{
bool
exists
=
false
;
aFile
-
>
Exists
(
&
exists
)
;
if
(
!
exists
)
return
;
nsCOMPtr
<
nsIURI
>
uri
;
NS_NewFileURI
(
getter_AddRefs
(
uri
)
aFile
)
;
LoadSheet
(
uri
aSheet
aParsingMode
aFailureAction
)
;
}
static
void
ErrorLoadingSheet
(
nsIURI
*
aURI
const
char
*
aMsg
FailureAction
aFailureAction
)
{
nsPrintfCString
errorMessage
(
"
%
s
loading
built
-
in
stylesheet
'
%
s
'
"
aMsg
aURI
?
aURI
-
>
GetSpecOrDefault
(
)
.
get
(
)
:
"
"
)
;
if
(
aFailureAction
=
=
eLogToConsole
)
{
nsCOMPtr
<
nsIConsoleService
>
cs
=
do_GetService
(
NS_CONSOLESERVICE_CONTRACTID
)
;
if
(
cs
)
{
cs
-
>
LogStringMessage
(
NS_ConvertUTF8toUTF16
(
errorMessage
)
.
get
(
)
)
;
return
;
}
}
MOZ_CRASH_UNSAFE
(
errorMessage
.
get
(
)
)
;
}
void
nsLayoutStylesheetCache
:
:
LoadSheet
(
nsIURI
*
aURI
RefPtr
<
StyleSheet
>
*
aSheet
SheetParsingMode
aParsingMode
FailureAction
aFailureAction
)
{
if
(
!
aURI
)
{
ErrorLoadingSheet
(
aURI
"
null
URI
"
eCrash
)
;
return
;
}
if
(
!
gCSSLoader
)
{
gCSSLoader
=
new
Loader
;
if
(
!
gCSSLoader
)
{
ErrorLoadingSheet
(
aURI
"
no
Loader
"
eCrash
)
;
return
;
}
}
nsresult
rv
=
gCSSLoader
-
>
LoadSheetSync
(
aURI
aParsingMode
true
aSheet
)
;
if
(
NS_FAILED
(
rv
)
)
{
ErrorLoadingSheet
(
aURI
nsPrintfCString
(
"
LoadSheetSync
failed
with
error
%
"
PRIx32
static_cast
<
uint32_t
>
(
rv
)
)
.
get
(
)
aFailureAction
)
;
}
}
void
nsLayoutStylesheetCache
:
:
InvalidatePreferenceSheets
(
)
{
if
(
gStyleCache
)
{
gStyleCache
-
>
mContentPreferenceSheet
=
nullptr
;
gStyleCache
-
>
mChromePreferenceSheet
=
nullptr
;
}
}
void
nsLayoutStylesheetCache
:
:
BuildPreferenceSheet
(
RefPtr
<
StyleSheet
>
*
aSheet
const
PreferenceSheet
:
:
Prefs
&
aPrefs
)
{
*
aSheet
=
new
StyleSheet
(
eAgentSheetFeatures
CORS_NONE
mozilla
:
:
net
:
:
RP_Unset
dom
:
:
SRIMetadata
(
)
)
;
StyleSheet
*
sheet
=
*
aSheet
;
nsCOMPtr
<
nsIURI
>
uri
;
NS_NewURI
(
getter_AddRefs
(
uri
)
"
about
:
PreferenceStyleSheet
"
nullptr
)
;
MOZ_ASSERT
(
uri
"
URI
creation
shouldn
'
t
fail
"
)
;
sheet
-
>
SetURIs
(
uri
uri
uri
)
;
sheet
-
>
SetComplete
(
)
;
static
const
uint32_t
kPreallocSize
=
1024
;
nsCString
sheetText
;
sheetText
.
SetCapacity
(
kPreallocSize
)
;
#
define
NS_GET_R_G_B
(
color_
)
\
NS_GET_R
(
color_
)
NS_GET_G
(
color_
)
NS_GET_B
(
color_
)
sheetText
.
AppendLiteral
(
"
namespace
url
(
http
:
/
/
www
.
w3
.
org
/
1999
/
xhtml
)
;
\
n
"
"
namespace
svg
url
(
http
:
/
/
www
.
w3
.
org
/
2000
/
svg
)
;
\
n
"
)
;
nscolor
linkColor
=
aPrefs
.
mLinkColor
;
nscolor
activeColor
=
aPrefs
.
mActiveLinkColor
;
nscolor
visitedColor
=
aPrefs
.
mVisitedLinkColor
;
sheetText
.
AppendPrintf
(
"
*
|
*
:
link
{
color
:
#
%
02x
%
02x
%
02x
;
}
\
n
"
"
*
|
*
:
any
-
link
:
active
{
color
:
#
%
02x
%
02x
%
02x
;
}
\
n
"
"
*
|
*
:
visited
{
color
:
#
%
02x
%
02x
%
02x
;
}
\
n
"
NS_GET_R_G_B
(
linkColor
)
NS_GET_R_G_B
(
activeColor
)
NS_GET_R_G_B
(
visitedColor
)
)
;
bool
underlineLinks
=
aPrefs
.
mUnderlineLinks
;
sheetText
.
AppendPrintf
(
"
*
|
*
:
any
-
link
%
s
{
text
-
decoration
:
%
s
;
}
\
n
"
underlineLinks
?
"
:
not
(
svg
|
a
)
"
:
"
"
underlineLinks
?
"
underline
"
:
"
none
"
)
;
bool
focusRingOnAnything
=
aPrefs
.
mFocusRingOnAnything
;
uint8_t
focusRingWidth
=
aPrefs
.
mFocusRingWidth
;
uint8_t
focusRingStyle
=
aPrefs
.
mFocusRingStyle
;
if
(
(
focusRingWidth
!
=
1
&
&
focusRingWidth
<
=
4
)
|
|
focusRingOnAnything
)
{
if
(
focusRingWidth
!
=
1
)
{
sheetText
.
AppendPrintf
(
"
button
:
:
-
moz
-
focus
-
inner
input
[
type
=
\
"
reset
\
"
]
:
:
-
moz
-
focus
-
inner
"
"
input
[
type
=
\
"
button
\
"
]
:
:
-
moz
-
focus
-
inner
"
"
input
[
type
=
\
"
submit
\
"
]
:
:
-
moz
-
focus
-
inner
{
"
"
border
:
%
dpx
%
s
transparent
!
important
;
}
\
n
"
focusRingWidth
focusRingStyle
=
=
0
?
"
solid
"
:
"
dotted
"
)
;
sheetText
.
AppendLiteral
(
"
button
:
focus
:
:
-
moz
-
focus
-
inner
"
"
input
[
type
=
\
"
reset
\
"
]
:
focus
:
:
-
moz
-
focus
-
inner
"
"
input
[
type
=
\
"
button
\
"
]
:
focus
:
:
-
moz
-
focus
-
inner
"
"
input
[
type
=
\
"
submit
\
"
]
:
focus
:
:
-
moz
-
focus
-
inner
{
"
"
border
-
color
:
ButtonText
!
important
;
}
\
n
"
)
;
}
sheetText
.
AppendPrintf
(
"
%
s
{
outline
:
%
dpx
%
s
!
important
;
%
s
}
\
n
"
focusRingOnAnything
?
"
:
focus
"
:
"
*
|
*
:
link
:
focus
*
|
*
:
visited
:
focus
"
focusRingWidth
focusRingStyle
=
=
0
?
"
solid
-
moz
-
mac
-
focusring
"
:
"
dotted
WindowText
"
focusRingStyle
=
=
0
?
"
-
moz
-
outline
-
radius
:
3px
;
outline
-
offset
:
1px
;
"
:
"
"
)
;
}
if
(
aPrefs
.
mUseFocusColors
)
{
nscolor
focusText
=
aPrefs
.
mFocusTextColor
;
nscolor
focusBG
=
aPrefs
.
mFocusBackgroundColor
;
sheetText
.
AppendPrintf
(
"
*
:
focus
*
:
focus
>
font
{
color
:
#
%
02x
%
02x
%
02x
!
important
;
"
"
background
-
color
:
#
%
02x
%
02x
%
02x
!
important
;
}
\
n
"
NS_GET_R_G_B
(
focusText
)
NS_GET_R_G_B
(
focusBG
)
)
;
}
NS_ASSERTION
(
sheetText
.
Length
(
)
<
=
kPreallocSize
"
kPreallocSize
should
be
big
enough
to
build
preference
style
"
"
sheet
without
reallocation
"
)
;
sheet
-
>
ParseSheetSync
(
nullptr
sheetText
nullptr
0
)
;
#
undef
NS_GET_R_G_B
}
void
nsLayoutStylesheetCache
:
:
SetSharedMemory
(
const
base
:
:
SharedMemoryHandle
&
aHandle
uintptr_t
aAddress
)
{
MOZ_ASSERT
(
!
XRE_IsParentProcess
(
)
)
;
MOZ_ASSERT
(
!
gStyleCache
"
Too
late
nsLayoutStylesheetCache
already
created
!
"
)
;
MOZ_ASSERT
(
!
sSharedMemory
"
Shouldn
'
t
call
this
more
than
once
"
)
;
RefPtr
<
Shm
>
shm
=
new
Shm
(
)
;
if
(
shm
-
>
mShm
.
SetHandle
(
aHandle
true
)
&
&
shm
-
>
mShm
.
Map
(
kSharedMemorySize
reinterpret_cast
<
void
*
>
(
aAddress
)
)
)
{
sSharedMemory
=
shm
.
forget
(
)
;
}
}
bool
nsLayoutStylesheetCache
:
:
ShareToProcess
(
base
:
:
ProcessId
aProcessId
base
:
:
SharedMemoryHandle
*
aHandle
)
{
MOZ_ASSERT
(
XRE_IsParentProcess
(
)
)
;
return
mSharedMemory
&
&
mSharedMemory
-
>
mShm
.
ShareToProcess
(
aProcessId
aHandle
)
;
}
mozilla
:
:
StaticRefPtr
<
nsLayoutStylesheetCache
>
nsLayoutStylesheetCache
:
:
gStyleCache
;
mozilla
:
:
StaticRefPtr
<
mozilla
:
:
css
:
:
Loader
>
nsLayoutStylesheetCache
:
:
gCSSLoader
;
mozilla
:
:
StaticRefPtr
<
nsIURI
>
nsLayoutStylesheetCache
:
:
gUserContentSheetURL
;
StaticRefPtr
<
nsLayoutStylesheetCacheShm
>
nsLayoutStylesheetCache
:
:
sSharedMemory
;
