#
ifndef
nsCSSRuleProcessor_h_
#
define
nsCSSRuleProcessor_h_
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
EventStates
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
RefCountType
.
h
"
#
include
"
mozilla
/
SheetType
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsExpirationTracker
.
h
"
#
include
"
nsMediaList
.
h
"
#
include
"
nsIStyleRuleProcessor
.
h
"
#
include
"
nsRuleWalker
.
h
"
#
include
"
nsTArray
.
h
"
struct
CascadeEnumData
;
struct
ElementDependentRuleProcessorData
;
struct
nsCSSSelector
;
struct
nsCSSSelectorList
;
struct
nsFontFaceRuleContainer
;
struct
RuleCascadeData
;
struct
TreeMatchContext
;
class
nsCSSKeyframesRule
;
class
nsCSSPageRule
;
class
nsCSSFontFeatureValuesRule
;
class
nsCSSCounterStyleRule
;
namespace
mozilla
{
class
CSSStyleSheet
;
enum
class
CSSPseudoElementType
:
uint8_t
;
enum
class
CSSPseudoClassType
:
uint8_t
;
namespace
css
{
class
DocumentRule
;
}
}
class
nsCSSRuleProcessor
:
public
nsIStyleRuleProcessor
{
public
:
typedef
nsTArray
<
RefPtr
<
mozilla
:
:
CSSStyleSheet
>
>
sheet_array_type
;
nsCSSRuleProcessor
(
const
sheet_array_type
&
aSheets
mozilla
:
:
SheetType
aSheetType
mozilla
:
:
dom
:
:
Element
*
aScopeElement
nsCSSRuleProcessor
*
aPreviousCSSRuleProcessor
bool
aIsShared
=
false
)
;
nsCSSRuleProcessor
(
sheet_array_type
&
&
aSheets
mozilla
:
:
SheetType
aSheetType
mozilla
:
:
dom
:
:
Element
*
aScopeElement
nsCSSRuleProcessor
*
aPreviousCSSRuleProcessor
bool
aIsShared
=
false
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_CLASS
(
nsCSSRuleProcessor
)
public
:
nsresult
ClearRuleCascades
(
)
;
static
bool
SelectorListMatches
(
mozilla
:
:
dom
:
:
Element
*
aElement
TreeMatchContext
&
aTreeMatchContext
nsCSSSelectorList
*
aSelectorList
)
;
static
mozilla
:
:
EventStates
GetContentState
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
bool
aUsingPrivateBrowsing
)
;
static
mozilla
:
:
EventStates
GetContentState
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
const
TreeMatchContext
&
aTreeMatchContext
)
;
static
mozilla
:
:
EventStates
GetContentState
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
static
mozilla
:
:
EventStates
GetContentStateForVisitedHandling
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
nsRuleWalker
:
:
VisitedHandlingType
aVisitedHandling
bool
aIsRelevantLink
)
;
static
bool
IsLink
(
const
mozilla
:
:
dom
:
:
Element
*
aElement
)
;
static
bool
RestrictedSelectorMatches
(
mozilla
:
:
dom
:
:
Element
*
aElement
nsCSSSelector
*
aSelector
TreeMatchContext
&
aTreeMatchContext
)
;
virtual
void
RulesMatching
(
ElementRuleProcessorData
*
aData
)
override
;
virtual
void
RulesMatching
(
PseudoElementRuleProcessorData
*
aData
)
override
;
virtual
void
RulesMatching
(
AnonBoxRuleProcessorData
*
aData
)
override
;
#
ifdef
MOZ_XUL
virtual
void
RulesMatching
(
XULTreeRuleProcessorData
*
aData
)
override
;
#
endif
virtual
nsRestyleHint
HasStateDependentStyle
(
StateRuleProcessorData
*
aData
)
override
;
virtual
nsRestyleHint
HasStateDependentStyle
(
PseudoElementStateRuleProcessorData
*
aData
)
override
;
virtual
bool
HasDocumentStateDependentStyle
(
StateRuleProcessorData
*
aData
)
override
;
virtual
nsRestyleHint
HasAttributeDependentStyle
(
AttributeRuleProcessorData
*
aData
mozilla
:
:
RestyleHintData
&
aRestyleHintDataResult
)
override
;
virtual
bool
MediumFeaturesChanged
(
nsPresContext
*
aPresContext
)
override
;
mozilla
:
:
UniquePtr
<
nsMediaQueryResultCacheKey
>
CloneMQCacheKey
(
)
;
virtual
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
MOZ_MUST_OVERRIDE
override
;
virtual
size_t
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
mallocSizeOf
)
const
MOZ_MUST_OVERRIDE
override
;
bool
AppendFontFaceRules
(
nsPresContext
*
aPresContext
nsTArray
<
nsFontFaceRuleContainer
>
&
aArray
)
;
nsCSSKeyframesRule
*
KeyframesRuleForName
(
nsPresContext
*
aPresContext
const
nsAtom
*
aName
)
;
nsCSSCounterStyleRule
*
CounterStyleRuleForName
(
nsPresContext
*
aPresContext
nsAtom
*
aName
)
;
bool
AppendPageRules
(
nsPresContext
*
aPresContext
nsTArray
<
nsCSSPageRule
*
>
&
aArray
)
;
bool
AppendFontFeatureValuesRules
(
nsPresContext
*
aPresContext
nsTArray
<
nsCSSFontFeatureValuesRule
*
>
&
aArray
)
;
void
TakeDocumentRulesAndCacheKey
(
nsPresContext
*
aPresContext
nsTArray
<
mozilla
:
:
css
:
:
DocumentRule
*
>
&
aDocumentRules
nsDocumentRuleResultCacheKey
&
aDocumentRuleResultCacheKey
)
;
bool
IsShared
(
)
const
{
return
mIsShared
;
}
nsExpirationState
*
GetExpirationState
(
)
{
return
&
mExpirationState
;
}
void
AddStyleSetRef
(
)
;
void
ReleaseStyleSetRef
(
)
;
void
SetInRuleProcessorCache
(
bool
aVal
)
{
MOZ_ASSERT
(
mIsShared
)
;
mInRuleProcessorCache
=
aVal
;
}
bool
IsInRuleProcessorCache
(
)
const
{
return
mInRuleProcessorCache
;
}
bool
IsUsedByMultipleStyleSets
(
)
const
{
return
mStyleSetRefCnt
>
1
;
}
struct
StateSelector
{
StateSelector
(
mozilla
:
:
EventStates
aStates
nsCSSSelector
*
aSelector
)
:
mStates
(
aStates
)
mSelector
(
aSelector
)
{
}
mozilla
:
:
EventStates
mStates
;
nsCSSSelector
*
mSelector
;
}
;
protected
:
virtual
~
nsCSSRuleProcessor
(
)
;
private
:
static
bool
CascadeSheet
(
mozilla
:
:
CSSStyleSheet
*
aSheet
CascadeEnumData
*
aData
)
;
RuleCascadeData
*
GetRuleCascade
(
nsPresContext
*
aPresContext
)
;
void
RefreshRuleCascade
(
nsPresContext
*
aPresContext
)
;
nsRestyleHint
HasStateDependentStyle
(
ElementDependentRuleProcessorData
*
aData
mozilla
:
:
dom
:
:
Element
*
aStatefulElement
mozilla
:
:
CSSPseudoElementType
aPseudoType
mozilla
:
:
EventStates
aStateMask
)
;
void
ClearSheets
(
)
;
sheet_array_type
mSheets
;
RuleCascadeData
*
mRuleCascades
;
mozilla
:
:
UniquePtr
<
nsMediaQueryResultCacheKey
>
mPreviousCacheKey
;
nsPresContext
*
mLastPresContext
;
nsTArray
<
mozilla
:
:
css
:
:
DocumentRule
*
>
mDocumentRules
;
nsDocumentRuleResultCacheKey
mDocumentCacheKey
;
nsExpirationState
mExpirationState
;
MozRefCountType
mStyleSetRefCnt
;
mozilla
:
:
SheetType
mSheetType
;
const
bool
mIsShared
;
bool
mMustGatherDocumentRules
;
bool
mInRuleProcessorCache
;
#
ifdef
DEBUG
bool
mDocumentRulesAndCacheKeyValid
;
#
endif
}
;
#
endif
