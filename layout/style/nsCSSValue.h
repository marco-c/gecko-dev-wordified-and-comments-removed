#
ifndef
nsCSSValue_h___
#
define
nsCSSValue_h___
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
FontPropertyTypes
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
URLExtraData
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCSSKeywords
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsCoord
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStringBuffer
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
nsStyleCoord
.
h
"
#
include
"
gfxFontFamilyList
.
h
"
#
include
<
type_traits
>
class
imgRequestProxy
;
class
nsAtom
;
class
nsIContent
;
class
nsIPrincipal
;
class
nsIURI
;
class
nsPresContext
;
template
<
class
T
>
class
nsPtrHashKey
;
struct
RawServoCssUrlData
;
namespace
mozilla
{
class
CSSStyleSheet
;
}
#
define
NS_CSS_DELETE_LIST_MEMBER
(
type_
ptr_
member_
)
\
{
\
type_
*
cur
=
(
ptr_
)
-
>
member_
;
\
(
ptr_
)
-
>
member_
=
nullptr
;
\
while
(
cur
)
{
\
type_
*
dlm_next
=
cur
-
>
member_
;
\
cur
-
>
member_
=
nullptr
;
\
delete
cur
;
\
cur
=
dlm_next
;
\
}
\
}
#
define
NS_CSS_NS_RELEASE_LIST_MEMBER
(
type_
ptr_
member_
)
\
{
\
type_
*
cur
=
(
ptr_
)
-
>
member_
;
\
(
ptr_
)
-
>
member_
=
nullptr
;
\
while
(
cur
)
{
\
type_
*
dlm_next
=
cur
-
>
member_
;
\
cur
-
>
member_
=
nullptr
;
\
NS_RELEASE
(
cur
)
;
\
cur
=
dlm_next
;
\
}
\
}
#
define
NS_CSS_CLONE_LIST_MEMBER
(
type_
from_
member_
to_
args_
)
\
{
\
type_
*
dest
=
(
to_
)
;
\
(
to_
)
-
>
member_
=
nullptr
;
\
for
(
const
type_
*
src
=
(
from_
)
-
>
member_
;
src
;
src
=
src
-
>
member_
)
{
\
type_
*
clm_clone
=
src
-
>
Clone
args_
;
\
if
(
!
clm_clone
)
{
\
delete
(
to_
)
;
\
return
nullptr
;
\
}
\
dest
-
>
member_
=
clm_clone
;
\
dest
=
clm_clone
;
\
}
\
}
extern
"
C
"
{
mozilla
:
:
URLExtraData
*
Servo_CssUrlData_GetExtraData
(
const
RawServoCssUrlData
*
)
;
bool
Servo_CssUrlData_IsLocalRef
(
const
RawServoCssUrlData
*
url
)
;
}
enum
nsCSSUnit
:
uint32_t
{
eCSSUnit_Null
=
0
eCSSUnit_Integer
=
70
eCSSUnit_Enumerated
=
71
eCSSUnit_Percent
=
100
eCSSUnit_Number
=
101
eCSSUnit_EM
=
800
eCSSUnit_XHeight
=
801
eCSSUnit_Char
=
802
eCSSUnit_RootEM
=
803
eCSSUnit_Point
=
900
eCSSUnit_Inch
=
901
eCSSUnit_Millimeter
=
902
eCSSUnit_Centimeter
=
903
eCSSUnit_Pica
=
904
eCSSUnit_Quarter
=
905
eCSSUnit_Pixel
=
906
eCSSUnit_Degree
=
1000
eCSSUnit_Hertz
=
2000
eCSSUnit_Kilohertz
=
2001
eCSSUnit_Seconds
=
3000
eCSSUnit_Milliseconds
=
3001
eCSSUnit_FlexFraction
=
4000
}
;
struct
nsCSSValuePair
;
struct
nsCSSValuePair_heap
;
struct
nsCSSValueList
;
struct
nsCSSValueList_heap
;
struct
nsCSSValueSharedList
;
struct
nsCSSValuePairList
;
struct
nsCSSValuePairList_heap
;
class
nsCSSValue
{
public
:
explicit
nsCSSValue
(
)
:
mUnit
(
eCSSUnit_Null
)
{
}
nsCSSValue
(
int32_t
aValue
nsCSSUnit
aUnit
)
;
nsCSSValue
(
float
aValue
nsCSSUnit
aUnit
)
;
nsCSSValue
(
const
nsCSSValue
&
aCopy
)
;
nsCSSValue
(
nsCSSValue
&
&
aOther
)
:
mUnit
(
aOther
.
mUnit
)
mValue
(
aOther
.
mValue
)
{
aOther
.
mUnit
=
eCSSUnit_Null
;
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
explicit
nsCSSValue
(
T
aValue
)
:
mUnit
(
eCSSUnit_Enumerated
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
mValue
.
mInt
"
)
;
mValue
.
mInt
=
static_cast
<
int32_t
>
(
aValue
)
;
}
nsCSSValue
&
operator
=
(
const
nsCSSValue
&
aCopy
)
;
nsCSSValue
&
operator
=
(
nsCSSValue
&
&
aCopy
)
;
bool
operator
=
=
(
const
nsCSSValue
&
aOther
)
const
;
bool
operator
!
=
(
const
nsCSSValue
&
aOther
)
const
{
return
!
(
*
this
=
=
aOther
)
;
}
nsCSSUnit
GetUnit
(
)
const
{
return
mUnit
;
}
bool
IsLengthUnit
(
)
const
{
return
eCSSUnit_EM
<
=
mUnit
&
&
mUnit
<
=
eCSSUnit_Pixel
;
}
bool
IsLengthPercentUnit
(
)
const
{
return
IsLengthUnit
(
)
|
|
mUnit
=
=
eCSSUnit_Percent
;
}
bool
IsRelativeLengthUnit
(
)
const
{
return
eCSSUnit_EM
<
=
mUnit
&
&
mUnit
<
=
eCSSUnit_RootEM
;
}
static
bool
IsPixelLengthUnit
(
nsCSSUnit
aUnit
)
{
return
eCSSUnit_Point
<
=
aUnit
&
&
aUnit
<
=
eCSSUnit_Pixel
;
}
bool
IsPixelLengthUnit
(
)
const
{
return
IsPixelLengthUnit
(
mUnit
)
;
}
static
bool
IsPercentLengthUnit
(
nsCSSUnit
aUnit
)
{
return
aUnit
=
=
eCSSUnit_Percent
;
}
bool
IsPercentLengthUnit
(
)
{
return
IsPercentLengthUnit
(
mUnit
)
;
}
static
bool
IsFloatUnit
(
nsCSSUnit
aUnit
)
{
return
eCSSUnit_Number
<
=
aUnit
;
}
bool
IsAngularUnit
(
)
const
{
return
eCSSUnit_Degree
=
=
mUnit
;
}
bool
IsFrequencyUnit
(
)
const
{
return
eCSSUnit_Hertz
<
=
mUnit
&
&
mUnit
<
=
eCSSUnit_Kilohertz
;
}
bool
IsTimeUnit
(
)
const
{
return
eCSSUnit_Seconds
<
=
mUnit
&
&
mUnit
<
=
eCSSUnit_Milliseconds
;
}
int32_t
GetIntValue
(
)
const
{
MOZ_ASSERT
(
mUnit
=
=
eCSSUnit_Integer
|
|
mUnit
=
=
eCSSUnit_Enumerated
"
not
an
int
value
"
)
;
return
mValue
.
mInt
;
}
nsCSSKeyword
GetKeywordValue
(
)
const
{
MOZ_ASSERT
(
mUnit
=
=
eCSSUnit_Enumerated
"
not
a
keyword
value
"
)
;
return
static_cast
<
nsCSSKeyword
>
(
mValue
.
mInt
)
;
}
float
GetPercentValue
(
)
const
{
MOZ_ASSERT
(
mUnit
=
=
eCSSUnit_Percent
"
not
a
percent
value
"
)
;
return
mValue
.
mFloat
;
}
float
GetFloatValue
(
)
const
{
MOZ_ASSERT
(
eCSSUnit_Number
<
=
mUnit
"
not
a
float
value
"
)
;
MOZ_ASSERT
(
!
mozilla
:
:
IsNaN
(
mValue
.
mFloat
)
)
;
return
mValue
.
mFloat
;
}
float
GetAngleValue
(
)
const
{
MOZ_ASSERT
(
eCSSUnit_Degree
=
=
mUnit
"
not
an
angle
value
"
)
;
return
mValue
.
mFloat
;
}
double
GetAngleValueInRadians
(
)
const
;
double
GetAngleValueInDegrees
(
)
const
;
nscoord
GetPixelLength
(
)
const
;
void
Reset
(
)
{
mUnit
=
eCSSUnit_Null
;
}
~
nsCSSValue
(
)
{
Reset
(
)
;
}
public
:
void
SetIntValue
(
int32_t
aValue
nsCSSUnit
aUnit
)
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
void
SetEnumValue
(
T
aValue
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int32_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
mValue
.
mInt
"
)
;
SetIntValue
(
static_cast
<
int32_t
>
(
aValue
)
eCSSUnit_Enumerated
)
;
}
void
SetPercentValue
(
float
aValue
)
;
void
SetFloatValue
(
float
aValue
nsCSSUnit
aUnit
)
;
void
SetIntegerCoordValue
(
nscoord
aCoord
)
;
protected
:
nsCSSUnit
mUnit
;
union
{
int32_t
mInt
;
float
mFloat
;
}
mValue
;
}
;
#
endif
