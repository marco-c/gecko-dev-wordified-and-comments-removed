#
ifndef
mozilla_dom_MediaQueryList_h
#
define
mozilla_dom_MediaQueryList_h
#
include
"
nsISupports
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
mozilla
/
LinkedList
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaQueryListBinding
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
MediaList
;
class
MediaQueryList
final
:
public
DOMEventTargetHelper
public
mozilla
:
:
LinkedListElement
<
MediaQueryList
>
{
public
:
MediaQueryList
(
nsIDocument
*
aDocument
const
nsAString
&
aMediaQueryList
mozilla
:
:
dom
:
:
CallerType
aCallerType
)
;
private
:
~
MediaQueryList
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
nsISupports
*
GetParentObject
(
)
const
;
void
MaybeNotify
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetMedia
(
nsAString
&
aMedia
)
;
bool
Matches
(
)
;
void
AddListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
;
void
RemoveListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
;
using
DOMEventTargetHelper
:
:
EventListenerAdded
;
void
EventListenerAdded
(
nsAtom
*
aType
)
override
;
IMPL_EVENT_HANDLER
(
change
)
bool
HasListeners
(
)
;
void
Disconnect
(
)
;
size_t
SizeOfExcludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
private
:
void
LastRelease
(
)
final
{
auto
listElement
=
static_cast
<
LinkedListElement
<
MediaQueryList
>
*
>
(
this
)
;
if
(
listElement
-
>
isInList
(
)
)
{
listElement
-
>
remove
(
)
;
}
}
void
RecomputeMatches
(
)
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
RefPtr
<
MediaList
>
mMediaList
;
bool
mMatches
;
bool
mMatchesValid
;
}
;
}
}
#
endif
