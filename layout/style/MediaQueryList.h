#
ifndef
mozilla_dom_MediaQueryList_h
#
define
mozilla_dom_MediaQueryList_h
#
include
"
nsISupports
.
h
"
#
include
"
nsCycleCollectionParticipant
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
prclist
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
mozilla
/
DOMEventTargetHelper
.
h
"
#
include
"
mozilla
/
dom
/
MediaQueryListBinding
.
h
"
class
nsIDocument
;
namespace
mozilla
{
namespace
dom
{
class
MediaList
;
class
MediaQueryList
final
:
public
DOMEventTargetHelper
public
PRCList
{
public
:
MediaQueryList
(
nsIDocument
*
aDocument
const
nsAString
&
aMediaQueryList
)
;
private
:
~
MediaQueryList
(
)
;
public
:
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_CYCLE_COLLECTION_CLASS_INHERITED
(
MediaQueryList
DOMEventTargetHelper
)
nsISupports
*
GetParentObject
(
)
const
;
void
MaybeNotify
(
)
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
void
GetMedia
(
nsAString
&
aMedia
)
;
bool
Matches
(
)
;
void
AddListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
;
void
RemoveListener
(
EventListener
*
aListener
ErrorResult
&
aRv
)
;
EventHandlerNonNull
*
GetOnchange
(
)
;
void
SetOnchange
(
EventHandlerNonNull
*
aCallback
)
;
using
nsIDOMEventTarget
:
:
AddEventListener
;
using
nsIDOMEventTarget
:
:
RemoveEventListener
;
virtual
void
AddEventListener
(
const
nsAString
&
aType
EventListener
*
aCallback
const
AddEventListenerOptionsOrBoolean
&
aOptions
const
Nullable
<
bool
>
&
aWantsUntrusted
ErrorResult
&
aRv
)
override
;
virtual
void
RemoveEventListener
(
const
nsAString
&
aType
EventListener
*
aCallback
const
EventListenerOptionsOrBoolean
&
aOptions
ErrorResult
&
aRv
)
override
;
bool
HasListeners
(
)
;
void
Disconnect
(
)
;
private
:
void
RecomputeMatches
(
)
;
void
UpdateMustKeepAlive
(
)
;
nsCOMPtr
<
nsIDocument
>
mDocument
;
RefPtr
<
MediaList
>
mMediaList
;
bool
mMatches
;
bool
mMatchesValid
;
bool
mIsKeptAlive
;
}
;
}
}
#
endif
