#
ifndef
mozilla_URLExtraData_h
#
define
mozilla_URLExtraData_h
#
include
"
mozilla
/
dom
/
URL
.
h
"
#
include
"
mozilla
/
Move
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsIPrincipal
.
h
"
#
include
"
nsIURI
.
h
"
namespace
mozilla
{
struct
URLExtraData
{
URLExtraData
(
already_AddRefed
<
nsIURI
>
aBaseURI
already_AddRefed
<
nsIURI
>
aReferrer
already_AddRefed
<
nsIPrincipal
>
aPrincipal
)
:
mBaseURI
(
Move
(
aBaseURI
)
)
mReferrer
(
Move
(
aReferrer
)
)
mPrincipal
(
Move
(
aPrincipal
)
)
mIsChrome
(
mReferrer
?
dom
:
:
IsChromeURI
(
mReferrer
)
:
false
)
{
MOZ_ASSERT
(
mBaseURI
)
;
}
URLExtraData
(
nsIURI
*
aBaseURI
nsIURI
*
aReferrer
nsIPrincipal
*
aPrincipal
)
:
URLExtraData
(
do_AddRef
(
aBaseURI
)
do_AddRef
(
aReferrer
)
do_AddRef
(
aPrincipal
)
)
{
}
NS_INLINE_DECL_THREADSAFE_REFCOUNTING
(
URLExtraData
)
nsIURI
*
BaseURI
(
)
const
{
return
mBaseURI
;
}
nsIURI
*
GetReferrer
(
)
const
{
return
mReferrer
;
}
nsIPrincipal
*
GetPrincipal
(
)
const
{
return
mPrincipal
;
}
static
URLExtraData
*
Dummy
(
)
{
MOZ_ASSERT
(
sDummy
)
;
return
sDummy
;
}
static
void
InitDummy
(
)
;
static
void
ReleaseDummy
(
)
;
private
:
~
URLExtraData
(
)
;
nsCOMPtr
<
nsIURI
>
mBaseURI
;
nsCOMPtr
<
nsIURI
>
mReferrer
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
const
bool
mIsChrome
;
static
StaticRefPtr
<
URLExtraData
>
sDummy
;
}
;
}
#
endif
