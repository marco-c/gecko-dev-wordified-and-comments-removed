#
ifndef
nsDOMCSSDeclaration_h___
#
define
nsDOMCSSDeclaration_h___
#
include
"
nsICSSDeclaration
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
URLExtraData
.
h
"
#
include
"
nsAttrValue
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsCompatibility
.
h
"
class
nsIPrincipal
;
class
nsIDocument
;
struct
JSContext
;
class
JSObject
;
struct
DeclarationBlockMutationClosure
;
namespace
mozilla
{
class
DeclarationBlock
;
namespace
css
{
class
Loader
;
class
Rule
;
}
namespace
dom
{
class
Element
;
}
struct
MutationClosureData
{
MutationClosureData
(
)
:
mClosure
(
nullptr
)
mElement
(
nullptr
)
mModType
(
0
)
{
}
void
(
*
mClosure
)
(
void
*
)
;
mozilla
:
:
dom
:
:
Element
*
mElement
;
Maybe
<
nsAttrValue
>
mOldValue
;
uint8_t
mModType
;
}
;
}
class
nsDOMCSSDeclaration
:
public
nsICSSDeclaration
{
public
:
NS_IMETHOD
QueryInterface
(
REFNSIID
aIID
void
*
*
aInstancePtr
)
override
;
NS_IMETHOD_
(
MozExternalRefCountType
)
AddRef
(
)
override
=
0
;
NS_IMETHOD_
(
MozExternalRefCountType
)
Release
(
)
override
=
0
;
virtual
nsresult
GetPropertyValue
(
const
nsCSSPropertyID
aPropID
nsAString
&
aValue
)
;
virtual
nsresult
SetPropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsAString
&
aValue
nsIPrincipal
*
aSubjectPrincipal
)
;
void
GetCssText
(
nsAString
&
aCssText
)
override
;
void
SetCssText
(
const
nsAString
&
aCssText
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
ErrorResult
&
aRv
)
override
;
NS_IMETHOD
GetPropertyValue
(
const
nsAString
&
propertyName
nsAString
&
_retval
)
override
;
NS_IMETHOD
RemoveProperty
(
const
nsAString
&
propertyName
nsAString
&
_retval
)
override
;
void
GetPropertyPriority
(
const
nsAString
&
propertyName
nsAString
&
aPriority
)
override
;
NS_IMETHOD
SetProperty
(
const
nsAString
&
propertyName
const
nsAString
&
value
const
nsAString
&
priority
nsIPrincipal
*
aSubjectPrincipal
)
override
;
uint32_t
Length
(
)
override
;
#
define
CSS_PROP_PUBLIC_OR_PRIVATE
(
publicname_
privatename_
)
publicname_
#
define
CSS_PROP
(
id_
method_
)
\
void
\
Get
#
#
method_
(
nsAString
&
aValue
mozilla
:
:
ErrorResult
&
rv
)
\
{
\
rv
=
GetPropertyValue
(
eCSSProperty_
#
#
id_
aValue
)
;
\
}
\
\
void
\
Set
#
#
method_
(
const
nsAString
&
aValue
nsIPrincipal
*
aSubjectPrincipal
\
mozilla
:
:
ErrorResult
&
rv
)
\
{
\
rv
=
SetPropertyValue
(
eCSSProperty_
#
#
id_
aValue
aSubjectPrincipal
)
;
\
}
#
define
CSS_PROP_LIST_EXCLUDE_INTERNAL
#
define
CSS_PROP_LONGHAND
(
name_
id_
method_
.
.
.
)
CSS_PROP
(
id_
method_
)
#
define
CSS_PROP_SHORTHAND
(
name_
id_
method_
.
.
.
)
CSS_PROP
(
id_
method_
)
#
define
CSS_PROP_ALIAS
(
name_
aliasid_
id_
method_
.
.
.
)
CSS_PROP
(
id_
method_
)
#
include
"
mozilla
/
ServoCSSPropList
.
h
"
#
undef
CSS_PROP_ALIAS
#
undef
CSS_PROP_SHORTHAND
#
undef
CSS_PROP_LONGHAND
#
undef
CSS_PROP_LIST_EXCLUDE_INTERNAL
#
undef
CSS_PROP
#
undef
CSS_PROP_PUBLIC_OR_PRIVATE
virtual
void
IndexedGetter
(
uint32_t
aIndex
bool
&
aFound
nsAString
&
aPropName
)
override
;
virtual
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
override
;
struct
MOZ_STACK_CLASS
ParsingEnvironment
{
RefPtr
<
mozilla
:
:
URLExtraData
>
mUrlExtraData
;
nsCompatibility
mCompatMode
;
mozilla
:
:
css
:
:
Loader
*
mLoader
;
ParsingEnvironment
(
mozilla
:
:
URLExtraData
*
aUrlData
nsCompatibility
aCompatMode
mozilla
:
:
css
:
:
Loader
*
aLoader
)
:
mUrlExtraData
(
aUrlData
)
mCompatMode
(
aCompatMode
)
mLoader
(
aLoader
)
{
}
ParsingEnvironment
(
already_AddRefed
<
mozilla
:
:
URLExtraData
>
aUrlData
nsCompatibility
aCompatMode
mozilla
:
:
css
:
:
Loader
*
aLoader
)
:
mUrlExtraData
(
aUrlData
)
mCompatMode
(
aCompatMode
)
mLoader
(
aLoader
)
{
}
}
;
protected
:
enum
Operation
{
eOperation_Read
eOperation_Modify
eOperation_RemoveProperty
}
;
virtual
mozilla
:
:
DeclarationBlock
*
GetOrCreateCSSDeclaration
(
Operation
aOperation
mozilla
:
:
DeclarationBlock
*
*
aCreated
)
=
0
;
virtual
nsresult
SetCSSDeclaration
(
mozilla
:
:
DeclarationBlock
*
aDecl
mozilla
:
:
MutationClosureData
*
aClosureData
)
=
0
;
virtual
nsIDocument
*
DocToUpdate
(
)
=
0
;
virtual
ParsingEnvironment
GetParsingEnvironment
(
nsIPrincipal
*
aSubjectPrincipal
=
nullptr
)
const
=
0
;
static
ParsingEnvironment
GetParsingEnvironmentForRule
(
const
mozilla
:
:
css
:
:
Rule
*
aRule
)
;
nsresult
ParsePropertyValue
(
const
nsCSSPropertyID
aPropID
const
nsAString
&
aPropValue
bool
aIsImportant
nsIPrincipal
*
aSubjectPrincipal
)
;
nsresult
ParseCustomPropertyValue
(
const
nsAString
&
aPropertyName
const
nsAString
&
aPropValue
bool
aIsImportant
nsIPrincipal
*
aSubjectPrincipal
)
;
nsresult
RemovePropertyInternal
(
nsCSSPropertyID
aPropID
)
;
nsresult
RemovePropertyInternal
(
const
nsAString
&
aProperty
)
;
virtual
void
GetPropertyChangeClosure
(
DeclarationBlockMutationClosure
*
aClosure
mozilla
:
:
MutationClosureData
*
aClosureData
)
{
}
protected
:
virtual
~
nsDOMCSSDeclaration
(
)
;
private
:
template
<
typename
ServoFunc
>
inline
nsresult
ModifyDeclaration
(
nsIPrincipal
*
aSubjectPrincipal
mozilla
:
:
MutationClosureData
*
aClosureData
ServoFunc
aServoFunc
)
;
}
;
#
endif
