#
ifndef
nsCSSProps_h___
#
define
nsCSSProps_h___
#
include
"
nsString
.
h
"
#
include
"
nsCSSProperty
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
#
include
"
nsCSSKeywords
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
define
CSS_CUSTOM_NAME_PREFIX_LENGTH
2
#
define
VARIANT_KEYWORD
0x000001
/
/
K
#
define
VARIANT_LENGTH
0x000002
/
/
L
#
define
VARIANT_PERCENT
0x000004
/
/
P
#
define
VARIANT_COLOR
0x000008
/
/
C
eCSSUnit_
*
Color
eCSSUnit_Ident
(
e
.
g
.
"
red
"
)
#
define
VARIANT_URL
0x000010
/
/
U
#
define
VARIANT_NUMBER
0x000020
/
/
N
#
define
VARIANT_INTEGER
0x000040
/
/
I
#
define
VARIANT_ANGLE
0x000080
/
/
G
#
define
VARIANT_FREQUENCY
0x000100
/
/
F
#
define
VARIANT_TIME
0x000200
/
/
T
#
define
VARIANT_STRING
0x000400
/
/
S
#
define
VARIANT_COUNTER
0x000800
/
/
#
define
VARIANT_ATTR
0x001000
/
/
#
define
VARIANT_IDENTIFIER
0x002000
/
/
D
#
define
VARIANT_IDENTIFIER_NO_INHERIT
0x004000
/
/
like
above
but
excluding
#
define
VARIANT_AUTO
0x010000
/
/
A
#
define
VARIANT_INHERIT
0x020000
/
/
H
eCSSUnit_Initial
eCSSUnit_Inherit
eCSSUnit_Unset
#
define
VARIANT_NONE
0x040000
/
/
O
#
define
VARIANT_NORMAL
0x080000
/
/
M
#
define
VARIANT_SYSFONT
0x100000
/
/
eCSSUnit_System_Font
#
define
VARIANT_GRADIENT
0x200000
/
/
eCSSUnit_Gradient
#
define
VARIANT_TIMING_FUNCTION
0x400000
/
/
cubic
-
bezier
(
)
and
steps
(
)
#
define
VARIANT_ALL
0x800000
/
/
#
define
VARIANT_IMAGE_RECT
0x01000000
/
/
eCSSUnit_Function
#
define
VARIANT_ZERO_ANGLE
0x02000000
/
/
unitless
zero
for
angles
#
define
VARIANT_CALC
0x04000000
/
/
eCSSUnit_Calc
#
define
VARIANT_ELEMENT
0x08000000
/
/
eCSSUnit_Element
#
define
VARIANT_POSITIVE_DIMENSION
0x10000000
/
/
Only
lengths
greater
than
0
.
0
#
define
VARIANT_NONNEGATIVE_DIMENSION
0x20000000
/
/
Only
lengths
greater
than
or
equal
to
0
.
0
#
define
VARIANT_OPENTYPE_SVG_KEYWORD
0x40000000
#
define
VARIANT_MULTIPLE_TOKENS
\
(
VARIANT_COLOR
|
/
*
rgb
(
.
.
.
)
hsl
(
.
.
.
)
etc
.
*
/
\
VARIANT_COUNTER
|
/
*
counter
(
.
.
.
)
counters
(
.
.
.
)
*
/
\
VARIANT_ATTR
|
/
*
attr
(
.
.
.
)
*
/
\
VARIANT_GRADIENT
|
/
*
linear
-
gradient
(
.
.
.
)
etc
.
*
/
\
VARIANT_TIMING_FUNCTION
|
/
*
cubic
-
bezier
(
.
.
.
)
steps
(
.
.
.
)
*
/
\
VARIANT_IMAGE_RECT
|
/
*
-
moz
-
image
-
rect
(
.
.
.
)
*
/
\
VARIANT_CALC
|
/
*
calc
(
.
.
.
)
*
/
\
VARIANT_ELEMENT
)
/
*
-
moz
-
element
(
.
.
.
)
*
/
#
define
VARIANT_AL
(
VARIANT_AUTO
|
VARIANT_LENGTH
)
#
define
VARIANT_LP
(
VARIANT_LENGTH
|
VARIANT_PERCENT
)
#
define
VARIANT_LN
(
VARIANT_LENGTH
|
VARIANT_NUMBER
)
#
define
VARIANT_AH
(
VARIANT_AUTO
|
VARIANT_INHERIT
)
#
define
VARIANT_AHLP
(
VARIANT_AH
|
VARIANT_LP
)
#
define
VARIANT_AHI
(
VARIANT_AH
|
VARIANT_INTEGER
)
#
define
VARIANT_AHK
(
VARIANT_AH
|
VARIANT_KEYWORD
)
#
define
VARIANT_AHKLP
(
VARIANT_AHLP
|
VARIANT_KEYWORD
)
#
define
VARIANT_AHL
(
VARIANT_AH
|
VARIANT_LENGTH
)
#
define
VARIANT_AHKL
(
VARIANT_AHK
|
VARIANT_LENGTH
)
#
define
VARIANT_HK
(
VARIANT_INHERIT
|
VARIANT_KEYWORD
)
#
define
VARIANT_HKF
(
VARIANT_HK
|
VARIANT_FREQUENCY
)
#
define
VARIANT_HKI
(
VARIANT_HK
|
VARIANT_INTEGER
)
#
define
VARIANT_HKL
(
VARIANT_HK
|
VARIANT_LENGTH
)
#
define
VARIANT_HKLP
(
VARIANT_HK
|
VARIANT_LP
)
#
define
VARIANT_HKLPO
(
VARIANT_HKLP
|
VARIANT_NONE
)
#
define
VARIANT_HL
(
VARIANT_INHERIT
|
VARIANT_LENGTH
)
#
define
VARIANT_HI
(
VARIANT_INHERIT
|
VARIANT_INTEGER
)
#
define
VARIANT_HLP
(
VARIANT_HL
|
VARIANT_PERCENT
)
#
define
VARIANT_HLPN
(
VARIANT_HLP
|
VARIANT_NUMBER
)
#
define
VARIANT_HLPO
(
VARIANT_HLP
|
VARIANT_NONE
)
#
define
VARIANT_HTP
(
VARIANT_INHERIT
|
VARIANT_TIME
|
VARIANT_PERCENT
)
#
define
VARIANT_HMK
(
VARIANT_HK
|
VARIANT_NORMAL
)
#
define
VARIANT_HC
(
VARIANT_INHERIT
|
VARIANT_COLOR
)
#
define
VARIANT_HCK
(
VARIANT_HK
|
VARIANT_COLOR
)
#
define
VARIANT_HUK
(
VARIANT_HK
|
VARIANT_URL
)
#
define
VARIANT_HUO
(
VARIANT_INHERIT
|
VARIANT_URL
|
VARIANT_NONE
)
#
define
VARIANT_AHUO
(
VARIANT_AUTO
|
VARIANT_HUO
)
#
define
VARIANT_HPN
(
VARIANT_INHERIT
|
VARIANT_PERCENT
|
VARIANT_NUMBER
)
#
define
VARIANT_PN
(
VARIANT_PERCENT
|
VARIANT_NUMBER
)
#
define
VARIANT_ALPN
(
VARIANT_AL
|
VARIANT_PN
)
#
define
VARIANT_HN
(
VARIANT_INHERIT
|
VARIANT_NUMBER
)
#
define
VARIANT_HON
(
VARIANT_HN
|
VARIANT_NONE
)
#
define
VARIANT_HOS
(
VARIANT_INHERIT
|
VARIANT_NONE
|
VARIANT_STRING
)
#
define
VARIANT_LPN
(
VARIANT_LP
|
VARIANT_NUMBER
)
#
define
VARIANT_UK
(
VARIANT_URL
|
VARIANT_KEYWORD
)
#
define
VARIANT_UO
(
VARIANT_URL
|
VARIANT_NONE
)
#
define
VARIANT_ANGLE_OR_ZERO
(
VARIANT_ANGLE
|
VARIANT_ZERO_ANGLE
)
#
define
VARIANT_LCALC
(
VARIANT_LENGTH
|
VARIANT_CALC
)
#
define
VARIANT_LPCALC
(
VARIANT_LCALC
|
VARIANT_PERCENT
)
#
define
VARIANT_LNCALC
(
VARIANT_LCALC
|
VARIANT_NUMBER
)
#
define
VARIANT_LPNCALC
(
VARIANT_LNCALC
|
VARIANT_PERCENT
)
#
define
VARIANT_IMAGE
(
VARIANT_URL
|
VARIANT_NONE
|
VARIANT_GRADIENT
|
\
VARIANT_IMAGE_RECT
|
VARIANT_ELEMENT
)
#
define
CSS_PROPERTY_LOGICAL
(
1
<
<
0
)
#
define
CSS_PROPERTY_VALUE_LIST_USES_COMMAS
(
1
<
<
1
)
/
*
otherwise
spaces
*
/
#
define
CSS_PROPERTY_APPLIES_TO_FIRST_LETTER
(
1
<
<
2
)
#
define
CSS_PROPERTY_APPLIES_TO_FIRST_LINE
(
1
<
<
3
)
#
define
CSS_PROPERTY_APPLIES_TO_FIRST_LETTER_AND_FIRST_LINE
\
(
CSS_PROPERTY_APPLIES_TO_FIRST_LETTER
|
CSS_PROPERTY_APPLIES_TO_FIRST_LINE
)
#
define
CSS_PROPERTY_IGNORED_WHEN_COLORS_DISABLED
(
1
<
<
4
)
#
define
CSS_PROPERTY_START_IMAGE_LOADS
(
1
<
<
5
)
#
define
CSS_PROPERTY_IMAGE_IS_IN_ARRAY_0
(
1
<
<
6
)
#
define
CSS_PROPERTY_LOGICAL_AXIS
(
1
<
<
7
)
#
define
CSS_PROPERTY_STORES_CALC
(
1
<
<
8
)
#
define
CSS_PROPERTY_PARSE_PROPERTY_MASK
(
7
<
<
9
)
#
define
CSS_PROPERTY_PARSE_INACCESSIBLE
(
1
<
<
9
)
#
define
CSS_PROPERTY_PARSE_FUNCTION
(
2
<
<
9
)
#
define
CSS_PROPERTY_PARSE_VALUE
(
3
<
<
9
)
#
define
CSS_PROPERTY_PARSE_VALUE_LIST
(
4
<
<
9
)
#
define
CSS_PROPERTY_VALUE_PARSER_FUNCTION
(
1
<
<
12
)
static_assert
(
(
CSS_PROPERTY_PARSE_PROPERTY_MASK
&
CSS_PROPERTY_VALUE_PARSER_FUNCTION
)
=
=
0
"
didn
'
t
leave
enough
room
for
the
parse
property
constants
"
)
;
#
define
CSS_PROPERTY_VALUE_RESTRICTION_MASK
(
3
<
<
13
)
#
define
CSS_PROPERTY_VALUE_NONNEGATIVE
(
1
<
<
13
)
#
define
CSS_PROPERTY_VALUE_AT_LEAST_ONE
(
2
<
<
13
)
#
define
CSS_PROPERTY_HASHLESS_COLOR_QUIRK
(
1
<
<
15
)
#
define
CSS_PROPERTY_UNITLESS_LENGTH_QUIRK
(
1
<
<
16
)
#
define
CSS_PROPERTY_IS_ALIAS
(
1
<
<
17
)
#
define
CSS_PROPERTY_APPLIES_TO_PLACEHOLDER
(
1
<
<
18
)
#
define
CSS_PROPERTY_APPLIES_TO_PAGE_RULE
(
1
<
<
19
)
#
define
CSS_PROPERTY_GETCS_NEEDS_LAYOUT_FLUSH
(
1
<
<
20
)
#
define
CSS_PROPERTY_CREATES_STACKING_CONTEXT
(
1
<
<
21
)
#
define
CSS_PROPERTY_ENABLED_MASK
(
3
<
<
22
)
#
define
CSS_PROPERTY_ENABLED_IN_UA_SHEETS
(
1
<
<
22
)
#
define
CSS_PROPERTY_ENABLED_IN_CHROME
(
1
<
<
23
)
#
define
CSS_PROPERTY_ENABLED_IN_UA_SHEETS_AND_CHROME
\
(
CSS_PROPERTY_ENABLED_IN_UA_SHEETS
|
CSS_PROPERTY_ENABLED_IN_CHROME
)
#
define
CSS_PROPERTY_NUMBERS_ARE_PIXELS
(
1
<
<
24
)
#
define
CSS_PROPERTY_LOGICAL_BLOCK_AXIS
(
1
<
<
25
)
#
define
CSS_PROPERTY_LOGICAL_END_EDGE
(
1
<
<
26
)
#
define
CSS_PROPERTY_LOGICAL_SINGLE_CUSTOM_VALMAPPING
(
1
<
<
27
)
#
define
CSS_PROPERTY_CAN_ANIMATE_ON_COMPOSITOR
(
1
<
<
28
)
#
define
CSS_PROPERTY_INTERNAL
(
1
<
<
29
)
#
define
CSS_PROPERTY_FIXPOS_CB
(
1
<
<
30
)
#
define
CSS_PROPERTY_ABSPOS_CB
(
1u
<
<
31
)
enum
nsStyleAnimType
{
eStyleAnimType_Custom
eStyleAnimType_Coord
eStyleAnimType_Sides_Top
eStyleAnimType_Sides_Right
eStyleAnimType_Sides_Bottom
eStyleAnimType_Sides_Left
eStyleAnimType_Corner_TopLeft
eStyleAnimType_Corner_TopRight
eStyleAnimType_Corner_BottomRight
eStyleAnimType_Corner_BottomLeft
eStyleAnimType_nscoord
eStyleAnimType_EnumU8
eStyleAnimType_float
eStyleAnimType_Color
eStyleAnimType_PaintServer
eStyleAnimType_Shadow
eStyleAnimType_None
}
;
class
nsCSSProps
{
public
:
struct
KTableEntry
{
nsCSSKeyword
mKeyword
;
int16_t
mValue
;
}
;
static
void
AddRefTable
(
void
)
;
static
void
ReleaseTable
(
void
)
;
enum
EnabledState
{
eEnabledForAllContent
=
0
eEnabledInUASheets
=
0x01
eEnabledInChrome
=
0x02
eIgnoreEnabledState
=
0xff
}
;
static
nsCSSProperty
LookupProperty
(
const
nsAString
&
aProperty
EnabledState
aEnabled
)
;
static
nsCSSProperty
LookupProperty
(
const
nsACString
&
aProperty
EnabledState
aEnabled
)
;
static
nsCSSProperty
LookupPropertyByIDLName
(
const
nsAString
&
aPropertyIDLName
EnabledState
aEnabled
)
;
static
nsCSSProperty
LookupPropertyByIDLName
(
const
nsACString
&
aPropertyIDLName
EnabledState
aEnabled
)
;
static
bool
IsCustomPropertyName
(
const
nsAString
&
aProperty
)
;
static
bool
IsCustomPropertyName
(
const
nsACString
&
aProperty
)
;
static
inline
bool
IsShorthand
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
(
aProperty
>
=
eCSSProperty_COUNT_no_shorthands
)
;
}
static
bool
IsInherited
(
nsCSSProperty
aProperty
)
;
static
nsCSSFontDesc
LookupFontDesc
(
const
nsAString
&
aProperty
)
;
static
nsCSSFontDesc
LookupFontDesc
(
const
nsACString
&
aProperty
)
;
static
nsCSSCounterDesc
LookupCounterDesc
(
const
nsAString
&
aProperty
)
;
static
nsCSSCounterDesc
LookupCounterDesc
(
const
nsACString
&
aProperty
)
;
static
bool
IsPredefinedCounterStyle
(
const
nsAString
&
aStyle
)
;
static
bool
IsPredefinedCounterStyle
(
const
nsACString
&
aStyle
)
;
static
const
nsAFlatCString
&
GetStringValue
(
nsCSSProperty
aProperty
)
;
static
const
nsAFlatCString
&
GetStringValue
(
nsCSSFontDesc
aFontDesc
)
;
static
const
nsAFlatCString
&
GetStringValue
(
nsCSSCounterDesc
aCounterDesc
)
;
static
const
nsAFlatCString
&
LookupPropertyValue
(
nsCSSProperty
aProperty
int32_t
aValue
)
;
static
bool
GetColorName
(
int32_t
aPropID
nsCString
&
aStr
)
;
static
int32_t
FindIndexOfKeyword
(
nsCSSKeyword
aKeyword
const
KTableEntry
aTable
[
]
)
;
static
bool
FindKeyword
(
nsCSSKeyword
aKeyword
const
KTableEntry
aTable
[
]
int32_t
&
aValue
)
;
static
nsCSSKeyword
ValueToKeywordEnum
(
int32_t
aValue
const
KTableEntry
aTable
[
]
)
;
static
const
nsAFlatCString
&
ValueToKeyword
(
int32_t
aValue
const
KTableEntry
aTable
[
]
)
;
static
const
nsStyleStructID
kSIDTable
[
eCSSProperty_COUNT_no_shorthands
]
;
static
const
KTableEntry
*
const
kKeywordTableTable
[
eCSSProperty_COUNT_no_shorthands
]
;
static
const
nsStyleAnimType
kAnimTypeTable
[
eCSSProperty_COUNT_no_shorthands
]
;
static
const
ptrdiff_t
kStyleStructOffsetTable
[
eCSSProperty_COUNT_no_shorthands
]
;
private
:
static
const
uint32_t
kFlagsTable
[
eCSSProperty_COUNT
]
;
public
:
static
inline
bool
PropHasFlags
(
nsCSSProperty
aProperty
uint32_t
aFlags
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
MOZ_ASSERT
(
!
(
aFlags
&
CSS_PROPERTY_PARSE_PROPERTY_MASK
)
"
The
CSS_PROPERTY_PARSE_
*
values
are
not
bitflags
;
don
'
t
pass
"
"
them
to
PropHasFlags
.
You
probably
want
PropertyParseType
"
"
instead
.
"
)
;
return
(
nsCSSProps
:
:
kFlagsTable
[
aProperty
]
&
aFlags
)
=
=
aFlags
;
}
static
inline
uint32_t
PropertyParseType
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
nsCSSProps
:
:
kFlagsTable
[
aProperty
]
&
CSS_PROPERTY_PARSE_PROPERTY_MASK
;
}
static
inline
uint32_t
ValueRestrictions
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
nsCSSProps
:
:
kFlagsTable
[
aProperty
]
&
CSS_PROPERTY_VALUE_RESTRICTION_MASK
;
}
private
:
static
const
uint32_t
kParserVariantTable
[
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
inline
uint32_t
ParserVariant
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
out
of
range
"
)
;
return
nsCSSProps
:
:
kParserVariantTable
[
aProperty
]
;
}
private
:
static
const
nsCSSProperty
*
const
kSubpropertyTable
[
eCSSProperty_COUNT
-
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
inline
const
nsCSSProperty
*
SubpropertyEntryFor
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
eCSSProperty_COUNT_no_shorthands
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
nsCSSProps
:
:
kSubpropertyTable
[
aProperty
-
eCSSProperty_COUNT_no_shorthands
]
;
}
static
const
nsCSSProperty
*
ShorthandsContaining
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
gShorthandsContainingPool
"
uninitialized
"
)
;
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
out
of
range
"
)
;
return
gShorthandsContainingTable
[
aProperty
]
;
}
private
:
static
nsCSSProperty
*
gShorthandsContainingTable
[
eCSSProperty_COUNT_no_shorthands
]
;
static
nsCSSProperty
*
gShorthandsContainingPool
;
static
bool
BuildShorthandsContainingTable
(
)
;
private
:
static
const
size_t
gPropertyCountInStruct
[
nsStyleStructID_Length
]
;
static
const
size_t
gPropertyIndexInStruct
[
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
size_t
PropertyCountInStruct
(
nsStyleStructID
aSID
)
{
MOZ_ASSERT
(
0
<
=
aSID
&
&
aSID
<
nsStyleStructID_Length
"
out
of
range
"
)
;
return
gPropertyCountInStruct
[
aSID
]
;
}
static
size_t
PropertyIndexInStruct
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
out
of
range
"
)
;
return
gPropertyIndexInStruct
[
aProperty
]
;
}
private
:
static
const
nsCSSProperty
*
const
kLogicalGroupTable
[
eCSSPropertyLogicalGroup_COUNT
]
;
public
:
static
const
nsCSSProperty
*
LogicalGroup
(
nsCSSProperty
aProperty
)
;
private
:
static
bool
gPropertyEnabled
[
eCSSProperty_COUNT_with_aliases
]
;
private
:
static
const
char
*
const
kIDLNameTable
[
eCSSProperty_COUNT
]
;
public
:
static
const
char
*
PropertyIDLName
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameTable
[
aProperty
]
;
}
private
:
static
const
int32_t
kIDLNameSortPositionTable
[
eCSSProperty_COUNT
]
;
public
:
static
int32_t
PropertyIDLNameSortPosition
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameSortPositionTable
[
aProperty
]
;
}
static
bool
IsEnabled
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_with_aliases
"
out
of
range
"
)
;
return
gPropertyEnabled
[
aProperty
]
;
}
static
const
mozilla
:
:
UseCounter
gPropertyUseCounter
[
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
mozilla
:
:
UseCounter
UseCounterFor
(
nsCSSProperty
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
out
of
range
"
)
;
return
gPropertyUseCounter
[
aProperty
]
;
}
static
bool
IsEnabled
(
nsCSSProperty
aProperty
EnabledState
aEnabled
)
{
if
(
IsEnabled
(
aProperty
)
)
{
return
true
;
}
if
(
aEnabled
=
=
eIgnoreEnabledState
)
{
return
true
;
}
if
(
(
aEnabled
&
eEnabledInUASheets
)
&
&
PropHasFlags
(
aProperty
CSS_PROPERTY_ENABLED_IN_UA_SHEETS
)
)
{
return
true
;
}
if
(
(
aEnabled
&
eEnabledInChrome
)
&
&
PropHasFlags
(
aProperty
CSS_PROPERTY_ENABLED_IN_CHROME
)
)
{
return
true
;
}
return
false
;
}
public
:
#
define
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
it_
prop_
enabledstate_
)
\
for
(
const
nsCSSProperty
*
it_
=
nsCSSProps
:
:
SubpropertyEntryFor
(
prop_
)
\
es_
=
(
nsCSSProperty
)
(
enabledstate_
)
;
\
*
it_
!
=
eCSSProperty_UNKNOWN
;
+
+
it_
)
\
if
(
nsCSSProps
:
:
IsEnabled
(
*
it_
(
nsCSSProps
:
:
EnabledState
)
es_
)
)
static
const
KTableEntry
kAnimationDirectionKTable
[
]
;
static
const
KTableEntry
kAnimationFillModeKTable
[
]
;
static
const
KTableEntry
kAnimationIterationCountKTable
[
]
;
static
const
KTableEntry
kAnimationPlayStateKTable
[
]
;
static
const
KTableEntry
kAnimationTimingFunctionKTable
[
]
;
static
const
KTableEntry
kAppearanceKTable
[
]
;
static
const
KTableEntry
kAzimuthKTable
[
]
;
static
const
KTableEntry
kBackfaceVisibilityKTable
[
]
;
static
const
KTableEntry
kTransformStyleKTable
[
]
;
static
const
KTableEntry
kBackgroundAttachmentKTable
[
]
;
static
const
KTableEntry
kBackgroundOriginKTable
[
]
;
static
const
KTableEntry
kBackgroundPositionKTable
[
]
;
static
const
KTableEntry
kBackgroundRepeatKTable
[
]
;
static
const
KTableEntry
kBackgroundRepeatPartKTable
[
]
;
static
const
KTableEntry
kBackgroundSizeKTable
[
]
;
static
const
KTableEntry
kBlendModeKTable
[
]
;
static
const
KTableEntry
kBorderCollapseKTable
[
]
;
static
const
KTableEntry
kBorderColorKTable
[
]
;
static
const
KTableEntry
kBorderImageRepeatKTable
[
]
;
static
const
KTableEntry
kBorderImageSliceKTable
[
]
;
static
const
KTableEntry
kBorderStyleKTable
[
]
;
static
const
KTableEntry
kBorderWidthKTable
[
]
;
static
const
KTableEntry
kBoxAlignKTable
[
]
;
static
const
KTableEntry
kBoxDecorationBreakKTable
[
]
;
static
const
KTableEntry
kBoxDirectionKTable
[
]
;
static
const
KTableEntry
kBoxOrientKTable
[
]
;
static
const
KTableEntry
kBoxPackKTable
[
]
;
static
const
KTableEntry
kClipShapeSizingKTable
[
]
;
static
const
KTableEntry
kCounterRangeKTable
[
]
;
static
const
KTableEntry
kCounterSpeakAsKTable
[
]
;
static
const
KTableEntry
kCounterSymbolsSystemKTable
[
]
;
static
const
KTableEntry
kCounterSystemKTable
[
]
;
static
const
KTableEntry
kDominantBaselineKTable
[
]
;
static
const
KTableEntry
kShapeRadiusKTable
[
]
;
static
const
KTableEntry
kFillRuleKTable
[
]
;
static
const
KTableEntry
kFilterFunctionKTable
[
]
;
static
const
KTableEntry
kImageRenderingKTable
[
]
;
static
const
KTableEntry
kShapeRenderingKTable
[
]
;
static
const
KTableEntry
kStrokeLinecapKTable
[
]
;
static
const
KTableEntry
kStrokeLinejoinKTable
[
]
;
static
const
KTableEntry
kStrokeContextValueKTable
[
]
;
static
const
KTableEntry
kVectorEffectKTable
[
]
;
static
const
KTableEntry
kTextAnchorKTable
[
]
;
static
const
KTableEntry
kTextRenderingKTable
[
]
;
static
const
KTableEntry
kColorInterpolationKTable
[
]
;
static
const
KTableEntry
kColumnFillKTable
[
]
;
static
const
KTableEntry
kBoxPropSourceKTable
[
]
;
static
const
KTableEntry
kBoxShadowTypeKTable
[
]
;
static
const
KTableEntry
kBoxSizingKTable
[
]
;
static
const
KTableEntry
kCaptionSideKTable
[
]
;
static
KTableEntry
kClearKTable
[
]
;
static
const
KTableEntry
kColorKTable
[
]
;
static
const
KTableEntry
kContentKTable
[
]
;
static
const
KTableEntry
kControlCharacterVisibilityKTable
[
]
;
static
const
KTableEntry
kCursorKTable
[
]
;
static
const
KTableEntry
kDirectionKTable
[
]
;
static
KTableEntry
kDisplayKTable
[
]
;
static
const
KTableEntry
kElevationKTable
[
]
;
static
const
KTableEntry
kEmptyCellsKTable
[
]
;
static
const
KTableEntry
kAlignAllKeywords
[
]
;
static
const
KTableEntry
kAlignOverflowPosition
[
]
;
static
const
KTableEntry
kAlignSelfPosition
[
]
;
static
const
KTableEntry
kAlignLegacy
[
]
;
static
const
KTableEntry
kAlignLegacyPosition
[
]
;
static
const
KTableEntry
kAlignAutoNormalStretchBaseline
[
]
;
static
const
KTableEntry
kAlignNormalStretchBaseline
[
]
;
static
const
KTableEntry
kAlignNormalBaseline
[
]
;
static
const
KTableEntry
kAlignContentDistribution
[
]
;
static
const
KTableEntry
kAlignContentPosition
[
]
;
static
const
KTableEntry
kAlignSelfKTable
[
]
;
static
const
KTableEntry
kJustifyContentKTable
[
]
;
static
const
KTableEntry
kFlexDirectionKTable
[
]
;
static
const
KTableEntry
kFlexWrapKTable
[
]
;
static
KTableEntry
kFloatKTable
[
]
;
static
const
KTableEntry
kFloatEdgeKTable
[
]
;
static
const
KTableEntry
kFontDisplayKTable
[
]
;
static
const
KTableEntry
kFontKTable
[
]
;
static
const
KTableEntry
kFontKerningKTable
[
]
;
static
const
KTableEntry
kFontSizeKTable
[
]
;
static
const
KTableEntry
kFontSmoothingKTable
[
]
;
static
const
KTableEntry
kFontStretchKTable
[
]
;
static
const
KTableEntry
kFontStyleKTable
[
]
;
static
const
KTableEntry
kFontSynthesisKTable
[
]
;
static
const
KTableEntry
kFontVariantKTable
[
]
;
static
const
KTableEntry
kFontVariantAlternatesKTable
[
]
;
static
const
KTableEntry
kFontVariantAlternatesFuncsKTable
[
]
;
static
const
KTableEntry
kFontVariantCapsKTable
[
]
;
static
const
KTableEntry
kFontVariantEastAsianKTable
[
]
;
static
const
KTableEntry
kFontVariantLigaturesKTable
[
]
;
static
const
KTableEntry
kFontVariantNumericKTable
[
]
;
static
const
KTableEntry
kFontVariantPositionKTable
[
]
;
static
const
KTableEntry
kFontWeightKTable
[
]
;
static
const
KTableEntry
kGridAutoFlowKTable
[
]
;
static
const
KTableEntry
kGridTrackBreadthKTable
[
]
;
static
const
KTableEntry
kHyphensKTable
[
]
;
static
const
KTableEntry
kImageOrientationKTable
[
]
;
static
const
KTableEntry
kImageOrientationFlipKTable
[
]
;
static
const
KTableEntry
kIsolationKTable
[
]
;
static
const
KTableEntry
kIMEModeKTable
[
]
;
static
const
KTableEntry
kLineHeightKTable
[
]
;
static
const
KTableEntry
kListStylePositionKTable
[
]
;
static
const
KTableEntry
kListStyleKTable
[
]
;
static
const
KTableEntry
kMaskTypeKTable
[
]
;
static
const
KTableEntry
kMathVariantKTable
[
]
;
static
const
KTableEntry
kMathDisplayKTable
[
]
;
static
const
KTableEntry
kContainKTable
[
]
;
static
const
KTableEntry
kContextOpacityKTable
[
]
;
static
const
KTableEntry
kContextPatternKTable
[
]
;
static
const
KTableEntry
kObjectFitKTable
[
]
;
static
const
KTableEntry
kOrientKTable
[
]
;
static
const
KTableEntry
kOutlineStyleKTable
[
]
;
static
const
KTableEntry
kOutlineColorKTable
[
]
;
static
const
KTableEntry
kOverflowKTable
[
]
;
static
const
KTableEntry
kOverflowSubKTable
[
]
;
static
const
KTableEntry
kOverflowClipBoxKTable
[
]
;
static
const
KTableEntry
kPageBreakKTable
[
]
;
static
const
KTableEntry
kPageBreakInsideKTable
[
]
;
static
const
KTableEntry
kPageMarksKTable
[
]
;
static
const
KTableEntry
kPageSizeKTable
[
]
;
static
const
KTableEntry
kPitchKTable
[
]
;
static
const
KTableEntry
kPointerEventsKTable
[
]
;
static
KTableEntry
kPositionKTable
[
]
;
static
const
KTableEntry
kRadialGradientShapeKTable
[
]
;
static
const
KTableEntry
kRadialGradientSizeKTable
[
]
;
static
const
KTableEntry
kRadialGradientLegacySizeKTable
[
]
;
static
const
KTableEntry
kResizeKTable
[
]
;
static
const
KTableEntry
kRubyAlignKTable
[
]
;
static
const
KTableEntry
kRubyPositionKTable
[
]
;
static
const
KTableEntry
kScrollBehaviorKTable
[
]
;
static
const
KTableEntry
kScrollSnapTypeKTable
[
]
;
static
const
KTableEntry
kSpeakKTable
[
]
;
static
const
KTableEntry
kSpeakHeaderKTable
[
]
;
static
const
KTableEntry
kSpeakNumeralKTable
[
]
;
static
const
KTableEntry
kSpeakPunctuationKTable
[
]
;
static
const
KTableEntry
kSpeechRateKTable
[
]
;
static
const
KTableEntry
kStackSizingKTable
[
]
;
static
const
KTableEntry
kTableLayoutKTable
[
]
;
static
KTableEntry
kTextAlignKTable
[
]
;
static
KTableEntry
kTextAlignLastKTable
[
]
;
static
const
KTableEntry
kTextCombineUprightKTable
[
]
;
static
const
KTableEntry
kTextDecorationLineKTable
[
]
;
static
const
KTableEntry
kTextDecorationStyleKTable
[
]
;
static
const
KTableEntry
kTextEmphasisPositionKTable
[
]
;
static
const
KTableEntry
kTextEmphasisStyleFillKTable
[
]
;
static
const
KTableEntry
kTextEmphasisStyleShapeKTable
[
]
;
static
const
KTableEntry
kTextOrientationKTable
[
]
;
static
const
KTableEntry
kTextOverflowKTable
[
]
;
static
const
KTableEntry
kTextTransformKTable
[
]
;
static
const
KTableEntry
kTouchActionKTable
[
]
;
static
const
KTableEntry
kTopLayerKTable
[
]
;
static
const
KTableEntry
kTransformBoxKTable
[
]
;
static
const
KTableEntry
kTransitionTimingFunctionKTable
[
]
;
static
const
KTableEntry
kUnicodeBidiKTable
[
]
;
static
const
KTableEntry
kUserFocusKTable
[
]
;
static
const
KTableEntry
kUserInputKTable
[
]
;
static
const
KTableEntry
kUserModifyKTable
[
]
;
static
const
KTableEntry
kUserSelectKTable
[
]
;
static
const
KTableEntry
kVerticalAlignKTable
[
]
;
static
const
KTableEntry
kVisibilityKTable
[
]
;
static
const
KTableEntry
kVolumeKTable
[
]
;
static
const
KTableEntry
kWhitespaceKTable
[
]
;
static
const
KTableEntry
kWidthKTable
[
]
;
static
const
KTableEntry
kWindowDraggingKTable
[
]
;
static
const
KTableEntry
kWindowShadowKTable
[
]
;
static
const
KTableEntry
kWordBreakKTable
[
]
;
static
const
KTableEntry
kWordWrapKTable
[
]
;
static
const
KTableEntry
kWritingModeKTable
[
]
;
}
;
inline
nsCSSProps
:
:
EnabledState
operator
|
(
nsCSSProps
:
:
EnabledState
a
nsCSSProps
:
:
EnabledState
b
)
{
return
nsCSSProps
:
:
EnabledState
(
int
(
a
)
|
int
(
b
)
)
;
}
inline
nsCSSProps
:
:
EnabledState
operator
&
(
nsCSSProps
:
:
EnabledState
a
nsCSSProps
:
:
EnabledState
b
)
{
return
nsCSSProps
:
:
EnabledState
(
int
(
a
)
&
int
(
b
)
)
;
}
inline
nsCSSProps
:
:
EnabledState
&
operator
|
=
(
nsCSSProps
:
:
EnabledState
&
a
nsCSSProps
:
:
EnabledState
b
)
{
return
a
=
a
|
b
;
}
inline
nsCSSProps
:
:
EnabledState
&
operator
&
=
(
nsCSSProps
:
:
EnabledState
&
a
nsCSSProps
:
:
EnabledState
b
)
{
return
a
=
a
&
b
;
}
#
endif
