#
ifndef
nsCSSProps_h___
#
define
nsCSSProps_h___
#
include
<
ostream
>
#
include
"
nsString
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
include
"
mozilla
/
CSSPropFlags
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
define
CSS_CUSTOM_NAME_PREFIX_LENGTH
2
namespace
mozilla
{
class
ComputedStyle
;
namespace
gfx
{
class
gfxVarReceiver
;
}
}
extern
"
C
"
{
nsCSSPropertyID
Servo_ResolveLogicalProperty
(
nsCSSPropertyID
const
mozilla
:
:
ComputedStyle
*
)
;
nsCSSPropertyID
Servo_Property_LookupEnabledForAllContent
(
const
nsACString
*
)
;
const
uint8_t
*
Servo_Property_GetName
(
nsCSSPropertyID
uint32_t
*
aLength
)
;
}
class
nsCSSProps
{
public
:
using
EnabledState
=
mozilla
:
:
CSSEnabledState
;
using
Flags
=
mozilla
:
:
CSSPropFlags
;
static
void
Init
(
)
;
static
nsCSSPropertyID
LookupProperty
(
const
nsACString
&
aProperty
)
{
return
Servo_Property_LookupEnabledForAllContent
(
&
aProperty
)
;
}
static
nsCSSPropertyID
LookupPropertyByIDLName
(
const
nsACString
&
aPropertyIDLName
EnabledState
aEnabled
)
;
static
bool
IsCustomPropertyName
(
const
nsACString
&
aProperty
)
;
static
bool
IsShorthand
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
(
aProperty
>
=
eCSSProperty_COUNT_no_shorthands
)
;
}
static
nsCSSFontDesc
LookupFontDesc
(
const
nsACString
&
)
;
static
mozilla
:
:
UseCounter
UseCounterFor
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_with_aliases
"
out
of
range
"
)
;
return
mozilla
:
:
UseCounter
(
size_t
(
mozilla
:
:
eUseCounter_FirstCSSProperty
)
+
size_t
(
aProperty
)
)
;
}
static
nsDependentCSubstring
GetStringValue
(
nsCSSPropertyID
aProperty
)
{
uint32_t
len
;
const
uint8_t
*
chars
=
Servo_Property_GetName
(
aProperty
&
len
)
;
return
nsDependentCSubstring
(
reinterpret_cast
<
const
char
*
>
(
chars
)
len
)
;
}
static
const
nsCString
&
GetStringValue
(
nsCSSFontDesc
aFontDesc
)
;
static
const
nsCString
&
GetStringValue
(
nsCSSCounterDesc
aCounterDesc
)
;
static
Flags
PropFlags
(
nsCSSPropertyID
)
;
static
bool
PropHasFlags
(
nsCSSPropertyID
aProperty
Flags
aFlags
)
{
return
(
PropFlags
(
aProperty
)
&
aFlags
)
=
=
aFlags
;
}
static
nsCSSPropertyID
Physicalize
(
nsCSSPropertyID
aProperty
const
mozilla
:
:
ComputedStyle
&
aStyle
)
{
MOZ_ASSERT
(
!
IsShorthand
(
aProperty
)
)
;
if
(
PropHasFlags
(
aProperty
Flags
:
:
IsLogical
)
)
{
return
Servo_ResolveLogicalProperty
(
aProperty
&
aStyle
)
;
}
return
aProperty
;
}
private
:
static
const
nsCSSPropertyID
*
const
kSubpropertyTable
[
eCSSProperty_COUNT
-
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
bool
IsBackdropFilterAvailable
(
JSContext
*
JSObject
*
)
{
return
IsEnabled
(
eCSSProperty_backdrop_filter
EnabledState
:
:
ForAllContent
)
;
}
static
void
RecomputeEnabledState
(
const
char
*
aPrefName
void
*
aClosure
=
nullptr
)
;
static
mozilla
:
:
gfx
:
:
gfxVarReceiver
&
GfxVarReceiver
(
)
;
static
const
nsCSSPropertyID
*
SubpropertyEntryFor
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
eCSSProperty_COUNT_no_shorthands
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kSubpropertyTable
[
aProperty
-
eCSSProperty_COUNT_no_shorthands
]
;
}
private
:
static
bool
gPropertyEnabled
[
eCSSProperty_COUNT_with_aliases
]
;
static
const
char
*
const
kIDLNameTable
[
eCSSProperty_COUNT
]
;
static
const
int32_t
kIDLNameSortPositionTable
[
eCSSProperty_COUNT
]
;
public
:
static
const
char
*
PropertyIDLName
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameTable
[
aProperty
]
;
}
static
int32_t
PropertyIDLNameSortPosition
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameSortPositionTable
[
aProperty
]
;
}
static
bool
IsEnabled
(
nsCSSPropertyID
aProperty
EnabledState
aEnabled
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_with_aliases
"
out
of
range
"
)
;
MOZ_ASSERT_IF
(
!
XRE_IsParentProcess
(
)
mozilla
:
:
Preferences
:
:
ArePrefsInitedInContentProcess
(
)
)
;
if
(
gPropertyEnabled
[
aProperty
]
)
{
return
true
;
}
if
(
aEnabled
=
=
EnabledState
:
:
IgnoreEnabledState
)
{
return
true
;
}
if
(
(
aEnabled
&
EnabledState
:
:
InUASheets
)
&
&
PropHasFlags
(
aProperty
Flags
:
:
EnabledInUASheets
)
)
{
return
true
;
}
if
(
(
aEnabled
&
EnabledState
:
:
InChrome
)
&
&
PropHasFlags
(
aProperty
Flags
:
:
EnabledInChrome
)
)
{
return
true
;
}
return
false
;
}
struct
PropertyPref
{
nsCSSPropertyID
mPropID
;
const
char
*
mPref
;
}
;
static
const
PropertyPref
kPropertyPrefTable
[
]
;
#
define
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
it_
prop_
enabledstate_
)
\
for
(
const
nsCSSPropertyID
*
\
it_
=
nsCSSProps
:
:
SubpropertyEntryFor
(
prop_
)
\
es_
=
(
nsCSSPropertyID
)
(
(
enabledstate_
)
|
CSSEnabledState
(
0
)
)
;
\
*
it_
!
=
eCSSProperty_UNKNOWN
;
+
+
it_
)
\
if
(
nsCSSProps
:
:
IsEnabled
(
*
it_
(
mozilla
:
:
CSSEnabledState
)
es_
)
)
}
;
inline
std
:
:
ostream
&
operator
<
<
(
std
:
:
ostream
&
aOut
nsCSSPropertyID
aProperty
)
{
return
aOut
<
<
nsCSSProps
:
:
GetStringValue
(
aProperty
)
;
}
#
endif
