#
ifndef
nsCSSProps_h___
#
define
nsCSSProps_h___
#
include
<
limits
>
#
include
<
type_traits
>
#
include
"
nsStringFwd
.
h
"
#
include
"
nsCSSPropertyID
.
h
"
#
include
"
nsStyleStructFwd
.
h
"
#
include
"
nsCSSKeywords
.
h
"
#
include
"
mozilla
/
CSSEnabledState
.
h
"
#
include
"
mozilla
/
CSSPropFlags
.
h
"
#
include
"
mozilla
/
UseCounter
.
h
"
#
include
"
mozilla
/
EnumTypeTraits
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
nsXULAppAPI
.
h
"
#
define
CSS_CUSTOM_NAME_PREFIX_LENGTH
2
struct
nsCSSKTableEntry
{
constexpr
nsCSSKTableEntry
(
nsCSSKeyword
aKeyword
int16_t
aValue
)
:
mKeyword
(
aKeyword
)
mValue
(
aValue
)
{
}
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
constexpr
nsCSSKTableEntry
(
nsCSSKeyword
aKeyword
T
aValue
)
:
mKeyword
(
aKeyword
)
mValue
(
static_cast
<
int16_t
>
(
aValue
)
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int16_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
mValue
"
)
;
}
bool
IsSentinel
(
)
const
{
return
mKeyword
=
=
eCSSKeyword_UNKNOWN
&
&
mValue
=
=
-
1
;
}
nsCSSKeyword
mKeyword
;
int16_t
mValue
;
}
;
class
nsCSSProps
{
public
:
typedef
mozilla
:
:
CSSEnabledState
EnabledState
;
typedef
mozilla
:
:
CSSPropFlags
Flags
;
typedef
nsCSSKTableEntry
KTableEntry
;
static
void
AddRefTable
(
void
)
;
static
void
ReleaseTable
(
void
)
;
static
nsCSSPropertyID
LookupProperty
(
const
nsAString
&
aProperty
EnabledState
aEnabled
)
;
static
nsCSSPropertyID
LookupPropertyByIDLName
(
const
nsAString
&
aPropertyIDLName
EnabledState
aEnabled
)
;
static
nsCSSPropertyID
LookupPropertyByIDLName
(
const
nsACString
&
aPropertyIDLName
EnabledState
aEnabled
)
;
static
bool
IsCustomPropertyName
(
const
nsAString
&
aProperty
)
;
static
inline
bool
IsShorthand
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
(
aProperty
>
=
eCSSProperty_COUNT_no_shorthands
)
;
}
static
nsCSSFontDesc
LookupFontDesc
(
const
nsAString
&
aProperty
)
;
static
const
nsCString
&
GetStringValue
(
nsCSSPropertyID
aProperty
)
;
static
const
nsCString
&
GetStringValue
(
nsCSSFontDesc
aFontDesc
)
;
static
const
nsCString
&
GetStringValue
(
nsCSSCounterDesc
aCounterDesc
)
;
static
int32_t
FindIndexOfKeyword
(
nsCSSKeyword
aKeyword
const
KTableEntry
aTable
[
]
)
;
static
bool
FindKeyword
(
nsCSSKeyword
aKeyword
const
KTableEntry
aTable
[
]
int32_t
&
aValue
)
;
static
nsCSSKeyword
ValueToKeywordEnum
(
int32_t
aValue
const
KTableEntry
aTable
[
]
)
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
static
nsCSSKeyword
ValueToKeywordEnum
(
T
aValue
const
KTableEntry
aTable
[
]
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int16_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
KTableEntry
:
:
mValue
"
)
;
return
ValueToKeywordEnum
(
static_cast
<
int16_t
>
(
aValue
)
aTable
)
;
}
static
const
nsCString
&
ValueToKeyword
(
int32_t
aValue
const
KTableEntry
aTable
[
]
)
;
template
<
typename
T
typename
=
typename
std
:
:
enable_if
<
std
:
:
is_enum
<
T
>
:
:
value
>
:
:
type
>
static
const
nsCString
&
ValueToKeyword
(
T
aValue
const
KTableEntry
aTable
[
]
)
{
static_assert
(
mozilla
:
:
EnumTypeFitsWithin
<
T
int16_t
>
:
:
value
"
aValue
must
be
an
enum
that
fits
within
KTableEntry
:
:
mValue
"
)
;
return
ValueToKeyword
(
static_cast
<
int16_t
>
(
aValue
)
aTable
)
;
}
private
:
static
const
Flags
kFlagsTable
[
eCSSProperty_COUNT
]
;
public
:
static
inline
bool
PropHasFlags
(
nsCSSPropertyID
aProperty
Flags
aFlags
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
(
nsCSSProps
:
:
kFlagsTable
[
aProperty
]
&
aFlags
)
=
=
aFlags
;
}
private
:
static
const
nsCSSPropertyID
*
const
kSubpropertyTable
[
eCSSProperty_COUNT
-
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
inline
const
nsCSSPropertyID
*
SubpropertyEntryFor
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
eCSSProperty_COUNT_no_shorthands
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
nsCSSProps
:
:
kSubpropertyTable
[
aProperty
-
eCSSProperty_COUNT_no_shorthands
]
;
}
private
:
static
bool
gPropertyEnabled
[
eCSSProperty_COUNT_with_aliases
]
;
private
:
static
const
char
*
const
kIDLNameTable
[
eCSSProperty_COUNT
]
;
public
:
static
const
char
*
PropertyIDLName
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameTable
[
aProperty
]
;
}
private
:
static
const
int32_t
kIDLNameSortPositionTable
[
eCSSProperty_COUNT
]
;
public
:
static
int32_t
PropertyIDLNameSortPosition
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT
"
out
of
range
"
)
;
return
kIDLNameSortPositionTable
[
aProperty
]
;
}
static
bool
IsEnabled
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_with_aliases
"
out
of
range
"
)
;
MOZ_ASSERT_IF
(
!
XRE_IsParentProcess
(
)
mozilla
:
:
Preferences
:
:
ArePrefsInitedInContentProcess
(
)
)
;
return
gPropertyEnabled
[
aProperty
]
;
}
static
const
mozilla
:
:
UseCounter
gPropertyUseCounter
[
eCSSProperty_COUNT_no_shorthands
]
;
public
:
static
mozilla
:
:
UseCounter
UseCounterFor
(
nsCSSPropertyID
aProperty
)
{
MOZ_ASSERT
(
0
<
=
aProperty
&
&
aProperty
<
eCSSProperty_COUNT_no_shorthands
"
out
of
range
"
)
;
return
gPropertyUseCounter
[
aProperty
]
;
}
static
bool
IsEnabled
(
nsCSSPropertyID
aProperty
EnabledState
aEnabled
)
{
if
(
IsEnabled
(
aProperty
)
)
{
return
true
;
}
if
(
aEnabled
=
=
EnabledState
:
:
eIgnoreEnabledState
)
{
return
true
;
}
if
(
(
aEnabled
&
EnabledState
:
:
eInUASheets
)
&
&
PropHasFlags
(
aProperty
Flags
:
:
EnabledInUASheets
)
)
{
return
true
;
}
if
(
(
aEnabled
&
EnabledState
:
:
eInChrome
)
&
&
PropHasFlags
(
aProperty
Flags
:
:
EnabledInChrome
)
)
{
return
true
;
}
return
false
;
}
public
:
struct
PropertyPref
{
nsCSSPropertyID
mPropID
;
const
char
*
mPref
;
}
;
static
const
PropertyPref
kPropertyPrefTable
[
]
;
#
define
CSSPROPS_FOR_SHORTHAND_SUBPROPERTIES
(
it_
prop_
enabledstate_
)
\
for
(
const
nsCSSPropertyID
*
it_
=
nsCSSProps
:
:
SubpropertyEntryFor
(
prop_
)
\
es_
=
(
nsCSSPropertyID
)
(
(
enabledstate_
)
|
\
CSSEnabledState
(
0
)
)
;
\
*
it_
!
=
eCSSProperty_UNKNOWN
;
+
+
it_
)
\
if
(
nsCSSProps
:
:
IsEnabled
(
*
it_
(
mozilla
:
:
CSSEnabledState
)
es_
)
)
static
const
KTableEntry
kAnimationDirectionKTable
[
]
;
static
const
KTableEntry
kAnimationFillModeKTable
[
]
;
static
const
KTableEntry
kAnimationPlayStateKTable
[
]
;
static
const
KTableEntry
kAppearanceKTable
[
]
;
static
const
KTableEntry
kBackfaceVisibilityKTable
[
]
;
static
const
KTableEntry
kTransformStyleKTable
[
]
;
static
const
KTableEntry
kImageLayerAttachmentKTable
[
]
;
static
const
KTableEntry
kBackgroundOriginKTable
[
]
;
static
const
KTableEntry
kMaskOriginKTable
[
]
;
static
const
KTableEntry
kImageLayerRepeatKTable
[
]
;
static
const
KTableEntry
kImageLayerCompositeKTable
[
]
;
static
const
KTableEntry
kImageLayerModeKTable
[
]
;
static
KTableEntry
kBackgroundClipKTable
[
]
;
static
const
KTableEntry
kMaskClipKTable
[
]
;
static
const
KTableEntry
kBlendModeKTable
[
]
;
static
const
KTableEntry
kBorderCollapseKTable
[
]
;
static
const
KTableEntry
kBorderImageRepeatKTable
[
]
;
static
const
KTableEntry
kBorderStyleKTable
[
]
;
static
const
KTableEntry
kBoxAlignKTable
[
]
;
static
const
KTableEntry
kBoxDecorationBreakKTable
[
]
;
static
const
KTableEntry
kBoxDirectionKTable
[
]
;
static
const
KTableEntry
kBoxOrientKTable
[
]
;
static
const
KTableEntry
kBoxPackKTable
[
]
;
static
const
KTableEntry
kClipPathGeometryBoxKTable
[
]
;
static
const
KTableEntry
kCounterSystemKTable
[
]
;
static
const
KTableEntry
kDominantBaselineKTable
[
]
;
static
const
KTableEntry
kShapeRadiusKTable
[
]
;
static
const
KTableEntry
kFillRuleKTable
[
]
;
static
const
KTableEntry
kFilterFunctionKTable
[
]
;
static
const
KTableEntry
kImageRenderingKTable
[
]
;
static
const
KTableEntry
kShapeOutsideShapeBoxKTable
[
]
;
static
const
KTableEntry
kShapeRenderingKTable
[
]
;
static
const
KTableEntry
kStrokeLinecapKTable
[
]
;
static
const
KTableEntry
kStrokeLinejoinKTable
[
]
;
static
const
KTableEntry
kVectorEffectKTable
[
]
;
static
const
KTableEntry
kTextAnchorKTable
[
]
;
static
const
KTableEntry
kTextRenderingKTable
[
]
;
static
const
KTableEntry
kColorAdjustKTable
[
]
;
static
const
KTableEntry
kColorInterpolationKTable
[
]
;
static
const
KTableEntry
kColumnFillKTable
[
]
;
static
const
KTableEntry
kColumnSpanKTable
[
]
;
static
const
KTableEntry
kBoxShadowTypeKTable
[
]
;
static
const
KTableEntry
kBoxSizingKTable
[
]
;
static
const
KTableEntry
kCaptionSideKTable
[
]
;
static
const
KTableEntry
kClearKTable
[
]
;
static
const
KTableEntry
kCursorKTable
[
]
;
static
const
KTableEntry
kDirectionKTable
[
]
;
static
KTableEntry
kDisplayKTable
[
]
;
static
const
KTableEntry
kEmptyCellsKTable
[
]
;
static
const
KTableEntry
kAlignAllKeywords
[
]
;
static
const
KTableEntry
kAlignOverflowPosition
[
]
;
static
const
KTableEntry
kAlignSelfPosition
[
]
;
static
const
KTableEntry
kAlignLegacy
[
]
;
static
const
KTableEntry
kAlignLegacyPosition
[
]
;
static
const
KTableEntry
kAlignAutoNormalStretchBaseline
[
]
;
static
const
KTableEntry
kAlignNormalStretchBaseline
[
]
;
static
const
KTableEntry
kAlignNormalBaseline
[
]
;
static
const
KTableEntry
kAlignContentDistribution
[
]
;
static
const
KTableEntry
kAlignContentPosition
[
]
;
static
const
KTableEntry
kAutoCompletionAlignJustifySelf
[
]
;
static
const
KTableEntry
kAutoCompletionAlignItems
[
]
;
static
const
KTableEntry
kAutoCompletionAlignJustifyContent
[
]
;
static
const
KTableEntry
kFlexDirectionKTable
[
]
;
static
const
KTableEntry
kFlexWrapKTable
[
]
;
static
const
KTableEntry
kFloatKTable
[
]
;
static
const
KTableEntry
kFloatEdgeKTable
[
]
;
static
const
KTableEntry
kFontKerningKTable
[
]
;
static
const
KTableEntry
kFontOpticalSizingKTable
[
]
;
static
const
KTableEntry
kFontSmoothingKTable
[
]
;
static
const
KTableEntry
kFontSynthesisKTable
[
]
;
static
const
KTableEntry
kFontVariantAlternatesKTable
[
]
;
static
const
KTableEntry
kFontVariantAlternatesFuncsKTable
[
]
;
static
const
KTableEntry
kFontVariantCapsKTable
[
]
;
static
const
KTableEntry
kFontVariantEastAsianKTable
[
]
;
static
const
KTableEntry
kFontVariantLigaturesKTable
[
]
;
static
const
KTableEntry
kFontVariantNumericKTable
[
]
;
static
const
KTableEntry
kFontVariantPositionKTable
[
]
;
static
const
KTableEntry
kGridAutoFlowKTable
[
]
;
static
const
KTableEntry
kGridTrackBreadthKTable
[
]
;
static
const
KTableEntry
kHyphensKTable
[
]
;
static
const
KTableEntry
kIsolationKTable
[
]
;
static
const
KTableEntry
kIMEModeKTable
[
]
;
static
const
KTableEntry
kLineHeightKTable
[
]
;
static
const
KTableEntry
kListStylePositionKTable
[
]
;
static
const
KTableEntry
kMaskTypeKTable
[
]
;
static
const
KTableEntry
kContainKTable
[
]
;
static
const
KTableEntry
kObjectFitKTable
[
]
;
static
const
KTableEntry
kOrientKTable
[
]
;
static
const
KTableEntry
kOutlineStyleKTable
[
]
;
static
const
KTableEntry
kOverflowKTable
[
]
;
static
const
KTableEntry
kOverflowSubKTable
[
]
;
static
const
KTableEntry
kOverflowClipBoxKTable
[
]
;
static
const
KTableEntry
kOverflowWrapKTable
[
]
;
static
const
KTableEntry
kPageBreakInsideKTable
[
]
;
static
const
KTableEntry
kPointerEventsKTable
[
]
;
static
const
KTableEntry
kPositionKTable
[
]
;
static
const
KTableEntry
kRadialGradientSizeKTable
[
]
;
static
const
KTableEntry
kResizeKTable
[
]
;
static
const
KTableEntry
kRubyAlignKTable
[
]
;
static
const
KTableEntry
kRubyPositionKTable
[
]
;
static
const
KTableEntry
kScrollBehaviorKTable
[
]
;
static
const
KTableEntry
kOverscrollBehaviorKTable
[
]
;
static
const
KTableEntry
kScrollSnapTypeKTable
[
]
;
static
const
KTableEntry
kStackSizingKTable
[
]
;
static
const
KTableEntry
kTableLayoutKTable
[
]
;
static
KTableEntry
kTextAlignKTable
[
]
;
static
KTableEntry
kTextAlignLastKTable
[
]
;
static
const
KTableEntry
kTextCombineUprightKTable
[
]
;
static
const
KTableEntry
kTextDecorationLineKTable
[
]
;
static
const
KTableEntry
kTextDecorationStyleKTable
[
]
;
static
const
KTableEntry
kTextEmphasisStyleShapeKTable
[
]
;
static
const
KTableEntry
kTextJustifyKTable
[
]
;
static
const
KTableEntry
kTextOrientationKTable
[
]
;
static
const
KTableEntry
kTextOverflowKTable
[
]
;
static
const
KTableEntry
kTextSizeAdjustKTable
[
]
;
static
const
KTableEntry
kTextTransformKTable
[
]
;
static
const
KTableEntry
kTouchActionKTable
[
]
;
static
const
KTableEntry
kTransformBoxKTable
[
]
;
static
const
KTableEntry
kTransitionTimingFunctionKTable
[
]
;
static
const
KTableEntry
kUnicodeBidiKTable
[
]
;
static
const
KTableEntry
kUserFocusKTable
[
]
;
static
const
KTableEntry
kUserInputKTable
[
]
;
static
const
KTableEntry
kUserModifyKTable
[
]
;
static
const
KTableEntry
kUserSelectKTable
[
]
;
static
const
KTableEntry
kVerticalAlignKTable
[
]
;
static
const
KTableEntry
kVisibilityKTable
[
]
;
static
const
KTableEntry
kWhitespaceKTable
[
]
;
static
const
KTableEntry
kWidthKTable
[
]
;
static
const
KTableEntry
kFlexBasisKTable
[
]
;
static
const
KTableEntry
kWindowDraggingKTable
[
]
;
static
const
KTableEntry
kWindowShadowKTable
[
]
;
static
const
KTableEntry
kWordBreakKTable
[
]
;
static
const
KTableEntry
kWritingModeKTable
[
]
;
}
;
#
endif
