#
ifndef
mozilla_StyleSheetHandle_h
#
define
mozilla_StyleSheetHandle_h
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
HandleRefPtr
.
h
"
#
include
"
mozilla
/
RefCountType
.
h
"
namespace
mozilla
{
namespace
dom
{
class
SRIMetadata
;
}
class
CSSStyleSheet
;
class
ServoStyleSheet
;
class
StyleSheet
;
}
class
nsIDocument
;
class
nsIPrincipal
;
class
nsIURI
;
namespace
mozilla
{
#
define
SERVO_BIT
0x1
class
StyleSheetHandle
{
public
:
typedef
HandleRefPtr
<
StyleSheetHandle
>
RefPtr
;
class
Ptr
{
public
:
friend
class
:
:
mozilla
:
:
StyleSheetHandle
;
bool
IsGecko
(
)
const
{
return
!
IsServo
(
)
;
}
bool
IsServo
(
)
const
{
MOZ_ASSERT
(
mValue
)
;
#
ifdef
MOZ_STYLO
return
mValue
&
SERVO_BIT
;
#
else
return
false
;
#
endif
}
inline
StyleSheet
*
AsStyleSheet
(
)
;
inline
const
StyleSheet
*
AsStyleSheet
(
)
const
;
CSSStyleSheet
*
AsGecko
(
)
{
MOZ_ASSERT
(
IsGecko
(
)
)
;
return
reinterpret_cast
<
CSSStyleSheet
*
>
(
mValue
)
;
}
ServoStyleSheet
*
AsServo
(
)
{
MOZ_ASSERT
(
IsServo
(
)
)
;
return
reinterpret_cast
<
ServoStyleSheet
*
>
(
mValue
&
~
SERVO_BIT
)
;
}
CSSStyleSheet
*
GetAsGecko
(
)
{
return
IsGecko
(
)
?
AsGecko
(
)
:
nullptr
;
}
ServoStyleSheet
*
GetAsServo
(
)
{
return
IsServo
(
)
?
AsServo
(
)
:
nullptr
;
}
const
CSSStyleSheet
*
AsGecko
(
)
const
{
return
const_cast
<
Ptr
*
>
(
this
)
-
>
AsGecko
(
)
;
}
const
ServoStyleSheet
*
AsServo
(
)
const
{
MOZ_ASSERT
(
IsServo
(
)
)
;
return
const_cast
<
Ptr
*
>
(
this
)
-
>
AsServo
(
)
;
}
void
*
AsVoidPtr
(
)
const
{
return
reinterpret_cast
<
void
*
>
(
mValue
&
~
SERVO_BIT
)
;
}
const
CSSStyleSheet
*
GetAsGecko
(
)
const
{
return
IsGecko
(
)
?
AsGecko
(
)
:
nullptr
;
}
const
ServoStyleSheet
*
GetAsServo
(
)
const
{
return
IsServo
(
)
?
AsServo
(
)
:
nullptr
;
}
inline
MozExternalRefCountType
AddRef
(
)
;
inline
MozExternalRefCountType
Release
(
)
;
inline
bool
IsInline
(
)
const
;
inline
nsIURI
*
GetSheetURI
(
)
const
;
inline
nsIURI
*
GetOriginalURI
(
)
const
;
inline
nsIURI
*
GetBaseURI
(
)
const
;
inline
void
SetURIs
(
nsIURI
*
aSheetURI
nsIURI
*
aOriginalSheetURI
nsIURI
*
aBaseURI
)
;
inline
bool
IsApplicable
(
)
const
;
inline
bool
HasRules
(
)
const
;
inline
nsIDocument
*
GetOwningDocument
(
)
const
;
inline
void
SetOwningDocument
(
nsIDocument
*
aDocument
)
;
inline
nsINode
*
GetOwnerNode
(
)
const
;
inline
void
SetOwningNode
(
nsINode
*
aNode
)
;
inline
StyleSheetHandle
GetParentSheet
(
)
const
;
inline
void
AppendStyleSheet
(
StyleSheetHandle
aSheet
)
;
inline
nsIPrincipal
*
Principal
(
)
const
;
inline
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
inline
CORSMode
GetCORSMode
(
)
const
;
inline
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
const
;
inline
void
GetIntegrity
(
dom
:
:
SRIMetadata
&
aResult
)
const
;
inline
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
#
ifdef
DEBUG
inline
void
List
(
FILE
*
aOut
=
stdout
int32_t
aIndex
=
0
)
const
;
#
endif
private
:
uintptr_t
mValue
;
}
;
MOZ_IMPLICIT
StyleSheetHandle
(
decltype
(
nullptr
)
=
nullptr
)
{
mPtr
.
mValue
=
0
;
}
StyleSheetHandle
(
const
StyleSheetHandle
&
aOth
)
{
mPtr
.
mValue
=
aOth
.
mPtr
.
mValue
;
}
MOZ_IMPLICIT
StyleSheetHandle
(
CSSStyleSheet
*
aSet
)
{
*
this
=
aSet
;
}
MOZ_IMPLICIT
StyleSheetHandle
(
ServoStyleSheet
*
aSet
)
{
*
this
=
aSet
;
}
MOZ_IMPLICIT
StyleSheetHandle
(
const
:
:
RefPtr
<
CSSStyleSheet
>
&
aSet
)
{
*
this
=
aSet
.
get
(
)
;
}
MOZ_IMPLICIT
StyleSheetHandle
(
const
:
:
RefPtr
<
ServoStyleSheet
>
&
aSet
)
{
*
this
=
aSet
.
get
(
)
;
}
StyleSheetHandle
&
operator
=
(
decltype
(
nullptr
)
)
{
mPtr
.
mValue
=
0
;
return
*
this
;
}
StyleSheetHandle
&
operator
=
(
CSSStyleSheet
*
aSheet
)
{
MOZ_ASSERT
(
!
(
reinterpret_cast
<
uintptr_t
>
(
aSheet
)
&
SERVO_BIT
)
"
least
significant
bit
shouldn
'
t
be
set
;
we
use
it
for
state
"
)
;
mPtr
.
mValue
=
reinterpret_cast
<
uintptr_t
>
(
aSheet
)
;
return
*
this
;
}
StyleSheetHandle
&
operator
=
(
ServoStyleSheet
*
aSheet
)
{
#
ifdef
MOZ_STYLO
MOZ_ASSERT
(
!
(
reinterpret_cast
<
uintptr_t
>
(
aSheet
)
&
SERVO_BIT
)
"
least
significant
bit
shouldn
'
t
be
set
;
we
use
it
for
state
"
)
;
mPtr
.
mValue
=
aSheet
?
(
reinterpret_cast
<
uintptr_t
>
(
aSheet
)
|
SERVO_BIT
)
:
0
;
return
*
this
;
#
else
MOZ_CRASH
(
"
should
not
have
a
ServoStyleSheet
object
when
MOZ_STYLO
is
"
"
disabled
"
)
;
#
endif
}
explicit
operator
bool
(
)
const
{
return
!
!
mPtr
.
mValue
;
}
bool
operator
!
(
)
const
{
return
!
mPtr
.
mValue
;
}
Ptr
*
operator
-
>
(
)
{
return
&
mPtr
;
}
const
Ptr
*
operator
-
>
(
)
const
{
return
&
mPtr
;
}
bool
operator
=
=
(
const
StyleSheetHandle
&
aOther
)
const
{
return
mPtr
.
mValue
=
=
aOther
.
mPtr
.
mValue
;
}
private
:
Ptr
mPtr
;
}
;
#
undef
SERVO_BIT
}
#
endif
