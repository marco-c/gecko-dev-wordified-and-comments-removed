#
include
"
nsCSSProps
.
h
"
#
include
"
mozilla
/
ArrayUtils
.
h
"
#
include
"
mozilla
/
Casting
.
h
"
#
include
"
gfxPlatform
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsIWidget
.
h
"
#
include
"
nsStyleConsts
.
h
"
#
include
"
mozilla
/
dom
/
Animation
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffectBinding
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVars
.
h
"
#
include
"
mozilla
/
gfx
/
gfxVarReceiver
.
h
"
#
include
"
mozilla
/
LookAndFeel
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsStaticNameTable
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
mozilla
/
StaticPrefs_layout
.
h
"
#
include
"
mozilla
/
StaticPtr
.
h
"
using
namespace
mozilla
;
static
int32_t
gPropertyTableRefCount
;
static
StaticAutoPtr
<
nsStaticCaseInsensitiveNameTable
>
gFontDescTable
;
static
StaticAutoPtr
<
nsStaticCaseInsensitiveNameTable
>
gCounterDescTable
;
static
StaticAutoPtr
<
nsTHashMap
<
nsCStringHashKey
nsCSSPropertyID
>
>
gPropertyIDLNameTable
;
static
const
char
*
const
kCSSRawFontDescs
[
]
=
{
#
define
CSS_FONT_DESC
(
name_
method_
)
#
name_
#
include
"
nsCSSFontDescList
.
h
"
#
undef
CSS_FONT_DESC
}
;
static
const
char
*
const
kCSSRawCounterDescs
[
]
=
{
#
define
CSS_COUNTER_DESC
(
name_
method_
)
#
name_
#
include
"
nsCSSCounterDescList
.
h
"
#
undef
CSS_COUNTER_DESC
}
;
static
nsStaticCaseInsensitiveNameTable
*
CreateStaticTable
(
const
char
*
const
aRawTable
[
]
int32_t
aLength
)
{
auto
table
=
new
nsStaticCaseInsensitiveNameTable
(
aRawTable
aLength
)
;
#
ifdef
DEBUG
for
(
int32_t
index
=
0
;
index
<
aLength
;
+
+
index
)
{
nsAutoCString
temp
(
aRawTable
[
index
]
)
;
MOZ_ASSERT
(
-
1
=
=
temp
.
FindChar
(
'
_
'
)
"
underscore
char
in
case
insensitive
name
table
"
)
;
}
#
endif
return
table
;
}
void
nsCSSProps
:
:
RecomputeEnabledState
(
const
char
*
aPref
void
*
)
{
MOZ_RELEASE_ASSERT
(
NS_IsMainThread
(
)
)
;
DebugOnly
<
bool
>
foundPref
=
false
;
for
(
const
PropertyPref
*
pref
=
kPropertyPrefTable
;
pref
-
>
mPropID
!
=
eCSSProperty_UNKNOWN
;
pref
+
+
)
{
if
(
!
aPref
|
|
!
strcmp
(
aPref
pref
-
>
mPref
)
)
{
foundPref
=
true
;
#
ifdef
FUZZING
gPropertyEnabled
[
pref
-
>
mPropID
]
=
true
;
#
else
gPropertyEnabled
[
pref
-
>
mPropID
]
=
Preferences
:
:
GetBool
(
pref
-
>
mPref
)
;
#
endif
}
}
MOZ_ASSERT
(
foundPref
)
;
}
void
nsCSSProps
:
:
AddRefTable
(
void
)
{
if
(
0
=
=
gPropertyTableRefCount
+
+
)
{
MOZ_ASSERT
(
!
gFontDescTable
"
pre
existing
array
!
"
)
;
MOZ_ASSERT
(
!
gCounterDescTable
"
pre
existing
array
!
"
)
;
MOZ_ASSERT
(
!
gPropertyIDLNameTable
"
pre
existing
array
!
"
)
;
gFontDescTable
=
CreateStaticTable
(
kCSSRawFontDescs
eCSSFontDesc_COUNT
)
;
gCounterDescTable
=
CreateStaticTable
(
kCSSRawCounterDescs
eCSSCounterDesc_COUNT
)
;
gPropertyIDLNameTable
=
new
nsTHashMap
<
nsCStringHashKey
nsCSSPropertyID
>
;
for
(
nsCSSPropertyID
p
=
nsCSSPropertyID
(
0
)
;
size_t
(
p
)
<
ArrayLength
(
kIDLNameTable
)
;
p
=
nsCSSPropertyID
(
p
+
1
)
)
{
if
(
kIDLNameTable
[
p
]
)
{
gPropertyIDLNameTable
-
>
InsertOrUpdate
(
nsDependentCString
(
kIDLNameTable
[
p
]
)
p
)
;
}
}
static
bool
prefObserversInited
=
false
;
if
(
!
prefObserversInited
)
{
prefObserversInited
=
true
;
for
(
const
PropertyPref
*
pref
=
kPropertyPrefTable
;
pref
-
>
mPropID
!
=
eCSSProperty_UNKNOWN
;
pref
+
+
)
{
nsCString
prefName
;
prefName
.
AssignLiteral
(
pref
-
>
mPref
strlen
(
pref
-
>
mPref
)
)
;
Preferences
:
:
RegisterCallback
(
nsCSSProps
:
:
RecomputeEnabledState
prefName
)
;
}
RecomputeEnabledState
(
nullptr
)
;
}
}
}
void
nsCSSProps
:
:
ReleaseTable
(
void
)
{
if
(
0
=
=
-
-
gPropertyTableRefCount
)
{
gFontDescTable
=
nullptr
;
gCounterDescTable
=
nullptr
;
gPropertyIDLNameTable
=
nullptr
;
}
}
bool
nsCSSProps
:
:
IsCustomPropertyName
(
const
nsACString
&
aProperty
)
{
return
aProperty
.
Length
(
)
>
=
CSS_CUSTOM_NAME_PREFIX_LENGTH
&
&
StringBeginsWith
(
aProperty
"
-
-
"
_ns
)
;
}
nsCSSPropertyID
nsCSSProps
:
:
LookupPropertyByIDLName
(
const
nsACString
&
aPropertyIDLName
EnabledState
aEnabled
)
{
MOZ_ASSERT
(
gPropertyIDLNameTable
"
no
lookup
table
needs
addref
"
)
;
nsCSSPropertyID
res
;
if
(
!
gPropertyIDLNameTable
-
>
Get
(
aPropertyIDLName
&
res
)
)
{
return
eCSSProperty_UNKNOWN
;
}
MOZ_ASSERT
(
res
<
eCSSProperty_COUNT
)
;
if
(
!
IsEnabled
(
res
aEnabled
)
)
{
return
eCSSProperty_UNKNOWN
;
}
return
res
;
}
nsCSSFontDesc
nsCSSProps
:
:
LookupFontDesc
(
const
nsACString
&
aFontDesc
)
{
MOZ_ASSERT
(
gFontDescTable
"
no
lookup
table
needs
addref
"
)
;
nsCSSFontDesc
which
=
nsCSSFontDesc
(
gFontDescTable
-
>
Lookup
(
aFontDesc
)
)
;
if
(
which
=
=
eCSSFontDesc_Display
&
&
!
StaticPrefs
:
:
layout_css_font_display_enabled
(
)
)
{
which
=
eCSSFontDesc_UNKNOWN
;
}
return
which
;
}
const
nsCString
&
nsCSSProps
:
:
GetStringValue
(
nsCSSFontDesc
aFontDescID
)
{
MOZ_ASSERT
(
gFontDescTable
"
no
lookup
table
needs
addref
"
)
;
if
(
gFontDescTable
)
{
return
gFontDescTable
-
>
GetStringValue
(
int32_t
(
aFontDescID
)
)
;
}
static
nsDependentCString
sNullStr
(
"
"
)
;
return
sNullStr
;
}
const
nsCString
&
nsCSSProps
:
:
GetStringValue
(
nsCSSCounterDesc
aCounterDesc
)
{
MOZ_ASSERT
(
gCounterDescTable
"
no
lookup
table
needs
addref
"
)
;
if
(
gCounterDescTable
)
{
return
gCounterDescTable
-
>
GetStringValue
(
int32_t
(
aCounterDesc
)
)
;
}
static
nsDependentCString
sNullStr
(
"
"
)
;
return
sNullStr
;
}
const
CSSPropFlags
nsCSSProps
:
:
kFlagsTable
[
eCSSProperty_COUNT
]
=
{
#
define
CSS_PROP_LONGHAND
(
name_
id_
method_
flags_
.
.
.
)
flags_
#
define
CSS_PROP_SHORTHAND
(
name_
id_
method_
flags_
.
.
.
)
flags_
#
include
"
mozilla
/
ServoCSSPropList
.
h
"
#
undef
CSS_PROP_SHORTHAND
#
undef
CSS_PROP_LONGHAND
}
;
bool
nsCSSProps
:
:
gPropertyEnabled
[
eCSSProperty_COUNT_with_aliases
]
=
{
#
define
IS_ENABLED_BY_DEFAULT
(
flags_
)
\
(
!
(
(
flags_
)
&
(
CSSPropFlags
:
:
EnabledMask
|
CSSPropFlags
:
:
Inaccessible
)
)
)
#
define
CSS_PROP_LONGHAND
(
name_
id_
method_
flags_
.
.
.
)
\
IS_ENABLED_BY_DEFAULT
(
flags_
)
#
define
CSS_PROP_SHORTHAND
(
name_
id_
method_
flags_
.
.
.
)
\
IS_ENABLED_BY_DEFAULT
(
flags_
)
#
define
CSS_PROP_ALIAS
(
.
.
.
)
true
#
include
"
mozilla
/
ServoCSSPropList
.
h
"
#
undef
CSS_PROP_ALIAS
#
undef
CSS_PROP_SHORTHAND
#
undef
CSS_PROP_LONGHAND
#
undef
IS_ENABLED_BY_DEFAULT
}
;
#
include
"
nsCSSPropsGenerated
.
inc
"
