#
include
"
nsAnimationManager
.
h
"
#
include
"
nsINode
.
h
"
#
include
"
nsTransitionManager
.
h
"
#
include
"
mozilla
/
AnimationEventDispatcher
.
h
"
#
include
"
mozilla
/
EffectCompositor
.
h
"
#
include
"
mozilla
/
MemoryReporting
.
h
"
#
include
"
mozilla
/
ServoStyleSet
.
h
"
#
include
"
mozilla
/
dom
/
AnimationEffect
.
h
"
#
include
"
mozilla
/
dom
/
DocumentTimeline
.
h
"
#
include
"
mozilla
/
dom
/
KeyframeEffect
.
h
"
#
include
"
mozilla
/
dom
/
MutationObservers
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsPresContextInlines
.
h
"
#
include
"
nsStyleChangeList
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsDOMMutationObserver
.
h
"
#
include
"
nsRFPService
.
h
"
#
include
<
algorithm
>
#
include
<
math
.
h
>
namespace
mozilla
{
namespace
dom
{
struct
ComputedEffectTiming
;
struct
EffectTiming
;
struct
OptionalEffectTiming
;
}
}
using
namespace
mozilla
;
using
namespace
mozilla
:
:
css
;
using
mozilla
:
:
dom
:
:
Animation
;
using
mozilla
:
:
dom
:
:
AnimationEffect
;
using
mozilla
:
:
dom
:
:
AnimationPlayState
;
using
mozilla
:
:
dom
:
:
ComputedEffectTiming
;
using
mozilla
:
:
dom
:
:
CSSAnimation
;
using
mozilla
:
:
dom
:
:
EffectTiming
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
dom
:
:
KeyframeEffect
;
using
mozilla
:
:
dom
:
:
MutationObservers
;
using
mozilla
:
:
dom
:
:
OptionalEffectTiming
;
static
already_AddRefed
<
CSSAnimation
>
PopExistingAnimation
(
const
nsAtom
*
aName
nsAnimationManager
:
:
CSSAnimationCollection
*
aCollection
)
{
if
(
!
aCollection
)
{
return
nullptr
;
}
for
(
size_t
idx
=
0
length
=
aCollection
-
>
mAnimations
.
Length
(
)
;
idx
!
=
length
;
+
+
idx
)
{
CSSAnimation
*
cssAnim
=
aCollection
-
>
mAnimations
[
idx
]
;
if
(
cssAnim
-
>
AnimationName
(
)
=
=
aName
)
{
RefPtr
<
CSSAnimation
>
match
=
cssAnim
;
aCollection
-
>
mAnimations
.
RemoveElementAt
(
idx
)
;
return
match
.
forget
(
)
;
}
}
return
nullptr
;
}
class
MOZ_STACK_CLASS
ServoCSSAnimationBuilder
final
{
public
:
explicit
ServoCSSAnimationBuilder
(
const
ComputedStyle
*
aComputedStyle
)
:
mComputedStyle
(
aComputedStyle
)
{
MOZ_ASSERT
(
aComputedStyle
)
;
}
bool
BuildKeyframes
(
const
Element
&
aElement
nsPresContext
*
aPresContext
nsAtom
*
aName
const
nsTimingFunction
&
aTimingFunction
nsTArray
<
Keyframe
>
&
aKeyframes
)
{
return
aPresContext
-
>
StyleSet
(
)
-
>
GetKeyframesForName
(
aElement
*
mComputedStyle
aName
aTimingFunction
aKeyframes
)
;
}
void
SetKeyframes
(
KeyframeEffect
&
aEffect
nsTArray
<
Keyframe
>
&
&
aKeyframes
)
{
aEffect
.
SetKeyframes
(
std
:
:
move
(
aKeyframes
)
mComputedStyle
)
;
}
void
NotifyNewOrRemovedAnimation
(
const
Animation
&
aAnimation
)
{
dom
:
:
AnimationEffect
*
effect
=
aAnimation
.
GetEffect
(
)
;
if
(
!
effect
)
{
return
;
}
KeyframeEffect
*
keyframeEffect
=
effect
-
>
AsKeyframeEffect
(
)
;
if
(
!
keyframeEffect
)
{
return
;
}
keyframeEffect
-
>
RequestRestyle
(
EffectCompositor
:
:
RestyleType
:
:
Standard
)
;
}
private
:
const
ComputedStyle
*
mComputedStyle
;
}
;
static
void
UpdateOldAnimationPropertiesWithNew
(
CSSAnimation
&
aOld
TimingParams
&
&
aNewTiming
nsTArray
<
Keyframe
>
&
&
aNewKeyframes
bool
aNewIsStylePaused
CSSAnimationProperties
aOverriddenProperties
ServoCSSAnimationBuilder
&
aBuilder
)
{
bool
animationChanged
=
false
;
if
(
aOld
.
GetEffect
(
)
)
{
dom
:
:
AnimationEffect
*
oldEffect
=
aOld
.
GetEffect
(
)
;
TimingParams
updatedTiming
=
oldEffect
-
>
SpecifiedTiming
(
)
;
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
Duration
)
{
updatedTiming
.
SetDuration
(
aNewTiming
.
Duration
(
)
)
;
}
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
IterationCount
)
{
updatedTiming
.
SetIterations
(
aNewTiming
.
Iterations
(
)
)
;
}
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
Direction
)
{
updatedTiming
.
SetDirection
(
aNewTiming
.
Direction
(
)
)
;
}
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
Delay
)
{
updatedTiming
.
SetDelay
(
aNewTiming
.
Delay
(
)
)
;
}
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
FillMode
)
{
updatedTiming
.
SetFill
(
aNewTiming
.
Fill
(
)
)
;
}
animationChanged
=
oldEffect
-
>
SpecifiedTiming
(
)
!
=
updatedTiming
;
oldEffect
-
>
SetSpecifiedTiming
(
std
:
:
move
(
updatedTiming
)
)
;
KeyframeEffect
*
oldKeyframeEffect
=
oldEffect
-
>
AsKeyframeEffect
(
)
;
if
(
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
Keyframes
&
&
oldKeyframeEffect
)
{
aBuilder
.
SetKeyframes
(
*
oldKeyframeEffect
std
:
:
move
(
aNewKeyframes
)
)
;
}
}
if
(
aOld
.
PlayState
(
)
!
=
AnimationPlayState
:
:
Idle
&
&
~
aOverriddenProperties
&
CSSAnimationProperties
:
:
PlayState
)
{
bool
wasPaused
=
aOld
.
PlayState
(
)
=
=
AnimationPlayState
:
:
Paused
;
if
(
!
wasPaused
&
&
aNewIsStylePaused
)
{
aOld
.
PauseFromStyle
(
)
;
animationChanged
=
true
;
}
else
if
(
wasPaused
&
&
!
aNewIsStylePaused
)
{
aOld
.
PlayFromStyle
(
)
;
animationChanged
=
true
;
}
}
if
(
animationChanged
&
&
aOld
.
IsRelevant
(
)
)
{
MutationObservers
:
:
NotifyAnimationChanged
(
&
aOld
)
;
}
}
static
already_AddRefed
<
CSSAnimation
>
BuildAnimation
(
nsPresContext
*
aPresContext
const
NonOwningAnimationTarget
&
aTarget
const
nsStyleDisplay
&
aStyleDisplay
uint32_t
animIdx
ServoCSSAnimationBuilder
&
aBuilder
nsAnimationManager
:
:
CSSAnimationCollection
*
aCollection
)
{
MOZ_ASSERT
(
aPresContext
)
;
nsAtom
*
animationName
=
aStyleDisplay
.
GetAnimationName
(
animIdx
)
;
nsTArray
<
Keyframe
>
keyframes
;
if
(
!
aBuilder
.
BuildKeyframes
(
*
aTarget
.
mElement
aPresContext
animationName
aStyleDisplay
.
GetAnimationTimingFunction
(
animIdx
)
keyframes
)
)
{
return
nullptr
;
}
TimingParams
timing
=
TimingParamsFromCSSParams
(
aStyleDisplay
.
GetAnimationDuration
(
animIdx
)
aStyleDisplay
.
GetAnimationDelay
(
animIdx
)
aStyleDisplay
.
GetAnimationIterationCount
(
animIdx
)
aStyleDisplay
.
GetAnimationDirection
(
animIdx
)
aStyleDisplay
.
GetAnimationFillMode
(
animIdx
)
)
;
bool
isStylePaused
=
aStyleDisplay
.
GetAnimationPlayState
(
animIdx
)
=
=
StyleAnimationPlayState
:
:
Paused
;
RefPtr
<
CSSAnimation
>
oldAnim
=
PopExistingAnimation
(
animationName
aCollection
)
;
if
(
oldAnim
)
{
UpdateOldAnimationPropertiesWithNew
(
*
oldAnim
std
:
:
move
(
timing
)
std
:
:
move
(
keyframes
)
isStylePaused
oldAnim
-
>
GetOverriddenProperties
(
)
aBuilder
)
;
return
oldAnim
.
forget
(
)
;
}
KeyframeEffectParams
effectOptions
;
RefPtr
<
KeyframeEffect
>
effect
=
new
dom
:
:
CSSAnimationKeyframeEffect
(
aPresContext
-
>
Document
(
)
OwningAnimationTarget
(
aTarget
.
mElement
aTarget
.
mPseudoType
)
std
:
:
move
(
timing
)
effectOptions
)
;
aBuilder
.
SetKeyframes
(
*
effect
std
:
:
move
(
keyframes
)
)
;
RefPtr
<
CSSAnimation
>
animation
=
new
CSSAnimation
(
aPresContext
-
>
Document
(
)
-
>
GetScopeObject
(
)
animationName
)
;
animation
-
>
SetOwningElement
(
OwningElementRef
(
*
aTarget
.
mElement
aTarget
.
mPseudoType
)
)
;
animation
-
>
SetTimelineNoUpdate
(
aTarget
.
mElement
-
>
OwnerDoc
(
)
-
>
Timeline
(
)
)
;
animation
-
>
SetEffectNoUpdate
(
effect
)
;
if
(
isStylePaused
)
{
animation
-
>
PauseFromStyle
(
)
;
}
else
{
animation
-
>
PlayFromStyle
(
)
;
}
aBuilder
.
NotifyNewOrRemovedAnimation
(
*
animation
)
;
return
animation
.
forget
(
)
;
}
static
nsAnimationManager
:
:
OwningCSSAnimationPtrArray
BuildAnimations
(
nsPresContext
*
aPresContext
const
NonOwningAnimationTarget
&
aTarget
const
nsStyleDisplay
&
aStyleDisplay
ServoCSSAnimationBuilder
&
aBuilder
nsAnimationManager
:
:
CSSAnimationCollection
*
aCollection
nsTHashtable
<
nsRefPtrHashKey
<
nsAtom
>
>
&
aReferencedAnimations
)
{
nsAnimationManager
:
:
OwningCSSAnimationPtrArray
result
;
for
(
size_t
animIdx
=
aStyleDisplay
.
mAnimationNameCount
;
animIdx
-
-
!
=
0
;
)
{
nsAtom
*
name
=
aStyleDisplay
.
GetAnimationName
(
animIdx
)
;
if
(
name
=
=
nsGkAtoms
:
:
_empty
)
{
continue
;
}
aReferencedAnimations
.
PutEntry
(
name
)
;
RefPtr
<
CSSAnimation
>
dest
=
BuildAnimation
(
aPresContext
aTarget
aStyleDisplay
animIdx
aBuilder
aCollection
)
;
if
(
!
dest
)
{
continue
;
}
dest
-
>
SetAnimationIndex
(
static_cast
<
uint64_t
>
(
animIdx
)
)
;
result
.
AppendElement
(
dest
)
;
}
return
result
;
}
void
nsAnimationManager
:
:
UpdateAnimations
(
dom
:
:
Element
*
aElement
PseudoStyleType
aPseudoType
const
ComputedStyle
*
aComputedStyle
)
{
MOZ_ASSERT
(
mPresContext
-
>
IsDynamic
(
)
"
Should
not
update
animations
for
print
or
print
preview
"
)
;
MOZ_ASSERT
(
aElement
-
>
IsInComposedDoc
(
)
"
Should
not
update
animations
that
are
not
attached
to
the
"
"
document
tree
"
)
;
const
nsStyleDisplay
*
disp
=
aComputedStyle
?
aComputedStyle
-
>
StyleDisplay
(
)
:
nullptr
;
if
(
!
disp
|
|
disp
-
>
mDisplay
=
=
StyleDisplay
:
:
None
)
{
StopAnimationsForElement
(
aElement
aPseudoType
)
;
return
;
}
NonOwningAnimationTarget
target
(
aElement
aPseudoType
)
;
ServoCSSAnimationBuilder
builder
(
aComputedStyle
)
;
DoUpdateAnimations
(
target
*
disp
builder
)
;
}
void
nsAnimationManager
:
:
DoUpdateAnimations
(
const
NonOwningAnimationTarget
&
aTarget
const
nsStyleDisplay
&
aStyleDisplay
ServoCSSAnimationBuilder
&
aBuilder
)
{
CSSAnimationCollection
*
collection
=
CSSAnimationCollection
:
:
GetAnimationCollection
(
aTarget
.
mElement
aTarget
.
mPseudoType
)
;
if
(
!
collection
&
&
aStyleDisplay
.
mAnimationNameCount
=
=
1
&
&
aStyleDisplay
.
mAnimations
[
0
]
.
GetName
(
)
=
=
nsGkAtoms
:
:
_empty
)
{
return
;
}
nsAutoAnimationMutationBatch
mb
(
aTarget
.
mElement
-
>
OwnerDoc
(
)
)
;
OwningCSSAnimationPtrArray
newAnimations
=
BuildAnimations
(
mPresContext
aTarget
aStyleDisplay
aBuilder
collection
mMaybeReferencedAnimations
)
;
if
(
newAnimations
.
IsEmpty
(
)
)
{
if
(
collection
)
{
collection
-
>
Destroy
(
)
;
}
return
;
}
if
(
!
collection
)
{
bool
createdCollection
=
false
;
collection
=
CSSAnimationCollection
:
:
GetOrCreateAnimationCollection
(
aTarget
.
mElement
aTarget
.
mPseudoType
&
createdCollection
)
;
if
(
!
collection
)
{
MOZ_ASSERT
(
!
createdCollection
"
outparam
should
agree
with
return
value
"
)
;
NS_WARNING
(
"
allocating
collection
failed
"
)
;
return
;
}
if
(
createdCollection
)
{
AddElementCollection
(
collection
)
;
}
}
collection
-
>
mAnimations
.
SwapElements
(
newAnimations
)
;
for
(
size_t
newAnimIdx
=
newAnimations
.
Length
(
)
;
newAnimIdx
-
-
!
=
0
;
)
{
aBuilder
.
NotifyNewOrRemovedAnimation
(
*
newAnimations
[
newAnimIdx
]
)
;
newAnimations
[
newAnimIdx
]
-
>
CancelFromStyle
(
PostRestyleMode
:
:
IfNeeded
)
;
}
}
