const
is_chrome_window
=
window
.
location
.
protocol
=
=
=
"
chrome
:
"
;
var
expected_values
=
[
[
"
color
"
null
8
]
[
"
color
-
index
"
null
0
]
[
"
aspect
-
ratio
"
null
window
.
innerWidth
+
"
/
"
+
window
.
innerHeight
]
[
"
device
-
aspect
-
ratio
"
screen
.
width
+
"
/
"
+
screen
.
height
window
.
innerWidth
+
"
/
"
+
window
.
innerHeight
]
[
"
device
-
height
"
screen
.
height
+
"
px
"
window
.
innerHeight
+
"
px
"
]
[
"
device
-
width
"
screen
.
width
+
"
px
"
window
.
innerWidth
+
"
px
"
]
[
"
grid
"
null
0
]
[
"
height
"
window
.
innerHeight
+
"
px
"
window
.
innerHeight
+
"
px
"
]
[
"
monochrome
"
null
0
]
[
"
orientation
"
null
window
.
innerWidth
>
window
.
innerHeight
?
"
landscape
"
:
"
portrait
"
]
[
"
resolution
"
null
"
96dpi
"
]
[
"
resolution
"
[
0
.
999
*
window
.
devicePixelRatio
+
"
dppx
"
1
.
001
*
window
.
devicePixelRatio
+
"
dppx
"
]
"
1dppx
"
]
[
"
width
"
window
.
innerWidth
+
"
px
"
window
.
innerWidth
+
"
px
"
]
[
"
-
moz
-
device
-
pixel
-
ratio
"
window
.
devicePixelRatio
1
]
[
"
-
moz
-
device
-
orientation
"
screen
.
width
>
screen
.
height
?
"
landscape
"
:
"
portrait
"
window
.
innerWidth
>
window
.
innerHeight
?
"
landscape
"
:
"
portrait
"
]
]
;
var
suppressed_toggles
=
[
"
-
moz
-
mac
-
graphite
-
theme
"
"
-
moz
-
scrollbar
-
end
-
backward
"
"
-
moz
-
scrollbar
-
end
-
forward
"
"
-
moz
-
scrollbar
-
start
-
backward
"
"
-
moz
-
scrollbar
-
start
-
forward
"
"
-
moz
-
scrollbar
-
thumb
-
proportional
"
"
-
moz
-
touch
-
enabled
"
"
-
moz
-
windows
-
compositor
"
"
-
moz
-
windows
-
default
-
theme
"
"
-
moz
-
windows
-
glass
"
]
;
var
toggles_enabled_in_content
=
[
"
-
moz
-
mac
-
graphite
-
theme
"
"
-
moz
-
touch
-
enabled
"
"
-
moz
-
windows
-
compositor
"
"
-
moz
-
windows
-
default
-
theme
"
"
-
moz
-
windows
-
glass
"
]
;
var
windows_versions
=
[
"
windows
-
win7
"
"
windows
-
win8
"
"
windows
-
win10
"
]
;
var
windows_themes
=
[
"
aero
"
"
aero
-
lite
"
"
luna
-
blue
"
"
luna
-
olive
"
"
luna
-
silver
"
"
royale
"
"
generic
"
"
zune
"
]
;
var
OS
=
SpecialPowers
.
Services
.
appinfo
.
OS
;
if
(
OS
=
=
=
"
WINNT
"
)
{
suppressed_toggles
.
push
(
"
-
moz
-
windows
-
classic
"
)
;
toggles_enabled_in_content
.
push
(
"
-
moz
-
windows
-
classic
"
)
;
}
var
keyValMatches
=
(
key
val
)
=
>
matchMedia
(
"
(
"
+
key
+
"
:
"
+
val
+
"
)
"
)
.
matches
;
var
testMatch
=
function
(
key
val
)
{
if
(
val
=
=
=
null
)
{
return
;
}
else
if
(
Array
.
isArray
(
val
)
)
{
ok
(
keyValMatches
(
"
min
-
"
+
key
val
[
0
]
)
&
&
keyValMatches
(
"
max
-
"
+
key
val
[
1
]
)
"
Expected
"
+
key
+
"
between
"
+
val
[
0
]
+
"
and
"
+
val
[
1
]
)
;
}
else
{
ok
(
keyValMatches
(
key
val
)
"
Expected
"
+
key
+
"
:
"
+
val
)
;
}
}
;
var
testToggles
=
function
(
resisting
)
{
suppressed_toggles
.
forEach
(
function
(
key
)
{
var
exists
=
keyValMatches
(
key
0
)
|
|
keyValMatches
(
key
1
)
;
if
(
resisting
|
|
(
toggles_enabled_in_content
.
indexOf
(
key
)
=
=
=
-
1
&
&
!
is_chrome_window
)
)
{
ok
(
!
exists
key
+
"
should
not
exist
.
"
)
;
}
else
{
ok
(
exists
key
+
"
should
exist
.
"
)
;
}
}
)
;
}
;
var
testWindowsSpecific
=
function
(
resisting
queryName
possibleValues
)
{
let
foundValue
=
null
;
possibleValues
.
forEach
(
function
(
val
)
{
if
(
keyValMatches
(
queryName
val
)
)
{
foundValue
=
val
;
}
}
)
;
if
(
resisting
)
{
ok
(
!
foundValue
queryName
+
"
should
have
no
match
"
)
;
}
else
{
ok
(
foundValue
foundValue
?
(
"
Match
found
:
'
"
+
queryName
+
"
:
"
+
foundValue
+
"
'
"
)
:
"
Should
have
a
match
for
'
"
+
queryName
+
"
'
"
)
;
}
}
;
var
generateHtmlLines
=
function
(
resisting
)
{
let
lines
=
"
"
;
expected_values
.
forEach
(
function
(
[
key
offVal
onVal
]
)
{
let
val
=
resisting
?
onVal
:
offVal
;
if
(
val
)
{
lines
+
=
"
<
div
class
=
'
spoof
'
id
=
'
"
+
key
+
"
'
>
"
+
key
+
"
<
/
div
>
\
n
"
;
}
}
)
;
suppressed_toggles
.
forEach
(
function
(
key
)
{
lines
+
=
"
<
div
class
=
'
suppress
'
id
=
'
"
+
key
+
"
'
>
"
+
key
+
"
<
/
div
>
\
n
"
;
}
)
;
if
(
OS
=
=
=
"
WINNT
"
)
{
lines
+
=
"
<
div
class
=
'
windows
'
id
=
'
-
moz
-
os
-
version
'
>
-
moz
-
os
-
version
<
/
div
>
"
;
lines
+
=
"
<
div
class
=
'
windows
'
id
=
'
-
moz
-
windows
-
theme
'
>
-
moz
-
windows
-
theme
<
/
div
>
"
;
}
return
lines
;
}
;
var
cssLine
=
function
(
query
clazz
id
color
)
{
return
"
media
"
+
query
+
"
{
.
"
+
clazz
+
"
#
"
+
id
+
"
{
background
-
color
:
"
+
color
+
"
;
}
}
\
n
"
;
}
;
var
constructQuery
=
function
(
key
val
)
{
return
Array
.
isArray
(
val
)
?
"
(
min
-
"
+
key
+
"
:
"
+
val
[
0
]
+
"
)
and
(
max
-
"
+
key
+
"
:
"
+
val
[
1
]
+
"
)
"
:
"
(
"
+
key
+
"
:
"
+
val
+
"
)
"
;
}
;
var
mediaQueryCSSLine
=
function
(
key
val
color
)
{
if
(
val
=
=
=
null
)
{
return
"
"
;
}
return
cssLine
(
constructQuery
(
key
val
)
"
spoof
"
key
color
)
;
}
;
var
suppressedMediaQueryCSSLine
=
function
(
key
color
suppressed
)
{
let
query
=
"
(
"
+
key
+
"
:
0
)
(
"
+
key
+
"
:
1
)
"
;
return
cssLine
(
query
"
suppress
"
key
color
)
;
}
;
var
generateCSSLines
=
function
(
resisting
)
{
let
lines
=
"
.
spoof
{
background
-
color
:
red
;
}
\
n
"
;
expected_values
.
forEach
(
function
(
[
key
offVal
onVal
]
)
{
lines
+
=
mediaQueryCSSLine
(
key
resisting
?
onVal
:
offVal
"
green
"
)
;
}
)
;
lines
+
=
"
.
suppress
{
background
-
color
:
"
+
(
resisting
?
"
green
"
:
"
red
"
)
+
"
;
}
\
n
"
;
suppressed_toggles
.
forEach
(
function
(
key
)
{
if
(
toggles_enabled_in_content
.
indexOf
(
key
)
=
=
=
-
1
&
&
!
resisting
&
&
!
is_chrome_window
)
{
lines
+
=
"
#
"
+
key
+
"
{
background
-
color
:
green
;
}
\
n
"
;
}
else
{
lines
+
=
suppressedMediaQueryCSSLine
(
key
resisting
?
"
red
"
:
"
green
"
)
;
}
}
)
;
if
(
OS
=
=
=
"
WINNT
"
)
{
lines
+
=
"
.
windows
{
background
-
color
:
"
+
(
resisting
?
"
green
"
:
"
red
"
)
+
"
;
}
\
n
"
;
lines
+
=
windows_versions
.
map
(
val
=
>
"
(
-
moz
-
os
-
version
:
"
+
val
+
"
)
"
)
.
join
(
"
"
)
+
"
{
#
-
moz
-
os
-
version
{
background
-
color
:
"
+
(
resisting
?
"
red
"
:
"
green
"
)
+
"
;
}
}
\
n
"
;
lines
+
=
windows_themes
.
map
(
val
=
>
"
(
-
moz
-
windows
-
theme
:
"
+
val
+
"
)
"
)
.
join
(
"
"
)
+
"
{
#
-
moz
-
windows
-
theme
{
background
-
color
:
"
+
(
resisting
?
"
red
"
:
"
green
"
)
+
"
;
}
}
\
n
"
;
}
return
lines
;
}
;
var
green
=
(
function
(
)
{
let
temp
=
document
.
createElement
(
"
span
"
)
;
temp
.
style
.
backgroundColor
=
"
green
"
;
return
getComputedStyle
(
temp
)
.
backgroundColor
;
}
)
(
)
;
var
testCSS
=
function
(
resisting
)
{
document
.
getElementById
(
"
display
"
)
.
innerHTML
=
generateHtmlLines
(
resisting
)
;
document
.
getElementById
(
"
test
-
css
"
)
.
innerHTML
=
generateCSSLines
(
resisting
)
;
let
cssTestDivs
=
document
.
querySelectorAll
(
"
.
spoof
.
suppress
"
)
;
for
(
let
div
of
cssTestDivs
)
{
let
color
=
window
.
getComputedStyle
(
div
)
.
backgroundColor
;
ok
(
color
=
=
=
green
"
CSS
for
'
"
+
div
.
id
+
"
'
"
)
;
}
}
;
var
testOSXFontSmoothing
=
function
(
resisting
)
{
let
div
=
document
.
createElement
(
"
div
"
)
;
div
.
style
.
MozOsxFontSmoothing
=
"
unset
"
;
let
readBack
=
window
.
getComputedStyle
(
div
)
.
MozOsxFontSmoothing
;
let
smoothingPref
=
SpecialPowers
.
getBoolPref
(
"
layout
.
css
.
osx
-
font
-
smoothing
.
enabled
"
false
)
;
is
(
readBack
resisting
?
"
"
:
(
smoothingPref
?
"
auto
"
:
"
"
)
"
-
moz
-
osx
-
font
-
smoothing
"
)
;
}
;
var
sleep
=
function
(
timeoutMs
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
window
.
setTimeout
(
resolve
)
;
}
)
;
}
;
var
testMediaQueriesInPictureElements
=
async
function
(
resisting
)
{
let
lines
=
"
"
;
for
(
let
[
key
offVal
onVal
]
of
expected_values
)
{
let
expected
=
resisting
?
onVal
:
offVal
;
if
(
expected
)
{
let
query
=
constructQuery
(
key
expected
)
;
lines
+
=
"
<
picture
>
\
n
"
;
lines
+
=
"
<
source
srcset
=
'
/
tests
/
layout
/
style
/
test
/
chrome
/
match
.
png
'
media
=
'
"
+
query
+
"
'
/
>
\
n
"
;
lines
+
=
"
<
img
title
=
'
"
+
key
+
"
:
"
+
expected
+
"
'
class
=
'
testImage
'
src
=
'
/
tests
/
layout
/
style
/
test
/
chrome
/
mismatch
.
png
'
alt
=
'
"
+
key
+
"
'
/
>
\
n
"
;
lines
+
=
"
<
/
picture
>
<
br
/
>
\
n
"
;
}
}
document
.
getElementById
(
"
pictures
"
)
.
innerHTML
=
lines
;
var
testImages
=
document
.
getElementsByClassName
(
"
testImage
"
)
;
await
sleep
(
0
)
;
for
(
let
testImage
of
testImages
)
{
ok
(
testImage
.
currentSrc
.
endsWith
(
"
/
match
.
png
"
)
"
Media
query
'
"
+
testImage
.
title
+
"
'
in
picture
should
match
.
"
)
;
}
}
;
var
pushPref
=
function
(
key
value
)
{
return
new
Promise
(
function
(
resolve
reject
)
{
SpecialPowers
.
pushPrefEnv
(
{
"
set
"
:
[
[
key
value
]
]
}
resolve
)
;
}
)
;
}
;
var
test
=
async
function
(
isContent
)
{
for
(
prefValue
of
[
false
true
]
)
{
await
pushPref
(
"
privacy
.
resistFingerprinting
"
prefValue
)
;
let
resisting
=
prefValue
&
&
isContent
;
expected_values
.
forEach
(
function
(
[
key
offVal
onVal
]
)
{
testMatch
(
key
resisting
?
onVal
:
offVal
)
;
}
)
;
testToggles
(
resisting
)
;
if
(
OS
=
=
=
"
WINNT
"
)
{
testWindowsSpecific
(
resisting
"
-
moz
-
os
-
version
"
windows_versions
)
;
testWindowsSpecific
(
resisting
"
-
moz
-
windows
-
theme
"
windows_themes
)
;
}
testCSS
(
resisting
)
;
if
(
OS
=
=
=
"
Darwin
"
)
{
testOSXFontSmoothing
(
resisting
)
;
}
await
testMediaQueriesInPictureElements
(
resisting
)
;
}
}
;
