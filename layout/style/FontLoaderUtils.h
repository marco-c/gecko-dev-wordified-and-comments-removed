#
ifndef
GECKO_LAYOUT_STYLE_FONTLOADERUTILS_H_
#
define
GECKO_LAYOUT_STYLE_FONTLOADERUTILS_H_
#
include
"
ErrorList
.
h
"
#
include
"
nsContentSecurityManager
.
h
"
class
gfxUserFontEntry
;
class
nsIChannel
;
class
nsIHttpChannel
;
class
nsIInterfaceRequestor
;
class
nsILoadGroup
;
class
nsIURI
;
struct
gfxFontFaceSrc
;
namespace
mozilla
{
enum
CORSMode
:
uint8_t
;
namespace
dom
{
class
Document
;
class
WorkerPrivate
;
enum
class
ReferrerPolicy
:
uint8_t
;
}
class
FontLoaderUtils
{
public
:
static
nsresult
BuildChannel
(
nsIChannel
*
*
aChannel
nsIURI
*
aURI
const
CORSMode
aCORSMode
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
gfxUserFontEntry
*
aUserFontEntry
const
gfxFontFaceSrc
*
aFontFaceSrc
dom
:
:
Document
*
aDocument
nsILoadGroup
*
aLoadGroup
nsIInterfaceRequestor
*
aCallbacks
bool
aIsPreload
)
;
static
nsresult
BuildChannel
(
nsIChannel
*
*
aChannel
nsIURI
*
aURI
const
CORSMode
aCORSMode
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
gfxUserFontEntry
*
aUserFontEntry
const
gfxFontFaceSrc
*
aFontFaceSrc
dom
:
:
WorkerPrivate
*
aWorkerPrivate
nsILoadGroup
*
aLoadGroup
nsIInterfaceRequestor
*
aCallbacks
)
;
private
:
static
void
BuildChannelFlags
(
nsIURI
*
aURI
bool
aIsPreload
nsContentSecurityManager
:
:
CORSSecurityMapping
&
aCorsMapping
nsSecurityFlags
&
aSecurityFlags
nsContentPolicyType
&
aContentPolicyType
)
;
static
nsresult
BuildChannelSetup
(
nsIChannel
*
aChannel
nsIHttpChannel
*
aHttpChannel
nsIReferrerInfo
*
aReferrerInfo
const
gfxFontFaceSrc
*
aFontFaceSrc
)
;
}
;
}
#
endif
