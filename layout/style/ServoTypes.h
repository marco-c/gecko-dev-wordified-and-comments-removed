#
ifndef
mozilla_ServoTypes_h
#
define
mozilla_ServoTypes_h
#
include
"
mozilla
/
TypedEnumBits
.
h
"
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
struct
nsStyle
#
#
name_
;
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
class
nsWindowSizes
;
struct
ServoNodeData
;
namespace
mozilla
{
class
SizeOfState
;
template
<
typename
T
>
struct
ServoUnsafeCell
{
T
value
;
ServoUnsafeCell
(
)
:
value
(
)
{
}
;
}
;
template
<
typename
T
>
struct
ServoCell
{
ServoUnsafeCell
<
T
>
value
;
T
Get
(
)
const
{
return
value
.
value
;
}
void
Set
(
T
arg
)
{
value
.
value
=
arg
;
}
ServoCell
(
)
:
value
(
)
{
}
;
}
;
enum
class
LazyComputeBehavior
{
Allow
Assert
}
;
enum
class
ServoTraversalFlags
:
uint32_t
{
Empty
=
0
AnimationOnly
=
1
<
<
0
ForCSSRuleChanges
=
1
<
<
1
Forgetful
=
1
<
<
3
ClearDirtyBits
=
1
<
<
5
ClearAnimationOnlyDirtyDescendants
=
1
<
<
6
ParallelTraversal
=
1
<
<
7
FlushThrottledAnimations
=
1
<
<
8
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
ServoTraversalFlags
)
enum
class
StyleRuleInclusion
{
All
DefaultOnly
}
;
enum
class
UpdateAnimationsTasks
:
uint8_t
{
CSSAnimations
=
1
<
<
0
CSSTransitions
=
1
<
<
1
EffectProperties
=
1
<
<
2
CascadeResults
=
1
<
<
3
DisplayChangedFromNone
=
1
<
<
4
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
UpdateAnimationsTasks
)
enum
class
ParsingMode
:
uint8_t
{
Default
=
0
AllowUnitlessLength
=
1
<
<
0
AllowAllNumericValues
=
1
<
<
1
}
;
MOZ_MAKE_ENUM_CLASS_BITWISE_OPERATORS
(
ParsingMode
)
enum
class
InheritTarget
{
Text
FirstLetterContinuation
PlaceholderFrame
}
;
struct
ServoWritingMode
{
uint8_t
mBits
;
}
;
struct
ServoCustomPropertiesMap
{
uintptr_t
mPtr
;
}
;
struct
ServoRuleNode
{
uintptr_t
mPtr
;
}
;
class
ServoStyleContext
;
struct
ServoVisitedStyle
{
ServoStyleContext
*
mPtr
;
}
;
template
<
typename
T
>
struct
ServoRawOffsetArc
{
T
*
mPtr
;
}
;
struct
ServoComputedValueFlags
{
uint16_t
mFlags
;
}
;
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
struct
Gecko
#
#
name_
;
#
define
STYLE_STRUCT_LIST_IGNORE_VARIABLES
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
#
undef
STYLE_STRUCT_LIST_IGNORE_VARIABLES
class
ServoStyleSetSizes
{
public
:
size_t
mRuleTree
;
size_t
mPrecomputedPseudos
;
size_t
mElementAndPseudosMaps
;
size_t
mInvalidationMap
;
size_t
mRevalidationSelectors
;
size_t
mOther
;
ServoStyleSetSizes
(
)
:
mRuleTree
(
0
)
mPrecomputedPseudos
(
0
)
mElementAndPseudosMaps
(
0
)
mInvalidationMap
(
0
)
mRevalidationSelectors
(
0
)
mOther
(
0
)
{
}
}
;
}
class
ServoComputedData
;
struct
ServoComputedDataForgotten
{
explicit
ServoComputedDataForgotten
(
const
ServoComputedData
*
aValue
)
:
mPtr
(
aValue
)
{
}
const
ServoComputedData
*
mPtr
;
}
;
class
ServoComputedData
{
friend
class
mozilla
:
:
ServoStyleContext
;
public
:
explicit
ServoComputedData
(
const
ServoComputedDataForgotten
aValue
)
;
#
define
STYLE_STRUCT
(
name_
checkdata_cb_
)
\
mozilla
:
:
ServoRawOffsetArc
<
mozilla
:
:
Gecko
#
#
name_
>
name_
;
\
inline
const
nsStyle
#
#
name_
*
GetStyle
#
#
name_
(
)
const
;
#
define
STYLE_STRUCT_LIST_IGNORE_VARIABLES
#
include
"
nsStyleStructList
.
h
"
#
undef
STYLE_STRUCT
#
undef
STYLE_STRUCT_LIST_IGNORE_VARIABLES
const
nsStyleVariables
*
GetStyleVariables
(
)
const
;
void
AddSizeOfExcludingThis
(
nsWindowSizes
&
aSizes
)
const
;
private
:
mozilla
:
:
ServoCustomPropertiesMap
custom_properties
;
mozilla
:
:
ServoWritingMode
writing_mode
;
mozilla
:
:
ServoComputedValueFlags
flags
;
mozilla
:
:
ServoRuleNode
rules
;
mozilla
:
:
ServoVisitedStyle
visited_style
;
ServoComputedData
&
operator
=
(
const
ServoComputedData
&
)
=
delete
;
ServoComputedData
(
const
ServoComputedData
&
)
=
delete
;
ServoComputedData
&
&
operator
=
(
const
ServoComputedData
&
&
)
=
delete
;
ServoComputedData
(
const
ServoComputedData
&
&
)
=
delete
;
}
;
#
endif
