#
include
"
mozilla
/
ServoElementSnapshot
.
h
"
#
include
"
mozilla
/
GeckoBindings
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
nsIContentInlines
.
h
"
#
include
"
nsContentUtils
.
h
"
namespace
mozilla
{
ServoElementSnapshot
:
:
ServoElementSnapshot
(
const
Element
&
aElement
)
:
mState
(
0
)
mContains
(
Flags
(
0
)
)
mIsTableBorderNonzero
(
false
)
mIsSelectListBox
(
false
)
mClassAttributeChanged
(
false
)
mIdAttributeChanged
(
false
)
{
MOZ_COUNT_CTOR
(
ServoElementSnapshot
)
;
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
mIsInChromeDocument
=
nsContentUtils
:
:
IsChromeDoc
(
aElement
.
OwnerDoc
(
)
)
;
mSupportsLangAttr
=
aElement
.
SupportsLangAttr
(
)
;
}
void
ServoElementSnapshot
:
:
AddOtherPseudoClassState
(
const
Element
&
aElement
)
{
if
(
HasOtherPseudoClassState
(
)
)
{
return
;
}
mIsTableBorderNonzero
=
Gecko_IsTableBorderNonzero
(
&
aElement
)
;
mIsSelectListBox
=
Gecko_IsSelectListBox
(
&
aElement
)
;
mContains
|
=
Flags
:
:
OtherPseudoClassState
;
}
void
ServoElementSnapshot
:
:
AddAttrs
(
const
Element
&
aElement
int32_t
aNameSpaceID
nsAtom
*
aAttribute
)
{
if
(
aNameSpaceID
=
=
kNameSpaceID_None
)
{
if
(
aAttribute
=
=
nsGkAtoms
:
:
_class
)
{
if
(
mClassAttributeChanged
)
{
return
;
}
mClassAttributeChanged
=
true
;
}
else
if
(
aAttribute
=
=
nsGkAtoms
:
:
id
)
{
if
(
mIdAttributeChanged
)
{
return
;
}
mIdAttributeChanged
=
true
;
}
}
if
(
!
mChangedAttrNames
.
Contains
(
aAttribute
)
)
{
mChangedAttrNames
.
AppendElement
(
aAttribute
)
;
}
if
(
HasAttrs
(
)
)
{
return
;
}
uint32_t
attrCount
=
aElement
.
GetAttrCount
(
)
;
mAttrs
.
SetCapacity
(
attrCount
)
;
for
(
uint32_t
i
=
0
;
i
<
attrCount
;
+
+
i
)
{
const
BorrowedAttrInfo
info
=
aElement
.
GetAttrInfoAt
(
i
)
;
MOZ_ASSERT
(
info
)
;
mAttrs
.
AppendElement
(
AttrArray
:
:
InternalAttr
{
*
info
.
mName
*
info
.
mValue
}
)
;
}
mContains
|
=
Flags
:
:
Attributes
;
if
(
aElement
.
HasID
(
)
)
{
mContains
|
=
Flags
:
:
Id
;
}
if
(
const
nsAttrValue
*
classValue
=
aElement
.
GetClasses
(
)
)
{
mClass
=
*
classValue
;
mContains
|
=
Flags
:
:
MaybeClass
;
}
}
void
ServoElementSnapshot
:
:
AddCustomStates
(
Element
&
aElement
)
{
if
(
mContains
&
Flags
:
:
CustomState
)
{
return
;
}
mCustomStates
=
aElement
.
EnsureCustomStates
(
)
.
Clone
(
)
;
mContains
|
=
Flags
:
:
CustomState
;
}
}
