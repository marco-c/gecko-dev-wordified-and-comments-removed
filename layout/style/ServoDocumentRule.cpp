#
include
"
mozilla
/
ServoBindings
.
h
"
#
include
"
mozilla
/
ServoDocumentRule
.
h
"
using
namespace
mozilla
:
:
dom
;
namespace
mozilla
{
ServoDocumentRule
:
:
ServoDocumentRule
(
RefPtr
<
RawServoDocumentRule
>
aRawRule
uint32_t
aLine
uint32_t
aColumn
)
:
CSSMozDocumentRule
(
Servo_DocumentRule_GetRules
(
aRawRule
)
.
Consume
(
)
)
mRawRule
(
Move
(
aRawRule
)
)
{
}
ServoDocumentRule
:
:
~
ServoDocumentRule
(
)
{
}
NS_IMPL_ADDREF_INHERITED
(
ServoDocumentRule
CSSMozDocumentRule
)
NS_IMPL_RELEASE_INHERITED
(
ServoDocumentRule
CSSMozDocumentRule
)
NS_INTERFACE_MAP_BEGIN_CYCLE_COLLECTION_INHERITED
(
ServoDocumentRule
)
NS_INTERFACE_MAP_END_INHERITING
(
CSSMozDocumentRule
)
already_AddRefed
<
css
:
:
Rule
>
ServoDocumentRule
:
:
Clone
(
)
const
{
MOZ_ASSERT_UNREACHABLE
(
"
Shouldn
'
t
be
cloning
ServoDocumentRule
"
)
;
return
nullptr
;
}
bool
ServoDocumentRule
:
:
UseForPresentation
(
nsPresContext
*
aPresContext
nsMediaQueryResultCacheKey
&
aKey
)
{
MOZ_ASSERT_UNREACHABLE
(
"
Shouldn
'
t
be
calling
UseForPresentation
"
)
;
return
false
;
}
#
ifdef
DEBUG
void
ServoDocumentRule
:
:
List
(
FILE
*
out
int32_t
aIndent
)
const
{
nsAutoCString
str
;
for
(
int32_t
i
=
0
;
i
<
aIndent
;
i
+
+
)
{
str
.
AppendLiteral
(
"
"
)
;
}
Servo_DocumentRule_Debug
(
mRawRule
&
str
)
;
fprintf_stderr
(
out
"
%
s
\
n
"
str
.
get
(
)
)
;
}
#
endif
NS_IMETHODIMP
ServoDocumentRule
:
:
GetConditionText
(
nsAString
&
aConditionText
)
{
Servo_DocumentRule_GetConditionText
(
mRawRule
&
aConditionText
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ServoDocumentRule
:
:
SetConditionText
(
const
nsAString
&
aConditionText
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
void
ServoDocumentRule
:
:
GetCssTextImpl
(
nsAString
&
aCssText
)
const
{
Servo_DocumentRule_GetCssText
(
mRawRule
&
aCssText
)
;
}
size_t
ServoDocumentRule
:
:
SizeOfIncludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
aMallocSizeOf
(
this
)
;
}
}
