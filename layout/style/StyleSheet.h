#
ifndef
mozilla_StyleSheet_h
#
define
mozilla_StyleSheet_h
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleSheetBinding
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
StyleBackendType
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
class
nsIDocument
;
class
nsINode
;
namespace
mozilla
{
class
CSSStyleSheet
;
class
ServoStyleSheet
;
struct
StyleSheetInfo
;
namespace
dom
{
class
SRIMetadata
;
}
class
StyleSheet
{
protected
:
StyleSheet
(
StyleBackendType
aType
css
:
:
SheetParsingMode
aParsingMode
)
;
StyleSheet
(
const
StyleSheet
&
aCopy
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
public
:
void
SetOwningNode
(
nsINode
*
aOwningNode
)
{
mOwningNode
=
aOwningNode
;
}
css
:
:
SheetParsingMode
ParsingMode
(
)
{
return
mParsingMode
;
}
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
ParsingModeDOM
(
)
;
nsIDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
bool
IsComplete
(
)
const
;
void
SetComplete
(
)
;
MOZ_DECL_STYLO_METHODS
(
CSSStyleSheet
ServoStyleSheet
)
inline
MozExternalRefCountType
AddRef
(
)
;
inline
MozExternalRefCountType
Release
(
)
;
inline
bool
IsInline
(
)
const
;
inline
nsIURI
*
GetSheetURI
(
)
const
;
inline
nsIURI
*
GetOriginalURI
(
)
const
;
inline
nsIURI
*
GetBaseURI
(
)
const
;
inline
void
SetURIs
(
nsIURI
*
aSheetURI
nsIURI
*
aOriginalSheetURI
nsIURI
*
aBaseURI
)
;
inline
bool
IsApplicable
(
)
const
;
inline
bool
HasRules
(
)
const
;
nsIDocument
*
GetOwningDocument
(
)
const
{
return
mDocument
;
}
inline
void
SetOwningDocument
(
nsIDocument
*
aDocument
)
;
nsINode
*
GetOwnerNode
(
)
const
{
return
mOwningNode
;
}
inline
StyleSheet
*
GetParentSheet
(
)
const
;
inline
void
AppendStyleSheet
(
StyleSheet
*
aSheet
)
;
inline
nsIPrincipal
*
Principal
(
)
const
;
inline
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
inline
CORSMode
GetCORSMode
(
)
const
;
inline
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
const
;
inline
void
GetIntegrity
(
dom
:
:
SRIMetadata
&
aResult
)
const
;
inline
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
#
ifdef
DEBUG
inline
void
List
(
FILE
*
aOut
=
stdout
int32_t
aIndex
=
0
)
const
;
#
endif
private
:
inline
StyleSheetInfo
&
SheetInfo
(
)
;
inline
const
StyleSheetInfo
&
SheetInfo
(
)
const
;
protected
:
nsIDocument
*
mDocument
;
nsINode
*
mOwningNode
;
css
:
:
SheetParsingMode
mParsingMode
;
StyleBackendType
mType
;
bool
mDisabled
;
}
;
}
#
endif
