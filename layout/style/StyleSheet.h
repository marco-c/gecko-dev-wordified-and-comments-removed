#
ifndef
mozilla_StyleSheet_h
#
define
mozilla_StyleSheet_h
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleSheetBinding
.
h
"
#
include
"
mozilla
/
dom
/
SRIMetadata
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
MozPromise
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
mozilla
/
ServoBindingTypes
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
mozilla
/
StyleSheetInfo
.
h
"
#
include
"
mozilla
/
URLExtraData
.
h
"
#
include
"
nsICSSLoaderObserver
.
h
"
#
include
"
nsWrapperCache
.
h
"
#
include
"
nsCompatibility
.
h
"
#
include
"
nsStringFwd
.
h
"
class
nsIDocument
;
class
nsINode
;
class
nsIPrincipal
;
namespace
mozilla
{
class
ServoCSSRuleList
;
class
ServoStyleSet
;
typedef
MozPromise
<
bool
bool
true
>
StyleSheetParsePromise
;
namespace
css
{
class
GroupRule
;
class
Loader
;
class
LoaderReusableStyleSheets
;
class
Rule
;
class
SheetLoadData
;
}
namespace
dom
{
class
CSSImportRule
;
class
CSSRuleList
;
class
MediaList
;
class
ShadowRoot
;
class
SRIMetadata
;
}
class
StyleSheet
final
:
public
nsICSSLoaderObserver
public
nsWrapperCache
{
StyleSheet
(
const
StyleSheet
&
aCopy
StyleSheet
*
aParentToUse
dom
:
:
CSSImportRule
*
aOwnerRuleToUse
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
virtual
~
StyleSheet
(
)
;
public
:
StyleSheet
(
css
:
:
SheetParsingMode
aParsingMode
CORSMode
aCORSMode
net
:
:
ReferrerPolicy
aReferrerPolicy
const
dom
:
:
SRIMetadata
&
aIntegrity
)
;
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
StyleSheet
)
already_AddRefed
<
StyleSheet
>
CreateEmptyChildSheet
(
already_AddRefed
<
dom
:
:
MediaList
>
aMediaList
)
const
;
bool
HasRules
(
)
const
;
RefPtr
<
StyleSheetParsePromise
>
ParseSheet
(
css
:
:
Loader
*
aLoader
const
nsACString
&
aBytes
css
:
:
SheetLoadData
*
aLoadData
)
;
void
FinishAsyncParse
(
already_AddRefed
<
RawServoStyleSheetContents
>
aSheetContents
)
;
void
ParseSheetSync
(
css
:
:
Loader
*
aLoader
const
nsACString
&
aBytes
css
:
:
SheetLoadData
*
aLoadData
uint32_t
aLineNumber
css
:
:
LoaderReusableStyleSheets
*
aReusableSheets
=
nullptr
)
;
nsresult
ReparseSheet
(
const
nsAString
&
aInput
)
;
const
RawServoStyleSheetContents
*
RawContents
(
)
const
{
return
Inner
(
)
-
>
mContents
;
}
void
SetContentsForImport
(
const
RawServoStyleSheetContents
*
aContents
)
{
MOZ_ASSERT
(
!
Inner
(
)
-
>
mContents
)
;
Inner
(
)
-
>
mContents
=
aContents
;
}
URLExtraData
*
URLData
(
)
const
{
return
Inner
(
)
-
>
mURLData
;
}
StyleSheet
*
AsServo
(
)
{
return
this
;
}
const
StyleSheet
*
AsServo
(
)
const
{
return
this
;
}
NS_IMETHOD
StyleSheetLoaded
(
StyleSheet
*
aSheet
bool
aWasAlternate
nsresult
aStatus
)
final
;
ServoCSSRuleList
*
GetCssRulesInternal
(
)
;
OriginFlags
GetOrigin
(
)
;
enum
class
ChangeType
{
Added
Removed
ApplicableStateChanged
RuleAdded
RuleRemoved
RuleChanged
}
;
void
SetOwningNode
(
nsINode
*
aOwningNode
)
{
mOwningNode
=
aOwningNode
;
}
css
:
:
SheetParsingMode
ParsingMode
(
)
const
{
return
mParsingMode
;
}
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
ParsingModeDOM
(
)
;
bool
IsComplete
(
)
const
;
void
SetComplete
(
)
;
void
SetEnabled
(
bool
aEnabled
)
;
inline
bool
IsInline
(
)
const
;
inline
nsIURI
*
GetSheetURI
(
)
const
;
inline
nsIURI
*
GetOriginalURI
(
)
const
;
inline
nsIURI
*
GetBaseURI
(
)
const
;
inline
void
SetURIs
(
nsIURI
*
aSheetURI
nsIURI
*
aOriginalSheetURI
nsIURI
*
aBaseURI
)
;
inline
bool
IsApplicable
(
)
const
;
already_AddRefed
<
StyleSheet
>
Clone
(
StyleSheet
*
aCloneParent
dom
:
:
CSSImportRule
*
aCloneOwnerRule
nsIDocument
*
aCloneDocument
nsINode
*
aCloneOwningNode
)
const
;
bool
HasForcedUniqueInner
(
)
const
{
return
mDirtyFlags
&
FORCED_UNIQUE_INNER
;
}
bool
HasModifiedRules
(
)
const
{
return
mDirtyFlags
&
MODIFIED_RULES
;
}
void
ClearModifiedRules
(
)
{
mDirtyFlags
&
=
~
MODIFIED_RULES
;
}
inline
bool
HasUniqueInner
(
)
const
;
void
EnsureUniqueInner
(
)
;
inline
void
AssertHasUniqueInner
(
)
const
;
void
AppendAllChildSheets
(
nsTArray
<
StyleSheet
*
>
&
aArray
)
;
enum
DocumentAssociationMode
:
uint8_t
{
OwnedByDocument
NotOwnedByDocument
}
;
nsIDocument
*
GetAssociatedDocument
(
)
const
{
return
mDocument
;
}
bool
IsOwnedByDocument
(
)
const
{
return
mDocumentAssociationMode
=
=
OwnedByDocument
;
}
void
SetAssociatedDocument
(
nsIDocument
*
aDocument
DocumentAssociationMode
aMode
)
;
void
ClearAssociatedDocument
(
)
;
nsINode
*
GetOwnerNode
(
)
const
{
return
mOwningNode
;
}
inline
StyleSheet
*
GetParentSheet
(
)
const
{
return
mParent
;
}
void
SetOwnerRule
(
dom
:
:
CSSImportRule
*
aOwnerRule
)
{
mOwnerRule
=
aOwnerRule
;
}
dom
:
:
CSSImportRule
*
GetOwnerRule
(
)
const
{
return
mOwnerRule
;
}
void
PrependStyleSheet
(
StyleSheet
*
aSheet
)
;
void
PrependStyleSheetSilently
(
StyleSheet
*
aSheet
)
;
StyleSheet
*
GetFirstChild
(
)
const
;
StyleSheet
*
GetMostRecentlyAddedChildSheet
(
)
const
{
return
GetFirstChild
(
)
;
}
inline
nsIPrincipal
*
Principal
(
)
const
;
inline
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
void
SetTitle
(
const
nsAString
&
aTitle
)
{
mTitle
=
aTitle
;
}
void
SetMedia
(
dom
:
:
MediaList
*
aMedia
)
;
inline
CORSMode
GetCORSMode
(
)
const
;
inline
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
const
;
inline
void
GetIntegrity
(
dom
:
:
SRIMetadata
&
aResult
)
const
;
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
#
ifdef
DEBUG
void
List
(
FILE
*
aOut
=
stdout
int32_t
aIndex
=
0
)
const
;
#
endif
void
GetType
(
nsAString
&
aType
)
;
void
GetHref
(
nsAString
&
aHref
ErrorResult
&
aRv
)
;
inline
StyleSheet
*
GetParentStyleSheet
(
)
const
;
void
GetTitle
(
nsAString
&
aTitle
)
;
dom
:
:
MediaList
*
Media
(
)
;
bool
Disabled
(
)
const
{
return
mDisabled
;
}
void
SetDisabled
(
bool
aDisabled
)
;
void
GetSourceMapURL
(
nsAString
&
aTitle
)
;
void
SetSourceMapURL
(
const
nsAString
&
aSourceMapURL
)
;
void
SetSourceMapURLFromComment
(
const
nsAString
&
aSourceMapURLFromComment
)
;
void
GetSourceURL
(
nsAString
&
aSourceURL
)
;
void
SetSourceURL
(
const
nsAString
&
aSourceURL
)
;
css
:
:
Rule
*
GetDOMOwnerRule
(
)
const
;
dom
:
:
CSSRuleList
*
GetCssRules
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
)
;
uint32_t
InsertRule
(
const
nsAString
&
aRule
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
DeleteRule
(
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
inline
dom
:
:
ParentObject
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
void
WillDirty
(
)
;
void
RuleChanged
(
css
:
:
Rule
*
)
;
void
AddStyleSet
(
ServoStyleSet
*
aStyleSet
)
;
void
DropStyleSet
(
ServoStyleSet
*
aStyleSet
)
;
nsresult
DeleteRuleFromGroup
(
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
;
nsresult
InsertRuleIntoGroup
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
;
uint64_t
FindOwningWindowInnerID
(
)
const
;
template
<
typename
Func
>
void
EnumerateChildSheets
(
Func
aCallback
)
{
for
(
StyleSheet
*
child
=
GetFirstChild
(
)
;
child
;
child
=
child
-
>
mNext
)
{
aCallback
(
child
)
;
}
}
private
:
dom
:
:
ShadowRoot
*
GetContainingShadow
(
)
const
;
StyleSheetInfo
*
Inner
(
)
{
return
mInner
;
}
const
StyleSheetInfo
*
Inner
(
)
const
{
return
mInner
;
}
inline
StyleSheetInfo
&
SheetInfo
(
)
;
inline
const
StyleSheetInfo
&
SheetInfo
(
)
const
;
bool
AreRulesAvailable
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
protected
:
uint32_t
InsertRuleInternal
(
const
nsAString
&
aRule
uint32_t
aIndex
ErrorResult
&
)
;
void
DeleteRuleInternal
(
uint32_t
aIndex
ErrorResult
&
)
;
nsresult
InsertRuleIntoGroupInternal
(
const
nsAString
&
aRule
css
:
:
GroupRule
*
aGroup
uint32_t
aIndex
)
;
void
FinishParse
(
)
;
void
BuildChildListAfterInnerClone
(
)
;
void
DropRuleList
(
)
;
void
RuleAdded
(
css
:
:
Rule
&
)
;
void
RuleRemoved
(
css
:
:
Rule
&
)
;
void
ApplicableStateChanged
(
bool
aApplicable
)
;
struct
ChildSheetListBuilder
{
RefPtr
<
StyleSheet
>
*
sheetSlot
;
StyleSheet
*
parent
;
void
SetParentLinks
(
StyleSheet
*
aSheet
)
;
static
void
ReparentChildList
(
StyleSheet
*
aPrimarySheet
StyleSheet
*
aFirstChild
)
;
}
;
void
UnparentChildren
(
)
;
void
LastRelease
(
)
;
void
SubjectSubsumesInnerPrincipal
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
DropMedia
(
)
;
void
UnlinkInner
(
)
;
void
TraverseInner
(
nsCycleCollectionTraversalCallback
&
)
;
static
bool
RuleHasPendingChildSheet
(
css
:
:
Rule
*
aRule
)
;
StyleSheet
*
mParent
;
nsString
mTitle
;
nsIDocument
*
mDocument
;
nsINode
*
mOwningNode
;
dom
:
:
CSSImportRule
*
mOwnerRule
;
RefPtr
<
dom
:
:
MediaList
>
mMedia
;
RefPtr
<
StyleSheet
>
mNext
;
css
:
:
SheetParsingMode
mParsingMode
;
bool
mDisabled
;
enum
dirtyFlagAttributes
{
FORCED_UNIQUE_INNER
=
0x1
MODIFIED_RULES
=
0x2
}
;
uint8_t
mDirtyFlags
;
DocumentAssociationMode
mDocumentAssociationMode
;
StyleSheetInfo
*
mInner
;
nsTArray
<
ServoStyleSet
*
>
mStyleSets
;
RefPtr
<
ServoCSSRuleList
>
mRuleList
;
MozPromiseHolder
<
StyleSheetParsePromise
>
mParsePromise
;
friend
struct
mozilla
:
:
StyleSheetInfo
;
}
;
}
#
endif
