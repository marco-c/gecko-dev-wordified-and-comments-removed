#
ifndef
mozilla_StyleSheet_h
#
define
mozilla_StyleSheet_h
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleSheetBinding
.
h
"
#
include
"
mozilla
/
StyleBackendType
.
h
"
#
include
"
mozilla
/
StyleSheetHandle
.
h
"
#
include
"
mozilla
/
StyleSheetInfo
.
h
"
class
nsIDocument
;
class
nsINode
;
namespace
mozilla
{
class
CSSStyleSheet
;
class
ServoStyleSheet
;
class
StyleSheet
{
protected
:
StyleSheet
(
StyleBackendType
aType
css
:
:
SheetParsingMode
aParsingMode
)
;
StyleSheet
(
const
StyleSheet
&
aCopy
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
public
:
void
SetOwningNode
(
nsINode
*
aOwningNode
)
{
mOwningNode
=
aOwningNode
;
}
css
:
:
SheetParsingMode
ParsingMode
(
)
{
return
mParsingMode
;
}
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
ParsingModeDOM
(
)
;
nsINode
*
GetOwnerNode
(
)
const
{
return
mOwningNode
;
}
nsIDocument
*
GetDocument
(
)
const
{
return
mDocument
;
}
bool
IsComplete
(
)
const
;
void
SetComplete
(
)
;
StyleSheetInfo
&
SheetInfo
(
)
;
const
StyleSheetInfo
&
SheetInfo
(
)
const
{
return
const_cast
<
StyleSheet
*
>
(
this
)
-
>
SheetInfo
(
)
;
}
;
bool
IsGecko
(
)
const
{
return
!
IsServo
(
)
;
}
bool
IsServo
(
)
const
{
#
ifdef
MOZ_STYLO
return
mType
=
=
StyleBackendType
:
:
Servo
;
#
else
return
false
;
#
endif
}
inline
CSSStyleSheet
&
AsGecko
(
)
;
inline
ServoStyleSheet
&
AsServo
(
)
;
inline
StyleSheetHandle
AsHandle
(
)
;
inline
const
CSSStyleSheet
&
AsGecko
(
)
const
;
inline
const
ServoStyleSheet
&
AsServo
(
)
const
;
protected
:
nsIDocument
*
mDocument
;
nsINode
*
mOwningNode
;
css
:
:
SheetParsingMode
mParsingMode
;
StyleBackendType
mType
;
bool
mDisabled
;
}
;
}
#
endif
