#
ifndef
mozilla_StyleSheet_h
#
define
mozilla_StyleSheet_h
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
CSSStyleSheetBinding
.
h
"
#
include
"
mozilla
/
net
/
ReferrerPolicy
.
h
"
#
include
"
mozilla
/
StyleBackendType
.
h
"
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
ServoUtils
.
h
"
#
include
"
nsIDOMCSSStyleSheet
.
h
"
#
include
"
nsWrapperCache
.
h
"
class
nsIDocument
;
class
nsINode
;
class
nsIPrincipal
;
class
nsMediaList
;
class
nsCSSRuleProcessor
;
namespace
mozilla
{
struct
ChildSheetListBuilder
;
class
CSSStyleSheet
;
class
ServoStyleSheet
;
struct
StyleSheetInfo
;
namespace
dom
{
class
CSSRuleList
;
class
SRIMetadata
;
}
namespace
css
{
class
Rule
;
}
class
StyleSheet
:
public
nsIDOMCSSStyleSheet
public
nsWrapperCache
{
protected
:
StyleSheet
(
StyleBackendType
aType
css
:
:
SheetParsingMode
aParsingMode
)
;
StyleSheet
(
const
StyleSheet
&
aCopy
nsIDocument
*
aDocumentToUse
nsINode
*
aOwningNodeToUse
)
;
virtual
~
StyleSheet
(
)
;
public
:
NS_DECL_CYCLE_COLLECTING_ISUPPORTS
NS_DECL_CYCLE_COLLECTION_SCRIPT_HOLDER_CLASS
(
StyleSheet
)
void
SetOwningNode
(
nsINode
*
aOwningNode
)
{
mOwningNode
=
aOwningNode
;
}
css
:
:
SheetParsingMode
ParsingMode
(
)
{
return
mParsingMode
;
}
mozilla
:
:
dom
:
:
CSSStyleSheetParsingMode
ParsingModeDOM
(
)
;
bool
IsComplete
(
)
const
;
void
SetComplete
(
)
;
void
SetEnabled
(
bool
aEnabled
)
;
MOZ_DECL_STYLO_METHODS
(
CSSStyleSheet
ServoStyleSheet
)
inline
bool
IsInline
(
)
const
;
inline
nsIURI
*
GetSheetURI
(
)
const
;
inline
nsIURI
*
GetOriginalURI
(
)
const
;
inline
nsIURI
*
GetBaseURI
(
)
const
;
inline
void
SetURIs
(
nsIURI
*
aSheetURI
nsIURI
*
aOriginalSheetURI
nsIURI
*
aBaseURI
)
;
inline
bool
IsApplicable
(
)
const
;
inline
bool
HasRules
(
)
const
;
virtual
bool
IsModified
(
)
const
=
0
;
enum
DocumentAssociationMode
{
OwnedByDocument
NotOwnedByDocument
}
;
nsIDocument
*
GetAssociatedDocument
(
)
const
{
return
mDocument
;
}
bool
IsOwnedByDocument
(
)
const
{
return
mDocumentAssociationMode
=
=
OwnedByDocument
;
}
void
SetAssociatedDocument
(
nsIDocument
*
aDocument
DocumentAssociationMode
aMode
)
;
void
ClearAssociatedDocument
(
)
;
nsINode
*
GetOwnerNode
(
)
const
{
return
mOwningNode
;
}
inline
StyleSheet
*
GetParentSheet
(
)
const
{
return
mParent
;
}
void
AppendStyleSheet
(
StyleSheet
*
aSheet
)
;
StyleSheet
*
GetFirstChild
(
)
const
;
inline
nsIPrincipal
*
Principal
(
)
const
;
inline
void
SetPrincipal
(
nsIPrincipal
*
aPrincipal
)
;
void
SetTitle
(
const
nsAString
&
aTitle
)
{
mTitle
=
aTitle
;
}
void
SetMedia
(
nsMediaList
*
aMedia
)
;
inline
CORSMode
GetCORSMode
(
)
const
;
inline
net
:
:
ReferrerPolicy
GetReferrerPolicy
(
)
const
;
inline
void
GetIntegrity
(
dom
:
:
SRIMetadata
&
aResult
)
const
;
virtual
size_t
SizeOfIncludingThis
(
MallocSizeOf
aMallocSizeOf
)
const
;
#
ifdef
DEBUG
virtual
void
List
(
FILE
*
aOut
=
stdout
int32_t
aIndex
=
0
)
const
;
#
endif
inline
StyleSheet
*
GetParentStyleSheet
(
)
const
;
nsMediaList
*
Media
(
)
;
bool
Disabled
(
)
const
{
return
mDisabled
;
}
virtual
css
:
:
Rule
*
GetDOMOwnerRule
(
)
const
=
0
;
dom
:
:
CSSRuleList
*
GetCssRules
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
uint32_t
InsertRule
(
const
nsAString
&
aRule
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
DeleteRule
(
uint32_t
aIndex
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
inline
dom
:
:
ParentObject
GetParentObject
(
)
const
;
JSObject
*
WrapObject
(
JSContext
*
aCx
JS
:
:
Handle
<
JSObject
*
>
aGivenProto
)
final
;
NS_IMETHOD
GetType
(
nsAString
&
aType
)
final
;
NS_IMETHOD
GetDisabled
(
bool
*
aDisabled
)
final
;
NS_IMETHOD
SetDisabled
(
bool
aDisabled
)
final
;
NS_IMETHOD
GetOwnerNode
(
nsIDOMNode
*
*
aOwnerNode
)
final
;
NS_IMETHOD
GetParentStyleSheet
(
nsIDOMStyleSheet
*
*
aParentStyleSheet
)
final
;
NS_IMETHOD
GetHref
(
nsAString
&
aHref
)
final
;
NS_IMETHOD
GetTitle
(
nsAString
&
aTitle
)
final
;
NS_IMETHOD
GetMedia
(
nsIDOMMediaList
*
*
aMedia
)
final
;
NS_IMETHOD
GetOwnerRule
(
nsIDOMCSSRule
*
*
aOwnerRule
)
final
;
NS_IMETHOD
GetCssRules
(
nsIDOMCSSRuleList
*
*
aCssRules
)
final
;
NS_IMETHOD
InsertRule
(
const
nsAString
&
aRule
uint32_t
aIndex
uint32_t
*
aReturn
)
final
;
NS_IMETHOD
DeleteRule
(
uint32_t
aIndex
)
final
;
inline
void
WillDirty
(
)
;
inline
void
DidDirty
(
)
;
private
:
inline
StyleSheetInfo
&
SheetInfo
(
)
;
inline
const
StyleSheetInfo
&
SheetInfo
(
)
const
;
bool
AreRulesAvailable
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
protected
:
void
UnparentChildren
(
)
;
void
SubjectSubsumesInnerPrincipal
(
nsIPrincipal
&
aSubjectPrincipal
ErrorResult
&
aRv
)
;
void
DropMedia
(
)
;
void
EnabledStateChanged
(
)
;
StyleSheet
*
mParent
;
nsString
mTitle
;
nsIDocument
*
mDocument
;
nsINode
*
mOwningNode
;
RefPtr
<
nsMediaList
>
mMedia
;
RefPtr
<
StyleSheet
>
mNext
;
css
:
:
SheetParsingMode
mParsingMode
;
const
StyleBackendType
mType
;
bool
mDisabled
;
DocumentAssociationMode
mDocumentAssociationMode
;
friend
class
:
:
nsCSSRuleProcessor
;
friend
struct
mozilla
:
:
ChildSheetListBuilder
;
friend
class
mozilla
:
:
CSSStyleSheet
;
friend
class
mozilla
:
:
ServoStyleSheet
;
}
;
}
#
endif
