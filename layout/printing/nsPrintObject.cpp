#
include
"
nsPrintObject
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
namespace
mozilla
;
using
mozilla
:
:
dom
:
:
BrowsingContext
;
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
dom
:
:
Element
;
using
mozilla
:
:
dom
:
:
Selection
;
nsPrintObject
:
:
nsPrintObject
(
nsIDocShell
&
aDocShell
Document
&
aDoc
nsPrintObject
*
aParent
)
:
mDocShell
(
&
aDocShell
)
mDocument
(
&
aDoc
)
mFrameType
(
aParent
?
eIFrame
:
eDoc
)
mParent
(
aParent
)
{
MOZ_COUNT_CTOR
(
nsPrintObject
)
;
MOZ_ASSERT
(
aDoc
.
IsStaticDocument
(
)
)
;
if
(
!
aParent
)
{
DestroyPresentation
(
)
;
}
else
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aDoc
.
GetWindow
(
)
;
mContent
=
window
-
>
GetFrameElementInternal
(
)
;
}
}
nsPrintObject
:
:
~
nsPrintObject
(
)
{
MOZ_COUNT_DTOR
(
nsPrintObject
)
;
DestroyPresentation
(
)
;
mDocShell
=
nullptr
;
mTreeOwner
=
nullptr
;
}
void
nsPrintObject
:
:
DestroyPresentation
(
)
{
if
(
mDocument
)
{
if
(
RefPtr
<
PresShell
>
ps
=
mDocument
-
>
GetPresShell
(
)
)
{
MOZ_DIAGNOSTIC_ASSERT
(
!
mPresShell
|
|
ps
=
=
mPresShell
)
;
mPresShell
=
nullptr
;
nsAutoScriptBlocker
scriptBlocker
;
ps
-
>
EndObservingDocument
(
)
;
ps
-
>
Destroy
(
)
;
}
}
mPresShell
=
nullptr
;
mPresContext
=
nullptr
;
mViewManager
=
nullptr
;
}
void
nsPrintObject
:
:
EnablePrinting
(
bool
aEnable
)
{
mPrintingIsEnabled
=
aEnable
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
mKids
)
{
kid
-
>
EnablePrinting
(
aEnable
)
;
}
}
bool
nsPrintObject
:
:
HasSelection
(
)
const
{
return
mDocument
&
&
mDocument
-
>
GetProperty
(
nsGkAtoms
:
:
printselectionranges
)
;
}
void
nsPrintObject
:
:
EnablePrintingSelectionOnly
(
)
{
mPrintingIsEnabled
=
HasSelection
(
)
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
mKids
)
{
kid
-
>
EnablePrintingSelectionOnly
(
)
;
}
}
