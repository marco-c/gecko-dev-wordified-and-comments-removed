#
include
"
nsPrintObject
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsPresContext
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsDocShell
.
h
"
#
include
"
mozilla
/
PresShell
.
h
"
#
include
"
mozilla
/
dom
/
BrowsingContext
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
using
mozilla
:
:
PresShell
;
using
mozilla
:
:
dom
:
:
BrowsingContext
;
using
mozilla
:
:
dom
:
:
Document
;
using
mozilla
:
:
dom
:
:
Element
;
nsPrintObject
:
:
nsPrintObject
(
)
:
mContent
(
nullptr
)
mFrameType
(
eFrame
)
mParent
(
nullptr
)
mHasBeenPrinted
(
false
)
mDontPrint
(
true
)
mPrintAsIs
(
false
)
mInvisible
(
false
)
mDidCreateDocShell
(
false
)
mShrinkRatio
(
1
.
0
)
mZoomRatio
(
1
.
0
)
{
MOZ_COUNT_CTOR
(
nsPrintObject
)
;
}
nsPrintObject
:
:
~
nsPrintObject
(
)
{
MOZ_COUNT_DTOR
(
nsPrintObject
)
;
DestroyPresentation
(
)
;
if
(
mDidCreateDocShell
&
&
mDocShell
)
{
RefPtr
<
BrowsingContext
>
bc
(
mDocShell
-
>
GetBrowsingContext
(
)
)
;
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
Destroy
(
)
;
bc
-
>
Detach
(
)
;
}
if
(
mDocument
)
{
mDocument
-
>
RemoveProperty
(
nsGkAtoms
:
:
printselectionranges
)
;
}
mDocShell
=
nullptr
;
mTreeOwner
=
nullptr
;
}
static
nsINode
*
GetCorrespondingNodeInDocument
(
const
nsINode
*
aOrigNode
Document
&
aStaticClone
)
{
MOZ_ASSERT
(
aOrigNode
)
;
if
(
aOrigNode
-
>
IsInNativeAnonymousSubtree
(
)
|
|
aOrigNode
-
>
IsInShadowTree
(
)
)
{
return
nullptr
;
}
nsTArray
<
int32_t
>
indexArray
;
const
nsINode
*
child
=
aOrigNode
;
while
(
const
nsINode
*
parent
=
child
-
>
GetParentNode
(
)
)
{
int32_t
index
=
parent
-
>
ComputeIndexOf
(
child
)
;
MOZ_ASSERT
(
index
>
=
0
)
;
indexArray
.
AppendElement
(
index
)
;
child
=
parent
;
}
MOZ_ASSERT
(
child
-
>
IsDocument
(
)
)
;
nsINode
*
correspondingNode
=
&
aStaticClone
;
for
(
int32_t
i
:
Reversed
(
indexArray
)
)
{
correspondingNode
=
correspondingNode
-
>
GetChildAt_Deprecated
(
i
)
;
NS_ENSURE_TRUE
(
correspondingNode
nullptr
)
;
}
return
correspondingNode
;
}
static
void
CachePrintSelectionRanges
(
const
Document
&
aSourceDoc
Document
&
aStaticClone
)
{
MOZ_ASSERT
(
aStaticClone
.
IsStaticDocument
(
)
)
;
MOZ_ASSERT
(
!
aStaticClone
.
GetProperty
(
nsGkAtoms
:
:
printselectionranges
)
)
;
const
Selection
*
origSelection
=
nullptr
;
const
nsTArray
<
RefPtr
<
nsRange
>
>
*
origRanges
=
nullptr
;
bool
sourceDocIsStatic
=
aSourceDoc
.
IsStaticDocument
(
)
;
if
(
sourceDocIsStatic
)
{
origRanges
=
static_cast
<
nsTArray
<
RefPtr
<
nsRange
>
>
*
>
(
aSourceDoc
.
GetProperty
(
nsGkAtoms
:
:
printselectionranges
)
)
;
}
else
if
(
PresShell
*
shell
=
aSourceDoc
.
GetPresShell
(
)
)
{
origSelection
=
shell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
}
if
(
!
origSelection
&
&
!
origRanges
)
{
return
;
}
size_t
rangeCount
=
sourceDocIsStatic
?
origRanges
-
>
Length
(
)
:
origSelection
-
>
RangeCount
(
)
;
auto
*
printRanges
=
new
nsTArray
<
RefPtr
<
nsRange
>
>
(
rangeCount
)
;
for
(
size_t
i
=
0
;
i
<
rangeCount
;
+
+
i
)
{
const
nsRange
*
range
=
sourceDocIsStatic
?
origRanges
-
>
ElementAt
(
i
)
.
get
(
)
:
origSelection
-
>
GetRangeAt
(
i
)
;
nsINode
*
startContainer
=
range
-
>
GetStartContainer
(
)
;
nsINode
*
endContainer
=
range
-
>
GetEndContainer
(
)
;
if
(
!
startContainer
|
|
!
endContainer
)
{
continue
;
}
nsINode
*
startNode
=
GetCorrespondingNodeInDocument
(
startContainer
aStaticClone
)
;
nsINode
*
endNode
=
GetCorrespondingNodeInDocument
(
endContainer
aStaticClone
)
;
if
(
!
startNode
|
|
!
endNode
)
{
continue
;
}
RefPtr
<
nsRange
>
clonedRange
=
nsRange
:
:
Create
(
startNode
range
-
>
StartOffset
(
)
endNode
range
-
>
EndOffset
(
)
IgnoreErrors
(
)
)
;
if
(
clonedRange
&
&
!
clonedRange
-
>
Collapsed
(
)
)
{
printRanges
-
>
AppendElement
(
std
:
:
move
(
clonedRange
)
)
;
}
}
aStaticClone
.
SetProperty
(
nsGkAtoms
:
:
printselectionranges
printRanges
nsINode
:
:
DeleteProperty
<
nsTArray
<
RefPtr
<
nsRange
>
>
>
)
;
}
nsresult
nsPrintObject
:
:
InitAsRootObject
(
nsIDocShell
*
aDocShell
Document
*
aDoc
bool
aForPrintPreview
)
{
NS_ENSURE_STATE
(
aDocShell
)
;
NS_ENSURE_STATE
(
aDoc
)
;
if
(
aForPrintPreview
)
{
nsCOMPtr
<
nsIContentViewer
>
viewer
;
aDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
viewer
&
&
viewer
-
>
GetDocument
(
)
&
&
viewer
-
>
GetDocument
(
)
-
>
IsShowing
(
)
)
{
viewer
-
>
GetDocument
(
)
-
>
OnPageHide
(
false
nullptr
)
;
}
mDocShell
=
aDocShell
;
}
else
{
RefPtr
<
BrowsingContext
>
bc
=
BrowsingContext
:
:
CreateIndependent
(
nsDocShell
:
:
Cast
(
aDocShell
)
-
>
GetBrowsingContext
(
)
-
>
GetType
(
)
)
;
mDocShell
=
nsDocShell
:
:
Create
(
bc
)
;
NS_ENSURE_TRUE
(
mDocShell
NS_ERROR_OUT_OF_MEMORY
)
;
mDidCreateDocShell
=
true
;
MOZ_ASSERT
(
mDocShell
-
>
ItemType
(
)
=
=
aDocShell
-
>
ItemType
(
)
)
;
mTreeOwner
=
do_GetInterface
(
aDocShell
)
;
mDocShell
-
>
SetTreeOwner
(
mTreeOwner
)
;
mozilla
:
:
Unused
<
<
nsDocShell
:
:
Cast
(
mDocShell
)
-
>
GetDocument
(
)
;
}
mDocument
=
aDoc
-
>
CreateStaticClone
(
mDocShell
)
;
NS_ENSURE_STATE
(
mDocument
)
;
CachePrintSelectionRanges
(
*
aDoc
*
mDocument
)
;
nsCOMPtr
<
nsIContentViewer
>
viewer
;
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
NS_ENSURE_STATE
(
viewer
)
;
viewer
-
>
SetDocument
(
mDocument
)
;
return
NS_OK
;
}
nsresult
nsPrintObject
:
:
InitAsNestedObject
(
nsIDocShell
*
aDocShell
Document
*
aDoc
nsPrintObject
*
aParent
)
{
NS_ENSURE_STATE
(
aDocShell
)
;
NS_ENSURE_STATE
(
aDoc
)
;
mParent
=
aParent
;
mDocShell
=
aDocShell
;
mDocument
=
aDoc
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
aDoc
-
>
GetWindow
(
)
;
mContent
=
window
-
>
GetFrameElementInternal
(
)
;
return
NS_OK
;
}
void
nsPrintObject
:
:
DestroyPresentation
(
)
{
if
(
mPresShell
)
{
mPresShell
-
>
EndObservingDocument
(
)
;
nsAutoScriptBlocker
scriptBlocker
;
RefPtr
<
PresShell
>
presShell
=
mPresShell
;
mPresShell
=
nullptr
;
presShell
-
>
Destroy
(
)
;
}
mPresContext
=
nullptr
;
mViewManager
=
nullptr
;
}
void
nsPrintObject
:
:
SetPrintAsIs
(
bool
aAsIs
)
{
mPrintAsIs
=
aAsIs
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
mKids
)
{
kid
-
>
SetPrintAsIs
(
aAsIs
)
;
}
}
void
nsPrintObject
:
:
EnablePrinting
(
bool
aEnable
)
{
mDontPrint
=
!
aEnable
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
mKids
)
{
kid
-
>
EnablePrinting
(
aEnable
)
;
}
}
