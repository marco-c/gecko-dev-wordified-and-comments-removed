#
ifndef
mozilla_layout_RemotePrintJobChild_h
#
define
mozilla_layout_RemotePrintJobChild_h
#
include
"
mozilla
/
layout
/
PRemotePrintJobChild
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
class
nsPagePrintTimer
;
class
nsPrintJob
;
namespace
mozilla
{
namespace
layout
{
class
RemotePrintJobChild
final
:
public
PRemotePrintJobChild
public
nsIWebProgressListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIWEBPROGRESSLISTENER
RemotePrintJobChild
(
)
;
void
ActorDestroy
(
ActorDestroyReason
aWhy
)
final
override
;
nsresult
InitializePrint
(
const
nsString
&
aDocumentTitle
const
nsString
&
aPrintToFile
const
int32_t
&
aStartPage
const
int32_t
&
aEndPage
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPrintInitializationResult
(
const
nsresult
&
aRv
const
FileDescriptor
&
aFd
)
final
override
;
void
ProcessPage
(
)
;
mozilla
:
:
ipc
:
:
IPCResult
RecvPageProcessed
(
const
FileDescriptor
&
aFd
)
final
override
;
mozilla
:
:
ipc
:
:
IPCResult
RecvAbortPrint
(
const
nsresult
&
aRv
)
final
override
;
void
SetPagePrintTimer
(
nsPagePrintTimer
*
aPagePrintTimer
)
;
void
SetPrintJob
(
nsPrintJob
*
aPrintJob
)
;
PRFileDesc
*
GetNextPageFD
(
)
;
private
:
~
RemotePrintJobChild
(
)
final
;
void
SetNextPageFD
(
const
mozilla
:
:
ipc
:
:
FileDescriptor
&
aFd
)
;
bool
mPrintInitialized
=
false
;
bool
mDestroyed
=
false
;
nsresult
mInitializationResult
=
NS_OK
;
RefPtr
<
nsPagePrintTimer
>
mPagePrintTimer
;
RefPtr
<
nsPrintJob
>
mPrintJob
;
PRFileDesc
*
mNextPageFD
=
nullptr
;
}
;
}
}
#
endif
