#
include
"
RemotePrintJobChild
.
h
"
#
include
"
mozilla
/
Unused
.
h
"
#
include
"
nsPagePrintTimer
.
h
"
#
include
"
nsPrintEngine
.
h
"
namespace
mozilla
{
namespace
layout
{
NS_IMPL_ISUPPORTS
(
RemotePrintJobChild
nsIWebProgressListener
)
RemotePrintJobChild
:
:
RemotePrintJobChild
(
)
{
}
nsresult
RemotePrintJobChild
:
:
InitializePrint
(
const
nsString
&
aDocumentTitle
const
nsString
&
aPrintToFile
const
int32_t
&
aStartPage
const
int32_t
&
aEndPage
)
{
Unused
<
<
SendInitializePrint
(
aDocumentTitle
aPrintToFile
aStartPage
aEndPage
)
;
while
(
!
mPrintInitialized
)
{
Unused
<
<
NS_ProcessNextEvent
(
)
;
}
return
mInitializationResult
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemotePrintJobChild
:
:
RecvPrintInitializationResult
(
const
nsresult
&
aRv
)
{
mPrintInitialized
=
true
;
mInitializationResult
=
aRv
;
return
IPC_OK
(
)
;
}
void
RemotePrintJobChild
:
:
ProcessPage
(
const
nsCString
&
aPageFileName
)
{
MOZ_ASSERT
(
mPagePrintTimer
)
;
mPagePrintTimer
-
>
WaitForRemotePrint
(
)
;
Unused
<
<
SendProcessPage
(
aPageFileName
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemotePrintJobChild
:
:
RecvPageProcessed
(
)
{
MOZ_ASSERT
(
mPagePrintTimer
)
;
mPagePrintTimer
-
>
RemotePrintFinished
(
)
;
return
IPC_OK
(
)
;
}
mozilla
:
:
ipc
:
:
IPCResult
RemotePrintJobChild
:
:
RecvAbortPrint
(
const
nsresult
&
aRv
)
{
MOZ_ASSERT
(
mPrintEngine
)
;
mPrintEngine
-
>
CleanupOnFailure
(
aRv
true
)
;
return
IPC_OK
(
)
;
}
void
RemotePrintJobChild
:
:
SetPagePrintTimer
(
nsPagePrintTimer
*
aPagePrintTimer
)
{
MOZ_ASSERT
(
aPagePrintTimer
)
;
mPagePrintTimer
=
aPagePrintTimer
;
}
void
RemotePrintJobChild
:
:
SetPrintEngine
(
nsPrintEngine
*
aPrintEngine
)
{
MOZ_ASSERT
(
aPrintEngine
)
;
mPrintEngine
=
aPrintEngine
;
}
NS_IMETHODIMP
RemotePrintJobChild
:
:
OnStateChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
nsresult
aStatus
)
{
Unused
<
<
SendStateChange
(
aStateFlags
aStatus
)
;
return
NS_OK
;
}
NS_IMETHODIMP
RemotePrintJobChild
:
:
OnProgressChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
{
Unused
<
<
SendProgressChange
(
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
;
return
NS_OK
;
}
NS_IMETHODIMP
RemotePrintJobChild
:
:
OnLocationChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
nsIURI
*
aURI
uint32_t
aFlags
)
{
return
NS_OK
;
}
NS_IMETHODIMP
RemotePrintJobChild
:
:
OnStatusChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aMessage
)
{
Unused
<
<
SendStatusChange
(
aStatus
)
;
return
NS_OK
;
}
NS_IMETHODIMP
RemotePrintJobChild
:
:
OnSecurityChange
(
nsIWebProgress
*
aProgress
nsIRequest
*
aRequest
uint32_t
aState
)
{
return
NS_OK
;
}
RemotePrintJobChild
:
:
~
RemotePrintJobChild
(
)
{
}
void
RemotePrintJobChild
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
mPagePrintTimer
=
nullptr
;
mPrintEngine
=
nullptr
;
}
}
}
