#
include
"
RemotePrintJobParent
.
h
"
#
include
<
istream
>
#
include
"
gfxContext
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
unused
.
h
"
#
include
"
nsComponentManagerUtils
.
h
"
#
include
"
nsDeviceContext
.
h
"
#
include
"
nsIDeviceContextSpec
.
h
"
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
PrintTranslator
.
h
"
namespace
mozilla
{
namespace
layout
{
RemotePrintJobParent
:
:
RemotePrintJobParent
(
nsIPrintSettings
*
aPrintSettings
)
:
mPrintSettings
(
aPrintSettings
)
{
MOZ_COUNT_CTOR
(
RemotePrintJobParent
)
;
}
bool
RemotePrintJobParent
:
:
RecvInitializePrint
(
const
nsString
&
aDocumentTitle
const
nsString
&
aPrintToFile
const
int32_t
&
aStartPage
const
int32_t
&
aEndPage
)
{
nsresult
rv
=
InitializePrintDevice
(
aDocumentTitle
aPrintToFile
aStartPage
aEndPage
)
;
if
(
NS_FAILED
(
rv
)
)
{
Unused
<
<
SendPrintInitializationResult
(
rv
)
;
Unused
<
<
Send__delete__
(
this
)
;
return
true
;
}
mPrintTranslator
.
reset
(
new
PrintTranslator
(
mPrintDeviceContext
)
)
;
Unused
<
<
SendPrintInitializationResult
(
NS_OK
)
;
return
true
;
}
nsresult
RemotePrintJobParent
:
:
InitializePrintDevice
(
const
nsString
&
aDocumentTitle
const
nsString
&
aPrintToFile
const
int32_t
&
aStartPage
const
int32_t
&
aEndPage
)
{
nsresult
rv
;
nsCOMPtr
<
nsIDeviceContextSpec
>
deviceContextSpec
=
do_CreateInstance
(
"
mozilla
.
org
/
gfx
/
devicecontextspec
;
1
"
&
rv
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
deviceContextSpec
-
>
Init
(
nullptr
mPrintSettings
false
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
mPrintDeviceContext
=
new
nsDeviceContext
(
)
;
rv
=
mPrintDeviceContext
-
>
InitForPrinting
(
deviceContextSpec
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
rv
=
mPrintDeviceContext
-
>
BeginDocument
(
aDocumentTitle
aPrintToFile
aStartPage
aEndPage
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
bool
RemotePrintJobParent
:
:
RecvProcessPage
(
Shmem
&
&
aStoredPage
)
{
nsresult
rv
=
PrintPage
(
aStoredPage
)
;
if
(
!
DeallocShmem
(
aStoredPage
)
)
{
NS_WARNING
(
"
Failed
to
deallocated
shared
memory
remote
print
will
abort
.
"
)
;
rv
=
NS_ERROR_FAILURE
;
}
if
(
NS_FAILED
(
rv
)
)
{
Unused
<
<
SendAbortPrint
(
rv
)
;
}
else
{
Unused
<
<
SendPageProcessed
(
)
;
}
return
true
;
}
nsresult
RemotePrintJobParent
:
:
PrintPage
(
const
Shmem
&
aStoredPage
)
{
MOZ_ASSERT
(
mPrintDeviceContext
)
;
nsresult
rv
=
mPrintDeviceContext
-
>
BeginPage
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
std
:
:
istringstream
recording
(
std
:
:
string
(
aStoredPage
.
get
<
char
>
(
)
aStoredPage
.
Size
<
char
>
(
)
)
)
;
mPrintTranslator
-
>
TranslateRecording
(
recording
)
;
rv
=
mPrintDeviceContext
-
>
EndPage
(
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
return
NS_OK
;
}
bool
RemotePrintJobParent
:
:
RecvFinalizePrint
(
)
{
if
(
mPrintDeviceContext
)
{
nsresult
rv
=
mPrintDeviceContext
-
>
EndDocument
(
)
;
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
;
}
Unused
<
<
Send__delete__
(
this
)
;
return
true
;
}
bool
RemotePrintJobParent
:
:
RecvAbortPrint
(
const
nsresult
&
aRv
)
{
if
(
mPrintDeviceContext
)
{
Unused
<
<
mPrintDeviceContext
-
>
AbortDocument
(
)
;
}
Unused
<
<
Send__delete__
(
this
)
;
return
true
;
}
bool
RemotePrintJobParent
:
:
RecvStateChange
(
const
long
&
aStateFlags
const
nsresult
&
aStatus
)
{
uint32_t
numberOfListeners
=
mPrintProgressListeners
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
numberOfListeners
;
+
+
i
)
{
nsIWebProgressListener
*
listener
=
mPrintProgressListeners
.
SafeElementAt
(
i
)
;
listener
-
>
OnStateChange
(
nullptr
nullptr
aStateFlags
aStatus
)
;
}
return
true
;
}
bool
RemotePrintJobParent
:
:
RecvProgressChange
(
const
long
&
aCurSelfProgress
const
long
&
aMaxSelfProgress
const
long
&
aCurTotalProgress
const
long
&
aMaxTotalProgress
)
{
uint32_t
numberOfListeners
=
mPrintProgressListeners
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
numberOfListeners
;
+
+
i
)
{
nsIWebProgressListener
*
listener
=
mPrintProgressListeners
.
SafeElementAt
(
i
)
;
listener
-
>
OnProgressChange
(
nullptr
nullptr
aCurSelfProgress
aMaxSelfProgress
aCurTotalProgress
aMaxTotalProgress
)
;
}
return
true
;
}
bool
RemotePrintJobParent
:
:
RecvStatusChange
(
const
nsresult
&
aStatus
)
{
uint32_t
numberOfListeners
=
mPrintProgressListeners
.
Length
(
)
;
for
(
uint32_t
i
=
0
;
i
<
numberOfListeners
;
+
+
i
)
{
nsIWebProgressListener
*
listener
=
mPrintProgressListeners
.
SafeElementAt
(
i
)
;
listener
-
>
OnStatusChange
(
nullptr
nullptr
aStatus
nullptr
)
;
}
return
true
;
}
void
RemotePrintJobParent
:
:
RegisterListener
(
nsIWebProgressListener
*
aListener
)
{
MOZ_ASSERT
(
aListener
)
;
mPrintProgressListeners
.
AppendElement
(
aListener
)
;
}
RemotePrintJobParent
:
:
~
RemotePrintJobParent
(
)
{
MOZ_COUNT_DTOR
(
RemotePrintJobParent
)
;
}
void
RemotePrintJobParent
:
:
ActorDestroy
(
ActorDestroyReason
aWhy
)
{
}
}
}
