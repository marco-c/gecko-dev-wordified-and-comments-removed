#
include
"
nsPrintJob
.
h
"
#
include
"
nsIStringBundle
.
h
"
#
include
"
nsReadableUtils
.
h
"
#
include
"
nsCRT
.
h
"
#
include
"
mozilla
/
AsyncEventDispatcher
.
h
"
#
include
"
mozilla
/
dom
/
Selection
.
h
"
#
include
"
mozilla
/
dom
/
CustomEvent
.
h
"
#
include
"
nsIScriptGlobalObject
.
h
"
#
include
"
nsPIDOMWindow
.
h
"
#
include
"
nsIDocShell
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsITextToSubURI
.
h
"
#
include
"
nsError
.
h
"
#
include
"
nsView
.
h
"
#
include
<
algorithm
>
#
include
"
nsIPrintSettings
.
h
"
#
include
"
nsIPrintSettingsService
.
h
"
#
include
"
nsIPrintSession
.
h
"
#
include
"
nsGfxCIID
.
h
"
#
include
"
nsIServiceManager
.
h
"
#
include
"
nsGkAtoms
.
h
"
#
include
"
nsXPCOM
.
h
"
#
include
"
nsISupportsPrimitives
.
h
"
static
const
char
sPrintSettingsServiceContractID
[
]
=
"
mozilla
.
org
/
gfx
/
printsettings
-
service
;
1
"
;
#
include
"
nsPrintPreviewListener
.
h
"
#
include
"
nsThreadUtils
.
h
"
#
include
"
nsIWebBrowserPrint
.
h
"
#
include
"
imgIContainer
.
h
"
#
include
"
nsIWebBrowserPrint
.
h
"
#
include
"
nsIPrintProgress
.
h
"
#
include
"
nsIPrintProgressParams
.
h
"
#
include
"
nsIObserver
.
h
"
#
include
"
nsIPrompt
.
h
"
#
include
"
nsIWindowWatcher
.
h
"
#
include
"
nsIPrintingPromptService
.
h
"
static
const
char
kPrintingPromptService
[
]
=
"
mozilla
.
org
/
embedcomp
/
printingprompt
-
service
;
1
"
;
#
include
"
nsPagePrintTimer
.
h
"
#
include
"
nsIDocument
.
h
"
#
include
"
nsIDocumentInlines
.
h
"
#
include
"
nsISelectionController
.
h
"
#
include
"
gfxContext
.
h
"
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
layout
/
RemotePrintJobChild
.
h
"
#
include
"
nsISupportsUtils
.
h
"
#
include
"
nsIScriptContext
.
h
"
#
include
"
nsIDOMDocument
.
h
"
#
include
"
nsIDocumentObserver
.
h
"
#
include
"
nsISelectionListener
.
h
"
#
include
"
nsISelectionPrivate
.
h
"
#
include
"
nsIDOMRange
.
h
"
#
include
"
nsContentCID
.
h
"
#
include
"
nsLayoutCID
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIPresShell
.
h
"
#
include
"
nsLayoutStylesheetCache
.
h
"
#
include
"
nsLayoutUtils
.
h
"
#
include
"
mozilla
/
Preferences
.
h
"
#
include
"
Text
.
h
"
#
include
"
nsWidgetsCID
.
h
"
#
include
"
nsIDeviceContextSpec
.
h
"
#
include
"
nsDeviceContextSpecProxy
.
h
"
#
include
"
nsViewManager
.
h
"
#
include
"
nsView
.
h
"
#
include
"
nsIPageSequenceFrame
.
h
"
#
include
"
nsIURL
.
h
"
#
include
"
nsIContentViewerEdit
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
#
include
"
nsIDocShellTreeOwner
.
h
"
#
include
"
nsIWebBrowserChrome
.
h
"
#
include
"
nsIBaseWindow
.
h
"
#
include
"
nsILayoutHistoryState
.
h
"
#
include
"
nsFrameManager
.
h
"
#
include
"
mozilla
/
ReflowInput
.
h
"
#
include
"
nsIContentViewerContainer
.
h
"
#
include
"
nsIContentViewer
.
h
"
#
include
"
nsIDocumentViewerPrint
.
h
"
#
include
"
nsFocusManager
.
h
"
#
include
"
nsRange
.
h
"
#
include
"
nsCDefaultURIFixup
.
h
"
#
include
"
nsIURIFixup
.
h
"
#
include
"
mozilla
/
dom
/
Element
.
h
"
#
include
"
mozilla
/
dom
/
HTMLFrameElement
.
h
"
#
include
"
nsContentList
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
xpcpublic
.
h
"
#
include
"
nsVariant
.
h
"
#
include
"
mozilla
/
StyleSetHandle
.
h
"
#
include
"
mozilla
/
StyleSetHandleInlines
.
h
"
using
namespace
mozilla
;
using
namespace
mozilla
:
:
dom
;
#
include
"
mozilla
/
Logging
.
h
"
#
ifdef
DEBUG
#
endif
#
define
DUMP_LAYOUT_LEVEL
9
/
/
this
turns
on
the
dumping
of
each
doucment
'
s
layout
info
#
ifndef
PR_PL
static
mozilla
:
:
LazyLogModule
gPrintingLog
(
"
printing
"
)
#
define
PR_PL
(
_p1
)
MOZ_LOG
(
gPrintingLog
mozilla
:
:
LogLevel
:
:
Debug
_p1
)
;
#
endif
#
ifdef
EXTENDED_DEBUG_PRINTING
static
uint32_t
gDumpFileNameCnt
=
0
;
static
uint32_t
gDumpLOFileNameCnt
=
0
;
#
endif
#
define
PRT_YESNO
(
_p
)
(
(
_p
)
?
"
YES
"
:
"
NO
"
)
static
const
char
*
gFrameTypesStr
[
]
=
{
"
eDoc
"
"
eFrame
"
"
eIFrame
"
"
eFrameSet
"
}
;
static
const
char
*
gPrintFrameTypeStr
[
]
=
{
"
kNoFrames
"
"
kFramesAsIs
"
"
kSelectedFrame
"
"
kEachFrameSep
"
}
;
static
const
char
*
gFrameHowToEnableStr
[
]
=
{
"
kFrameEnableNone
"
"
kFrameEnableAll
"
"
kFrameEnableAsIsAndEach
"
}
;
static
const
char
*
gPrintRangeStr
[
]
=
{
"
kRangeAllPages
"
"
kRangeSpecifiedPageRange
"
"
kRangeSelection
"
"
kRangeFocusFrame
"
}
;
static
nsresult
DeleteUnselectedNodes
(
nsIDocument
*
aOrigDoc
nsIDocument
*
aDoc
)
;
#
ifdef
EXTENDED_DEBUG_PRINTING
static
void
DumpPrintObjectsListStart
(
const
char
*
aStr
nsTArray
<
nsPrintObject
*
>
*
aDocList
)
;
static
void
DumpPrintObjectsTree
(
nsPrintObject
*
aPO
int
aLevel
=
0
FILE
*
aFD
=
nullptr
)
;
static
void
DumpPrintObjectsTreeLayout
(
nsPrintObject
*
aPO
nsDeviceContext
*
aDC
int
aLevel
=
0
FILE
*
aFD
=
nullptr
)
;
#
define
DUMP_DOC_LIST
(
_title
)
DumpPrintObjectsListStart
(
(
_title
)
mPrt
-
>
mPrintDocList
)
;
#
define
DUMP_DOC_TREE
DumpPrintObjectsTree
(
mPrt
-
>
mPrintObject
.
get
(
)
)
;
#
define
DUMP_DOC_TREELAYOUT
DumpPrintObjectsTreeLayout
(
mPrt
-
>
mPrintObject
.
get
(
)
mPrt
-
>
mPrintDC
)
;
#
else
#
define
DUMP_DOC_LIST
(
_title
)
#
define
DUMP_DOC_TREE
#
define
DUMP_DOC_TREELAYOUT
#
endif
class
nsScriptSuppressor
{
public
:
explicit
nsScriptSuppressor
(
nsPrintJob
*
aPrintJob
)
:
mPrintJob
(
aPrintJob
)
mSuppressed
(
false
)
{
}
~
nsScriptSuppressor
(
)
{
Unsuppress
(
)
;
}
void
Suppress
(
)
{
if
(
mPrintJob
)
{
mSuppressed
=
true
;
mPrintJob
-
>
TurnScriptingOn
(
false
)
;
}
}
void
Unsuppress
(
)
{
if
(
mPrintJob
&
&
mSuppressed
)
{
mPrintJob
-
>
TurnScriptingOn
(
true
)
;
}
mSuppressed
=
false
;
}
void
Disconnect
(
)
{
mPrintJob
=
nullptr
;
}
protected
:
RefPtr
<
nsPrintJob
>
mPrintJob
;
bool
mSuppressed
;
}
;
NS_IMPL_ISUPPORTS
(
nsPrintJob
nsIWebProgressListener
nsISupportsWeakReference
nsIObserver
)
nsPrintJob
:
:
nsPrintJob
(
)
:
mIsCreatingPrintPreview
(
false
)
mIsDoingPrinting
(
false
)
mIsDoingPrintPreview
(
false
)
mProgressDialogIsShown
(
false
)
mScreenDPI
(
115
.
0f
)
mPagePrintTimer
(
nullptr
)
mLoadCounter
(
0
)
mDidLoadDataForPrinting
(
false
)
mIsDestroying
(
false
)
mDisallowSelectionPrint
(
false
)
{
}
nsPrintJob
:
:
~
nsPrintJob
(
)
{
Destroy
(
)
;
DisconnectPagePrintTimer
(
)
;
}
void
nsPrintJob
:
:
Destroy
(
)
{
if
(
mIsDestroying
)
{
return
;
}
mIsDestroying
=
true
;
mPrt
=
nullptr
;
#
ifdef
NS_PRINT_PREVIEW
mPrtPreview
=
nullptr
;
mOldPrtPreview
=
nullptr
;
#
endif
mDocViewerPrint
=
nullptr
;
}
void
nsPrintJob
:
:
DestroyPrintingData
(
)
{
mPrt
=
nullptr
;
}
nsresult
nsPrintJob
:
:
Initialize
(
nsIDocumentViewerPrint
*
aDocViewerPrint
nsIDocShell
*
aContainer
nsIDocument
*
aDocument
float
aScreenDPI
)
{
NS_ENSURE_ARG_POINTER
(
aDocViewerPrint
)
;
NS_ENSURE_ARG_POINTER
(
aContainer
)
;
NS_ENSURE_ARG_POINTER
(
aDocument
)
;
mDocViewerPrint
=
aDocViewerPrint
;
mContainer
=
do_GetWeakReference
(
aContainer
)
;
mDocument
=
aDocument
;
mScreenDPI
=
aScreenDPI
;
return
NS_OK
;
}
bool
nsPrintJob
:
:
CheckBeforeDestroy
(
)
{
if
(
mPrt
&
&
mPrt
-
>
mPreparingForPrint
)
{
mPrt
-
>
mDocWasToBeDestroyed
=
true
;
return
true
;
}
return
false
;
}
nsresult
nsPrintJob
:
:
Cancelled
(
)
{
if
(
mPrt
&
&
mPrt
-
>
mPrintSettings
)
{
return
mPrt
-
>
mPrintSettings
-
>
SetIsCancelled
(
true
)
;
}
return
NS_ERROR_FAILURE
;
}
void
nsPrintJob
:
:
InstallPrintPreviewListener
(
)
{
if
(
!
mPrt
-
>
mPPEventListeners
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
do_QueryReferent
(
mContainer
)
;
if
(
!
docShell
)
{
return
;
}
if
(
nsPIDOMWindowOuter
*
win
=
docShell
-
>
GetWindow
(
)
)
{
nsCOMPtr
<
EventTarget
>
target
=
win
-
>
GetFrameElementInternal
(
)
;
mPrt
-
>
mPPEventListeners
=
new
nsPrintPreviewListener
(
target
)
;
mPrt
-
>
mPPEventListeners
-
>
AddListeners
(
)
;
}
}
}
nsresult
nsPrintJob
:
:
GetSeqFrameAndCountPagesInternal
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsIFrame
*
&
aSeqFrame
int32_t
&
aCount
)
{
NS_ENSURE_ARG_POINTER
(
aPO
)
;
if
(
!
aPO
-
>
mPresShell
)
{
MOZ_DIAGNOSTIC_ASSERT
(
false
"
GetSeqFrameAndCountPages
needs
a
non
-
null
pres
shell
"
)
;
return
NS_ERROR_FAILURE
;
}
nsIPageSequenceFrame
*
seqFrame
=
aPO
-
>
mPresShell
-
>
GetPageSequenceFrame
(
)
;
aSeqFrame
=
do_QueryFrame
(
seqFrame
)
;
if
(
!
aSeqFrame
)
{
return
NS_ERROR_FAILURE
;
}
aCount
=
aSeqFrame
-
>
PrincipalChildList
(
)
.
GetLength
(
)
;
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
GetSeqFrameAndCountPages
(
nsIFrame
*
&
aSeqFrame
int32_t
&
aCount
)
{
MOZ_ASSERT
(
mPrtPreview
)
;
RefPtr
<
nsPrintData
>
printDataForPrintPreview
=
mPrtPreview
;
return
GetSeqFrameAndCountPagesInternal
(
printDataForPrintPreview
-
>
mPrintObject
aSeqFrame
aCount
)
;
}
#
ifdef
EXTENDED_DEBUG_PRINTING
static
int
RemoveFilesInDir
(
const
char
*
aDir
)
;
static
void
GetDocTitleAndURL
(
nsPrintObject
*
aPO
char
*
&
aDocStr
char
*
&
aURLStr
)
;
static
void
DumpPrintObjectsTree
(
nsPrintObject
*
aPO
int
aLevel
FILE
*
aFD
)
;
static
void
DumpPrintObjectsList
(
nsTArray
<
nsPrintObject
*
>
*
aDocList
)
;
static
void
RootFrameList
(
nsPresContext
*
aPresContext
FILE
*
out
int32_t
aIndent
)
;
static
void
DumpViews
(
nsIDocShell
*
aDocShell
FILE
*
out
)
;
static
void
DumpLayoutData
(
char
*
aTitleStr
char
*
aURLStr
nsPresContext
*
aPresContext
nsDeviceContext
*
aDC
nsIFrame
*
aRootFrame
nsIDocShell
*
aDocShell
FILE
*
aFD
)
;
#
endif
nsresult
nsPrintJob
:
:
CommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
nsIDOMDocument
*
aDoc
)
{
nsresult
rv
=
DoCommonPrint
(
aIsPrintPreview
aPrintSettings
aWebProgressListener
aDoc
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
aIsPrintPreview
)
{
SetIsCreatingPrintPreview
(
false
)
;
SetIsPrintPreview
(
false
)
;
}
else
{
SetIsPrinting
(
false
)
;
}
if
(
mProgressDialogIsShown
)
CloseProgressDialog
(
aWebProgressListener
)
;
if
(
rv
!
=
NS_ERROR_ABORT
&
&
rv
!
=
NS_ERROR_OUT_OF_MEMORY
)
{
FirePrintingErrorEvent
(
rv
)
;
}
mPrt
=
nullptr
;
}
return
rv
;
}
nsresult
nsPrintJob
:
:
DoCommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
nsIDOMDocument
*
aDoc
)
{
nsresult
rv
;
if
(
aIsPrintPreview
)
{
nsCOMPtr
<
nsIPrintingPromptService
>
pps
(
do_QueryInterface
(
aWebProgressListener
)
)
;
mProgressDialogIsShown
=
pps
!
=
nullptr
;
if
(
mIsDoingPrintPreview
)
{
mOldPrtPreview
=
Move
(
mPrtPreview
)
;
}
}
else
{
mProgressDialogIsShown
=
false
;
}
mPrt
=
new
nsPrintData
(
aIsPrintPreview
?
nsPrintData
:
:
eIsPrintPreview
:
nsPrintData
:
:
eIsPrinting
)
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
printData
-
>
mPrintSettings
=
aPrintSettings
;
if
(
!
printData
-
>
mPrintSettings
)
{
rv
=
GetGlobalPrintSettings
(
getter_AddRefs
(
printData
-
>
mPrintSettings
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
CheckForPrinters
(
printData
-
>
mPrintSettings
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
printData
-
>
mPrintSettings
-
>
SetIsCancelled
(
false
)
;
printData
-
>
mPrintSettings
-
>
GetShrinkToFit
(
&
printData
-
>
mShrinkToFit
)
;
if
(
aIsPrintPreview
)
{
SetIsCreatingPrintPreview
(
true
)
;
SetIsPrintPreview
(
true
)
;
nsCOMPtr
<
nsIContentViewer
>
viewer
=
do_QueryInterface
(
mDocViewerPrint
)
;
if
(
viewer
)
{
viewer
-
>
SetTextZoom
(
1
.
0f
)
;
viewer
-
>
SetFullZoom
(
1
.
0f
)
;
viewer
-
>
SetMinFontSize
(
0
)
;
}
}
nsCOMPtr
<
nsIPrintSession
>
printSession
;
bool
remotePrintJobListening
=
false
;
if
(
!
aIsPrintPreview
)
{
rv
=
printData
-
>
mPrintSettings
-
>
GetPrintSession
(
getter_AddRefs
(
printSession
)
)
;
if
(
NS_FAILED
(
rv
)
|
|
!
printSession
)
{
printSession
=
do_CreateInstance
(
"
mozilla
.
org
/
gfx
/
printsession
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
printData
-
>
mPrintSettings
-
>
SetPrintSession
(
printSession
)
;
}
else
{
RefPtr
<
mozilla
:
:
layout
:
:
RemotePrintJobChild
>
remotePrintJob
;
printSession
-
>
GetRemotePrintJob
(
getter_AddRefs
(
remotePrintJob
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
remotePrintJob
)
{
printData
-
>
mPrintProgressListeners
.
AppendElement
(
remotePrintJob
)
;
remotePrintJobListening
=
true
;
}
}
}
if
(
aWebProgressListener
!
=
nullptr
)
{
printData
-
>
mPrintProgressListeners
.
AppendObject
(
aWebProgressListener
)
;
}
printData
-
>
mCurrentFocusWin
=
FindFocusedDOMWindow
(
)
;
bool
isSelection
=
IsThereARangeSelection
(
printData
-
>
mCurrentFocusWin
)
;
nsCOMPtr
<
nsIDocShell
>
webContainer
(
do_QueryReferent
(
mContainer
&
rv
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
{
if
(
aIsPrintPreview
)
{
nsCOMPtr
<
nsIContentViewer
>
viewer
;
webContainer
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
viewer
&
&
viewer
-
>
GetDocument
(
)
&
&
viewer
-
>
GetDocument
(
)
-
>
IsShowing
(
)
)
{
viewer
-
>
GetDocument
(
)
-
>
OnPageHide
(
false
nullptr
)
;
}
}
nsAutoScriptBlocker
scriptBlocker
;
printData
-
>
mPrintObject
=
MakeUnique
<
nsPrintObject
>
(
)
;
rv
=
printData
-
>
mPrintObject
-
>
Init
(
webContainer
aDoc
aIsPrintPreview
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ENSURE_TRUE
(
printData
-
>
mPrintDocList
.
AppendElement
(
printData
-
>
mPrintObject
.
get
(
)
)
NS_ERROR_OUT_OF_MEMORY
)
;
printData
-
>
mIsParentAFrameSet
=
IsParentAFrameSet
(
webContainer
)
;
printData
-
>
mPrintObject
-
>
mFrameType
=
printData
-
>
mIsParentAFrameSet
?
eFrameSet
:
eDoc
;
BuildDocTree
(
printData
-
>
mPrintObject
-
>
mDocShell
&
printData
-
>
mPrintDocList
printData
-
>
mPrintObject
)
;
}
if
(
mIsDestroying
|
|
(
aIsPrintPreview
&
&
!
GetIsCreatingPrintPreview
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
!
aIsPrintPreview
)
{
SetIsPrinting
(
true
)
;
}
if
(
!
printData
-
>
mPrintObject
-
>
mDocument
|
|
!
printData
-
>
mPrintObject
-
>
mDocument
-
>
GetRootElement
(
)
)
return
NS_ERROR_GFX_PRINTER_STARTDOC
;
MapContentToWebShells
(
printData
-
>
mPrintObject
printData
-
>
mPrintObject
)
;
printData
-
>
mIsIFrameSelected
=
IsThereAnIFrameSelected
(
webContainer
printData
-
>
mCurrentFocusWin
printData
-
>
mIsParentAFrameSet
)
;
if
(
printData
-
>
mIsParentAFrameSet
)
{
if
(
printData
-
>
mCurrentFocusWin
)
{
printData
-
>
mPrintSettings
-
>
SetHowToEnableFrameUI
(
nsIPrintSettings
:
:
kFrameEnableAll
)
;
}
else
{
printData
-
>
mPrintSettings
-
>
SetHowToEnableFrameUI
(
nsIPrintSettings
:
:
kFrameEnableAsIsAndEach
)
;
}
}
else
{
printData
-
>
mPrintSettings
-
>
SetHowToEnableFrameUI
(
nsIPrintSettings
:
:
kFrameEnableNone
)
;
}
printData
-
>
mPrintSettings
-
>
SetPrintOptions
(
nsIPrintSettings
:
:
kEnableSelectionRB
isSelection
|
|
printData
-
>
mIsIFrameSelected
)
;
bool
printingViaParent
=
XRE_IsContentProcess
(
)
&
&
Preferences
:
:
GetBool
(
"
print
.
print_via_parent
"
)
;
nsCOMPtr
<
nsIDeviceContextSpec
>
devspec
;
if
(
printingViaParent
)
{
devspec
=
new
nsDeviceContextSpecProxy
(
)
;
}
else
{
devspec
=
do_CreateInstance
(
"
mozilla
.
org
/
gfx
/
devicecontextspec
;
1
"
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
nsScriptSuppressor
scriptSuppressor
(
this
)
;
if
(
!
aIsPrintPreview
|
|
printingViaParent
)
{
scriptSuppressor
.
Suppress
(
)
;
bool
printSilently
;
printData
-
>
mPrintSettings
-
>
GetPrintSilent
(
&
printSilently
)
;
printSilently
=
Preferences
:
:
GetBool
(
"
print
.
always_print_silent
"
printSilently
)
;
if
(
!
printSilently
|
|
printingViaParent
)
{
nsCOMPtr
<
nsIPrintingPromptService
>
printPromptService
(
do_GetService
(
kPrintingPromptService
)
)
;
if
(
printPromptService
)
{
nsPIDOMWindowOuter
*
domWin
=
nullptr
;
if
(
!
aIsPrintPreview
)
{
domWin
=
mDocument
-
>
GetWindow
(
)
;
NS_ENSURE_TRUE
(
domWin
NS_ERROR_FAILURE
)
;
}
nsCOMPtr
<
nsIWebBrowserPrint
>
wbp
(
do_QueryInterface
(
mDocViewerPrint
)
)
;
rv
=
printPromptService
-
>
ShowPrintDialog
(
domWin
wbp
printData
-
>
mPrintSettings
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
NS_SUCCEEDED
(
rv
)
)
{
printSilently
=
true
;
if
(
printData
-
>
mPrintSettings
&
&
!
aIsPrintPreview
)
{
printData
-
>
mPrintSettings
-
>
GetShrinkToFit
(
&
printData
-
>
mShrinkToFit
)
;
if
(
!
remotePrintJobListening
)
{
RefPtr
<
mozilla
:
:
layout
:
:
RemotePrintJobChild
>
remotePrintJob
;
printSession
-
>
GetRemotePrintJob
(
getter_AddRefs
(
remotePrintJob
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
remotePrintJob
)
{
printData
-
>
mPrintProgressListeners
.
AppendElement
(
remotePrintJob
)
;
remotePrintJobListening
=
true
;
}
}
}
}
else
if
(
rv
=
=
NS_ERROR_NOT_IMPLEMENTED
)
{
rv
=
NS_OK
;
}
}
else
{
rv
=
NS_ERROR_NOT_IMPLEMENTED
;
}
}
else
{
rv
=
printData
-
>
mPrintSettings
-
>
SetupSilentPrinting
(
)
;
}
if
(
rv
=
=
NS_ERROR_ABORT
)
return
rv
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
rv
=
devspec
-
>
Init
(
nullptr
printData
-
>
mPrintSettings
aIsPrintPreview
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
printData
-
>
mPrintDC
=
new
nsDeviceContext
(
)
;
rv
=
printData
-
>
mPrintDC
-
>
InitForPrinting
(
devspec
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
XRE_IsParentProcess
(
)
&
&
!
printData
-
>
mPrintDC
-
>
IsSyncPagePrinting
(
)
)
{
RefPtr
<
nsPrintJob
>
self
(
this
)
;
printData
-
>
mPrintDC
-
>
RegisterPageDoneCallback
(
[
self
]
(
nsresult
aResult
)
{
self
-
>
PageDone
(
aResult
)
;
}
)
;
}
if
(
aIsPrintPreview
)
{
printData
-
>
mPrintSettings
-
>
SetPrintFrameType
(
nsIPrintSettings
:
:
kFramesAsIs
)
;
printData
-
>
mPrintSettings
-
>
SetPrintRange
(
nsIPrintSettings
:
:
kRangeAllPages
)
;
}
else
{
int16_t
printFrameTypeUsage
=
nsIPrintSettings
:
:
kUseSettingWhenPossible
;
printData
-
>
mPrintSettings
-
>
GetPrintFrameTypeUsage
(
&
printFrameTypeUsage
)
;
if
(
printFrameTypeUsage
=
=
nsIPrintSettings
:
:
kUseSettingWhenPossible
)
{
int16_t
printFrameType
=
nsIPrintSettings
:
:
kEachFrameSep
;
printData
-
>
mPrintSettings
-
>
GetPrintFrameType
(
&
printFrameType
)
;
if
(
printFrameType
=
=
nsIPrintSettings
:
:
kNoFrames
)
{
printData
-
>
mPrintFrameType
=
nsIPrintSettings
:
:
kEachFrameSep
;
printData
-
>
mPrintSettings
-
>
SetPrintFrameType
(
printData
-
>
mPrintFrameType
)
;
}
else
{
int16_t
howToEnableFrameUI
;
printData
-
>
mPrintSettings
-
>
GetHowToEnableFrameUI
(
&
howToEnableFrameUI
)
;
if
(
howToEnableFrameUI
!
=
nsIPrintSettings
:
:
kFrameEnableNone
)
{
switch
(
howToEnableFrameUI
)
{
case
nsIPrintSettings
:
:
kFrameEnableAll
:
printData
-
>
mPrintFrameType
=
printFrameType
;
break
;
case
nsIPrintSettings
:
:
kFrameEnableAsIsAndEach
:
if
(
printFrameType
!
=
nsIPrintSettings
:
:
kSelectedFrame
)
{
printData
-
>
mPrintFrameType
=
printFrameType
;
}
else
{
printData
-
>
mPrintFrameType
=
nsIPrintSettings
:
:
kEachFrameSep
;
}
break
;
}
printData
-
>
mPrintSettings
-
>
SetPrintFrameType
(
printData
-
>
mPrintFrameType
)
;
}
}
}
else
{
printData
-
>
mPrintSettings
-
>
GetPrintFrameType
(
&
printData
-
>
mPrintFrameType
)
;
}
}
if
(
printData
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kEachFrameSep
)
{
CheckForChildFrameSets
(
printData
-
>
mPrintObject
)
;
}
if
(
NS_FAILED
(
EnablePOsForPrinting
(
)
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIWebProgress
>
webProgress
=
do_QueryInterface
(
printData
-
>
mPrintObject
-
>
mDocShell
)
;
webProgress
-
>
AddProgressListener
(
static_cast
<
nsIWebProgressListener
*
>
(
this
)
nsIWebProgress
:
:
NOTIFY_STATE_REQUEST
)
;
mLoadCounter
=
0
;
mDidLoadDataForPrinting
=
false
;
if
(
aIsPrintPreview
)
{
bool
notifyOnInit
=
false
;
ShowPrintProgress
(
false
notifyOnInit
)
;
TurnScriptingOn
(
false
)
;
if
(
!
notifyOnInit
)
{
InstallPrintPreviewListener
(
)
;
rv
=
InitPrintDocConstruction
(
false
)
;
}
else
{
rv
=
NS_OK
;
}
}
else
{
bool
doNotify
;
ShowPrintProgress
(
true
doNotify
)
;
if
(
!
doNotify
)
{
printData
-
>
OnStartPrinting
(
)
;
rv
=
InitPrintDocConstruction
(
false
)
;
}
}
scriptSuppressor
.
Disconnect
(
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
Print
(
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
)
{
nsCOMPtr
<
nsIDOMDocument
>
doc
=
do_QueryInterface
(
mPrtPreview
&
&
mPrtPreview
-
>
mPrintObject
?
mPrtPreview
-
>
mPrintObject
-
>
mDocument
:
mDocument
)
;
return
CommonPrint
(
false
aPrintSettings
aWebProgressListener
doc
)
;
}
NS_IMETHODIMP
nsPrintJob
:
:
PrintPreview
(
nsIPrintSettings
*
aPrintSettings
mozIDOMWindowProxy
*
aChildDOMWin
nsIWebProgressListener
*
aWebProgressListener
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
do_QueryReferent
(
mContainer
)
)
;
NS_ENSURE_STATE
(
docShell
)
;
uint32_t
busyFlags
=
nsIDocShell
:
:
BUSY_FLAGS_NONE
;
if
(
NS_FAILED
(
docShell
-
>
GetBusyFlags
(
&
busyFlags
)
)
|
|
busyFlags
!
=
nsIDocShell
:
:
BUSY_FLAGS_NONE
)
{
CloseProgressDialog
(
aWebProgressListener
)
;
FirePrintingErrorEvent
(
NS_ERROR_GFX_PRINTER_DOC_IS_BUSY
)
;
return
NS_ERROR_FAILURE
;
}
auto
*
window
=
nsPIDOMWindowOuter
:
:
From
(
aChildDOMWin
)
;
NS_ENSURE_STATE
(
window
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
window
-
>
GetDoc
(
)
;
NS_ENSURE_STATE
(
doc
)
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
=
do_QueryInterface
(
doc
)
;
MOZ_ASSERT
(
domDoc
)
;
return
CommonPrint
(
true
aPrintSettings
aWebProgressListener
domDoc
)
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetIsFramesetDocument
(
bool
*
aIsFramesetDocument
)
{
nsCOMPtr
<
nsIDocShell
>
webContainer
(
do_QueryReferent
(
mContainer
)
)
;
*
aIsFramesetDocument
=
IsParentAFrameSet
(
webContainer
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetIsIFrameSelected
(
bool
*
aIsIFrameSelected
)
{
*
aIsIFrameSelected
=
false
;
nsCOMPtr
<
nsIDocShell
>
webContainer
(
do_QueryReferent
(
mContainer
)
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
currentFocusWin
=
FindFocusedDOMWindow
(
)
;
if
(
currentFocusWin
&
&
webContainer
)
{
bool
isParentFrameSet
;
*
aIsIFrameSelected
=
IsThereAnIFrameSelected
(
webContainer
currentFocusWin
isParentFrameSet
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetIsRangeSelection
(
bool
*
aIsRangeSelection
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
currentFocusWin
=
FindFocusedDOMWindow
(
)
;
*
aIsRangeSelection
=
IsThereARangeSelection
(
currentFocusWin
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetIsFramesetFrameSelected
(
bool
*
aIsFramesetFrameSelected
)
{
nsCOMPtr
<
nsPIDOMWindowOuter
>
currentFocusWin
=
FindFocusedDOMWindow
(
)
;
*
aIsFramesetFrameSelected
=
currentFocusWin
!
=
nullptr
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetPrintPreviewNumPages
(
int32_t
*
aPrintPreviewNumPages
)
{
NS_ENSURE_ARG_POINTER
(
aPrintPreviewNumPages
)
;
nsIFrame
*
seqFrame
=
nullptr
;
*
aPrintPreviewNumPages
=
0
;
RefPtr
<
nsPrintData
>
printData
=
mPrtPreview
?
mPrtPreview
:
mPrt
;
if
(
NS_WARN_IF
(
!
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
GetSeqFrameAndCountPagesInternal
(
printData
-
>
mPrintObject
seqFrame
*
aPrintPreviewNumPages
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
NS_ERROR_FAILURE
;
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
EnumerateDocumentNames
(
uint32_t
*
aCount
char16_t
*
*
*
aResult
)
{
NS_ENSURE_ARG
(
aCount
)
;
NS_ENSURE_ARG_POINTER
(
aResult
)
;
*
aCount
=
0
;
*
aResult
=
nullptr
;
int32_t
numDocs
=
mPrt
-
>
mPrintDocList
.
Length
(
)
;
char16_t
*
*
array
=
(
char16_t
*
*
)
moz_xmalloc
(
numDocs
*
sizeof
(
char16_t
*
)
)
;
if
(
!
array
)
return
NS_ERROR_OUT_OF_MEMORY
;
for
(
int32_t
i
=
0
;
i
<
numDocs
;
i
+
+
)
{
nsPrintObject
*
po
=
mPrt
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
nsAutoString
docTitleStr
;
nsAutoString
docURLStr
;
GetDocumentTitleAndURL
(
po
-
>
mDocument
docTitleStr
docURLStr
)
;
if
(
docTitleStr
.
IsEmpty
(
)
&
&
!
docURLStr
.
IsEmpty
(
)
)
{
docTitleStr
=
docURLStr
;
}
array
[
i
]
=
ToNewUnicode
(
docTitleStr
)
;
}
*
aCount
=
numDocs
;
*
aResult
=
array
;
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
GetGlobalPrintSettings
(
nsIPrintSettings
*
*
aGlobalPrintSettings
)
{
NS_ENSURE_ARG_POINTER
(
aGlobalPrintSettings
)
;
nsresult
rv
=
NS_ERROR_FAILURE
;
nsCOMPtr
<
nsIPrintSettingsService
>
printSettingsService
=
do_GetService
(
sPrintSettingsServiceContractID
&
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
rv
=
printSettingsService
-
>
GetGlobalPrintSettings
(
aGlobalPrintSettings
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetDoingPrint
(
bool
*
aDoingPrint
)
{
NS_ENSURE_ARG_POINTER
(
aDoingPrint
)
;
*
aDoingPrint
=
mIsDoingPrinting
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetDoingPrintPreview
(
bool
*
aDoingPrintPreview
)
{
NS_ENSURE_ARG_POINTER
(
aDoingPrintPreview
)
;
*
aDoingPrintPreview
=
mIsDoingPrintPreview
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
GetCurrentPrintSettings
(
nsIPrintSettings
*
*
aCurrentPrintSettings
)
{
NS_ENSURE_ARG_POINTER
(
aCurrentPrintSettings
)
;
if
(
mPrt
)
{
*
aCurrentPrintSettings
=
mPrt
-
>
mPrintSettings
;
}
else
if
(
mPrtPreview
)
{
*
aCurrentPrintSettings
=
mPrtPreview
-
>
mPrintSettings
;
}
else
{
*
aCurrentPrintSettings
=
nullptr
;
}
NS_IF_ADDREF
(
*
aCurrentPrintSettings
)
;
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
CheckForPrinters
(
nsIPrintSettings
*
aPrintSettings
)
{
#
if
defined
(
XP_MACOSX
)
|
|
defined
(
ANDROID
)
return
NS_OK
;
#
else
#
if
defined
(
MOZ_X11
)
if
(
!
XRE_IsParentProcess
(
)
)
{
return
NS_OK
;
}
#
endif
NS_ENSURE_ARG_POINTER
(
aPrintSettings
)
;
nsString
printerName
;
nsresult
rv
=
aPrintSettings
-
>
GetPrinterName
(
printerName
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
printerName
.
IsEmpty
(
)
)
{
return
NS_OK
;
}
nsCOMPtr
<
nsIPrintSettingsService
>
printSettingsService
=
do_GetService
(
sPrintSettingsServiceContractID
&
rv
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
rv
=
printSettingsService
-
>
GetDefaultPrinterName
(
printerName
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
printerName
.
IsEmpty
(
)
)
{
rv
=
aPrintSettings
-
>
SetPrinterName
(
printerName
)
;
}
return
rv
;
#
endif
}
void
nsPrintJob
:
:
ShowPrintProgress
(
bool
aIsForPrinting
bool
&
aDoNotify
)
{
aDoNotify
=
false
;
bool
showProgresssDialog
=
false
;
if
(
!
mProgressDialogIsShown
)
{
showProgresssDialog
=
Preferences
:
:
GetBool
(
"
print
.
show_print_progress
"
)
;
}
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
showProgresssDialog
)
{
printData
-
>
mPrintSettings
-
>
GetShowPrintProgress
(
&
showProgresssDialog
)
;
}
if
(
showProgresssDialog
)
{
nsCOMPtr
<
nsIPrintingPromptService
>
printPromptService
(
do_GetService
(
kPrintingPromptService
)
)
;
if
(
printPromptService
)
{
nsPIDOMWindowOuter
*
domWin
=
mDocument
-
>
GetWindow
(
)
;
if
(
!
domWin
)
return
;
nsCOMPtr
<
nsIDocShell
>
docShell
=
domWin
-
>
GetDocShell
(
)
;
if
(
!
docShell
)
return
;
nsCOMPtr
<
nsIDocShellTreeOwner
>
owner
;
docShell
-
>
GetTreeOwner
(
getter_AddRefs
(
owner
)
)
;
nsCOMPtr
<
nsIWebBrowserChrome
>
browserChrome
=
do_GetInterface
(
owner
)
;
if
(
!
browserChrome
)
return
;
bool
isModal
=
true
;
browserChrome
-
>
IsWindowModal
(
&
isModal
)
;
if
(
isModal
)
{
return
;
}
nsCOMPtr
<
nsIWebProgressListener
>
printProgressListener
;
nsCOMPtr
<
nsIWebBrowserPrint
>
wbp
(
do_QueryInterface
(
mDocViewerPrint
)
)
;
nsresult
rv
=
printPromptService
-
>
ShowProgress
(
domWin
wbp
printData
-
>
mPrintSettings
this
aIsForPrinting
getter_AddRefs
(
printProgressListener
)
getter_AddRefs
(
printData
-
>
mPrintProgressParams
)
&
aDoNotify
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
if
(
printProgressListener
)
{
printData
-
>
mPrintProgressListeners
.
AppendObject
(
printProgressListener
)
;
}
if
(
printData
-
>
mPrintProgressParams
)
{
SetDocAndURLIntoProgress
(
printData
-
>
mPrintObject
printData
-
>
mPrintProgressParams
)
;
}
}
}
}
}
bool
nsPrintJob
:
:
IsThereARangeSelection
(
nsPIDOMWindowOuter
*
aDOMWin
)
{
if
(
mDisallowSelectionPrint
)
return
false
;
nsCOMPtr
<
nsIPresShell
>
presShell
;
if
(
aDOMWin
)
{
presShell
=
aDOMWin
-
>
GetDocShell
(
)
-
>
GetPresShell
(
)
;
}
if
(
!
presShell
)
return
false
;
Selection
*
selection
=
presShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
if
(
!
selection
)
{
return
false
;
}
int32_t
rangeCount
=
selection
-
>
RangeCount
(
)
;
if
(
!
rangeCount
)
{
return
false
;
}
if
(
rangeCount
>
1
)
{
return
true
;
}
return
selection
-
>
GetRangeAt
(
0
)
&
&
!
selection
-
>
IsCollapsed
(
)
;
}
bool
nsPrintJob
:
:
IsParentAFrameSet
(
nsIDocShell
*
aParent
)
{
if
(
!
aParent
)
return
false
;
bool
isFrameSet
=
false
;
nsCOMPtr
<
nsIDocument
>
doc
=
aParent
-
>
GetDocument
(
)
;
if
(
doc
)
{
nsIContent
*
rootElement
=
doc
-
>
GetRootElement
(
)
;
if
(
rootElement
)
{
isFrameSet
=
HasFramesetChild
(
rootElement
)
;
}
}
return
isFrameSet
;
}
void
nsPrintJob
:
:
BuildDocTree
(
nsIDocShell
*
aParentNode
nsTArray
<
nsPrintObject
*
>
*
aDocList
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
NS_ASSERTION
(
aParentNode
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aDocList
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
int32_t
childWebshellCount
;
aParentNode
-
>
GetChildCount
(
&
childWebshellCount
)
;
if
(
childWebshellCount
>
0
)
{
for
(
int32_t
i
=
0
;
i
<
childWebshellCount
;
i
+
+
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
child
;
aParentNode
-
>
GetChildAt
(
i
getter_AddRefs
(
child
)
)
;
nsCOMPtr
<
nsIDocShell
>
childAsShell
(
do_QueryInterface
(
child
)
)
;
nsCOMPtr
<
nsIContentViewer
>
viewer
;
childAsShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
viewer
)
{
nsCOMPtr
<
nsIDOMDocument
>
doc
=
do_GetInterface
(
childAsShell
)
;
auto
po
=
MakeUnique
<
nsPrintObject
>
(
)
;
po
-
>
mParent
=
aPO
.
get
(
)
;
nsresult
rv
=
po
-
>
Init
(
childAsShell
doc
aPO
-
>
mPrintPreview
)
;
if
(
NS_FAILED
(
rv
)
)
NS_NOTREACHED
(
"
Init
failed
?
"
)
;
aPO
-
>
mKids
.
AppendElement
(
Move
(
po
)
)
;
aDocList
-
>
AppendElement
(
aPO
-
>
mKids
.
LastElement
(
)
.
get
(
)
)
;
BuildDocTree
(
childAsShell
aDocList
aPO
-
>
mKids
.
LastElement
(
)
)
;
}
}
}
}
void
nsPrintJob
:
:
GetDocumentTitleAndURL
(
nsIDocument
*
aDoc
nsAString
&
aTitle
nsAString
&
aURLStr
)
{
NS_ASSERTION
(
aDoc
"
Pointer
is
null
!
"
)
;
aTitle
.
Truncate
(
)
;
aURLStr
.
Truncate
(
)
;
nsCOMPtr
<
nsIDOMDocument
>
doc
=
do_QueryInterface
(
aDoc
)
;
doc
-
>
GetTitle
(
aTitle
)
;
nsIURI
*
url
=
aDoc
-
>
GetDocumentURI
(
)
;
if
(
!
url
)
return
;
nsCOMPtr
<
nsIURIFixup
>
urifixup
(
do_GetService
(
NS_URIFIXUP_CONTRACTID
)
)
;
if
(
!
urifixup
)
return
;
nsCOMPtr
<
nsIURI
>
exposableURI
;
urifixup
-
>
CreateExposableURI
(
url
getter_AddRefs
(
exposableURI
)
)
;
if
(
!
exposableURI
)
return
;
nsAutoCString
urlCStr
;
nsresult
rv
=
exposableURI
-
>
GetSpec
(
urlCStr
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
nsCOMPtr
<
nsITextToSubURI
>
textToSubURI
=
do_GetService
(
NS_ITEXTTOSUBURI_CONTRACTID
&
rv
)
;
if
(
NS_FAILED
(
rv
)
)
return
;
textToSubURI
-
>
UnEscapeURIForUI
(
NS_LITERAL_CSTRING
(
"
UTF
-
8
"
)
urlCStr
aURLStr
)
;
}
void
nsPrintJob
:
:
MapContentToWebShells
(
const
UniquePtr
<
nsPrintObject
>
&
aRootPO
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
NS_ASSERTION
(
aRootPO
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
nsCOMPtr
<
nsIContentViewer
>
viewer
;
aPO
-
>
mDocShell
-
>
GetContentViewer
(
getter_AddRefs
(
viewer
)
)
;
if
(
!
viewer
)
return
;
nsCOMPtr
<
nsIDOMDocument
>
domDoc
;
viewer
-
>
GetDOMDocument
(
getter_AddRefs
(
domDoc
)
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
do_QueryInterface
(
domDoc
)
;
if
(
!
doc
)
return
;
Element
*
rootElement
=
doc
-
>
GetRootElement
(
)
;
if
(
rootElement
)
{
MapContentForPO
(
aPO
rootElement
)
;
}
else
{
NS_WARNING
(
"
Null
root
content
on
(
sub
)
document
.
"
)
;
}
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
MapContentToWebShells
(
aRootPO
kid
)
;
}
}
void
nsPrintJob
:
:
CheckForChildFrameSets
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
bool
hasChildFrames
=
false
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
po
:
aPO
-
>
mKids
)
{
if
(
po
-
>
mFrameType
=
=
eFrame
)
{
hasChildFrames
=
true
;
CheckForChildFrameSets
(
po
)
;
}
}
if
(
hasChildFrames
&
&
aPO
-
>
mFrameType
=
=
eFrame
)
{
aPO
-
>
mFrameType
=
eFrameSet
;
}
}
void
nsPrintJob
:
:
MapContentForPO
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsIContent
*
aContent
)
{
NS_PRECONDITION
(
aPO
&
&
aContent
"
Null
argument
"
)
;
nsIDocument
*
doc
=
aContent
-
>
GetComposedDoc
(
)
;
NS_ASSERTION
(
doc
"
Content
without
a
document
from
a
document
tree
?
"
)
;
nsIDocument
*
subDoc
=
doc
-
>
GetSubDocumentFor
(
aContent
)
;
if
(
subDoc
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
(
subDoc
-
>
GetDocShell
(
)
)
;
if
(
docShell
)
{
nsPrintObject
*
po
=
nullptr
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
if
(
kid
-
>
mDocument
=
=
subDoc
)
{
po
=
kid
.
get
(
)
;
break
;
}
}
if
(
po
)
{
if
(
aContent
-
>
IsHTMLElement
(
nsGkAtoms
:
:
frame
)
&
&
po
-
>
mParent
-
>
mFrameType
=
=
eFrameSet
)
{
po
-
>
mFrameType
=
eFrame
;
}
else
{
po
-
>
mFrameType
=
eIFrame
;
SetPrintAsIs
(
po
true
)
;
NS_ASSERTION
(
po
-
>
mParent
"
The
root
must
be
a
parent
"
)
;
po
-
>
mParent
-
>
mPrintAsIs
=
true
;
}
}
}
}
for
(
nsIContent
*
child
=
aContent
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
MapContentForPO
(
aPO
child
)
;
}
}
bool
nsPrintJob
:
:
IsThereAnIFrameSelected
(
nsIDocShell
*
aDocShell
nsPIDOMWindowOuter
*
aDOMWin
bool
&
aIsParentFrameSet
)
{
aIsParentFrameSet
=
IsParentAFrameSet
(
aDocShell
)
;
bool
iFrameIsSelected
=
false
;
if
(
mPrt
&
&
mPrt
-
>
mPrintObject
)
{
nsPrintObject
*
po
=
FindPrintObjectByDOMWin
(
mPrt
-
>
mPrintObject
.
get
(
)
aDOMWin
)
;
iFrameIsSelected
=
po
&
&
po
-
>
mFrameType
=
=
eIFrame
;
}
else
{
if
(
!
aIsParentFrameSet
)
{
if
(
aDOMWin
)
{
nsPIDOMWindowOuter
*
domWin
=
aDocShell
?
aDocShell
-
>
GetWindow
(
)
:
nullptr
;
if
(
domWin
!
=
aDOMWin
)
{
iFrameIsSelected
=
true
;
}
}
}
}
return
iFrameIsSelected
;
}
void
nsPrintJob
:
:
SetPrintPO
(
nsPrintObject
*
aPO
bool
aPrint
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
aPO
-
>
mDontPrint
=
!
aPrint
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
SetPrintPO
(
kid
.
get
(
)
aPrint
)
;
}
}
void
nsPrintJob
:
:
GetDisplayTitleAndURL
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsAString
&
aTitle
nsAString
&
aURLStr
eDocTitleDefault
aDefType
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
if
(
!
mPrt
)
return
;
aTitle
.
Truncate
(
)
;
aURLStr
.
Truncate
(
)
;
if
(
mPrt
-
>
mPrintSettings
)
{
mPrt
-
>
mPrintSettings
-
>
GetTitle
(
aTitle
)
;
mPrt
-
>
mPrintSettings
-
>
GetDocURL
(
aURLStr
)
;
}
nsAutoString
docTitle
;
nsAutoString
docUrl
;
GetDocumentTitleAndURL
(
aPO
-
>
mDocument
docTitle
docUrl
)
;
if
(
aURLStr
.
IsEmpty
(
)
&
&
!
docUrl
.
IsEmpty
(
)
)
{
aURLStr
=
docUrl
;
}
if
(
aTitle
.
IsEmpty
(
)
)
{
if
(
!
docTitle
.
IsEmpty
(
)
)
{
aTitle
=
docTitle
;
}
else
{
if
(
aDefType
=
=
eDocTitleDefURLDoc
)
{
if
(
!
aURLStr
.
IsEmpty
(
)
)
{
aTitle
=
aURLStr
;
}
else
if
(
!
mPrt
-
>
mBrandName
.
IsEmpty
(
)
)
{
aTitle
=
mPrt
-
>
mBrandName
;
}
}
}
}
}
nsresult
nsPrintJob
:
:
DocumentReadyForPrinting
(
)
{
if
(
mPrt
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kEachFrameSep
)
{
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
CheckForChildFrameSets
(
printData
-
>
mPrintObject
)
;
}
nsresult
rv
=
SetupToPrintContent
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
DonePrintingPages
(
nullptr
rv
)
;
}
return
rv
;
}
nsresult
nsPrintJob
:
:
CleanupOnFailure
(
nsresult
aResult
bool
aIsPrinting
)
{
PR_PL
(
(
"
*
*
*
*
Failed
%
s
-
rv
0x
%
"
PRIX32
aIsPrinting
?
"
Printing
"
:
"
Print
Preview
"
static_cast
<
uint32_t
>
(
aResult
)
)
)
;
if
(
mPagePrintTimer
)
{
mPagePrintTimer
-
>
Stop
(
)
;
DisconnectPagePrintTimer
(
)
;
}
if
(
aIsPrinting
)
{
SetIsPrinting
(
false
)
;
}
else
{
SetIsPrintPreview
(
false
)
;
SetIsCreatingPrintPreview
(
false
)
;
}
if
(
aResult
!
=
NS_ERROR_ABORT
)
{
FirePrintingErrorEvent
(
aResult
)
;
}
FirePrintCompletionEvent
(
)
;
return
aResult
;
}
void
nsPrintJob
:
:
FirePrintingErrorEvent
(
nsresult
aPrintError
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
=
do_QueryInterface
(
mDocViewerPrint
)
;
if
(
NS_WARN_IF
(
!
cv
)
)
{
return
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
cv
-
>
GetDocument
(
)
;
RefPtr
<
CustomEvent
>
event
=
NS_NewDOMCustomEvent
(
doc
nullptr
nullptr
)
;
MOZ_ASSERT
(
event
)
;
nsCOMPtr
<
nsIWritableVariant
>
resultVariant
=
new
nsVariant
(
)
;
resultVariant
-
>
SetAsDouble
(
static_cast
<
double
>
(
aPrintError
)
)
;
event
-
>
InitCustomEvent
(
NS_LITERAL_STRING
(
"
PrintingError
"
)
false
false
resultVariant
)
;
event
-
>
SetTrusted
(
true
)
;
RefPtr
<
AsyncEventDispatcher
>
asyncDispatcher
=
new
AsyncEventDispatcher
(
doc
event
)
;
asyncDispatcher
-
>
mOnlyChromeDispatch
=
true
;
asyncDispatcher
-
>
RunDOMEventWhenSafe
(
)
;
if
(
mPrt
)
{
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
printData
-
>
DoOnStatusChange
(
aPrintError
)
;
}
}
nsresult
nsPrintJob
:
:
ReconstructAndReflow
(
bool
doSetPixelScale
)
{
if
(
NS_WARN_IF
(
!
mPrt
)
)
{
return
NS_ERROR_FAILURE
;
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
EXTENDED_DEBUG_PRINTING
)
if
(
kPrintingLogMod
&
&
kPrintingLogMod
-
>
level
=
=
DUMP_LAYOUT_LEVEL
)
{
RemoveFilesInDir
(
"
.
\
\
"
)
;
gDumpFileNameCnt
=
0
;
gDumpLOFileNameCnt
=
0
;
}
#
endif
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
for
(
uint32_t
i
=
0
;
i
<
printData
-
>
mPrintDocList
.
Length
(
)
;
+
+
i
)
{
nsPrintObject
*
po
=
printData
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
if
(
po
-
>
mDontPrint
|
|
po
-
>
mInvisible
)
{
continue
;
}
MOZ_ASSERT
(
po
-
>
mPresContext
&
&
po
-
>
mPresShell
"
mPresContext
and
mPresShell
shouldn
'
t
be
nullptr
when
the
print
object
"
"
has
been
marked
as
\
"
print
the
document
\
"
"
)
;
UpdateZoomRatio
(
po
doSetPixelScale
)
;
po
-
>
mPresContext
-
>
SetPageScale
(
po
-
>
mZoomRatio
)
;
float
printDPI
=
float
(
printData
-
>
mPrintDC
-
>
AppUnitsPerCSSInch
(
)
)
/
float
(
printData
-
>
mPrintDC
-
>
AppUnitsPerDevPixel
(
)
)
;
po
-
>
mPresContext
-
>
SetPrintPreviewScale
(
mScreenDPI
/
printDPI
)
;
po
-
>
mPresShell
-
>
ReconstructFrames
(
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
bool
documentIsTopLevel
=
true
;
if
(
i
!
=
0
)
{
nsSize
adjSize
;
bool
doReturn
;
nsresult
rv
=
SetRootView
(
po
doReturn
documentIsTopLevel
adjSize
)
;
MOZ_ASSERT
(
!
documentIsTopLevel
"
How
could
this
happen
?
"
)
;
if
(
NS_FAILED
(
rv
)
|
|
doReturn
)
{
return
rv
;
}
}
po
-
>
mPresShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
nsresult
rv
=
UpdateSelectionAndShrinkPrintObject
(
po
documentIsTopLevel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
SetupToPrintContent
(
)
{
if
(
NS_WARN_IF
(
!
mPrt
)
|
|
NS_WARN_IF
(
!
mPrt
-
>
mPrintObject
)
)
{
return
NS_ERROR_FAILURE
;
}
if
(
mIsCreatingPrintPreview
&
&
(
NS_WARN_IF
(
!
mPrt
-
>
mPrintObject
-
>
mPresContext
)
|
|
NS_WARN_IF
(
!
mPrt
-
>
mPrintObject
-
>
mPresShell
)
)
)
{
return
NS_ERROR_FAILURE
;
}
MOZ_ASSERT
(
(
!
mIsCreatingPrintPreview
&
&
!
mPrt
-
>
mPrintObject
-
>
IsPrintable
(
)
)
|
|
(
mPrt
-
>
mPrintObject
-
>
mPresContext
&
&
mPrt
-
>
mPrintObject
-
>
mPresShell
)
"
mPresContext
and
mPresShell
shouldn
'
t
be
nullptr
when
printing
the
"
"
document
or
creating
print
-
preview
"
)
;
bool
didReconstruction
=
false
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
mDidLoadDataForPrinting
)
{
nsresult
rv
=
ReconstructAndReflow
(
DoSetPixelScale
(
)
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
didReconstruction
=
true
;
}
bool
ppIsShrinkToFit
=
mPrtPreview
&
&
mPrtPreview
-
>
mShrinkToFit
;
if
(
printData
-
>
mShrinkToFit
&
&
!
ppIsShrinkToFit
)
{
if
(
printData
-
>
mPrintDocList
.
Length
(
)
>
1
&
&
printData
-
>
mPrintObject
-
>
mFrameType
=
=
eFrameSet
)
{
nsPrintObject
*
smallestPO
=
FindSmallestSTF
(
)
;
NS_ASSERTION
(
smallestPO
"
There
must
always
be
an
XMost
PO
!
"
)
;
if
(
smallestPO
)
{
printData
-
>
mShrinkRatio
=
smallestPO
-
>
mShrinkRatio
;
}
}
else
{
printData
-
>
mShrinkRatio
=
printData
-
>
mPrintObject
-
>
mShrinkRatio
;
}
if
(
printData
-
>
mShrinkRatio
<
0
.
998f
)
{
nsresult
rv
=
ReconstructAndReflow
(
true
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
didReconstruction
=
true
;
}
if
(
MOZ_LOG_TEST
(
gPrintingLog
LogLevel
:
:
Debug
)
)
{
float
calcRatio
=
0
.
0f
;
if
(
printData
-
>
mPrintDocList
.
Length
(
)
>
1
&
&
printData
-
>
mPrintObject
-
>
mFrameType
=
=
eFrameSet
)
{
nsPrintObject
*
smallestPO
=
FindSmallestSTF
(
)
;
NS_ASSERTION
(
smallestPO
"
There
must
always
be
an
XMost
PO
!
"
)
;
if
(
smallestPO
)
{
calcRatio
=
smallestPO
-
>
mShrinkRatio
;
}
}
else
{
calcRatio
=
printData
-
>
mPrintObject
-
>
mShrinkRatio
;
}
PR_PL
(
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
)
;
PR_PL
(
(
"
STF
Ratio
is
:
%
8
.
5f
Effective
Ratio
:
%
8
.
5f
Diff
:
%
8
.
5f
\
n
"
printData
-
>
mShrinkRatio
calcRatio
printData
-
>
mShrinkRatio
-
calcRatio
)
)
;
PR_PL
(
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
)
;
}
}
if
(
didReconstruction
)
{
FirePrintPreviewUpdateEvent
(
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
}
DUMP_DOC_LIST
(
(
"
\
nAfter
Reflow
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
"
)
)
;
PR_PL
(
(
"
\
n
"
)
)
;
PR_PL
(
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
)
;
PR_PL
(
(
"
\
n
"
)
)
;
CalcNumPrintablePages
(
printData
-
>
mNumPrintablePages
)
;
PR_PL
(
(
"
-
-
-
Printing
%
d
pages
\
n
"
printData
-
>
mNumPrintablePages
)
)
;
DUMP_DOC_TREELAYOUT
;
printData
-
>
OnStartPrinting
(
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
NS_ERROR_FAILURE
;
}
nsAutoString
fileNameStr
;
bool
isPrintToFile
=
false
;
printData
-
>
mPrintSettings
-
>
GetPrintToFile
(
&
isPrintToFile
)
;
if
(
isPrintToFile
)
{
printData
-
>
mPrintSettings
-
>
GetToFileName
(
fileNameStr
)
;
}
nsAutoString
docTitleStr
;
nsAutoString
docURLStr
;
GetDisplayTitleAndURL
(
printData
-
>
mPrintObject
docTitleStr
docURLStr
eDocTitleDefURLDoc
)
;
int32_t
startPage
=
1
;
int32_t
endPage
=
printData
-
>
mNumPrintablePages
;
int16_t
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
printData
-
>
mPrintSettings
-
>
GetPrintRange
(
&
printRangeType
)
;
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
)
{
printData
-
>
mPrintSettings
-
>
GetStartPageRange
(
&
startPage
)
;
printData
-
>
mPrintSettings
-
>
GetEndPageRange
(
&
endPage
)
;
if
(
endPage
>
printData
-
>
mNumPrintablePages
)
{
endPage
=
printData
-
>
mNumPrintablePages
;
}
}
nsresult
rv
=
NS_OK
;
if
(
mIsDoingPrinting
)
{
rv
=
printData
-
>
mPrintDC
-
>
BeginDocument
(
docTitleStr
fileNameStr
startPage
endPage
)
;
}
if
(
mIsCreatingPrintPreview
)
{
nsIPageSequenceFrame
*
seqFrame
=
printData
-
>
mPrintObject
-
>
mPresShell
-
>
GetPageSequenceFrame
(
)
;
if
(
seqFrame
)
{
seqFrame
-
>
StartPrint
(
printData
-
>
mPrintObject
-
>
mPresContext
printData
-
>
mPrintSettings
docTitleStr
docURLStr
)
;
}
}
PR_PL
(
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
Begin
Document
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
if
(
mIsDoingPrinting
)
{
PrintDocContent
(
printData
-
>
mPrintObject
rv
)
;
}
return
rv
;
}
nsresult
nsPrintJob
:
:
ReflowDocList
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
bool
aSetPixelScale
)
{
NS_ENSURE_ARG_POINTER
(
aPO
)
;
if
(
aPO
-
>
mParent
&
&
aPO
-
>
mParent
-
>
mPresShell
)
{
nsIFrame
*
frame
=
aPO
-
>
mContent
?
aPO
-
>
mContent
-
>
GetPrimaryFrame
(
)
:
nullptr
;
if
(
!
frame
|
|
!
frame
-
>
StyleVisibility
(
)
-
>
IsVisible
(
)
)
{
SetPrintPO
(
aPO
.
get
(
)
false
)
;
aPO
-
>
mInvisible
=
true
;
return
NS_OK
;
}
}
UpdateZoomRatio
(
aPO
.
get
(
)
aSetPixelScale
)
;
nsresult
rv
;
rv
=
ReflowPrintObject
(
aPO
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
rv
=
ReflowDocList
(
kid
aSetPixelScale
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
}
return
NS_OK
;
}
void
nsPrintJob
:
:
FirePrintPreviewUpdateEvent
(
)
{
if
(
mIsDoingPrintPreview
&
&
!
mIsDoingPrinting
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
=
do_QueryInterface
(
mDocViewerPrint
)
;
(
new
AsyncEventDispatcher
(
cv
-
>
GetDocument
(
)
NS_LITERAL_STRING
(
"
printPreviewUpdate
"
)
true
true
)
)
-
>
RunDOMEventWhenSafe
(
)
;
}
}
nsresult
nsPrintJob
:
:
InitPrintDocConstruction
(
bool
aHandleError
)
{
nsresult
rv
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
rv
=
ReflowDocList
(
printData
-
>
mPrintObject
DoSetPixelScale
(
)
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
FirePrintPreviewUpdateEvent
(
)
;
if
(
mLoadCounter
=
=
0
)
{
AfterNetworkPrint
(
aHandleError
)
;
}
return
rv
;
}
nsresult
nsPrintJob
:
:
AfterNetworkPrint
(
bool
aHandleError
)
{
if
(
!
mPrt
|
|
NS_WARN_IF
(
!
mPrt
-
>
mPrintObject
)
|
|
NS_WARN_IF
(
!
mPrt
-
>
mPrintObject
-
>
mDocShell
)
)
{
return
NS_ERROR_FAILURE
;
}
nsCOMPtr
<
nsIWebProgress
>
webProgress
=
do_QueryInterface
(
mPrt
-
>
mPrintObject
-
>
mDocShell
)
;
webProgress
-
>
RemoveProgressListener
(
static_cast
<
nsIWebProgressListener
*
>
(
this
)
)
;
nsresult
rv
;
if
(
mIsDoingPrinting
)
{
rv
=
DocumentReadyForPrinting
(
)
;
}
else
{
rv
=
FinishPrintPreview
(
)
;
}
if
(
aHandleError
&
&
NS_FAILED
(
rv
)
)
{
NS_WARNING
(
"
nsPrintJob
:
:
AfterNetworkPrint
failed
"
)
;
CleanupOnFailure
(
rv
!
mIsDoingPrinting
)
;
}
return
rv
;
}
NS_IMETHODIMP
nsPrintJob
:
:
OnStateChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aStateFlags
nsresult
aStatus
)
{
nsAutoCString
name
;
aRequest
-
>
GetName
(
name
)
;
if
(
name
.
EqualsLiteral
(
"
about
:
document
-
onload
-
blocker
"
)
)
{
return
NS_OK
;
}
if
(
aStateFlags
&
STATE_START
)
{
+
+
mLoadCounter
;
}
else
if
(
aStateFlags
&
STATE_STOP
)
{
mDidLoadDataForPrinting
=
true
;
-
-
mLoadCounter
;
if
(
mLoadCounter
=
=
0
)
{
AfterNetworkPrint
(
true
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
OnProgressChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
int32_t
aCurSelfProgress
int32_t
aMaxSelfProgress
int32_t
aCurTotalProgress
int32_t
aMaxTotalProgress
)
{
NS_NOTREACHED
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
OnLocationChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsIURI
*
aLocation
uint32_t
aFlags
)
{
NS_NOTREACHED
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
OnStatusChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
nsresult
aStatus
const
char16_t
*
aMessage
)
{
NS_NOTREACHED
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsPrintJob
:
:
OnSecurityChange
(
nsIWebProgress
*
aWebProgress
nsIRequest
*
aRequest
uint32_t
aState
)
{
NS_NOTREACHED
(
"
notification
excluded
in
AddProgressListener
(
.
.
.
)
"
)
;
return
NS_OK
;
}
void
nsPrintJob
:
:
UpdateZoomRatio
(
nsPrintObject
*
aPO
bool
aSetPixelScale
)
{
if
(
aSetPixelScale
&
&
aPO
-
>
mFrameType
!
=
eIFrame
)
{
float
ratio
;
if
(
mPrt
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kFramesAsIs
|
|
mPrt
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kNoFrames
)
{
ratio
=
mPrt
-
>
mShrinkRatio
-
0
.
005f
;
}
else
{
ratio
=
aPO
-
>
mShrinkRatio
-
0
.
005f
;
}
aPO
-
>
mZoomRatio
=
ratio
;
}
else
if
(
!
mPrt
-
>
mShrinkToFit
)
{
double
scaling
;
mPrt
-
>
mPrintSettings
-
>
GetScaling
(
&
scaling
)
;
aPO
-
>
mZoomRatio
=
float
(
scaling
)
;
}
}
nsresult
nsPrintJob
:
:
UpdateSelectionAndShrinkPrintObject
(
nsPrintObject
*
aPO
bool
aDocumentIsTopLevel
)
{
nsCOMPtr
<
nsIPresShell
>
displayShell
=
aPO
-
>
mDocShell
-
>
GetPresShell
(
)
;
RefPtr
<
Selection
>
selection
selectionPS
;
if
(
displayShell
)
{
selection
=
displayShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
}
selectionPS
=
aPO
-
>
mPresShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
if
(
selectionPS
)
{
selectionPS
-
>
RemoveAllRanges
(
)
;
}
if
(
selection
&
&
selectionPS
)
{
int32_t
cnt
=
selection
-
>
RangeCount
(
)
;
int32_t
inx
;
for
(
inx
=
0
;
inx
<
cnt
;
+
+
inx
)
{
selectionPS
-
>
AddRange
(
selection
-
>
GetRangeAt
(
inx
)
)
;
}
}
if
(
mPrt
-
>
mShrinkToFit
&
&
aDocumentIsTopLevel
)
{
nsIPageSequenceFrame
*
pageSequence
=
aPO
-
>
mPresShell
-
>
GetPageSequenceFrame
(
)
;
NS_ENSURE_STATE
(
pageSequence
)
;
pageSequence
-
>
GetSTFPercent
(
aPO
-
>
mShrinkRatio
)
;
nsAutoString
contentType
;
aPO
-
>
mPresShell
-
>
GetDocument
(
)
-
>
GetContentType
(
contentType
)
;
if
(
contentType
.
EqualsLiteral
(
"
application
/
xhtml
+
xml
"
)
|
|
StringBeginsWith
(
contentType
NS_LITERAL_STRING
(
"
text
/
"
)
)
)
{
int32_t
limitPercent
=
Preferences
:
:
GetInt
(
"
print
.
shrink
-
to
-
fit
.
scale
-
limit
-
percent
"
20
)
;
limitPercent
=
std
:
:
max
(
0
limitPercent
)
;
limitPercent
=
std
:
:
min
(
100
limitPercent
)
;
float
minShrinkRatio
=
float
(
limitPercent
)
/
100
;
aPO
-
>
mShrinkRatio
=
std
:
:
max
(
aPO
-
>
mShrinkRatio
minShrinkRatio
)
;
}
}
return
NS_OK
;
}
bool
nsPrintJob
:
:
DoSetPixelScale
(
)
{
bool
doSetPixelScale
=
false
;
bool
ppIsShrinkToFit
=
mPrtPreview
&
&
mPrtPreview
-
>
mShrinkToFit
;
if
(
ppIsShrinkToFit
)
{
mPrt
-
>
mShrinkRatio
=
mPrtPreview
-
>
mShrinkRatio
;
doSetPixelScale
=
true
;
}
return
doSetPixelScale
;
}
nsView
*
nsPrintJob
:
:
GetParentViewForRoot
(
)
{
if
(
mIsCreatingPrintPreview
)
{
nsCOMPtr
<
nsIContentViewer
>
cv
=
do_QueryInterface
(
mDocViewerPrint
)
;
if
(
cv
)
{
return
cv
-
>
FindContainerView
(
)
;
}
}
return
nullptr
;
}
nsresult
nsPrintJob
:
:
SetRootView
(
nsPrintObject
*
aPO
bool
&
doReturn
bool
&
documentIsTopLevel
nsSize
&
adjSize
)
{
bool
canCreateScrollbars
=
true
;
nsView
*
rootView
;
nsView
*
parentView
=
nullptr
;
doReturn
=
false
;
if
(
aPO
-
>
mParent
&
&
aPO
-
>
mParent
-
>
IsPrintable
(
)
)
{
nsIFrame
*
frame
=
aPO
-
>
mContent
?
aPO
-
>
mContent
-
>
GetPrimaryFrame
(
)
:
nullptr
;
if
(
!
frame
)
{
SetPrintPO
(
aPO
false
)
;
doReturn
=
true
;
return
NS_OK
;
}
adjSize
=
frame
-
>
GetContentRect
(
)
.
Size
(
)
;
documentIsTopLevel
=
false
;
if
(
frame
&
&
frame
-
>
IsSubDocumentFrame
(
)
)
{
nsView
*
view
=
frame
-
>
GetView
(
)
;
NS_ENSURE_TRUE
(
view
NS_ERROR_FAILURE
)
;
view
=
view
-
>
GetFirstChild
(
)
;
NS_ENSURE_TRUE
(
view
NS_ERROR_FAILURE
)
;
parentView
=
view
;
canCreateScrollbars
=
false
;
}
}
else
{
nscoord
pageWidth
pageHeight
;
mPrt
-
>
mPrintDC
-
>
GetDeviceSurfaceDimensions
(
pageWidth
pageHeight
)
;
adjSize
=
nsSize
(
pageWidth
pageHeight
)
;
documentIsTopLevel
=
true
;
parentView
=
GetParentViewForRoot
(
)
;
}
if
(
aPO
-
>
mViewManager
-
>
GetRootView
(
)
)
{
rootView
=
aPO
-
>
mViewManager
-
>
GetRootView
(
)
;
aPO
-
>
mViewManager
-
>
RemoveChild
(
rootView
)
;
rootView
-
>
SetParent
(
parentView
)
;
}
else
{
nsRect
tbounds
=
nsRect
(
nsPoint
(
0
0
)
adjSize
)
;
rootView
=
aPO
-
>
mViewManager
-
>
CreateView
(
tbounds
parentView
)
;
NS_ENSURE_TRUE
(
rootView
NS_ERROR_OUT_OF_MEMORY
)
;
}
if
(
mIsCreatingPrintPreview
&
&
documentIsTopLevel
)
{
aPO
-
>
mPresContext
-
>
SetPaginatedScrolling
(
canCreateScrollbars
)
;
}
aPO
-
>
mViewManager
-
>
SetRootView
(
rootView
)
;
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
ReflowPrintObject
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
NS_ENSURE_STATE
(
aPO
)
;
if
(
!
aPO
-
>
IsPrintable
(
)
)
{
return
NS_OK
;
}
NS_ASSERTION
(
!
aPO
-
>
mPresContext
"
Recreating
prescontext
"
)
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
nsPresContext
:
:
nsPresContextType
type
=
mIsCreatingPrintPreview
?
nsPresContext
:
:
eContext_PrintPreview
:
nsPresContext
:
:
eContext_Print
;
nsView
*
parentView
=
aPO
-
>
mParent
&
&
aPO
-
>
mParent
-
>
IsPrintable
(
)
?
nullptr
:
GetParentViewForRoot
(
)
;
aPO
-
>
mPresContext
=
parentView
?
new
nsPresContext
(
aPO
-
>
mDocument
type
)
:
new
nsRootPresContext
(
aPO
-
>
mDocument
type
)
;
NS_ENSURE_TRUE
(
aPO
-
>
mPresContext
NS_ERROR_OUT_OF_MEMORY
)
;
aPO
-
>
mPresContext
-
>
SetPrintSettings
(
printData
-
>
mPrintSettings
)
;
bool
printBGColors
;
printData
-
>
mPrintSettings
-
>
GetPrintBGColors
(
&
printBGColors
)
;
aPO
-
>
mPresContext
-
>
SetBackgroundColorDraw
(
printBGColors
)
;
printData
-
>
mPrintSettings
-
>
GetPrintBGImages
(
&
printBGColors
)
;
aPO
-
>
mPresContext
-
>
SetBackgroundImageDraw
(
printBGColors
)
;
nsresult
rv
=
aPO
-
>
mPresContext
-
>
Init
(
printData
-
>
mPrintDC
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
aPO
-
>
mViewManager
=
new
nsViewManager
(
)
;
rv
=
aPO
-
>
mViewManager
-
>
Init
(
printData
-
>
mPrintDC
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
StyleSetHandle
styleSet
=
mDocViewerPrint
-
>
CreateStyleSet
(
aPO
-
>
mDocument
)
;
if
(
aPO
-
>
mDocument
-
>
IsSVGDocument
(
)
)
{
auto
cache
=
nsLayoutStylesheetCache
:
:
For
(
aPO
-
>
mDocument
-
>
GetStyleBackendType
(
)
)
;
styleSet
-
>
PrependStyleSheet
(
SheetType
:
:
Agent
cache
-
>
UASheet
(
)
)
;
}
aPO
-
>
mPresShell
=
aPO
-
>
mDocument
-
>
CreateShell
(
aPO
-
>
mPresContext
aPO
-
>
mViewManager
styleSet
)
;
if
(
!
aPO
-
>
mPresShell
)
{
styleSet
-
>
Delete
(
)
;
return
NS_ERROR_FAILURE
;
}
int16_t
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
printData
-
>
mPrintSettings
-
>
GetPrintRange
(
&
printRangeType
)
;
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSelection
)
{
DeleteUnselectedNodes
(
aPO
-
>
mDocument
-
>
GetOriginalDocument
(
)
aPO
-
>
mDocument
)
;
}
styleSet
-
>
EndUpdate
(
)
;
bool
doReturn
=
false
;
;
bool
documentIsTopLevel
=
false
;
nsSize
adjSize
;
rv
=
SetRootView
(
aPO
.
get
(
)
doReturn
documentIsTopLevel
adjSize
)
;
if
(
NS_FAILED
(
rv
)
|
|
doReturn
)
{
return
rv
;
}
PR_PL
(
(
"
In
DV
:
:
ReflowPrintObject
PO
:
%
p
pS
:
%
p
(
%
9s
)
Setting
w
h
to
%
d
%
d
\
n
"
aPO
.
get
(
)
aPO
-
>
mPresShell
.
get
(
)
gFrameTypesStr
[
aPO
-
>
mFrameType
]
adjSize
.
width
adjSize
.
height
)
)
;
aPO
-
>
mPresContext
-
>
SetContainer
(
aPO
-
>
mDocShell
)
;
aPO
-
>
mPresShell
-
>
BeginObservingDocument
(
)
;
aPO
-
>
mPresContext
-
>
SetPageSize
(
adjSize
)
;
aPO
-
>
mPresContext
-
>
SetIsRootPaginatedDocument
(
documentIsTopLevel
)
;
aPO
-
>
mPresContext
-
>
SetPageScale
(
aPO
-
>
mZoomRatio
)
;
float
printDPI
=
float
(
printData
-
>
mPrintDC
-
>
AppUnitsPerCSSInch
(
)
)
/
float
(
printData
-
>
mPrintDC
-
>
AppUnitsPerDevPixel
(
)
)
;
aPO
-
>
mPresContext
-
>
SetPrintPreviewScale
(
mScreenDPI
/
printDPI
)
;
if
(
mIsCreatingPrintPreview
&
&
documentIsTopLevel
)
{
mDocViewerPrint
-
>
SetPrintPreviewPresentation
(
aPO
-
>
mViewManager
aPO
-
>
mPresContext
aPO
-
>
mPresShell
)
;
}
rv
=
aPO
-
>
mPresShell
-
>
Initialize
(
adjSize
.
width
adjSize
.
height
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
NS_ASSERTION
(
aPO
-
>
mPresShell
"
Presshell
should
still
be
here
"
)
;
aPO
-
>
mPresShell
-
>
FlushPendingNotifications
(
FlushType
:
:
Layout
)
;
rv
=
UpdateSelectionAndShrinkPrintObject
(
aPO
.
get
(
)
documentIsTopLevel
)
;
NS_ENSURE_SUCCESS
(
rv
rv
)
;
#
ifdef
EXTENDED_DEBUG_PRINTING
if
(
kPrintingLogMod
&
&
kPrintingLogMod
-
>
level
=
=
DUMP_LAYOUT_LEVEL
)
{
nsAutoCString
docStr
;
nsAutoCString
urlStr
;
GetDocTitleAndURL
(
aPO
docStr
urlStr
)
;
char
filename
[
256
]
;
sprintf
(
filename
"
print_dump_
%
d
.
txt
"
gDumpFileNameCnt
+
+
)
;
FILE
*
fd
=
fopen
(
filename
"
w
"
)
;
if
(
fd
)
{
nsIFrame
*
theRootFrame
=
aPO
-
>
mPresShell
-
>
FrameManager
(
)
-
>
GetRootFrame
(
)
;
fprintf
(
fd
"
Title
:
%
s
\
n
"
docStr
.
get
(
)
)
;
fprintf
(
fd
"
URL
:
%
s
\
n
"
urlStr
.
get
(
)
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Frames
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
RootFrameList
(
aPO
-
>
mPresContext
fd
0
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
\
n
"
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Views
From
Root
Frame
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
nsView
*
v
=
theRootFrame
-
>
GetView
(
)
;
if
(
v
)
{
v
-
>
List
(
fd
)
;
}
else
{
printf
(
"
View
is
null
!
\
n
"
)
;
}
if
(
docShell
)
{
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
All
Views
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
DumpViews
(
docShell
fd
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
\
n
"
)
;
}
fclose
(
fd
)
;
}
}
#
endif
return
NS_OK
;
}
void
nsPrintJob
:
:
CalcNumPrintablePages
(
int32_t
&
aNumPages
)
{
aNumPages
=
0
;
for
(
uint32_t
i
=
0
;
i
<
mPrt
-
>
mPrintDocList
.
Length
(
)
;
i
+
+
)
{
nsPrintObject
*
po
=
mPrt
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
if
(
po
-
>
mPresContext
&
&
po
-
>
mPresContext
-
>
IsRootPaginatedDocument
(
)
)
{
nsIPageSequenceFrame
*
pageSequence
=
po
-
>
mPresShell
-
>
GetPageSequenceFrame
(
)
;
nsIFrame
*
seqFrame
=
do_QueryFrame
(
pageSequence
)
;
if
(
seqFrame
)
{
aNumPages
+
=
seqFrame
-
>
PrincipalChildList
(
)
.
GetLength
(
)
;
}
}
}
}
bool
nsPrintJob
:
:
PrintDocContent
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsresult
&
aStatus
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
aStatus
=
NS_OK
;
if
(
!
aPO
-
>
mHasBeenPrinted
&
&
aPO
-
>
IsPrintable
(
)
)
{
aStatus
=
DoPrint
(
aPO
)
;
return
true
;
}
if
(
!
aPO
-
>
mInvisible
&
&
!
(
aPO
-
>
mPrintAsIs
&
&
aPO
-
>
mHasBeenPrinted
)
)
{
for
(
const
UniquePtr
<
nsPrintObject
>
&
po
:
aPO
-
>
mKids
)
{
bool
printed
=
PrintDocContent
(
po
aStatus
)
;
if
(
printed
|
|
NS_FAILED
(
aStatus
)
)
{
return
true
;
}
}
}
return
false
;
}
static
nsINode
*
GetCorrespondingNodeInDocument
(
const
nsINode
*
aNode
nsIDocument
*
aDoc
)
{
MOZ_ASSERT
(
aNode
)
;
MOZ_ASSERT
(
aDoc
)
;
if
(
aNode
-
>
IsInAnonymousSubtree
(
)
)
{
return
nullptr
;
}
nsTArray
<
int32_t
>
indexArray
;
const
nsINode
*
child
=
aNode
;
while
(
const
nsINode
*
parent
=
child
-
>
GetParentNode
(
)
)
{
int32_t
index
=
parent
-
>
IndexOf
(
child
)
;
MOZ_ASSERT
(
index
>
=
0
)
;
indexArray
.
AppendElement
(
index
)
;
child
=
parent
;
}
MOZ_ASSERT
(
child
-
>
IsNodeOfType
(
nsINode
:
:
eDOCUMENT
)
)
;
nsINode
*
correspondingNode
=
aDoc
;
for
(
int32_t
i
=
indexArray
.
Length
(
)
-
1
;
i
>
=
0
;
-
-
i
)
{
correspondingNode
=
correspondingNode
-
>
GetChildAt_Deprecated
(
indexArray
[
i
]
)
;
NS_ENSURE_TRUE
(
correspondingNode
nullptr
)
;
}
return
correspondingNode
;
}
static
NS_NAMED_LITERAL_STRING
(
kEllipsis
u
"
\
x2026
"
)
;
static
nsresult
DeleteUnselectedNodes
(
nsIDocument
*
aOrigDoc
nsIDocument
*
aDoc
)
{
nsIPresShell
*
origShell
=
aOrigDoc
-
>
GetShell
(
)
;
nsIPresShell
*
shell
=
aDoc
-
>
GetShell
(
)
;
NS_ENSURE_STATE
(
origShell
&
&
shell
)
;
RefPtr
<
Selection
>
origSelection
=
origShell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
RefPtr
<
Selection
>
selection
=
shell
-
>
GetCurrentSelection
(
SelectionType
:
:
eNormal
)
;
NS_ENSURE_STATE
(
origSelection
&
&
selection
)
;
nsINode
*
bodyNode
=
aDoc
-
>
GetBodyElement
(
)
;
nsINode
*
startNode
=
bodyNode
;
uint32_t
startOffset
=
0
;
uint32_t
ellipsisOffset
=
0
;
int32_t
rangeCount
=
origSelection
-
>
RangeCount
(
)
;
for
(
int32_t
i
=
0
;
i
<
rangeCount
;
+
+
i
)
{
nsRange
*
origRange
=
origSelection
-
>
GetRangeAt
(
i
)
;
nsINode
*
endNode
=
GetCorrespondingNodeInDocument
(
origRange
-
>
GetStartContainer
(
)
aDoc
)
;
if
(
endNode
!
=
startNode
)
{
ellipsisOffset
=
0
;
}
uint32_t
endOffset
=
origRange
-
>
StartOffset
(
)
+
ellipsisOffset
;
RefPtr
<
nsRange
>
range
;
nsresult
rv
=
nsRange
:
:
CreateRange
(
startNode
startOffset
endNode
endOffset
getter_AddRefs
(
range
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
range
-
>
Collapsed
(
)
)
{
selection
-
>
AddRange
(
range
)
;
Text
*
text
=
endNode
-
>
GetAsText
(
)
;
if
(
!
ellipsisOffset
&
&
text
&
&
endOffset
&
&
endOffset
<
text
-
>
Length
(
)
)
{
text
-
>
InsertData
(
endOffset
kEllipsis
)
;
ellipsisOffset
+
=
kEllipsis
.
Length
(
)
;
}
}
startNode
=
GetCorrespondingNodeInDocument
(
origRange
-
>
GetEndContainer
(
)
aDoc
)
;
if
(
startNode
!
=
endNode
)
{
ellipsisOffset
=
0
;
}
startOffset
=
origRange
-
>
EndOffset
(
)
+
ellipsisOffset
;
Text
*
text
=
startNode
?
startNode
-
>
GetAsText
(
)
:
nullptr
;
if
(
text
&
&
startOffset
&
&
startOffset
<
text
-
>
Length
(
)
)
{
text
-
>
InsertData
(
startOffset
kEllipsis
)
;
startOffset
+
=
kEllipsis
.
Length
(
)
;
ellipsisOffset
+
=
kEllipsis
.
Length
(
)
;
}
}
RefPtr
<
nsRange
>
lastRange
;
nsresult
rv
=
nsRange
:
:
CreateRange
(
startNode
startOffset
bodyNode
bodyNode
-
>
GetChildCount
(
)
getter_AddRefs
(
lastRange
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
lastRange
-
>
Collapsed
(
)
)
{
selection
-
>
AddRange
(
lastRange
)
;
}
selection
-
>
DeleteFromDocument
(
)
;
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
DoPrint
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
PR_PL
(
(
"
\
n
"
)
)
;
PR_PL
(
(
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
%
s
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
gFrameTypesStr
[
aPO
-
>
mFrameType
]
)
)
;
PR_PL
(
(
"
*
*
*
*
*
*
In
DV
:
:
DoPrint
PO
:
%
p
\
n
"
aPO
.
get
(
)
)
)
;
nsIPresShell
*
poPresShell
=
aPO
-
>
mPresShell
;
nsPresContext
*
poPresContext
=
aPO
-
>
mPresContext
;
NS_ASSERTION
(
poPresContext
"
PrintObject
has
not
been
reflowed
"
)
;
NS_ASSERTION
(
poPresContext
-
>
Type
(
)
!
=
nsPresContext
:
:
eContext_PrintPreview
"
How
did
this
context
end
up
here
?
"
)
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
printData
-
>
mPrintProgressParams
)
{
SetDocAndURLIntoProgress
(
aPO
printData
-
>
mPrintProgressParams
)
;
}
{
nsIPageSequenceFrame
*
pageSequence
=
poPresShell
-
>
GetPageSequenceFrame
(
)
;
NS_ASSERTION
(
nullptr
!
=
pageSequence
"
no
page
sequence
frame
"
)
;
printData
-
>
mPreparingForPrint
=
false
;
#
ifdef
EXTENDED_DEBUG_PRINTING
nsIFrame
*
rootFrame
=
poPresShell
-
>
FrameManager
(
)
-
>
GetRootFrame
(
)
;
if
(
aPO
-
>
IsPrintable
(
)
)
{
nsAutoCString
docStr
;
nsAutoCString
urlStr
;
GetDocTitleAndURL
(
aPO
docStr
urlStr
)
;
DumpLayoutData
(
docStr
.
get
(
)
urlStr
.
get
(
)
poPresContext
printData
-
>
mPrintDocDC
rootFrame
docShell
nullptr
)
;
}
#
endif
if
(
!
printData
-
>
mPrintSettings
)
{
SetIsPrinting
(
false
)
;
return
NS_ERROR_FAILURE
;
}
nsAutoString
docTitleStr
;
nsAutoString
docURLStr
;
GetDisplayTitleAndURL
(
aPO
docTitleStr
docURLStr
eDocTitleDefBlank
)
;
nsIFrame
*
seqFrame
=
do_QueryFrame
(
pageSequence
)
;
if
(
!
seqFrame
)
{
SetIsPrinting
(
false
)
;
return
NS_ERROR_FAILURE
;
}
mPageSeqFrame
=
seqFrame
;
pageSequence
-
>
StartPrint
(
poPresContext
printData
-
>
mPrintSettings
docTitleStr
docURLStr
)
;
PR_PL
(
(
"
Scheduling
Print
of
PO
:
%
p
(
%
s
)
\
n
"
aPO
.
get
(
)
gFrameTypesStr
[
aPO
-
>
mFrameType
]
)
)
;
StartPagePrintTimer
(
aPO
)
;
}
return
NS_OK
;
}
void
nsPrintJob
:
:
SetDocAndURLIntoProgress
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsIPrintProgressParams
*
aParams
)
{
NS_ASSERTION
(
aPO
"
Must
have
valid
nsPrintObject
"
)
;
NS_ASSERTION
(
aParams
"
Must
have
valid
nsIPrintProgressParams
"
)
;
if
(
!
aPO
|
|
!
aPO
-
>
mDocShell
|
|
!
aParams
)
{
return
;
}
const
uint32_t
kTitleLength
=
64
;
nsAutoString
docTitleStr
;
nsAutoString
docURLStr
;
GetDisplayTitleAndURL
(
aPO
docTitleStr
docURLStr
eDocTitleDefURLDoc
)
;
EllipseLongString
(
docTitleStr
kTitleLength
false
)
;
EllipseLongString
(
docURLStr
kTitleLength
true
)
;
aParams
-
>
SetDocTitle
(
docTitleStr
)
;
aParams
-
>
SetDocURL
(
docURLStr
)
;
}
void
nsPrintJob
:
:
EllipseLongString
(
nsAString
&
aStr
const
uint32_t
aLen
bool
aDoFront
)
{
if
(
aLen
>
=
3
&
&
aStr
.
Length
(
)
>
aLen
)
{
if
(
aDoFront
)
{
nsAutoString
newStr
;
newStr
.
AppendLiteral
(
"
.
.
.
"
)
;
newStr
+
=
Substring
(
aStr
aStr
.
Length
(
)
-
(
aLen
-
3
)
aLen
-
3
)
;
aStr
=
newStr
;
}
else
{
aStr
.
SetLength
(
aLen
-
3
)
;
aStr
.
AppendLiteral
(
"
.
.
.
"
)
;
}
}
}
static
bool
DocHasPrintCallbackCanvas
(
nsIDocument
*
aDoc
void
*
aData
)
{
if
(
!
aDoc
)
{
return
true
;
}
Element
*
root
=
aDoc
-
>
GetRootElement
(
)
;
if
(
!
root
)
{
return
true
;
}
RefPtr
<
nsContentList
>
canvases
=
NS_GetContentList
(
root
kNameSpaceID_XHTML
NS_LITERAL_STRING
(
"
canvas
"
)
)
;
uint32_t
canvasCount
=
canvases
-
>
Length
(
true
)
;
for
(
uint32_t
i
=
0
;
i
<
canvasCount
;
+
+
i
)
{
HTMLCanvasElement
*
canvas
=
HTMLCanvasElement
:
:
FromContentOrNull
(
canvases
-
>
Item
(
i
false
)
)
;
if
(
canvas
&
&
canvas
-
>
GetMozPrintCallback
(
)
)
{
*
static_cast
<
bool
*
>
(
aData
)
=
true
;
return
false
;
}
}
return
true
;
}
static
bool
DocHasPrintCallbackCanvas
(
nsIDocument
*
aDoc
)
{
bool
result
=
false
;
aDoc
-
>
EnumerateSubDocuments
(
&
DocHasPrintCallbackCanvas
static_cast
<
void
*
>
(
&
result
)
)
;
return
result
;
}
bool
nsPrintJob
:
:
HasPrintCallbackCanvas
(
)
{
if
(
!
mDocument
)
{
return
false
;
}
bool
result
=
false
;
DocHasPrintCallbackCanvas
(
mDocument
static_cast
<
void
*
>
(
&
result
)
)
;
return
result
|
|
DocHasPrintCallbackCanvas
(
mDocument
)
;
}
bool
nsPrintJob
:
:
PrePrintPage
(
)
{
NS_ASSERTION
(
mPageSeqFrame
.
IsAlive
(
)
"
mPageSeqFrame
is
not
alive
!
"
)
;
NS_ASSERTION
(
mPrt
"
mPrt
is
null
!
"
)
;
if
(
!
mPrt
|
|
!
mPageSeqFrame
.
IsAlive
(
)
)
{
return
true
;
}
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
bool
isCancelled
=
false
;
printData
-
>
mPrintSettings
-
>
GetIsCancelled
(
&
isCancelled
)
;
if
(
isCancelled
)
return
true
;
bool
done
=
false
;
nsIPageSequenceFrame
*
pageSeqFrame
=
do_QueryFrame
(
mPageSeqFrame
.
GetFrame
(
)
)
;
nsresult
rv
=
pageSeqFrame
-
>
PrePrintNextPage
(
mPagePrintTimer
&
done
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
rv
!
=
NS_ERROR_ABORT
)
{
FirePrintingErrorEvent
(
rv
)
;
printData
-
>
mIsAborted
=
true
;
}
done
=
true
;
}
return
done
;
}
bool
nsPrintJob
:
:
PrintPage
(
nsPrintObject
*
aPO
bool
&
aInRange
)
{
NS_ASSERTION
(
aPO
"
aPO
is
null
!
"
)
;
NS_ASSERTION
(
mPageSeqFrame
.
IsAlive
(
)
"
mPageSeqFrame
is
not
alive
!
"
)
;
NS_ASSERTION
(
mPrt
"
mPrt
is
null
!
"
)
;
if
(
!
mPrt
|
|
!
aPO
|
|
!
mPageSeqFrame
.
IsAlive
(
)
)
{
FirePrintingErrorEvent
(
NS_ERROR_FAILURE
)
;
return
true
;
}
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
PR_PL
(
(
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
)
;
PR_PL
(
(
"
-
-
-
-
-
-
In
DV
:
:
PrintPage
PO
:
%
p
(
%
s
)
\
n
"
aPO
gFrameTypesStr
[
aPO
-
>
mFrameType
]
)
)
;
bool
isCancelled
=
false
;
printData
-
>
mPrintSettings
-
>
GetIsCancelled
(
&
isCancelled
)
;
if
(
isCancelled
|
|
printData
-
>
mIsAborted
)
{
return
true
;
}
int32_t
pageNum
numPages
endPage
;
nsIPageSequenceFrame
*
pageSeqFrame
=
do_QueryFrame
(
mPageSeqFrame
.
GetFrame
(
)
)
;
pageSeqFrame
-
>
GetCurrentPageNum
(
&
pageNum
)
;
pageSeqFrame
-
>
GetNumPages
(
&
numPages
)
;
bool
donePrinting
;
bool
isDoingPrintRange
;
pageSeqFrame
-
>
IsDoingPrintRange
(
&
isDoingPrintRange
)
;
if
(
isDoingPrintRange
)
{
int32_t
fromPage
;
int32_t
toPage
;
pageSeqFrame
-
>
GetPrintRange
(
&
fromPage
&
toPage
)
;
if
(
fromPage
>
numPages
)
{
return
true
;
}
if
(
toPage
>
numPages
)
{
toPage
=
numPages
;
}
PR_PL
(
(
"
*
*
*
*
*
*
Printing
Page
%
d
printing
from
%
d
to
page
%
d
\
n
"
pageNum
fromPage
toPage
)
)
;
donePrinting
=
pageNum
>
=
toPage
;
aInRange
=
pageNum
>
=
fromPage
&
&
pageNum
<
=
toPage
;
endPage
=
(
toPage
-
fromPage
)
+
1
;
}
else
{
PR_PL
(
(
"
*
*
*
*
*
*
Printing
Page
%
d
of
%
d
page
(
s
)
\
n
"
pageNum
numPages
)
)
;
donePrinting
=
pageNum
>
=
numPages
;
endPage
=
numPages
;
aInRange
=
true
;
}
if
(
printData
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kEachFrameSep
)
{
endPage
=
printData
-
>
mNumPrintablePages
;
}
printData
-
>
DoOnProgressChange
(
+
+
printData
-
>
mNumPagesPrinted
endPage
false
0
)
;
if
(
NS_WARN_IF
(
mPrt
!
=
printData
)
)
{
return
true
;
}
if
(
XRE_IsParentProcess
(
)
&
&
!
printData
-
>
mPrintDC
-
>
IsSyncPagePrinting
(
)
)
{
mPagePrintTimer
-
>
WaitForRemotePrint
(
)
;
}
nsresult
rv
=
pageSeqFrame
-
>
PrintNextPage
(
)
;
if
(
NS_FAILED
(
rv
)
)
{
if
(
rv
!
=
NS_ERROR_ABORT
)
{
FirePrintingErrorEvent
(
rv
)
;
printData
-
>
mIsAborted
=
true
;
}
return
true
;
}
pageSeqFrame
-
>
DoPageEnd
(
)
;
return
donePrinting
;
}
void
nsPrintJob
:
:
PageDone
(
nsresult
aResult
)
{
MOZ_ASSERT
(
mIsDoingPrinting
)
;
RefPtr
<
nsPagePrintTimer
>
timer
=
mPagePrintTimer
;
timer
-
>
RemotePrintFinished
(
)
;
}
void
nsPrintJob
:
:
SetIsPrinting
(
bool
aIsPrinting
)
{
mIsDoingPrinting
=
aIsPrinting
;
if
(
!
mIsDoingPrintPreview
&
&
mDocViewerPrint
)
{
mDocViewerPrint
-
>
SetIsPrinting
(
aIsPrinting
)
;
}
if
(
mPrt
&
&
aIsPrinting
)
{
mPrt
-
>
mPreparingForPrint
=
true
;
}
}
void
nsPrintJob
:
:
SetIsPrintPreview
(
bool
aIsPrintPreview
)
{
mIsDoingPrintPreview
=
aIsPrintPreview
;
if
(
mDocViewerPrint
)
{
mDocViewerPrint
-
>
SetIsPrintPreview
(
aIsPrintPreview
)
;
}
}
void
nsPrintJob
:
:
CleanupDocTitleArray
(
char16_t
*
*
&
aArray
int32_t
&
aCount
)
{
for
(
int32_t
i
=
aCount
-
1
;
i
>
=
0
;
i
-
-
)
{
free
(
aArray
[
i
]
)
;
}
free
(
aArray
)
;
aArray
=
nullptr
;
aCount
=
0
;
}
bool
nsPrintJob
:
:
HasFramesetChild
(
nsIContent
*
aContent
)
{
if
(
!
aContent
)
{
return
false
;
}
for
(
nsIContent
*
child
=
aContent
-
>
GetFirstChild
(
)
;
child
;
child
=
child
-
>
GetNextSibling
(
)
)
{
if
(
child
-
>
IsHTMLElement
(
nsGkAtoms
:
:
frameset
)
)
{
return
true
;
}
}
return
false
;
}
already_AddRefed
<
nsPIDOMWindowOuter
>
nsPrintJob
:
:
FindFocusedDOMWindow
(
)
{
nsIFocusManager
*
fm
=
nsFocusManager
:
:
GetFocusManager
(
)
;
NS_ENSURE_TRUE
(
fm
nullptr
)
;
nsPIDOMWindowOuter
*
window
=
mDocument
-
>
GetWindow
(
)
;
NS_ENSURE_TRUE
(
window
nullptr
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
rootWindow
=
window
-
>
GetPrivateRoot
(
)
;
NS_ENSURE_TRUE
(
rootWindow
nullptr
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
focusedWindow
;
nsFocusManager
:
:
GetFocusedDescendant
(
rootWindow
nsFocusManager
:
:
eIncludeAllDescendants
getter_AddRefs
(
focusedWindow
)
)
;
NS_ENSURE_TRUE
(
focusedWindow
nullptr
)
;
if
(
IsWindowsInOurSubTree
(
focusedWindow
)
)
{
return
focusedWindow
.
forget
(
)
;
}
return
nullptr
;
}
bool
nsPrintJob
:
:
IsWindowsInOurSubTree
(
nsPIDOMWindowOuter
*
window
)
{
bool
found
=
false
;
if
(
window
)
{
nsCOMPtr
<
nsIDocShell
>
docShell
=
window
-
>
GetDocShell
(
)
;
if
(
docShell
)
{
nsCOMPtr
<
nsIDocShell
>
thisDVDocShell
(
do_QueryReferent
(
mContainer
)
)
;
while
(
!
found
)
{
if
(
docShell
)
{
if
(
docShell
=
=
thisDVDocShell
)
{
found
=
true
;
break
;
}
}
else
{
break
;
}
nsCOMPtr
<
nsIDocShellTreeItem
>
docShellItemParent
;
docShell
-
>
GetSameTypeParent
(
getter_AddRefs
(
docShellItemParent
)
)
;
docShell
=
do_QueryInterface
(
docShellItemParent
)
;
}
}
}
return
found
;
}
bool
nsPrintJob
:
:
DonePrintingPages
(
nsPrintObject
*
aPO
nsresult
aResult
)
{
PR_PL
(
(
"
*
*
*
*
*
*
In
DV
:
:
DonePrintingPages
PO
:
%
p
(
%
s
)
\
n
"
aPO
aPO
?
gFrameTypesStr
[
aPO
-
>
mFrameType
]
:
"
"
)
)
;
if
(
mPageSeqFrame
.
IsAlive
(
)
)
{
nsIPageSequenceFrame
*
pageSeqFrame
=
do_QueryFrame
(
mPageSeqFrame
.
GetFrame
(
)
)
;
pageSeqFrame
-
>
ResetPrintCanvasList
(
)
;
}
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
aPO
&
&
!
printData
-
>
mIsAborted
)
{
aPO
-
>
mHasBeenPrinted
=
true
;
nsresult
rv
;
bool
didPrint
=
PrintDocContent
(
printData
-
>
mPrintObject
rv
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
didPrint
)
{
PR_PL
(
(
"
*
*
*
*
*
*
In
DV
:
:
DonePrintingPages
PO
:
%
p
(
%
s
)
didPrint
:
%
s
(
Not
Done
Printing
)
\
n
"
aPO
gFrameTypesStr
[
aPO
-
>
mFrameType
]
PRT_YESNO
(
didPrint
)
)
)
;
return
false
;
}
}
printData
-
>
mPrintDC
-
>
UnregisterPageDoneCallback
(
)
;
if
(
NS_SUCCEEDED
(
aResult
)
)
{
FirePrintCompletionEvent
(
)
;
}
TurnScriptingOn
(
true
)
;
SetIsPrinting
(
false
)
;
DisconnectPagePrintTimer
(
)
;
return
true
;
}
void
nsPrintJob
:
:
SetPrintAsIs
(
nsPrintObject
*
aPO
bool
aAsIs
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
aPO
-
>
mPrintAsIs
=
aAsIs
;
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
SetPrintAsIs
(
kid
.
get
(
)
aAsIs
)
;
}
}
nsPrintObject
*
nsPrintJob
:
:
FindPrintObjectByDOMWin
(
nsPrintObject
*
aPO
nsPIDOMWindowOuter
*
aDOMWin
)
{
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
if
(
!
aDOMWin
)
{
return
nullptr
;
}
nsCOMPtr
<
nsIDocument
>
doc
=
aDOMWin
-
>
GetDoc
(
)
;
if
(
aPO
-
>
mDocument
&
&
aPO
-
>
mDocument
-
>
GetOriginalDocument
(
)
=
=
doc
)
{
return
aPO
;
}
for
(
const
UniquePtr
<
nsPrintObject
>
&
kid
:
aPO
-
>
mKids
)
{
nsPrintObject
*
po
=
FindPrintObjectByDOMWin
(
kid
.
get
(
)
aDOMWin
)
;
if
(
po
)
{
return
po
;
}
}
return
nullptr
;
}
nsresult
nsPrintJob
:
:
EnablePOsForPrinting
(
)
{
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
!
printData
-
>
mPrintSettings
)
{
return
NS_ERROR_FAILURE
;
}
printData
-
>
mPrintFrameType
=
nsIPrintSettings
:
:
kNoFrames
;
printData
-
>
mPrintSettings
-
>
GetPrintFrameType
(
&
printData
-
>
mPrintFrameType
)
;
int16_t
printHowEnable
=
nsIPrintSettings
:
:
kFrameEnableNone
;
printData
-
>
mPrintSettings
-
>
GetHowToEnableFrameUI
(
&
printHowEnable
)
;
int16_t
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
printData
-
>
mPrintSettings
-
>
GetPrintRange
(
&
printRangeType
)
;
PR_PL
(
(
"
\
n
"
)
)
;
PR_PL
(
(
"
*
*
*
*
*
*
*
*
*
nsPrintJob
:
:
EnablePOsForPrinting
*
*
*
*
*
*
*
*
*
\
n
"
)
)
;
PR_PL
(
(
"
PrintFrameType
:
%
s
\
n
"
gPrintFrameTypeStr
[
printData
-
>
mPrintFrameType
]
)
)
;
PR_PL
(
(
"
HowToEnableFrameUI
:
%
s
\
n
"
gFrameHowToEnableStr
[
printHowEnable
]
)
)
;
PR_PL
(
(
"
PrintRange
:
%
s
\
n
"
gPrintRangeStr
[
printRangeType
]
)
)
;
PR_PL
(
(
"
-
-
-
-
\
n
"
)
)
;
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSelection
)
{
printData
-
>
mPrintFrameType
=
nsIPrintSettings
:
:
kSelectedFrame
;
printHowEnable
=
nsIPrintSettings
:
:
kFrameEnableNone
;
}
if
(
printHowEnable
=
=
nsIPrintSettings
:
:
kFrameEnableNone
)
{
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeAllPages
|
|
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSpecifiedPageRange
)
{
SetPrintPO
(
printData
-
>
mPrintObject
.
get
(
)
true
)
;
if
(
printData
-
>
mPrintObject
-
>
mKids
.
Length
(
)
>
0
)
{
for
(
const
UniquePtr
<
nsPrintObject
>
&
po
:
printData
-
>
mPrintObject
-
>
mKids
)
{
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
SetPrintAsIs
(
po
.
get
(
)
)
;
}
printData
-
>
mPrintFrameType
=
nsIPrintSettings
:
:
kFramesAsIs
;
}
PR_PL
(
(
"
PrintFrameType
:
%
s
\
n
"
gPrintFrameTypeStr
[
printData
-
>
mPrintFrameType
]
)
)
;
PR_PL
(
(
"
HowToEnableFrameUI
:
%
s
\
n
"
gFrameHowToEnableStr
[
printHowEnable
]
)
)
;
PR_PL
(
(
"
PrintRange
:
%
s
\
n
"
gPrintRangeStr
[
printRangeType
]
)
)
;
return
NS_OK
;
}
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSelection
)
{
if
(
printData
-
>
mCurrentFocusWin
)
{
nsPrintObject
*
po
=
FindPrintObjectByDOMWin
(
printData
-
>
mPrintObject
.
get
(
)
printData
-
>
mCurrentFocusWin
)
;
if
(
po
)
{
SetPrintAsIs
(
po
)
;
SetPrintPO
(
po
true
)
;
nsPIDOMWindowOuter
*
domWin
=
po
-
>
mDocument
-
>
GetOriginalDocument
(
)
-
>
GetWindow
(
)
;
if
(
!
IsThereARangeSelection
(
domWin
)
)
{
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
printData
-
>
mPrintSettings
-
>
SetPrintRange
(
printRangeType
)
;
}
PR_PL
(
(
"
PrintFrameType
:
%
s
\
n
"
gPrintFrameTypeStr
[
printData
-
>
mPrintFrameType
]
)
)
;
PR_PL
(
(
"
HowToEnableFrameUI
:
%
s
\
n
"
gFrameHowToEnableStr
[
printHowEnable
]
)
)
;
PR_PL
(
(
"
PrintRange
:
%
s
\
n
"
gPrintRangeStr
[
printRangeType
]
)
)
;
return
NS_OK
;
}
}
else
{
for
(
uint32_t
i
=
0
;
i
<
printData
-
>
mPrintDocList
.
Length
(
)
;
i
+
+
)
{
nsPrintObject
*
po
=
printData
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWin
=
po
-
>
mDocShell
-
>
GetWindow
(
)
;
if
(
IsThereARangeSelection
(
domWin
)
)
{
printData
-
>
mCurrentFocusWin
=
domWin
.
forget
(
)
;
SetPrintPO
(
po
true
)
;
break
;
}
}
return
NS_OK
;
}
}
}
if
(
printRangeType
=
=
nsIPrintSettings
:
:
kRangeSelection
)
{
if
(
printData
-
>
mCurrentFocusWin
)
{
nsPrintObject
*
po
=
FindPrintObjectByDOMWin
(
printData
-
>
mPrintObject
.
get
(
)
printData
-
>
mCurrentFocusWin
)
;
if
(
po
)
{
SetPrintAsIs
(
po
)
;
SetPrintPO
(
po
true
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
domWin
=
po
-
>
mDocument
-
>
GetOriginalDocument
(
)
-
>
GetWindow
(
)
;
if
(
!
IsThereARangeSelection
(
domWin
)
)
{
printRangeType
=
nsIPrintSettings
:
:
kRangeAllPages
;
printData
-
>
mPrintSettings
-
>
SetPrintRange
(
printRangeType
)
;
}
PR_PL
(
(
"
PrintFrameType
:
%
s
\
n
"
gPrintFrameTypeStr
[
printData
-
>
mPrintFrameType
]
)
)
;
PR_PL
(
(
"
HowToEnableFrameUI
:
%
s
\
n
"
gFrameHowToEnableStr
[
printHowEnable
]
)
)
;
PR_PL
(
(
"
PrintRange
:
%
s
\
n
"
gPrintRangeStr
[
printRangeType
]
)
)
;
return
NS_OK
;
}
}
}
if
(
printData
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kFramesAsIs
)
{
SetPrintAsIs
(
printData
-
>
mPrintObject
.
get
(
)
)
;
SetPrintPO
(
printData
-
>
mPrintObject
.
get
(
)
true
)
;
return
NS_OK
;
}
if
(
printData
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kSelectedFrame
)
{
if
(
(
printData
-
>
mIsParentAFrameSet
&
&
printData
-
>
mCurrentFocusWin
)
|
|
printData
-
>
mIsIFrameSelected
)
{
nsPrintObject
*
po
=
FindPrintObjectByDOMWin
(
printData
-
>
mPrintObject
.
get
(
)
printData
-
>
mCurrentFocusWin
)
;
if
(
po
)
{
if
(
po
-
>
mKids
.
Length
(
)
>
0
)
{
SetPrintAsIs
(
po
)
;
}
SetPrintPO
(
po
true
)
;
}
}
return
NS_OK
;
}
if
(
printData
-
>
mPrintFrameType
=
=
nsIPrintSettings
:
:
kEachFrameSep
)
{
SetPrintPO
(
printData
-
>
mPrintObject
.
get
(
)
true
)
;
int32_t
cnt
=
printData
-
>
mPrintDocList
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
cnt
;
i
+
+
)
{
nsPrintObject
*
po
=
printData
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
if
(
po
-
>
mFrameType
=
=
eFrameSet
)
{
po
-
>
mDontPrint
=
true
;
}
}
}
return
NS_OK
;
}
nsPrintObject
*
nsPrintJob
:
:
FindSmallestSTF
(
)
{
float
smallestRatio
=
1
.
0f
;
nsPrintObject
*
smallestPO
=
nullptr
;
for
(
uint32_t
i
=
0
;
i
<
mPrt
-
>
mPrintDocList
.
Length
(
)
;
i
+
+
)
{
nsPrintObject
*
po
=
mPrt
-
>
mPrintDocList
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
if
(
po
-
>
mFrameType
!
=
eFrameSet
&
&
po
-
>
mFrameType
!
=
eIFrame
)
{
if
(
po
-
>
mShrinkRatio
<
smallestRatio
)
{
smallestRatio
=
po
-
>
mShrinkRatio
;
smallestPO
=
po
;
}
}
}
#
ifdef
EXTENDED_DEBUG_PRINTING
if
(
smallestPO
)
printf
(
"
*
PO
:
%
p
Type
:
%
d
%
10
.
3f
\
n
"
smallestPO
smallestPO
-
>
mFrameType
smallestPO
-
>
mShrinkRatio
)
;
#
endif
return
smallestPO
;
}
void
nsPrintJob
:
:
TurnScriptingOn
(
bool
aDoTurnOn
)
{
if
(
mIsDoingPrinting
&
&
aDoTurnOn
&
&
mDocViewerPrint
&
&
mDocViewerPrint
-
>
GetIsPrintPreview
(
)
)
{
return
;
}
RefPtr
<
nsPrintData
>
printData
=
mPrt
?
mPrt
:
mPrtPreview
;
if
(
!
printData
)
{
return
;
}
NS_ASSERTION
(
mDocument
"
We
MUST
have
a
document
.
"
)
;
for
(
uint32_t
i
=
0
;
i
<
printData
-
>
mPrintDocList
.
Length
(
)
;
i
+
+
)
{
nsPrintObject
*
po
=
printData
-
>
mPrintDocList
.
ElementAt
(
i
)
;
MOZ_ASSERT
(
po
)
;
nsIDocument
*
doc
=
po
-
>
mDocument
;
if
(
!
doc
)
{
continue
;
}
if
(
nsCOMPtr
<
nsPIDOMWindowInner
>
window
=
doc
-
>
GetInnerWindow
(
)
)
{
nsCOMPtr
<
nsIGlobalObject
>
go
=
do_QueryInterface
(
window
)
;
NS_WARNING_ASSERTION
(
go
&
&
go
-
>
GetGlobalJSObject
(
)
"
Can
'
t
get
global
"
)
;
nsresult
propThere
=
NS_PROPTABLE_PROP_NOT_THERE
;
doc
-
>
GetProperty
(
nsGkAtoms
:
:
scriptEnabledBeforePrintOrPreview
&
propThere
)
;
if
(
aDoTurnOn
)
{
if
(
propThere
!
=
NS_PROPTABLE_PROP_NOT_THERE
)
{
doc
-
>
DeleteProperty
(
nsGkAtoms
:
:
scriptEnabledBeforePrintOrPreview
)
;
if
(
go
&
&
go
-
>
GetGlobalJSObject
(
)
)
{
xpc
:
:
Scriptability
:
:
Get
(
go
-
>
GetGlobalJSObject
(
)
)
.
Unblock
(
)
;
}
window
-
>
Resume
(
)
;
}
}
else
{
if
(
propThere
=
=
NS_PROPTABLE_PROP_NOT_THERE
)
{
doc
-
>
SetProperty
(
nsGkAtoms
:
:
scriptEnabledBeforePrintOrPreview
NS_INT32_TO_PTR
(
doc
-
>
IsScriptEnabled
(
)
)
)
;
if
(
go
&
&
go
-
>
GetGlobalJSObject
(
)
)
{
xpc
:
:
Scriptability
:
:
Get
(
go
-
>
GetGlobalJSObject
(
)
)
.
Block
(
)
;
}
window
-
>
Suspend
(
)
;
}
}
}
}
}
void
nsPrintJob
:
:
CloseProgressDialog
(
nsIWebProgressListener
*
aWebProgressListener
)
{
if
(
aWebProgressListener
)
{
aWebProgressListener
-
>
OnStateChange
(
nullptr
nullptr
nsIWebProgressListener
:
:
STATE_STOP
|
nsIWebProgressListener
:
:
STATE_IS_DOCUMENT
NS_OK
)
;
}
}
nsresult
nsPrintJob
:
:
FinishPrintPreview
(
)
{
nsresult
rv
=
NS_OK
;
#
ifdef
NS_PRINT_PREVIEW
if
(
!
mPrt
)
{
return
rv
;
}
rv
=
DocumentReadyForPrinting
(
)
;
SetIsCreatingPrintPreview
(
false
)
;
RefPtr
<
nsPrintData
>
printData
=
mPrt
;
if
(
NS_FAILED
(
rv
)
)
{
printData
-
>
OnEndPrinting
(
)
;
TurnScriptingOn
(
true
)
;
return
rv
;
}
if
(
mIsDoingPrintPreview
&
&
mOldPrtPreview
)
{
mOldPrtPreview
=
nullptr
;
}
printData
-
>
OnEndPrinting
(
)
;
mPrtPreview
=
Move
(
mPrt
)
;
#
endif
return
NS_OK
;
}
nsresult
nsPrintJob
:
:
StartPagePrintTimer
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
)
{
if
(
!
mPagePrintTimer
)
{
int32_t
printPageDelay
=
50
;
mPrt
-
>
mPrintSettings
-
>
GetPrintPageDelay
(
&
printPageDelay
)
;
nsCOMPtr
<
nsIContentViewer
>
cv
=
do_QueryInterface
(
mDocViewerPrint
)
;
NS_ENSURE_TRUE
(
cv
NS_ERROR_FAILURE
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
cv
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE
(
doc
NS_ERROR_FAILURE
)
;
RefPtr
<
nsPagePrintTimer
>
timer
=
new
nsPagePrintTimer
(
this
mDocViewerPrint
doc
printPageDelay
)
;
timer
.
forget
(
&
mPagePrintTimer
)
;
nsCOMPtr
<
nsIPrintSession
>
printSession
;
nsresult
rv
=
mPrt
-
>
mPrintSettings
-
>
GetPrintSession
(
getter_AddRefs
(
printSession
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
printSession
)
{
RefPtr
<
mozilla
:
:
layout
:
:
RemotePrintJobChild
>
remotePrintJob
;
printSession
-
>
GetRemotePrintJob
(
getter_AddRefs
(
remotePrintJob
)
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
remotePrintJob
)
{
remotePrintJob
-
>
SetPagePrintTimer
(
mPagePrintTimer
)
;
remotePrintJob
-
>
SetPrintJob
(
this
)
;
}
}
}
return
mPagePrintTimer
-
>
Start
(
aPO
.
get
(
)
)
;
}
NS_IMETHODIMP
nsPrintJob
:
:
Observe
(
nsISupports
*
aSubject
const
char
*
aTopic
const
char16_t
*
aData
)
{
nsresult
rv
=
NS_ERROR_FAILURE
;
rv
=
InitPrintDocConstruction
(
true
)
;
if
(
!
mIsDoingPrinting
&
&
mPrtPreview
)
{
RefPtr
<
nsPrintData
>
printDataOfPrintPreview
=
mPrtPreview
;
printDataOfPrintPreview
-
>
OnEndPrinting
(
)
;
}
return
rv
;
}
class
nsPrintCompletionEvent
:
public
Runnable
{
public
:
explicit
nsPrintCompletionEvent
(
nsIDocumentViewerPrint
*
docViewerPrint
)
:
mozilla
:
:
Runnable
(
"
nsPrintCompletionEvent
"
)
mDocViewerPrint
(
docViewerPrint
)
{
NS_ASSERTION
(
mDocViewerPrint
"
mDocViewerPrint
is
null
.
"
)
;
}
NS_IMETHOD
Run
(
)
override
{
if
(
mDocViewerPrint
)
mDocViewerPrint
-
>
OnDonePrinting
(
)
;
return
NS_OK
;
}
private
:
nsCOMPtr
<
nsIDocumentViewerPrint
>
mDocViewerPrint
;
}
;
void
nsPrintJob
:
:
FirePrintCompletionEvent
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
nsCOMPtr
<
nsIRunnable
>
event
=
new
nsPrintCompletionEvent
(
mDocViewerPrint
)
;
nsCOMPtr
<
nsIContentViewer
>
cv
=
do_QueryInterface
(
mDocViewerPrint
)
;
NS_ENSURE_TRUE_VOID
(
cv
)
;
nsCOMPtr
<
nsIDocument
>
doc
=
cv
-
>
GetDocument
(
)
;
NS_ENSURE_TRUE_VOID
(
doc
)
;
NS_ENSURE_SUCCESS_VOID
(
doc
-
>
Dispatch
(
TaskCategory
:
:
Other
event
.
forget
(
)
)
)
;
}
void
nsPrintJob
:
:
DisconnectPagePrintTimer
(
)
{
if
(
mPagePrintTimer
)
{
mPagePrintTimer
-
>
Disconnect
(
)
;
NS_RELEASE
(
mPagePrintTimer
)
;
}
}
#
if
defined
(
XP_WIN
)
&
&
defined
(
EXTENDED_DEBUG_PRINTING
)
#
include
"
windows
.
h
"
#
include
"
process
.
h
"
#
include
"
direct
.
h
"
#
define
MY_FINDFIRST
(
a
b
)
FindFirstFile
(
a
b
)
#
define
MY_FINDNEXT
(
a
b
)
FindNextFile
(
a
b
)
#
define
ISDIR
(
a
)
(
a
.
dwFileAttributes
&
FILE_ATTRIBUTE_DIRECTORY
)
#
define
MY_FINDCLOSE
(
a
)
FindClose
(
a
)
#
define
MY_FILENAME
(
a
)
a
.
cFileName
#
define
MY_FILESIZE
(
a
)
(
a
.
nFileSizeHigh
*
MAXDWORD
)
+
a
.
nFileSizeLow
int
RemoveFilesInDir
(
const
char
*
aDir
)
{
WIN32_FIND_DATA
data_ptr
;
HANDLE
find_handle
;
char
path
[
MAX_PATH
]
;
strcpy
(
path
aDir
)
;
if
(
path
[
strlen
(
path
)
-
1
]
!
=
'
\
\
'
)
strcat
(
path
"
\
\
"
)
;
char
findPath
[
MAX_PATH
]
;
strcpy
(
findPath
path
)
;
strcat
(
findPath
"
*
.
*
"
)
;
find_handle
=
MY_FINDFIRST
(
findPath
&
data_ptr
)
;
if
(
find_handle
!
=
INVALID_HANDLE_VALUE
)
{
do
{
if
(
ISDIR
(
data_ptr
)
&
&
(
stricmp
(
MY_FILENAME
(
data_ptr
)
"
.
"
)
)
&
&
(
stricmp
(
MY_FILENAME
(
data_ptr
)
"
.
.
"
)
)
)
{
}
else
if
(
!
ISDIR
(
data_ptr
)
)
{
if
(
!
strncmp
(
MY_FILENAME
(
data_ptr
)
"
print_dump
"
10
)
)
{
char
fileName
[
MAX_PATH
]
;
strcpy
(
fileName
aDir
)
;
strcat
(
fileName
"
\
\
"
)
;
strcat
(
fileName
MY_FILENAME
(
data_ptr
)
)
;
printf
(
"
Removing
%
s
\
n
"
fileName
)
;
remove
(
fileName
)
;
}
}
}
while
(
MY_FINDNEXT
(
find_handle
&
data_ptr
)
)
;
MY_FINDCLOSE
(
find_handle
)
;
}
return
TRUE
;
}
#
endif
#
ifdef
EXTENDED_DEBUG_PRINTING
static
void
RootFrameList
(
nsPresContext
*
aPresContext
FILE
*
out
int32_t
aIndent
)
{
if
(
!
aPresContext
|
|
!
out
)
return
;
nsIPresShell
*
shell
=
aPresContext
-
>
GetPresShell
(
)
;
if
(
shell
)
{
nsIFrame
*
frame
=
shell
-
>
FrameManager
(
)
-
>
GetRootFrame
(
)
;
if
(
frame
)
{
frame
-
>
List
(
aPresContext
out
aIndent
)
;
}
}
}
static
void
DumpFrames
(
FILE
*
out
nsPresContext
*
aPresContext
gfxContext
*
aRendContext
nsIFrame
*
aFrame
int32_t
aLevel
)
{
NS_ASSERTION
(
out
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aPresContext
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aRendContext
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aFrame
"
Pointer
is
null
!
"
)
;
nsIFrame
*
child
=
aFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
while
(
child
!
=
nullptr
)
{
for
(
int32_t
i
=
0
;
i
<
aLevel
;
i
+
+
)
{
fprintf
(
out
"
"
)
;
}
nsAutoString
tmp
;
child
-
>
GetFrameName
(
tmp
)
;
fputs
(
NS_LossyConvertUTF16toASCII
(
tmp
)
.
get
(
)
out
)
;
bool
isSelected
;
if
(
NS_SUCCEEDED
(
child
-
>
IsVisibleForPainting
(
aPresContext
*
aRendContext
true
&
isSelected
)
)
)
{
fprintf
(
out
"
%
p
%
s
"
child
isSelected
?
"
VIS
"
:
"
UVS
"
)
;
nsRect
rect
=
child
-
>
GetRect
(
)
;
fprintf
(
out
"
[
%
d
%
d
%
d
%
d
]
"
rect
.
x
rect
.
y
rect
.
width
rect
.
height
)
;
fprintf
(
out
"
v
:
%
p
"
(
void
*
)
child
-
>
GetView
(
)
)
;
fprintf
(
out
"
\
n
"
)
;
DumpFrames
(
out
aPresContext
aRendContext
child
aLevel
+
1
)
;
child
=
child
-
>
GetNextSibling
(
)
;
}
}
}
static
void
DumpViews
(
nsIDocShell
*
aDocShell
FILE
*
out
)
{
NS_ASSERTION
(
aDocShell
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
out
"
Pointer
is
null
!
"
)
;
if
(
nullptr
!
=
aDocShell
)
{
fprintf
(
out
"
docshell
=
%
p
\
n
"
aDocShell
)
;
nsIPresShell
*
shell
=
nsPrintJob
:
:
GetPresShellFor
(
aDocShell
)
;
if
(
shell
)
{
nsViewManager
*
vm
=
shell
-
>
GetViewManager
(
)
;
if
(
vm
)
{
nsView
*
root
=
vm
-
>
GetRootView
(
)
;
if
(
root
)
{
root
-
>
List
(
out
)
;
}
}
}
else
{
fputs
(
"
null
pres
shell
\
n
"
out
)
;
}
int32_t
i
n
;
aDocShell
-
>
GetChildCount
(
&
n
)
;
for
(
i
=
0
;
i
<
n
;
i
+
+
)
{
nsCOMPtr
<
nsIDocShellTreeItem
>
child
;
aDocShell
-
>
GetChildAt
(
i
getter_AddRefs
(
child
)
)
;
nsCOMPtr
<
nsIDocShell
>
childAsShell
(
do_QueryInterface
(
child
)
)
;
if
(
childAsShell
)
{
DumpViews
(
childAsShell
out
)
;
}
}
}
}
void
DumpLayoutData
(
char
*
aTitleStr
char
*
aURLStr
nsPresContext
*
aPresContext
nsDeviceContext
*
aDC
nsIFrame
*
aRootFrame
nsIDocShekk
*
aDocShell
FILE
*
aFD
=
nullptr
)
{
if
(
!
kPrintingLogMod
|
|
kPrintingLogMod
-
>
level
!
=
DUMP_LAYOUT_LEVEL
)
return
;
if
(
aPresContext
=
=
nullptr
|
|
aDC
=
=
nullptr
)
{
return
;
}
#
ifdef
NS_PRINT_PREVIEW
if
(
aPresContext
-
>
Type
(
)
=
=
nsPresContext
:
:
eContext_PrintPreview
)
{
return
;
}
#
endif
NS_ASSERTION
(
aRootFrame
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aDocShell
"
Pointer
is
null
!
"
)
;
char
filename
[
256
]
;
sprintf
(
filename
"
print_dump_layout_
%
d
.
txt
"
gDumpLOFileNameCnt
+
+
)
;
FILE
*
fd
=
aFD
?
aFD
:
fopen
(
filename
"
w
"
)
;
if
(
fd
)
{
fprintf
(
fd
"
Title
:
%
s
\
n
"
aTitleStr
?
aTitleStr
:
"
"
)
;
fprintf
(
fd
"
URL
:
%
s
\
n
"
aURLStr
?
aURLStr
:
"
"
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Frames
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Frames
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
RootFrameList
(
aPresContext
fd
0
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
\
n
"
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
Views
From
Root
Frame
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
nsView
*
v
=
aRootFrame
-
>
GetView
(
)
;
if
(
v
)
{
v
-
>
List
(
fd
)
;
}
else
{
printf
(
"
View
is
null
!
\
n
"
)
;
}
if
(
aDocShell
)
{
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
All
Views
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
"
)
;
DumpViews
(
aDocShell
fd
)
;
fprintf
(
fd
"
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
-
\
n
\
n
"
)
;
}
if
(
aFD
=
=
nullptr
)
{
fclose
(
fd
)
;
}
}
}
static
void
DumpPrintObjectsList
(
nsTArray
<
nsPrintObject
*
>
*
aDocList
)
{
if
(
!
kPrintingLogMod
|
|
kPrintingLogMod
-
>
level
!
=
DUMP_LAYOUT_LEVEL
)
return
;
NS_ASSERTION
(
aDocList
"
Pointer
is
null
!
"
)
;
const
char
types
[
]
[
3
]
=
{
"
DC
"
"
FR
"
"
IF
"
"
FS
"
}
;
PR_PL
(
(
"
Doc
List
\
n
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
)
;
PR_PL
(
(
"
T
P
A
H
PO
DocShell
Seq
Page
Root
Page
#
Rect
\
n
"
)
)
;
int32_t
cnt
=
aDocList
-
>
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
cnt
;
i
+
+
)
{
nsPrintObject
*
po
=
aDocList
-
>
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
nsIFrame
*
rootFrame
=
nullptr
;
if
(
po
-
>
mPresShell
)
{
rootFrame
=
po
-
>
mPresShell
-
>
FrameManager
(
)
-
>
GetRootFrame
(
)
;
while
(
rootFrame
!
=
nullptr
)
{
nsIPageSequenceFrame
*
sqf
=
do_QueryFrame
(
rootFrame
)
;
if
(
sqf
)
{
break
;
}
rootFrame
=
rootFrame
-
>
PrincipalChildList
(
)
.
FirstChild
(
)
;
}
}
PR_PL
(
(
"
%
s
%
d
%
d
%
d
%
p
%
p
%
p
%
p
%
p
%
d
%
d
%
d
%
d
%
d
\
n
"
types
[
po
-
>
mFrameType
]
po
-
>
IsPrintable
(
)
po
-
>
mPrintAsIs
po
-
>
mHasBeenPrinted
po
po
-
>
mDocShell
.
get
(
)
po
-
>
mSeqFrame
po
-
>
mPageFrame
rootFrame
po
-
>
mPageNum
po
-
>
mRect
.
x
po
-
>
mRect
.
y
po
-
>
mRect
.
width
po
-
>
mRect
.
height
)
)
;
}
}
static
void
DumpPrintObjectsTree
(
nsPrintObject
*
aPO
int
aLevel
FILE
*
aFD
)
{
if
(
!
kPrintingLogMod
|
|
kPrintingLogMod
-
>
level
!
=
DUMP_LAYOUT_LEVEL
)
return
;
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
FILE
*
fd
=
aFD
?
aFD
:
stdout
;
const
char
types
[
]
[
3
]
=
{
"
DC
"
"
FR
"
"
IF
"
"
FS
"
}
;
if
(
aLevel
=
=
0
)
{
fprintf
(
fd
"
DocTree
\
n
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
;
fprintf
(
fd
"
T
PO
DocShell
Seq
Page
Page
#
Rect
\
n
"
)
;
}
int32_t
cnt
=
aPO
-
>
mKids
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
cnt
;
i
+
+
)
{
nsPrintObject
*
po
=
aPO
-
>
mKids
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
for
(
int32_t
k
=
0
;
k
<
aLevel
;
k
+
+
)
fprintf
(
fd
"
"
)
;
fprintf
(
fd
"
%
s
%
p
%
p
%
p
%
p
%
d
%
d
%
d
%
d
%
d
\
n
"
types
[
po
-
>
mFrameType
]
po
po
-
>
mDocShell
.
get
(
)
po
-
>
mSeqFrame
po
-
>
mPageFrame
po
-
>
mPageNum
po
-
>
mRect
.
x
po
-
>
mRect
.
y
po
-
>
mRect
.
width
po
-
>
mRect
.
height
)
;
}
}
static
void
GetDocTitleAndURL
(
const
UniquePtr
<
nsPrintObject
>
&
aPO
nsACString
&
aDocStr
nsACString
&
aURLStr
)
{
nsAutoString
docTitleStr
;
nsAutoString
docURLStr
;
nsPrintJob
:
:
GetDisplayTitleAndURL
(
aPO
docTitleStr
docURLStr
nsPrintJob
:
:
eDocTitleDefURLDoc
)
;
aDocStr
=
NS_ConvertUTF16toUTF8
(
docTitleStr
)
;
aURLStr
=
NS_ConvertUTF16toUTF8
(
docURLStr
)
;
}
static
void
DumpPrintObjectsTreeLayout
(
nsPrintObject
*
aPO
nsDeviceContext
*
aDC
int
aLevel
FILE
*
aFD
)
{
if
(
!
kPrintingLogMod
|
|
kPrintingLogMod
-
>
level
!
=
DUMP_LAYOUT_LEVEL
)
return
;
NS_ASSERTION
(
aPO
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aDC
"
Pointer
is
null
!
"
)
;
const
char
types
[
]
[
3
]
=
{
"
DC
"
"
FR
"
"
IF
"
"
FS
"
}
;
FILE
*
fd
=
nullptr
;
if
(
aLevel
=
=
0
)
{
fd
=
fopen
(
"
tree_layout
.
txt
"
"
w
"
)
;
fprintf
(
fd
"
DocTree
\
n
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
;
fprintf
(
fd
"
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
\
n
"
)
;
fprintf
(
fd
"
T
PO
DocShell
Seq
Page
Page
#
Rect
\
n
"
)
;
}
else
{
fd
=
aFD
;
}
if
(
fd
)
{
nsIFrame
*
rootFrame
=
nullptr
;
if
(
aPO
-
>
mPresShell
)
{
rootFrame
=
aPO
-
>
mPresShell
-
>
FrameManager
(
)
-
>
GetRootFrame
(
)
;
}
for
(
int32_t
k
=
0
;
k
<
aLevel
;
k
+
+
)
fprintf
(
fd
"
"
)
;
fprintf
(
fd
"
%
s
%
p
%
p
%
p
%
p
%
d
%
d
%
d
%
d
%
d
\
n
"
types
[
aPO
-
>
mFrameType
]
aPO
aPO
-
>
mDocShell
.
get
(
)
aPO
-
>
mSeqFrame
aPO
-
>
mPageFrame
aPO
-
>
mPageNum
aPO
-
>
mRect
.
x
aPO
-
>
mRect
.
y
aPO
-
>
mRect
.
width
aPO
-
>
mRect
.
height
)
;
if
(
aPO
-
>
IsPrintable
(
)
)
{
nsAutoCString
docStr
;
nsAutoCString
urlStr
;
GetDocTitleAndURL
(
aPO
docStr
urlStr
)
;
DumpLayoutData
(
docStr
.
get
(
)
urlStr
.
get
(
)
aPO
-
>
mPresContext
aDC
rootFrame
aPO
-
>
mDocShell
fd
)
;
}
fprintf
(
fd
"
<
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
*
>
\
n
"
)
;
int32_t
cnt
=
aPO
-
>
mKids
.
Length
(
)
;
for
(
int32_t
i
=
0
;
i
<
cnt
;
i
+
+
)
{
nsPrintObject
*
po
=
aPO
-
>
mKids
.
ElementAt
(
i
)
;
NS_ASSERTION
(
po
"
nsPrintObject
can
'
t
be
null
!
"
)
;
DumpPrintObjectsTreeLayout
(
po
aDC
aLevel
+
1
fd
)
;
}
}
if
(
aLevel
=
=
0
&
&
fd
)
{
fclose
(
fd
)
;
}
}
static
void
DumpPrintObjectsListStart
(
const
char
*
aStr
nsTArray
<
nsPrintObject
*
>
*
aDocList
)
{
if
(
!
kPrintingLogMod
|
|
kPrintingLogMod
-
>
level
!
=
DUMP_LAYOUT_LEVEL
)
return
;
NS_ASSERTION
(
aStr
"
Pointer
is
null
!
"
)
;
NS_ASSERTION
(
aDocList
"
Pointer
is
null
!
"
)
;
PR_PL
(
(
"
%
s
\
n
"
aStr
)
)
;
DumpPrintObjectsList
(
aDocList
)
;
}
#
define
DUMP_DOC_LIST
(
_title
)
DumpPrintObjectsListStart
(
(
_title
)
mPrt
-
>
mPrintDocList
)
;
#
define
DUMP_DOC_TREE
DumpPrintObjectsTree
(
mPrt
-
>
mPrintObject
.
get
(
)
)
;
#
define
DUMP_DOC_TREELAYOUT
DumpPrintObjectsTreeLayout
(
mPrt
-
>
mPrintObject
.
get
(
)
mPrt
-
>
mPrintDC
)
;
#
else
#
define
DUMP_DOC_LIST
(
_title
)
#
define
DUMP_DOC_TREE
#
define
DUMP_DOC_TREELAYOUT
#
endif
