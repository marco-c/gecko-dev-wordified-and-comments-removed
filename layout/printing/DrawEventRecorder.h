#
ifndef
mozilla_layout_printing_DrawEventRecorder_h
#
define
mozilla_layout_printing_DrawEventRecorder_h
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
gfx
/
RecordingTypes
.
h
"
#
include
"
prio
.
h
"
namespace
mozilla
{
namespace
layout
{
class
PRFileDescStream
:
public
mozilla
:
:
gfx
:
:
EventStream
{
public
:
PRFileDescStream
(
)
:
mFd
(
nullptr
)
mGood
(
true
)
{
}
void
OpenFD
(
PRFileDesc
*
aFd
)
{
MOZ_ASSERT
(
!
IsOpen
(
)
)
;
mFd
=
aFd
;
mGood
=
true
;
}
void
Close
(
)
{
PR_Close
(
mFd
)
;
mFd
=
nullptr
;
}
bool
IsOpen
(
)
{
return
mFd
!
=
nullptr
;
}
void
Flush
(
)
{
if
(
IsOpen
(
)
)
{
PR_Sync
(
mFd
)
;
}
}
void
Seek
(
PRInt32
aOffset
PRSeekWhence
aWhence
)
{
PR_Seek
(
mFd
aOffset
aWhence
)
;
}
void
write
(
const
char
*
aData
size_t
aSize
)
{
if
(
IsOpen
(
)
)
{
PR_Write
(
mFd
static_cast
<
const
void
*
>
(
aData
)
aSize
)
;
}
}
void
read
(
char
*
aOut
size_t
aSize
)
{
PRInt32
res
=
PR_Read
(
mFd
static_cast
<
void
*
>
(
aOut
)
aSize
)
;
mGood
=
res
>
=
0
&
&
(
(
size_t
)
res
=
=
aSize
)
;
}
bool
good
(
)
{
return
mGood
;
}
private
:
PRFileDesc
*
mFd
;
bool
mGood
;
}
;
class
DrawEventRecorderPRFileDesc
:
public
gfx
:
:
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderPRFileDesc
override
)
explicit
DrawEventRecorderPRFileDesc
(
)
{
}
;
~
DrawEventRecorderPRFileDesc
(
)
;
void
RecordEvent
(
const
gfx
:
:
RecordedEvent
&
aEvent
)
override
;
bool
IsOpen
(
)
;
void
OpenFD
(
PRFileDesc
*
aFd
)
;
void
Close
(
)
;
private
:
void
Flush
(
)
override
;
PRFileDescStream
mOutputStream
;
}
;
}
}
#
endif
