#
ifndef
mozilla_layout_printing_DrawEventRecorder_h
#
define
mozilla_layout_printing_DrawEventRecorder_h
#
include
"
mozilla
/
gfx
/
DrawEventRecorder
.
h
"
#
include
"
mozilla
/
gfx
/
RecordingTypes
.
h
"
#
include
"
prio
.
h
"
namespace
mozilla
{
namespace
layout
{
class
PRFileDescStream
:
public
mozilla
:
:
gfx
:
:
EventStream
{
public
:
PRFileDescStream
(
)
:
mFd
(
nullptr
)
{
}
void
Open
(
const
char
*
aFilename
)
{
MOZ_ASSERT
(
!
IsOpen
(
)
)
;
mFd
=
PR_Open
(
aFilename
PR_RDWR
|
PR_CREATE_FILE
PR_IRUSR
|
PR_IWUSR
)
;
}
void
Close
(
)
{
PR_Close
(
mFd
)
;
mFd
=
nullptr
;
}
bool
IsOpen
(
)
{
return
mFd
!
=
nullptr
;
}
void
Flush
(
)
{
if
(
IsOpen
(
)
)
{
PR_Sync
(
mFd
)
;
}
}
void
write
(
const
char
*
aData
size_t
aSize
)
{
if
(
IsOpen
(
)
)
{
PR_Write
(
mFd
static_cast
<
const
void
*
>
(
aData
)
aSize
)
;
}
}
private
:
PRFileDesc
*
mFd
;
}
;
class
DrawEventRecorderPRFileDesc
:
public
gfx
:
:
DrawEventRecorderPrivate
{
public
:
MOZ_DECLARE_REFCOUNTED_VIRTUAL_TYPENAME
(
DrawEventRecorderPRFileDesc
override
)
explicit
DrawEventRecorderPRFileDesc
(
const
char
*
aFilename
)
;
~
DrawEventRecorderPRFileDesc
(
)
;
void
RecordEvent
(
const
gfx
:
:
RecordedEvent
&
aEvent
)
override
;
bool
IsOpen
(
)
;
void
OpenNew
(
const
char
*
aFilename
)
;
void
Close
(
)
;
private
:
void
Flush
(
)
override
;
PRFileDescStream
mOutputStream
;
}
;
}
}
#
endif
