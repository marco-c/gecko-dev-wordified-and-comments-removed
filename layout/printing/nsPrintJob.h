#
ifndef
nsPrintJob_h
#
define
nsPrintJob_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsPrintObject
.
h
"
#
include
"
nsPrintData
.
h
"
#
include
"
nsFrameList
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsIWebProgress
.
h
"
#
include
"
mozilla
/
dom
/
HTMLCanvasElement
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsIObserver
.
h
"
class
nsPagePrintTimer
;
class
nsIDocShell
;
class
nsIDocumentViewerPrint
;
class
nsPrintObject
;
class
nsIDocShell
;
class
nsIPageSequenceFrame
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Document
;
}
}
class
nsPrintJob
final
:
public
nsIObserver
public
nsIWebProgressListener
public
nsSupportsWeakReference
{
public
:
static
nsresult
GetGlobalPrintSettings
(
nsIPrintSettings
*
*
aPrintSettings
)
;
static
void
CloseProgressDialog
(
nsIWebProgressListener
*
aWebProgressListener
)
;
nsPrintJob
(
)
=
default
;
NS_DECL_ISUPPORTS
NS_DECL_NSIOBSERVER
NS_DECL_NSIWEBPROGRESSLISTENER
nsresult
Initialize
(
nsIDocumentViewerPrint
*
aDocViewerPrint
nsIDocShell
*
aDocShell
mozilla
:
:
dom
:
:
Document
*
aOriginalDoc
float
aScreenDPI
)
;
nsresult
Print
(
mozilla
:
:
dom
:
:
Document
*
aSourceDoc
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
)
;
nsresult
PrintPreview
(
mozilla
:
:
dom
:
:
Document
*
aSourceDoc
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
)
;
bool
IsDoingPrint
(
)
const
{
return
mIsDoingPrinting
;
}
bool
IsDoingPrintPreview
(
)
const
{
return
mIsDoingPrintPreview
;
}
bool
IsIFrameSelected
(
)
;
bool
IsRangeSelection
(
)
;
int32_t
GetPrintPreviewNumPages
(
)
;
nsresult
EnumerateDocumentNames
(
uint32_t
*
aCount
char16_t
*
*
*
aResult
)
;
already_AddRefed
<
nsIPrintSettings
>
GetCurrentPrintSettings
(
)
;
enum
eDocTitleDefault
{
eDocTitleDefBlank
eDocTitleDefURLDoc
}
;
void
Destroy
(
)
;
void
DestroyPrintingData
(
)
;
nsresult
GetSeqFrameAndCountPages
(
nsIFrame
*
&
aSeqFrame
int32_t
&
aCount
)
;
nsresult
DocumentReadyForPrinting
(
)
;
nsresult
GetSelectionDocument
(
nsIDeviceContextSpec
*
aDevSpec
mozilla
:
:
dom
:
:
Document
*
*
aNewDoc
)
;
nsresult
SetupToPrintContent
(
)
;
nsresult
EnablePOsForPrinting
(
)
;
nsPrintObject
*
FindSmallestSTF
(
)
;
bool
PrintDocContent
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
nsresult
&
aStatus
)
;
nsresult
DoPrint
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
void
SetPrintPO
(
nsPrintObject
*
aPO
bool
aPrint
)
;
void
TurnScriptingOn
(
bool
aDoTurnOn
)
;
bool
CheckDocumentForPPCaching
(
)
;
void
SuppressPrintPreviewUserEvents
(
)
;
bool
HasPrintCallbackCanvas
(
)
{
return
mHasMozPrintCallback
;
}
bool
PrePrintPage
(
)
;
bool
PrintPage
(
nsPrintObject
*
aPOect
bool
&
aInRange
)
;
bool
DonePrintingPages
(
nsPrintObject
*
aPO
nsresult
aResult
)
;
void
BuildDocTree
(
nsIDocShell
*
aParentNode
nsTArray
<
nsPrintObject
*
>
*
aDocList
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
nsresult
ReflowDocList
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
bool
aSetPixelScale
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
ReflowPrintObject
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
void
CalcNumPrintablePages
(
int32_t
&
aNumPages
)
;
void
ShowPrintProgress
(
bool
aIsForPrinting
bool
&
aDoNotify
)
;
nsresult
CleanupOnFailure
(
nsresult
aResult
bool
aIsPrinting
)
;
nsresult
FinishPrintPreview
(
)
;
void
SetURLAndTitleOnProgressParams
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
nsIPrintProgressParams
*
aParams
)
;
void
EllipseLongString
(
nsAString
&
aStr
const
uint32_t
aLen
bool
aDoFront
)
;
void
CleanupDocTitleArray
(
char16_t
*
*
&
aArray
int32_t
&
aCount
)
;
bool
IsThereARangeSelection
(
nsPIDOMWindowOuter
*
aDOMWin
)
;
void
FirePrintingErrorEvent
(
nsresult
aPrintError
)
;
nsresult
StartPagePrintTimer
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
bool
IsWindowsInOurSubTree
(
nsPIDOMWindowOuter
*
aDOMWindow
)
const
;
bool
IsThereAnIFrameSelected
(
nsIDocShell
*
aDocShell
nsPIDOMWindowOuter
*
aDOMWin
bool
&
aIsParentFrameSet
)
;
already_AddRefed
<
nsPIDOMWindowOuter
>
FindFocusedDOMWindow
(
)
const
;
void
GetDisplayTitleAndURL
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
nsAString
&
aTitle
nsAString
&
aURLStr
eDocTitleDefault
aDefType
)
;
bool
CheckBeforeDestroy
(
)
;
nsresult
Cancelled
(
)
;
mozilla
:
:
PresShell
*
GetPrintPreviewPresShell
(
)
{
return
mPrtPreview
-
>
mPrintObject
-
>
mPresShell
;
}
float
GetPrintPreviewScale
(
)
{
return
mPrtPreview
-
>
mPrintObject
-
>
mPresContext
-
>
GetPrintPreviewScale
(
)
;
}
void
SetIsPrinting
(
bool
aIsPrinting
)
;
bool
GetIsPrinting
(
)
{
return
mIsDoingPrinting
;
}
void
SetIsPrintPreview
(
bool
aIsPrintPreview
)
;
bool
GetIsPrintPreview
(
)
{
return
mIsDoingPrintPreview
;
}
bool
GetIsCreatingPrintPreview
(
)
{
return
mIsCreatingPrintPreview
;
}
private
:
nsPrintJob
&
operator
=
(
const
nsPrintJob
&
aOther
)
=
delete
;
~
nsPrintJob
(
)
;
nsresult
CommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
mozilla
:
:
dom
:
:
Document
*
aSourceDoc
)
;
nsresult
DoCommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
mozilla
:
:
dom
:
:
Document
*
aSourceDoc
)
;
void
FirePrintCompletionEvent
(
)
;
void
DisconnectPagePrintTimer
(
)
;
nsresult
ResumePrintAfterResourcesLoaded
(
bool
aCleanupOnError
)
;
nsresult
SetRootView
(
nsPrintObject
*
aPO
bool
&
aDoReturn
bool
&
aDocumentIsTopLevel
nsSize
&
aAdjSize
)
;
nsView
*
GetParentViewForRoot
(
)
;
bool
DoSetPixelScale
(
)
;
void
UpdateZoomRatio
(
nsPrintObject
*
aPO
bool
aSetPixelScale
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
ReconstructAndReflow
(
bool
aDoSetPixelScale
)
;
nsresult
UpdateSelectionAndShrinkPrintObject
(
nsPrintObject
*
aPO
bool
aDocumentIsTopLevel
)
;
nsresult
InitPrintDocConstruction
(
bool
aHandleError
)
;
void
FirePrintPreviewUpdateEvent
(
)
;
void
PageDone
(
nsresult
aResult
)
;
RefPtr
<
mozilla
:
:
dom
:
:
Document
>
mOriginalDoc
;
nsCOMPtr
<
nsIDocumentViewerPrint
>
mDocViewerPrint
;
nsWeakPtr
mDocShell
;
WeakFrame
mPageSeqFrame
;
RefPtr
<
nsPrintData
>
mPrt
;
RefPtr
<
nsPrintData
>
mPrtPreview
;
RefPtr
<
nsPrintData
>
mOldPrtPreview
;
nsPagePrintTimer
*
mPagePrintTimer
=
nullptr
;
float
mScreenDPI
=
115
.
0f
;
int32_t
mLoadCounter
=
0
;
bool
mIsCreatingPrintPreview
=
false
;
bool
mIsDoingPrinting
=
false
;
bool
mIsDoingPrintPreview
=
false
;
bool
mProgressDialogIsShown
=
false
;
bool
mDidLoadDataForPrinting
=
false
;
bool
mIsDestroying
=
false
;
bool
mDisallowSelectionPrint
=
false
;
bool
mIsForModalWindow
=
false
;
bool
mHasMozPrintCallback
=
false
;
}
;
#
endif
