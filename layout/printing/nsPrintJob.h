#
ifndef
nsPrintJob_h
#
define
nsPrintJob_h
#
include
"
mozilla
/
Attributes
.
h
"
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsHashKeys
.
h
"
#
include
"
nsIFrame
.
h
"
#
include
"
nsSize
.
h
"
#
include
"
nsTHashtable
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsIWebProgress
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
class
nsIFrame
;
class
nsIPrintSettings
;
class
nsPrintData
;
class
nsPagePrintTimer
;
class
nsIDocShell
;
class
nsIDocumentViewerPrint
;
class
nsIFrame
;
class
nsPrintObject
;
class
nsIDocShell
;
class
nsPageSequenceFrame
;
class
nsPIDOMWindowOuter
;
class
nsView
;
namespace
mozilla
{
class
PresShell
;
namespace
dom
{
class
Document
;
class
PrintPreviewResultInfo
;
}
}
class
nsPrintJob
final
:
public
nsIWebProgressListener
public
nsSupportsWeakReference
{
using
Document
=
mozilla
:
:
dom
:
:
Document
;
using
PrintPreviewResolver
=
std
:
:
function
<
void
(
const
mozilla
:
:
dom
:
:
PrintPreviewResultInfo
&
)
>
;
public
:
nsPrintJob
(
)
;
NS_DECL_ISUPPORTS
NS_DECL_NSIWEBPROGRESSLISTENER
nsresult
Initialize
(
nsIDocumentViewerPrint
*
aDocViewerPrint
nsIDocShell
*
aDocShell
Document
*
aOriginalDoc
float
aScreenDPI
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
Print
(
Document
*
aSourceDoc
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
PrintPreview
(
Document
*
aSourceDoc
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
PrintPreviewResolver
&
&
aCallback
)
;
bool
IsDoingPrint
(
)
const
{
return
mIsDoingPrinting
;
}
bool
CreatedForPrintPreview
(
)
const
{
return
mCreatedForPrintPreview
;
}
int32_t
GetRawNumPages
(
)
const
;
bool
GetIsEmpty
(
)
const
;
int32_t
GetPrintPreviewNumSheets
(
)
const
;
already_AddRefed
<
nsIPrintSettings
>
GetCurrentPrintSettings
(
)
;
void
SetIsPrinting
(
bool
aIsPrinting
)
;
bool
GetIsPrinting
(
)
const
{
return
mIsDoingPrinting
;
}
void
SetIsPrintPreview
(
bool
aIsPrintPreview
)
;
bool
GetIsCreatingPrintPreview
(
)
const
{
return
mIsCreatingPrintPreview
;
}
std
:
:
tuple
<
nsPageSequenceFrame
*
int32_t
>
GetSeqFrameAndCountSheets
(
)
const
;
bool
PrePrintSheet
(
)
;
bool
PrintSheet
(
nsPrintObject
*
aPOect
bool
&
aInRange
)
;
bool
DonePrintingSheets
(
nsPrintObject
*
aPO
nsresult
aResult
)
;
nsresult
CleanupOnFailure
(
nsresult
aResult
bool
aIsPrinting
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
FinishPrintPreview
(
)
;
void
FirePrintingErrorEvent
(
nsresult
aPrintError
)
;
bool
CheckBeforeDestroy
(
)
const
;
mozilla
:
:
PresShell
*
GetPrintPreviewPresShell
(
)
;
nsresult
Cancel
(
)
;
void
Destroy
(
)
;
void
DestroyPrintingData
(
)
;
private
:
nsPrintJob
&
operator
=
(
const
nsPrintJob
&
aOther
)
=
delete
;
~
nsPrintJob
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DocumentReadyForPrinting
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
SetupToPrintContent
(
)
;
nsresult
EnablePOsForPrinting
(
)
;
nsPrintObject
*
FindSmallestSTF
(
)
;
bool
PrintDocContent
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
nsresult
&
aStatus
)
;
nsresult
DoPrint
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
nsresult
ReflowDocList
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
bool
aSetPixelScale
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
ReflowPrintObject
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
void
CalcNumPrintablePages
(
int32_t
&
aNumPages
)
;
nsresult
StartPagePrintTimer
(
const
mozilla
:
:
UniquePtr
<
nsPrintObject
>
&
aPO
)
;
bool
IsWindowsInOurSubTree
(
nsPIDOMWindowOuter
*
aDOMWindow
)
const
;
Document
*
FindFocusedDocument
(
Document
*
aDoc
)
const
;
enum
class
DocTitleDefault
:
uint32_t
{
eDocURLElseFallback
eFallback
}
;
static
void
GetDisplayTitleAndURL
(
Document
&
aDoc
nsIPrintSettings
*
aSettings
DocTitleDefault
aTitleDefault
nsAString
&
aTitle
nsAString
&
aURLStr
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
CommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
Document
*
aSourceDoc
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
DoCommonPrint
(
bool
aIsPrintPreview
nsIPrintSettings
*
aPrintSettings
nsIWebProgressListener
*
aWebProgressListener
Document
*
aSourceDoc
)
;
void
FirePrintCompletionEvent
(
)
;
void
DisconnectPagePrintTimer
(
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
MaybeResumePrintAfterResourcesLoaded
(
bool
aCleanupOnError
)
;
bool
ShouldResumePrint
(
)
const
;
nsresult
SetRootView
(
nsPrintObject
*
aPO
bool
&
aDoReturn
bool
&
aDocumentIsTopLevel
nsSize
&
aAdjSize
)
;
nsView
*
GetParentViewForRoot
(
)
;
bool
DoSetPixelScale
(
)
;
void
UpdateZoomRatio
(
nsPrintObject
*
aPO
bool
aSetPixelScale
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
ReconstructAndReflow
(
bool
aDoSetPixelScale
)
;
MOZ_CAN_RUN_SCRIPT_BOUNDARY
nsresult
UpdateSelectionAndShrinkPrintObject
(
nsPrintObject
*
aPO
bool
aDocumentIsTopLevel
)
;
MOZ_CAN_RUN_SCRIPT
nsresult
InitPrintDocConstruction
(
bool
aHandleError
)
;
void
FirePrintPreviewUpdateEvent
(
)
;
void
PageDone
(
nsresult
aResult
)
;
RefPtr
<
Document
>
mOriginalDoc
;
nsCOMPtr
<
nsIDocumentViewerPrint
>
mDocViewerPrint
;
nsWeakPtr
mDocShell
;
WeakFrame
mPageSeqFrame
;
RefPtr
<
nsPrintData
>
mPrt
;
RefPtr
<
nsPrintData
>
mPrtPreview
;
RefPtr
<
nsPagePrintTimer
>
mPagePrintTimer
;
PrintPreviewResolver
mPrintPreviewCallback
;
float
mScreenDPI
=
115
.
0f
;
bool
mCreatedForPrintPreview
=
false
;
bool
mIsCreatingPrintPreview
=
false
;
bool
mIsDoingPrinting
=
false
;
bool
mDidLoadDataForPrinting
=
false
;
bool
mDoingInitialReflow
=
false
;
bool
mIsDestroying
=
false
;
bool
mDisallowSelectionPrint
=
false
;
bool
mIsForModalWindow
=
false
;
}
;
#
endif
