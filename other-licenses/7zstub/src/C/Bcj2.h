#
ifndef
__BCJ2_H
#
define
__BCJ2_H
#
include
"
7zTypes
.
h
"
EXTERN_C_BEGIN
#
define
BCJ2_NUM_STREAMS
4
enum
{
BCJ2_STREAM_MAIN
BCJ2_STREAM_CALL
BCJ2_STREAM_JUMP
BCJ2_STREAM_RC
}
;
enum
{
BCJ2_DEC_STATE_ORIG_0
=
BCJ2_NUM_STREAMS
BCJ2_DEC_STATE_ORIG_1
BCJ2_DEC_STATE_ORIG_2
BCJ2_DEC_STATE_ORIG_3
BCJ2_DEC_STATE_ORIG
BCJ2_DEC_STATE_OK
}
;
enum
{
BCJ2_ENC_STATE_ORIG
=
BCJ2_NUM_STREAMS
BCJ2_ENC_STATE_OK
}
;
#
define
BCJ2_IS_32BIT_STREAM
(
s
)
(
(
s
)
=
=
BCJ2_STREAM_CALL
|
|
(
s
)
=
=
BCJ2_STREAM_JUMP
)
typedef
struct
{
const
Byte
*
bufs
[
BCJ2_NUM_STREAMS
]
;
const
Byte
*
lims
[
BCJ2_NUM_STREAMS
]
;
Byte
*
dest
;
const
Byte
*
destLim
;
unsigned
state
;
UInt32
ip
;
Byte
temp
[
4
]
;
UInt32
range
;
UInt32
code
;
UInt16
probs
[
2
+
256
]
;
}
CBcj2Dec
;
void
Bcj2Dec_Init
(
CBcj2Dec
*
p
)
;
SRes
Bcj2Dec_Decode
(
CBcj2Dec
*
p
)
;
#
define
Bcj2Dec_IsFinished
(
_p_
)
(
(
_p_
)
-
>
code
=
=
0
)
typedef
enum
{
BCJ2_ENC_FINISH_MODE_CONTINUE
BCJ2_ENC_FINISH_MODE_END_BLOCK
BCJ2_ENC_FINISH_MODE_END_STREAM
}
EBcj2Enc_FinishMode
;
typedef
struct
{
Byte
*
bufs
[
BCJ2_NUM_STREAMS
]
;
const
Byte
*
lims
[
BCJ2_NUM_STREAMS
]
;
const
Byte
*
src
;
const
Byte
*
srcLim
;
unsigned
state
;
EBcj2Enc_FinishMode
finishMode
;
Byte
prevByte
;
Byte
cache
;
UInt32
range
;
UInt64
low
;
UInt64
cacheSize
;
UInt32
ip
;
UInt32
fileIp
;
UInt32
fileSize
;
UInt32
relatLimit
;
UInt32
tempTarget
;
unsigned
tempPos
;
Byte
temp
[
4
*
2
]
;
unsigned
flushPos
;
UInt16
probs
[
2
+
256
]
;
}
CBcj2Enc
;
void
Bcj2Enc_Init
(
CBcj2Enc
*
p
)
;
void
Bcj2Enc_Encode
(
CBcj2Enc
*
p
)
;
#
define
Bcj2Enc_Get_InputData_Size
(
p
)
(
(
SizeT
)
(
(
p
)
-
>
srcLim
-
(
p
)
-
>
src
)
+
(
p
)
-
>
tempPos
)
#
define
Bcj2Enc_IsFinished
(
p
)
(
(
p
)
-
>
flushPos
=
=
5
)
#
define
BCJ2_RELAT_LIMIT_NUM_BITS
26
#
define
BCJ2_RELAT_LIMIT
(
(
UInt32
)
1
<
<
BCJ2_RELAT_LIMIT_NUM_BITS
)
#
define
BCJ2_FileSize_MAX
(
(
UInt32
)
1
<
<
31
)
EXTERN_C_END
#
endif
