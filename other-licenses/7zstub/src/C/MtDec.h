#
ifndef
__MT_DEC_H
#
define
__MT_DEC_H
#
include
"
7zTypes
.
h
"
#
ifndef
_7ZIP_ST
#
include
"
Threads
.
h
"
#
endif
EXTERN_C_BEGIN
#
ifndef
_7ZIP_ST
#
ifndef
_7ZIP_ST
#
define
MTDEC__THREADS_MAX
32
#
else
#
define
MTDEC__THREADS_MAX
1
#
endif
typedef
struct
{
ICompressProgress
*
progress
;
SRes
res
;
UInt64
totalInSize
;
UInt64
totalOutSize
;
CCriticalSection
cs
;
}
CMtProgress
;
void
MtProgress_Init
(
CMtProgress
*
p
ICompressProgress
*
progress
)
;
SRes
MtProgress_Progress_ST
(
CMtProgress
*
p
)
;
SRes
MtProgress_ProgressAdd
(
CMtProgress
*
p
UInt64
inSize
UInt64
outSize
)
;
SRes
MtProgress_GetError
(
CMtProgress
*
p
)
;
void
MtProgress_SetError
(
CMtProgress
*
p
SRes
res
)
;
struct
_CMtDec
;
typedef
struct
{
struct
_CMtDec
*
mtDec
;
unsigned
index
;
void
*
inBuf
;
size_t
inDataSize_Start
;
UInt64
inDataSize
;
CThread
thread
;
CAutoResetEvent
canRead
;
CAutoResetEvent
canWrite
;
void
*
allocaPtr
;
}
CMtDecThread
;
void
MtDecThread_FreeInBufs
(
CMtDecThread
*
t
)
;
typedef
enum
{
MTDEC_PARSE_CONTINUE
MTDEC_PARSE_OVERFLOW
MTDEC_PARSE_NEW
MTDEC_PARSE_END
}
EMtDecParseState
;
typedef
struct
{
int
startCall
;
const
Byte
*
src
;
size_t
srcSize
;
int
srcFinished
;
EMtDecParseState
state
;
Bool
canCreateNewThread
;
UInt64
outPos
;
}
CMtDecCallbackInfo
;
typedef
struct
{
void
(
*
Parse
)
(
void
*
p
unsigned
coderIndex
CMtDecCallbackInfo
*
ci
)
;
SRes
(
*
PreCode
)
(
void
*
p
unsigned
coderIndex
)
;
SRes
(
*
Code
)
(
void
*
p
unsigned
coderIndex
const
Byte
*
src
size_t
srcSize
int
srcFinished
UInt64
*
inCodePos
UInt64
*
outCodePos
int
*
stop
)
;
SRes
(
*
Write
)
(
void
*
p
unsigned
coderIndex
Bool
needWriteToStream
const
Byte
*
src
size_t
srcSize
Bool
*
needContinue
Bool
*
canRecode
)
;
}
IMtDecCallback
;
typedef
struct
_CMtDec
{
size_t
inBufSize
;
unsigned
numThreadsMax
;
unsigned
numThreadsMax_2
;
ISeqInStream
*
inStream
;
ICompressProgress
*
progress
;
ISzAllocPtr
alloc
;
IMtDecCallback
*
mtCallback
;
void
*
mtCallbackObject
;
size_t
allocatedBufsSize
;
Bool
exitThread
;
WRes
exitThreadWRes
;
UInt64
blockIndex
;
Bool
isAllocError
;
Bool
overflow
;
SRes
threadingErrorSRes
;
Bool
needContinue
;
SRes
readRes
;
SRes
codeRes
;
Bool
wasInterrupted
;
unsigned
numStartedThreads_Limit
;
unsigned
numStartedThreads
;
Byte
*
crossBlock
;
size_t
crossStart
;
size_t
crossEnd
;
UInt64
readProcessed
;
Bool
readWasFinished
;
UInt64
inProcessed
;
unsigned
filledThreadStart
;
unsigned
numFilledThreads
;
#
ifndef
_7ZIP_ST
Bool
needInterrupt
;
UInt64
interruptIndex
;
CMtProgress
mtProgress
;
CMtDecThread
threads
[
MTDEC__THREADS_MAX
]
;
#
endif
}
CMtDec
;
void
MtDec_Construct
(
CMtDec
*
p
)
;
void
MtDec_Destruct
(
CMtDec
*
p
)
;
SRes
MtDec_Code
(
CMtDec
*
p
)
;
Byte
*
MtDec_GetCrossBuff
(
CMtDec
*
p
)
;
int
MtDec_PrepareRead
(
CMtDec
*
p
)
;
const
Byte
*
MtDec_Read
(
CMtDec
*
p
size_t
*
inLim
)
;
#
endif
EXTERN_C_END
#
endif
