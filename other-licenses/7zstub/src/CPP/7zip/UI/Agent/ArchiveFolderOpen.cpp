#
include
"
StdAfx
.
h
"
#
include
"
.
.
/
.
.
/
.
.
/
Windows
/
DLL
.
h
"
#
include
"
Agent
.
h
"
void
CArchiveFolderManager
:
:
LoadFormats
(
)
{
LoadGlobalCodecs
(
)
;
}
int
CArchiveFolderManager
:
:
FindFormat
(
const
UString
&
type
)
{
FOR_VECTOR
(
i
g_CodecsObj
-
>
Formats
)
if
(
type
.
IsEqualTo_NoCase
(
g_CodecsObj
-
>
Formats
[
i
]
.
Name
)
)
return
i
;
return
-
1
;
}
STDMETHODIMP
CArchiveFolderManager
:
:
OpenFolderFile
(
IInStream
*
inStream
const
wchar_t
*
filePath
const
wchar_t
*
arcFormat
IFolderFolder
*
*
resultFolder
IProgress
*
progress
)
{
CMyComPtr
<
IArchiveOpenCallback
>
openArchiveCallback
;
if
(
progress
)
{
CMyComPtr
<
IProgress
>
progressWrapper
=
progress
;
progressWrapper
.
QueryInterface
(
IID_IArchiveOpenCallback
&
openArchiveCallback
)
;
}
CAgent
*
agent
=
new
CAgent
(
)
;
CMyComPtr
<
IInFolderArchive
>
archive
=
agent
;
RINOK
(
agent
-
>
Open
(
inStream
filePath
arcFormat
NULL
openArchiveCallback
)
)
;
return
agent
-
>
BindToRootFolder
(
resultFolder
)
;
}
static
void
AddIconExt
(
const
CCodecIcons
&
lib
UString
&
dest
)
{
FOR_VECTOR
(
i
lib
.
IconPairs
)
{
dest
.
Add_Space_if_NotEmpty
(
)
;
dest
+
=
lib
.
IconPairs
[
i
]
.
Ext
;
}
}
STDMETHODIMP
CArchiveFolderManager
:
:
GetExtensions
(
BSTR
*
extensions
)
{
LoadFormats
(
)
;
*
extensions
=
0
;
UString
res
;
#
ifdef
EXTERNAL_CODECS
FOR_VECTOR
(
i
g_CodecsObj
-
>
Libs
)
AddIconExt
(
g_CodecsObj
-
>
Libs
[
i
]
res
)
;
#
endif
AddIconExt
(
g_CodecsObj
-
>
InternalIcons
res
)
;
return
StringToBstr
(
res
extensions
)
;
}
STDMETHODIMP
CArchiveFolderManager
:
:
GetIconPath
(
const
wchar_t
*
ext
BSTR
*
iconPath
Int32
*
iconIndex
)
{
*
iconPath
=
0
;
*
iconIndex
=
0
;
LoadFormats
(
)
;
#
ifdef
EXTERNAL_CODECS
FOR_VECTOR
(
i
g_CodecsObj
-
>
Libs
)
{
const
CCodecLib
&
lib
=
g_CodecsObj
-
>
Libs
[
i
]
;
int
ii
;
if
(
lib
.
FindIconIndex
(
ext
ii
)
)
{
*
iconIndex
=
ii
;
return
StringToBstr
(
fs2us
(
lib
.
Path
)
iconPath
)
;
}
}
#
endif
int
ii
;
if
(
g_CodecsObj
-
>
InternalIcons
.
FindIconIndex
(
ext
ii
)
)
{
FString
path
;
if
(
NWindows
:
:
NDLL
:
:
MyGetModuleFileName
(
path
)
)
{
*
iconIndex
=
ii
;
return
StringToBstr
(
fs2us
(
path
)
iconPath
)
;
}
}
return
S_OK
;
}
