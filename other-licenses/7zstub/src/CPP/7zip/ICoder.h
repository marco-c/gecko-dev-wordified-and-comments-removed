#
ifndef
__ICODER_H
#
define
__ICODER_H
#
include
"
IStream
.
h
"
#
define
CODER_INTERFACE
(
i
x
)
DECL_INTERFACE
(
i
4
x
)
CODER_INTERFACE
(
ICompressProgressInfo
0x04
)
{
STDMETHOD
(
SetRatioInfo
)
(
const
UInt64
*
inSize
const
UInt64
*
outSize
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressCoder
0x05
)
{
STDMETHOD
(
Code
)
(
ISequentialInStream
*
inStream
ISequentialOutStream
*
outStream
const
UInt64
*
inSize
const
UInt64
*
outSize
ICompressProgressInfo
*
progress
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressCoder2
0x18
)
{
STDMETHOD
(
Code
)
(
ISequentialInStream
*
const
*
inStreams
const
UInt64
*
const
*
inSizes
UInt32
numInStreams
ISequentialOutStream
*
const
*
outStreams
const
UInt64
*
const
*
outSizes
UInt32
numOutStreams
ICompressProgressInfo
*
progress
)
PURE
;
}
;
namespace
NCoderPropID
{
enum
EEnum
{
kDefaultProp
=
0
kDictionarySize
kUsedMemorySize
kOrder
kBlockSize
kPosStateBits
kLitContextBits
kLitPosBits
kNumFastBytes
kMatchFinder
kMatchFinderCycles
kNumPasses
kAlgorithm
kNumThreads
kEndMarker
kLevel
kReduceSize
kExpectedDataSize
kBlockSize2
kCheckSize
kFilter
kMemUse
}
;
}
CODER_INTERFACE
(
ICompressSetCoderPropertiesOpt
0x1F
)
{
STDMETHOD
(
SetCoderPropertiesOpt
)
(
const
PROPID
*
propIDs
const
PROPVARIANT
*
props
UInt32
numProps
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetCoderProperties
0x20
)
{
STDMETHOD
(
SetCoderProperties
)
(
const
PROPID
*
propIDs
const
PROPVARIANT
*
props
UInt32
numProps
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetDecoderProperties2
0x22
)
{
STDMETHOD
(
SetDecoderProperties2
)
(
const
Byte
*
data
UInt32
size
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressWriteCoderProperties
0x23
)
{
STDMETHOD
(
WriteCoderProperties
)
(
ISequentialOutStream
*
outStream
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressGetInStreamProcessedSize
0x24
)
{
STDMETHOD
(
GetInStreamProcessedSize
)
(
UInt64
*
value
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetCoderMt
0x25
)
{
STDMETHOD
(
SetNumberOfThreads
)
(
UInt32
numThreads
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetFinishMode
0x26
)
{
STDMETHOD
(
SetFinishMode
)
(
UInt32
finishMode
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressGetInStreamProcessedSize2
0x27
)
{
STDMETHOD
(
GetInStreamProcessedSize2
)
(
UInt32
streamIndex
UInt64
*
value
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetMemLimit
0x28
)
{
STDMETHOD
(
SetMemLimit
)
(
UInt64
memUsage
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressGetSubStreamSize
0x30
)
{
STDMETHOD
(
GetSubStreamSize
)
(
UInt64
subStream
UInt64
*
value
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetInStream
0x31
)
{
STDMETHOD
(
SetInStream
)
(
ISequentialInStream
*
inStream
)
PURE
;
STDMETHOD
(
ReleaseInStream
)
(
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetOutStream
0x32
)
{
STDMETHOD
(
SetOutStream
)
(
ISequentialOutStream
*
outStream
)
PURE
;
STDMETHOD
(
ReleaseOutStream
)
(
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetOutStreamSize
0x34
)
{
STDMETHOD
(
SetOutStreamSize
)
(
const
UInt64
*
outSize
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetBufSize
0x35
)
{
STDMETHOD
(
SetInBufSize
)
(
UInt32
streamIndex
UInt32
size
)
PURE
;
STDMETHOD
(
SetOutBufSize
)
(
UInt32
streamIndex
UInt32
size
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressInitEncoder
0x36
)
{
STDMETHOD
(
InitEncoder
)
(
)
PURE
;
}
;
CODER_INTERFACE
(
ICompressSetInStream2
0x37
)
{
STDMETHOD
(
SetInStream2
)
(
UInt32
streamIndex
ISequentialInStream
*
inStream
)
PURE
;
STDMETHOD
(
ReleaseInStream2
)
(
UInt32
streamIndex
)
PURE
;
}
;
#
define
INTERFACE_ICompressFilter
(
x
)
\
STDMETHOD
(
Init
)
(
)
x
;
\
STDMETHOD_
(
UInt32
Filter
)
(
Byte
*
data
UInt32
size
)
x
;
\
CODER_INTERFACE
(
ICompressFilter
0x40
)
{
INTERFACE_ICompressFilter
(
PURE
)
;
}
;
CODER_INTERFACE
(
ICompressCodecsInfo
0x60
)
{
STDMETHOD
(
GetNumMethods
)
(
UInt32
*
numMethods
)
PURE
;
STDMETHOD
(
GetProperty
)
(
UInt32
index
PROPID
propID
PROPVARIANT
*
value
)
PURE
;
STDMETHOD
(
CreateDecoder
)
(
UInt32
index
const
GUID
*
iid
void
*
*
coder
)
PURE
;
STDMETHOD
(
CreateEncoder
)
(
UInt32
index
const
GUID
*
iid
void
*
*
coder
)
PURE
;
}
;
CODER_INTERFACE
(
ISetCompressCodecsInfo
0x61
)
{
STDMETHOD
(
SetCompressCodecsInfo
)
(
ICompressCodecsInfo
*
compressCodecsInfo
)
PURE
;
}
;
CODER_INTERFACE
(
ICryptoProperties
0x80
)
{
STDMETHOD
(
SetKey
)
(
const
Byte
*
data
UInt32
size
)
PURE
;
STDMETHOD
(
SetInitVector
)
(
const
Byte
*
data
UInt32
size
)
PURE
;
}
;
CODER_INTERFACE
(
ICryptoResetInitVector
0x8C
)
{
STDMETHOD
(
ResetInitVector
)
(
)
PURE
;
}
;
CODER_INTERFACE
(
ICryptoSetPassword
0x90
)
{
STDMETHOD
(
CryptoSetPassword
)
(
const
Byte
*
data
UInt32
size
)
PURE
;
}
;
CODER_INTERFACE
(
ICryptoSetCRC
0xA0
)
{
STDMETHOD
(
CryptoSetCRC
)
(
UInt32
crc
)
PURE
;
}
;
namespace
NMethodPropID
{
enum
EEnum
{
kID
kName
kDecoder
kEncoder
kPackStreams
kUnpackStreams
kDescription
kDecoderIsAssigned
kEncoderIsAssigned
kDigestSize
}
;
}
#
define
INTERFACE_IHasher
(
x
)
\
STDMETHOD_
(
void
Init
)
(
)
throw
(
)
x
;
\
STDMETHOD_
(
void
Update
)
(
const
void
*
data
UInt32
size
)
throw
(
)
x
;
\
STDMETHOD_
(
void
Final
)
(
Byte
*
digest
)
throw
(
)
x
;
\
STDMETHOD_
(
UInt32
GetDigestSize
)
(
)
throw
(
)
x
;
\
CODER_INTERFACE
(
IHasher
0xC0
)
{
INTERFACE_IHasher
(
PURE
)
}
;
CODER_INTERFACE
(
IHashers
0xC1
)
{
STDMETHOD_
(
UInt32
GetNumHashers
)
(
)
PURE
;
STDMETHOD
(
GetHasherProp
)
(
UInt32
index
PROPID
propID
PROPVARIANT
*
value
)
PURE
;
STDMETHOD
(
CreateHasher
)
(
UInt32
index
IHasher
*
*
hasher
)
PURE
;
}
;
extern
"
C
"
{
typedef
HRESULT
(
WINAPI
*
Func_GetNumberOfMethods
)
(
UInt32
*
numMethods
)
;
typedef
HRESULT
(
WINAPI
*
Func_GetMethodProperty
)
(
UInt32
index
PROPID
propID
PROPVARIANT
*
value
)
;
typedef
HRESULT
(
WINAPI
*
Func_CreateDecoder
)
(
UInt32
index
const
GUID
*
iid
void
*
*
outObject
)
;
typedef
HRESULT
(
WINAPI
*
Func_CreateEncoder
)
(
UInt32
index
const
GUID
*
iid
void
*
*
outObject
)
;
typedef
HRESULT
(
WINAPI
*
Func_GetHashers
)
(
IHashers
*
*
hashers
)
;
typedef
HRESULT
(
WINAPI
*
Func_SetCodecs
)
(
ICompressCodecsInfo
*
compressCodecsInfo
)
;
}
#
endif
