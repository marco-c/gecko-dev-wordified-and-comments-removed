#
include
<
windows
.
h
>
#
include
<
shlobj
.
h
>
#
pragma
comment
(
lib
"
shlwapi
.
lib
"
)
static
IShellView
*
GetDesktopWindowShellView
(
)
{
IShellView
*
view
=
nullptr
;
IShellWindows
*
shell
=
nullptr
;
CoCreateInstance
(
CLSID_ShellWindows
NULL
CLSCTX_LOCAL_SERVER
IID_PPV_ARGS
(
&
shell
)
)
;
if
(
shell
)
{
VARIANT
empty
;
VariantInit
(
&
empty
)
;
VARIANT
loc
;
loc
.
vt
=
VT_VARIANT
|
VT_BYREF
;
PIDLIST_ABSOLUTE
locList
;
SHGetFolderLocation
(
nullptr
CSIDL_DESKTOP
nullptr
0
&
locList
)
;
loc
.
byref
=
locList
;
HWND
windowHandle
=
0
;
IDispatch
*
dispatch
=
nullptr
;
shell
-
>
FindWindowSW
(
&
loc
&
empty
SWC_DESKTOP
(
long
*
)
&
windowHandle
SWFO_NEEDDISPATCH
&
dispatch
)
;
if
(
dispatch
)
{
IServiceProvider
*
provider
=
nullptr
;
dispatch
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
provider
)
)
;
if
(
provider
)
{
IShellBrowser
*
browser
=
nullptr
;
provider
-
>
QueryService
(
SID_STopLevelBrowser
IID_PPV_ARGS
(
&
browser
)
)
;
if
(
browser
)
{
browser
-
>
QueryActiveShellView
(
&
view
)
;
browser
-
>
Release
(
)
;
}
provider
-
>
Release
(
)
;
}
dispatch
-
>
Release
(
)
;
}
shell
-
>
Release
(
)
;
}
return
view
;
}
static
IShellDispatch2
*
GetApplicationFromShellView
(
IShellView
*
view
)
{
IShellDispatch2
*
shellDispatch
=
nullptr
;
IDispatch
*
viewDisp
=
nullptr
;
HRESULT
hr
=
view
-
>
GetItemObject
(
SVGIO_BACKGROUND
IID_PPV_ARGS
(
&
viewDisp
)
)
;
if
(
SUCCEEDED
(
hr
)
)
{
IShellFolderViewDual
*
shellViewFolder
=
nullptr
;
viewDisp
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
shellViewFolder
)
)
;
if
(
shellViewFolder
)
{
IDispatch
*
dispatch
=
nullptr
;
shellViewFolder
-
>
get_Application
(
&
dispatch
)
;
if
(
dispatch
)
{
dispatch
-
>
QueryInterface
(
IID_PPV_ARGS
(
&
shellDispatch
)
)
;
dispatch
-
>
Release
(
)
;
}
shellViewFolder
-
>
Release
(
)
;
}
viewDisp
-
>
Release
(
)
;
}
return
shellDispatch
;
}
static
bool
ShellExecInExplorerProcess
(
wchar_t
*
path
)
{
bool
rv
=
false
;
if
(
SUCCEEDED
(
CoInitialize
(
nullptr
)
)
)
{
IShellView
*
desktopView
=
GetDesktopWindowShellView
(
)
;
if
(
desktopView
)
{
IShellDispatch2
*
shellDispatch
=
GetApplicationFromShellView
(
desktopView
)
;
if
(
shellDispatch
)
{
BSTR
bstrPath
=
SysAllocString
(
path
)
;
rv
=
SUCCEEDED
(
shellDispatch
-
>
ShellExecuteW
(
bstrPath
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
VARIANT
{
}
)
)
;
SysFreeString
(
bstrPath
)
;
shellDispatch
-
>
Release
(
)
;
}
desktopView
-
>
Release
(
)
;
}
CoUninitialize
(
)
;
}
return
rv
;
}
struct
stack_t
{
stack_t
*
next
;
TCHAR
text
[
MAX_PATH
]
;
}
;
int
popstring
(
stack_t
*
*
stacktop
TCHAR
*
str
int
len
)
{
stack_t
*
th
;
if
(
!
stacktop
|
|
!
*
stacktop
)
{
return
1
;
}
th
=
(
*
stacktop
)
;
lstrcpyn
(
str
th
-
>
text
len
)
;
*
stacktop
=
th
-
>
next
;
HeapFree
(
GetProcessHeap
(
)
0
th
)
;
return
0
;
}
void
pushstring
(
stack_t
*
*
stacktop
const
TCHAR
*
str
int
len
)
{
stack_t
*
th
;
if
(
!
stacktop
)
{
return
;
}
th
=
(
stack_t
*
)
HeapAlloc
(
GetProcessHeap
(
)
0
sizeof
(
stack_t
)
+
len
)
;
lstrcpyn
(
th
-
>
text
str
len
)
;
th
-
>
next
=
*
stacktop
;
*
stacktop
=
th
;
}
extern
"
C
"
void
__declspec
(
dllexport
)
Exec
(
HWND
int
TCHAR
*
stack_t
*
*
stacktop
void
*
)
{
wchar_t
path
[
MAX_PATH
+
1
]
;
path
[
0
]
=
L
'
\
0
'
;
popstring
(
stacktop
path
MAX_PATH
)
;
bool
rv
=
ShellExecInExplorerProcess
(
path
)
;
pushstring
(
stacktop
rv
?
L
"
1
"
:
L
"
0
"
2
)
;
}
BOOL
APIENTRY
DllMain
(
HMODULE
DWORD
LPVOID
)
{
return
TRUE
;
}
