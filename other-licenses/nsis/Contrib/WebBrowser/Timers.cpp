#
include
<
windows
.
h
>
#
include
"
exdll
.
h
"
static
void
APIENTRY
TimerCallback
(
LPVOID
NSISFunctionAddr
DWORD
DWORD
)
{
g_executeCodeSegment
(
(
int
)
NSISFunctionAddr
g_hwndParent
)
;
}
PLUGINFUNCTION
(
CreateTimer
)
{
EXDLL_INIT
(
)
;
extra
-
>
RegisterPluginCallback
(
gHInst
NSISPluginCallback
)
;
TCHAR
*
funcAddrStr
=
(
TCHAR
*
)
HeapAlloc
(
GetProcessHeap
(
)
0
g_stringsize
*
sizeof
(
TCHAR
)
)
;
popstring
(
funcAddrStr
)
;
uintptr_t
funcAddr
=
static_cast
<
uintptr_t
>
(
_ttoi64
(
funcAddrStr
)
)
-
1
;
HeapFree
(
GetProcessHeap
(
)
0
funcAddrStr
)
;
TCHAR
*
intervalStr
=
(
TCHAR
*
)
HeapAlloc
(
GetProcessHeap
(
)
0
g_stringsize
*
sizeof
(
TCHAR
)
)
;
popstring
(
intervalStr
)
;
long
interval
=
_ttol
(
intervalStr
)
;
HeapFree
(
GetProcessHeap
(
)
0
intervalStr
)
;
HANDLE
timer
=
CreateWaitableTimer
(
nullptr
FALSE
nullptr
)
;
if
(
!
timer
)
{
return
;
}
LARGE_INTEGER
dueTime
;
dueTime
.
QuadPart
=
-
(
interval
*
10000
)
;
SetWaitableTimer
(
timer
&
dueTime
interval
TimerCallback
(
void
*
)
funcAddr
FALSE
)
;
TCHAR
timerStr
[
32
]
=
_T
(
"
"
)
;
_ltot_s
(
(
long
)
timer
timerStr
10
)
;
pushstring
(
timerStr
)
;
}
PLUGINFUNCTION
(
CancelTimer
)
{
TCHAR
*
timerStr
=
(
TCHAR
*
)
HeapAlloc
(
GetProcessHeap
(
)
0
g_stringsize
*
sizeof
(
TCHAR
)
)
;
popstring
(
timerStr
)
;
HANDLE
timer
=
reinterpret_cast
<
HANDLE
>
(
_ttoi
(
timerStr
)
)
;
HeapFree
(
GetProcessHeap
(
)
0
timerStr
)
;
CancelWaitableTimer
(
timer
)
;
CloseHandle
(
timer
)
;
}
