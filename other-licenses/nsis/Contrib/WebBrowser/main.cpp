#
include
<
windows
.
h
>
#
include
"
resource
.
h
"
#
include
"
WebBrowser
.
h
"
#
include
"
exdll
.
h
"
HINSTANCE
gHInst
=
nullptr
;
WNDPROC
gWndProcOld
=
nullptr
;
HWND
gHwnd
=
nullptr
;
bool
gDone
=
false
;
WebBrowser
*
gBrowser
=
nullptr
;
static
void
ConfigurePerProcessBrowserFeatures
(
)
{
struct
Feature
{
INTERNETFEATURELIST
id
;
BOOL
value
;
}
features
[
]
=
{
{
FEATURE_OBJECT_CACHING
TRUE
}
{
FEATURE_ZONE_ELEVATION
TRUE
}
{
FEATURE_MIME_HANDLING
TRUE
}
{
FEATURE_MIME_SNIFFING
FALSE
}
{
FEATURE_WINDOW_RESTRICTIONS
TRUE
}
{
FEATURE_WEBOC_POPUPMANAGEMENT
TRUE
}
{
FEATURE_BEHAVIORS
TRUE
}
{
FEATURE_DISABLE_MK_PROTOCOL
TRUE
}
{
FEATURE_SECURITYBAND
FALSE
}
{
FEATURE_RESTRICT_ACTIVEXINSTALL
TRUE
}
{
FEATURE_VALIDATE_NAVIGATE_URL
TRUE
}
{
FEATURE_RESTRICT_FILEDOWNLOAD
TRUE
}
{
FEATURE_ADDON_MANAGEMENT
TRUE
}
{
FEATURE_PROTOCOL_LOCKDOWN
TRUE
}
{
FEATURE_HTTP_USERNAME_PASSWORD_DISABLE
TRUE
}
{
FEATURE_SAFE_BINDTOOBJECT
TRUE
}
{
FEATURE_UNC_SAVEDFILECHECK
TRUE
}
{
FEATURE_GET_URL_DOM_FILEPATH_UNENCODED
FALSE
}
{
FEATURE_TABBED_BROWSING
FALSE
}
{
FEATURE_SSLUX
FALSE
}
{
FEATURE_DISABLE_NAVIGATION_SOUNDS
TRUE
}
{
FEATURE_DISABLE_LEGACY_COMPRESSION
TRUE
}
{
FEATURE_FORCE_ADDR_AND_STATUS
FALSE
}
{
FEATURE_XMLHTTP
FALSE
}
{
FEATURE_DISABLE_TELNET_PROTOCOL
TRUE
}
{
FEATURE_FEEDS
FALSE
}
{
FEATURE_BLOCK_INPUT_PROMPTS
TRUE
}
}
;
for
(
Feature
feature
:
features
)
{
CoInternetSetFeatureEnabled
(
feature
.
id
SET_FEATURE_ON_PROCESS
feature
.
value
)
;
}
}
BOOL
WINAPI
DllMain
(
HINSTANCE
instance
DWORD
reason
LPVOID
)
{
if
(
reason
=
=
DLL_PROCESS_ATTACH
)
{
gHInst
=
instance
;
(
void
)
OleInitialize
(
nullptr
)
;
ConfigurePerProcessBrowserFeatures
(
)
;
}
return
TRUE
;
}
UINT_PTR
__cdecl
NSISPluginCallback
(
NSPIM
msg
)
{
if
(
msg
=
=
NSPIM_UNLOAD
)
{
OleUninitialize
(
)
;
}
return
0
;
}
BOOL
CALLBACK
ParentWndProc
(
HWND
hwnd
UINT
message
WPARAM
wParam
LPARAM
lParam
)
{
BOOL
bRes
=
CallWindowProc
(
(
WNDPROC
)
gWndProcOld
hwnd
message
wParam
lParam
)
;
if
(
!
bRes
&
&
message
=
=
WM_NOTIFY_OUTER_NEXT
)
{
gDone
=
true
;
PostMessage
(
gHwnd
WM_CLOSE
0
0
)
;
}
return
bRes
;
}
BOOL
CALLBACK
DlgProc
(
HWND
hDlg
UINT
uMsg
WPARAM
wParam
LPARAM
lParam
)
{
return
FALSE
;
}
void
Init
(
HWND
hWndParent
int
string_size
TCHAR
*
variables
stack_t
*
*
stacktop
extra_parameters
*
extra
)
{
EXDLL_INIT
(
)
;
extra
-
>
RegisterPluginCallback
(
gHInst
NSISPluginCallback
)
;
HWND
hwndChild
=
GetDlgItem
(
hWndParent
1018
)
;
if
(
!
hwndChild
)
{
return
;
}
HWND
hwnd
=
CreateDialog
(
gHInst
MAKEINTRESOURCE
(
IDD_DIALOG1
)
hWndParent
DlgProc
)
;
if
(
!
hwnd
)
{
gDone
=
true
;
}
else
{
gDone
=
false
;
gWndProcOld
=
(
WNDPROC
)
SetWindowLong
(
hWndParent
DWL_DLGPROC
(
LONG
)
ParentWndProc
)
;
SendMessage
(
hWndParent
WM_NOTIFY_CUSTOM_READY
(
WPARAM
)
hwnd
0
)
;
if
(
gBrowser
)
{
gBrowser
-
>
Shutdown
(
)
;
gBrowser
-
>
Release
(
)
;
}
gBrowser
=
new
WebBrowser
(
hwnd
)
;
if
(
!
gBrowser
|
|
!
gBrowser
-
>
IsInitialized
(
)
)
{
return
;
}
gHwnd
=
hwnd
;
RECT
r
;
GetClientRect
(
hwndChild
&
r
)
;
MoveWindow
(
hwnd
r
.
left
r
.
top
r
.
right
-
r
.
left
r
.
bottom
-
r
.
top
FALSE
)
;
gBrowser
-
>
SetRect
(
r
)
;
}
}
PLUGINFUNCTION
(
ShowPage
)
{
if
(
!
gBrowser
)
{
Init
(
hWndParent
string_size
variables
stacktop
extra
)
;
}
if
(
!
gBrowser
-
>
IsInitialized
(
)
)
{
return
;
}
TCHAR
*
sUrl
=
(
TCHAR
*
)
HeapAlloc
(
GetProcessHeap
(
)
0
g_stringsize
*
sizeof
(
TCHAR
)
)
;
popstring
(
sUrl
)
;
if
(
gBrowser
)
{
gBrowser
-
>
Navigate
(
sUrl
)
;
ShowWindow
(
gHwnd
SW_SHOWNA
)
;
UpdateWindow
(
gHwnd
)
;
while
(
!
gDone
)
{
MsgWaitForMultipleObjectsEx
(
0
nullptr
100
QS_ALLINPUT
MWMO_ALERTABLE
|
MWMO_INPUTAVAILABLE
)
;
MSG
msg
;
if
(
PeekMessage
(
&
msg
nullptr
0
0
PM_REMOVE
)
)
{
bool
tab
=
msg
.
message
=
=
WM_KEYDOWN
&
&
msg
.
wParam
=
=
VK_TAB
;
if
(
gBrowser
-
>
ActiveObjectTranslateAccelerator
(
tab
&
msg
)
!
=
S_OK
&
&
!
IsDialogMessage
(
gHwnd
&
msg
)
&
&
!
IsDialogMessage
(
g_hwndParent
&
msg
)
)
{
TranslateMessage
(
&
msg
)
;
DispatchMessage
(
&
msg
)
;
}
}
}
SetWindowLong
(
g_hwndParent
DWL_DLGPROC
(
LONG
)
gWndProcOld
)
;
if
(
gHwnd
)
{
DestroyWindow
(
gHwnd
)
;
}
gBrowser
-
>
Shutdown
(
)
;
gBrowser
-
>
Release
(
)
;
gBrowser
=
nullptr
;
}
HeapFree
(
GetProcessHeap
(
)
0
(
char
*
)
sUrl
)
;
}
