#
ifndef
PreloadService_h__
#
define
PreloadService_h__
#
include
"
nsIContentPolicy
.
h
"
#
include
"
nsIReferrerInfo
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsRefPtrHashtable
.
h
"
#
include
"
PreloaderBase
.
h
"
namespace
mozilla
{
namespace
dom
{
class
HTMLLinkElement
;
class
Document
;
}
class
PreloadService
{
public
:
explicit
PreloadService
(
dom
:
:
Document
*
aDocument
)
:
mDocument
(
aDocument
)
{
}
bool
RegisterPreload
(
PreloadHashKey
*
aKey
PreloaderBase
*
aPreload
)
;
void
DeregisterPreload
(
PreloadHashKey
*
aKey
)
;
void
ClearAllPreloads
(
)
;
bool
PreloadExists
(
PreloadHashKey
*
aKey
)
;
already_AddRefed
<
PreloaderBase
>
LookupPreload
(
PreloadHashKey
*
aKey
)
const
;
void
SetSpeculationBase
(
nsIURI
*
aURI
)
{
mSpeculationBaseURI
=
aURI
;
}
already_AddRefed
<
nsIURI
>
GetPreloadURI
(
const
nsAString
&
aURL
)
;
already_AddRefed
<
PreloaderBase
>
PreloadLinkElement
(
dom
:
:
HTMLLinkElement
*
aLinkElement
nsContentPolicyType
aPolicyType
nsIReferrerInfo
*
aReferrerInfo
)
;
void
PreloadScript
(
nsIURI
*
aURI
const
nsAString
&
aType
const
nsAString
&
aCharset
const
nsAString
&
aCrossOrigin
const
nsAString
&
aReferrerPolicy
const
nsAString
&
aIntegrity
bool
aScriptFromHead
)
;
void
PreloadStyle
(
nsIURI
*
aURI
const
nsAString
&
aCharset
const
nsAString
&
aCrossOrigin
const
nsAString
&
aReferrerPolicy
const
nsAString
&
aIntegrity
)
;
static
void
NotifyNodeEvent
(
nsINode
*
aNode
bool
aSuccess
)
;
private
:
dom
:
:
ReferrerPolicy
PreloadReferrerPolicy
(
const
nsAString
&
aReferrerPolicy
)
;
bool
CheckReferrerURIScheme
(
nsIReferrerInfo
*
aReferrerInfo
)
;
nsIURI
*
BaseURIForPreload
(
)
;
private
:
nsRefPtrHashtable
<
PreloadHashKey
PreloaderBase
>
mPreloads
;
dom
:
:
Document
*
mDocument
;
nsCOMPtr
<
nsIURI
>
mSpeculationBaseURI
;
}
;
}
#
endif
