#
ifndef
PreloadHashKey_h__
#
define
PreloadHashKey_h__
#
include
"
mozilla
/
CORSMode
.
h
"
#
include
"
mozilla
/
css
/
SheetParsingMode
.
h
"
#
include
"
mozilla
/
dom
/
ReferrerPolicyBinding
.
h
"
#
include
"
mozilla
/
dom
/
ScriptKind
.
h
"
#
include
"
nsURIHashKey
.
h
"
class
nsIPrincipal
;
class
nsIReferrerInfo
;
namespace
mozilla
{
namespace
css
{
class
SheetLoadData
;
}
class
PreloadHashKey
:
public
nsURIHashKey
{
public
:
enum
class
ResourceType
:
uint8_t
{
NONE
SCRIPT
STYLE
IMAGE
FONT
FETCH
}
;
typedef
PreloadHashKey
*
KeyType
;
typedef
const
PreloadHashKey
*
KeyTypePointer
;
PreloadHashKey
(
)
=
default
;
PreloadHashKey
(
const
nsIURI
*
aKey
ResourceType
aAs
)
;
explicit
PreloadHashKey
(
const
PreloadHashKey
*
aKey
)
;
PreloadHashKey
(
PreloadHashKey
&
&
aToMove
)
;
PreloadHashKey
&
operator
=
(
const
PreloadHashKey
&
aOther
)
;
static
PreloadHashKey
CreateAsScript
(
nsIURI
*
aURI
const
CORSMode
&
aCORSMode
const
dom
:
:
ScriptKind
&
aScriptKind
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
)
;
static
PreloadHashKey
CreateAsScript
(
nsIURI
*
aURI
const
nsAString
&
aCrossOrigin
const
nsAString
&
aType
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
)
;
static
PreloadHashKey
CreateAsStyle
(
nsIURI
*
aURI
nsIPrincipal
*
aPrincipal
nsIReferrerInfo
*
aReferrerInfo
CORSMode
aCORSMode
css
:
:
SheetParsingMode
aParsingMode
)
;
static
PreloadHashKey
CreateAsStyle
(
css
:
:
SheetLoadData
&
)
;
static
PreloadHashKey
CreateAsImage
(
nsIURI
*
aURI
nsIPrincipal
*
aPrincipal
CORSMode
aCORSMode
dom
:
:
ReferrerPolicy
const
&
aReferrerPolicy
)
;
static
PreloadHashKey
CreateAsFetch
(
nsIURI
*
aURI
const
CORSMode
aCORSMode
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
)
;
static
PreloadHashKey
CreateAsFetch
(
nsIURI
*
aURI
const
nsAString
&
aCrossOrigin
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
)
;
static
PreloadHashKey
CreateAsFont
(
nsIURI
*
aURI
const
CORSMode
aCORSMode
const
dom
:
:
ReferrerPolicy
&
aReferrerPolicy
)
;
KeyType
GetKey
(
)
const
{
return
const_cast
<
PreloadHashKey
*
>
(
this
)
;
}
KeyTypePointer
GetKeyPointer
(
)
const
{
return
this
;
}
static
KeyTypePointer
KeyToPointer
(
KeyType
aKey
)
{
return
aKey
;
}
bool
KeyEquals
(
KeyTypePointer
aOther
)
const
;
static
PLDHashNumber
HashKey
(
KeyTypePointer
aKey
)
;
#
ifdef
MOZILLA_INTERNAL_API
size_t
SizeOfExcludingThis
(
mozilla
:
:
MallocSizeOf
aMallocSizeOf
)
const
{
return
0
;
}
#
endif
enum
{
ALLOW_MEMMOVE
=
true
}
;
private
:
ResourceType
mAs
=
ResourceType
:
:
NONE
;
CORSMode
mCORSMode
=
CORS_NONE
;
enum
dom
:
:
ReferrerPolicy
mReferrerPolicy
=
dom
:
:
ReferrerPolicy
:
:
_empty
;
nsCOMPtr
<
nsIPrincipal
>
mPrincipal
;
struct
{
dom
:
:
ScriptKind
mScriptKind
=
dom
:
:
ScriptKind
:
:
eClassic
;
}
mScript
;
struct
{
nsCOMPtr
<
nsIReferrerInfo
>
mReferrerInfo
;
css
:
:
SheetParsingMode
mParsingMode
=
css
:
:
eAuthorSheetFeatures
;
}
mStyle
;
}
;
}
#
endif
