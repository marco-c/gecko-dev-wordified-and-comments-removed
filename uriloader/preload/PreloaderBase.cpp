#
include
"
PreloaderBase
.
h
"
#
include
"
mozilla
/
dom
/
Document
.
h
"
#
include
"
nsContentUtils
.
h
"
#
include
"
nsIAsyncVerifyRedirectCallback
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsILoadGroup
.
h
"
#
include
"
nsIInterfaceRequestorUtils
.
h
"
constexpr
static
bool
kCancelAndRemovePreloadOnZeroReferences
=
false
;
namespace
mozilla
{
PreloaderBase
:
:
RedirectSink
:
:
RedirectSink
(
PreloaderBase
*
aPreloader
nsIInterfaceRequestor
*
aCallbacks
)
:
mPreloader
(
new
nsMainThreadPtrHolder
<
PreloaderBase
>
(
"
RedirectSink
.
mPreloader
"
aPreloader
)
)
mCallbacks
(
aCallbacks
)
{
}
NS_IMPL_ISUPPORTS
(
PreloaderBase
:
:
RedirectSink
nsIInterfaceRequestor
nsIChannelEventSink
nsIRedirectResultListener
)
NS_IMETHODIMP
PreloaderBase
:
:
RedirectSink
:
:
AsyncOnChannelRedirect
(
nsIChannel
*
aOldChannel
nsIChannel
*
aNewChannel
uint32_t
aFlags
nsIAsyncVerifyRedirectCallback
*
aCallback
)
{
mRedirectChannel
=
aNewChannel
;
nsCOMPtr
<
nsIURI
>
uri
;
aNewChannel
-
>
GetOriginalURI
(
getter_AddRefs
(
uri
)
)
;
mPreloader
-
>
mRedirectRecords
.
AppendElement
(
RedirectRecord
(
aFlags
uri
.
forget
(
)
)
)
;
if
(
mCallbacks
)
{
nsCOMPtr
<
nsIChannelEventSink
>
sink
(
do_GetInterface
(
mCallbacks
)
)
;
if
(
sink
)
{
return
sink
-
>
AsyncOnChannelRedirect
(
aOldChannel
aNewChannel
aFlags
aCallback
)
;
}
}
aCallback
-
>
OnRedirectVerifyCallback
(
NS_OK
)
;
return
NS_OK
;
}
NS_IMETHODIMP
PreloaderBase
:
:
RedirectSink
:
:
OnRedirectResult
(
bool
proceeding
)
{
if
(
proceeding
&
&
mRedirectChannel
)
{
mPreloader
-
>
mChannel
=
std
:
:
move
(
mRedirectChannel
)
;
}
else
{
mRedirectChannel
=
nullptr
;
}
if
(
mCallbacks
)
{
nsCOMPtr
<
nsIRedirectResultListener
>
sink
(
do_GetInterface
(
mCallbacks
)
)
;
if
(
sink
)
{
return
sink
-
>
OnRedirectResult
(
proceeding
)
;
}
}
return
NS_OK
;
}
NS_IMETHODIMP
PreloaderBase
:
:
RedirectSink
:
:
GetInterface
(
const
nsIID
&
aIID
void
*
*
aResult
)
{
NS_ENSURE_ARG_POINTER
(
aResult
)
;
if
(
aIID
.
Equals
(
NS_GET_IID
(
nsIChannelEventSink
)
)
|
|
aIID
.
Equals
(
NS_GET_IID
(
nsIRedirectResultListener
)
)
)
{
return
QueryInterface
(
aIID
aResult
)
;
}
if
(
mCallbacks
)
{
return
mCallbacks
-
>
GetInterface
(
aIID
aResult
)
;
}
*
aResult
=
nullptr
;
return
NS_ERROR_NO_INTERFACE
;
}
PreloaderBase
:
:
~
PreloaderBase
(
)
{
MOZ_ASSERT
(
NS_IsMainThread
(
)
)
;
}
void
PreloaderBase
:
:
AddLoadBackgroundFlag
(
nsIChannel
*
aChannel
)
{
nsLoadFlags
loadFlags
;
aChannel
-
>
GetLoadFlags
(
&
loadFlags
)
;
aChannel
-
>
SetLoadFlags
(
loadFlags
|
nsIRequest
:
:
LOAD_BACKGROUND
)
;
}
void
PreloaderBase
:
:
NotifyOpen
(
const
PreloadHashKey
&
aKey
dom
:
:
Document
*
aDocument
bool
aIsPreload
)
{
if
(
aDocument
&
&
!
aDocument
-
>
Preloads
(
)
.
RegisterPreload
(
aKey
this
)
)
{
MOZ_ASSERT
(
!
aIsPreload
)
;
aDocument
-
>
Preloads
(
)
.
DeregisterPreload
(
aKey
)
;
aDocument
-
>
Preloads
(
)
.
RegisterPreload
(
aKey
this
)
;
}
mKey
=
aKey
;
mIsUsed
=
!
aIsPreload
;
}
void
PreloaderBase
:
:
NotifyOpen
(
const
PreloadHashKey
&
aKey
nsIChannel
*
aChannel
dom
:
:
Document
*
aDocument
bool
aIsPreload
)
{
NotifyOpen
(
aKey
aDocument
aIsPreload
)
;
mChannel
=
aChannel
;
auto
callback
=
MakeRefPtr
<
UsageTimer
>
(
this
aDocument
)
;
NS_NewTimerWithCallback
(
getter_AddRefs
(
mUsageTimer
)
callback
10000
nsITimer
:
:
TYPE_ONE_SHOT
)
;
nsCOMPtr
<
nsIInterfaceRequestor
>
callbacks
;
mChannel
-
>
GetNotificationCallbacks
(
getter_AddRefs
(
callbacks
)
)
;
RefPtr
<
RedirectSink
>
sink
(
new
RedirectSink
(
this
callbacks
)
)
;
mChannel
-
>
SetNotificationCallbacks
(
sink
)
;
}
void
PreloaderBase
:
:
NotifyUsage
(
LoadBackground
aLoadBackground
)
{
if
(
!
mIsUsed
&
&
mChannel
&
&
aLoadBackground
=
=
LoadBackground
:
:
Drop
)
{
nsLoadFlags
loadFlags
;
mChannel
-
>
GetLoadFlags
(
&
loadFlags
)
;
if
(
loadFlags
&
nsIRequest
:
:
LOAD_BACKGROUND
)
{
nsCOMPtr
<
nsILoadGroup
>
loadGroup
;
mChannel
-
>
GetLoadGroup
(
getter_AddRefs
(
loadGroup
)
)
;
if
(
loadGroup
)
{
nsresult
status
;
mChannel
-
>
GetStatus
(
&
status
)
;
nsresult
rv
=
loadGroup
-
>
RemoveRequest
(
mChannel
nullptr
status
)
;
mChannel
-
>
SetLoadFlags
(
loadFlags
&
~
nsIRequest
:
:
LOAD_BACKGROUND
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
loadGroup
-
>
AddRequest
(
mChannel
nullptr
)
;
}
}
}
}
mIsUsed
=
true
;
CancelUsageTimer
(
)
;
}
void
PreloaderBase
:
:
RemoveSelf
(
dom
:
:
Document
*
aDocument
)
{
if
(
aDocument
)
{
aDocument
-
>
Preloads
(
)
.
DeregisterPreload
(
mKey
)
;
}
}
void
PreloaderBase
:
:
NotifyRestart
(
dom
:
:
Document
*
aDocument
PreloaderBase
*
aNewPreloader
)
{
RemoveSelf
(
aDocument
)
;
mKey
=
PreloadHashKey
(
)
;
CancelUsageTimer
(
)
;
if
(
aNewPreloader
)
{
aNewPreloader
-
>
mNodes
=
std
:
:
move
(
mNodes
)
;
}
}
void
PreloaderBase
:
:
NotifyStart
(
nsIRequest
*
aRequest
)
{
if
(
mChannel
&
&
!
SameCOMIdentity
(
aRequest
mChannel
)
)
{
return
;
}
nsCOMPtr
<
nsIHttpChannel
>
httpChannel
=
do_QueryInterface
(
aRequest
)
;
if
(
!
httpChannel
)
{
return
;
}
nsresult
rv
;
nsCOMPtr
<
nsILoadInfo
>
loadInfo
=
httpChannel
-
>
LoadInfo
(
)
;
mShouldFireLoadEvent
=
loadInfo
-
>
GetTainting
(
)
=
=
LoadTainting
:
:
Opaque
|
|
(
loadInfo
-
>
GetTainting
(
)
=
=
LoadTainting
:
:
CORS
&
&
(
NS_FAILED
(
httpChannel
-
>
GetStatus
(
&
rv
)
)
|
|
NS_FAILED
(
rv
)
)
)
;
}
void
PreloaderBase
:
:
NotifyStop
(
nsIRequest
*
aRequest
nsresult
aStatus
)
{
if
(
!
SameCOMIdentity
(
aRequest
mChannel
)
)
{
return
;
}
NotifyStop
(
aStatus
)
;
}
void
PreloaderBase
:
:
NotifyStop
(
nsresult
aStatus
)
{
mOnStopStatus
.
emplace
(
aStatus
)
;
nsTArray
<
nsWeakPtr
>
nodes
;
nodes
.
SwapElements
(
mNodes
)
;
for
(
nsWeakPtr
&
weak
:
nodes
)
{
nsCOMPtr
<
nsINode
>
node
=
do_QueryReferent
(
weak
)
;
if
(
node
)
{
NotifyNodeEvent
(
node
)
;
}
}
mChannel
=
nullptr
;
}
void
PreloaderBase
:
:
NotifyValidating
(
)
{
mOnStopStatus
.
reset
(
)
;
}
void
PreloaderBase
:
:
NotifyValidated
(
nsresult
aStatus
)
{
NotifyStop
(
nullptr
aStatus
)
;
}
void
PreloaderBase
:
:
AddLinkPreloadNode
(
nsINode
*
aNode
)
{
if
(
mOnStopStatus
)
{
return
NotifyNodeEvent
(
aNode
)
;
}
mNodes
.
AppendElement
(
do_GetWeakReference
(
aNode
)
)
;
}
void
PreloaderBase
:
:
RemoveLinkPreloadNode
(
nsINode
*
aNode
)
{
nsWeakPtr
node
=
do_GetWeakReference
(
aNode
)
;
mNodes
.
RemoveElement
(
node
)
;
if
(
kCancelAndRemovePreloadOnZeroReferences
&
&
mNodes
.
Length
(
)
=
=
0
&
&
!
mIsUsed
)
{
RefPtr
<
PreloaderBase
>
self
(
this
)
;
RemoveSelf
(
aNode
-
>
OwnerDoc
(
)
)
;
if
(
mChannel
)
{
mChannel
-
>
Cancel
(
NS_BINDING_ABORTED
)
;
}
}
}
void
PreloaderBase
:
:
NotifyNodeEvent
(
nsINode
*
aNode
)
{
PreloadService
:
:
NotifyNodeEvent
(
aNode
mShouldFireLoadEvent
|
|
NS_SUCCEEDED
(
*
mOnStopStatus
)
)
;
}
void
PreloaderBase
:
:
CancelUsageTimer
(
)
{
if
(
mUsageTimer
)
{
mUsageTimer
-
>
Cancel
(
)
;
mUsageTimer
=
nullptr
;
}
}
nsresult
PreloaderBase
:
:
AsyncConsume
(
nsIStreamListener
*
aListener
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
nsCString
PreloaderBase
:
:
RedirectRecord
:
:
Spec
(
)
const
{
nsCOMPtr
<
nsIURI
>
noFragment
;
NS_GetURIWithoutRef
(
mURI
getter_AddRefs
(
noFragment
)
)
;
MOZ_ASSERT
(
noFragment
)
;
return
noFragment
-
>
GetSpecOrDefault
(
)
;
}
nsCString
PreloaderBase
:
:
RedirectRecord
:
:
Fragment
(
)
const
{
nsCString
fragment
;
mURI
-
>
GetRef
(
fragment
)
;
return
fragment
;
}
NS_IMPL_ISUPPORTS
(
PreloaderBase
:
:
UsageTimer
nsITimerCallback
)
NS_IMETHODIMP
PreloaderBase
:
:
UsageTimer
:
:
Notify
(
nsITimer
*
aTimer
)
{
if
(
!
mPreload
|
|
!
mDocument
)
{
return
NS_OK
;
}
MOZ_ASSERT
(
aTimer
=
=
mPreload
-
>
mUsageTimer
)
;
mPreload
-
>
mUsageTimer
=
nullptr
;
if
(
mPreload
-
>
IsUsed
(
)
)
{
return
NS_OK
;
}
nsIURI
*
uri
=
static_cast
<
nsURIHashKey
*
>
(
&
mPreload
-
>
mKey
)
-
>
GetKey
(
)
;
if
(
!
uri
)
{
return
NS_OK
;
}
nsString
spec
=
NS_ConvertUTF8toUTF16
(
uri
-
>
GetSpecOrDefault
(
)
)
;
nsContentUtils
:
:
ReportToConsole
(
nsIScriptError
:
:
warningFlag
"
DOM
"
_ns
mDocument
nsContentUtils
:
:
eDOM_PROPERTIES
"
UnusedLinkPreloadPending
"
nsTArray
<
nsString
>
(
{
spec
}
)
)
;
return
NS_OK
;
}
}
