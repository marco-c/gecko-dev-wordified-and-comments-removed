#
ifndef
PreloaderBase_h__
#
define
PreloaderBase_h__
#
include
"
mozilla
/
Maybe
.
h
"
#
include
"
mozilla
/
PreloadHashKey
.
h
"
#
include
"
mozilla
/
WeakPtr
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIRedirectResultListener
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsTArray
.
h
"
#
include
"
nsProxyRelease
.
h
"
#
include
"
nsWeakReference
.
h
"
class
nsIChannel
;
class
nsINode
;
class
nsIRequest
;
class
nsIStreamListener
;
namespace
mozilla
{
namespace
dom
{
class
Document
;
}
class
PreloaderBase
:
public
SupportsWeakPtr
<
PreloaderBase
>
public
nsISupports
{
public
:
MOZ_DECLARE_WEAKREFERENCE_TYPENAME
(
PreloaderBase
)
PreloaderBase
(
)
=
default
;
void
NotifyOpen
(
PreloadHashKey
*
aKey
dom
:
:
Document
*
aDocument
bool
aIsPreload
)
;
void
NotifyOpen
(
PreloadHashKey
*
aKey
nsIChannel
*
aChannel
dom
:
:
Document
*
aDocument
bool
aIsPreload
)
;
void
NotifyRestart
(
dom
:
:
Document
*
aDocument
PreloaderBase
*
aNewPreloader
=
nullptr
)
;
void
NotifyStart
(
nsIRequest
*
aRequest
)
;
void
NotifyStop
(
nsIRequest
*
aRequest
nsresult
aStatus
)
;
void
NotifyStop
(
nsresult
aStatus
)
;
void
NotifyValidating
(
)
;
void
NotifyValidated
(
nsresult
aStatus
)
;
void
NotifyUsage
(
)
;
bool
IsUsed
(
)
const
{
return
mIsUsed
;
}
virtual
nsresult
AsyncConsume
(
nsIStreamListener
*
aListener
)
;
nsIChannel
*
Channel
(
)
const
{
return
mChannel
;
}
virtual
void
PrioritizeAsPreload
(
)
=
0
;
static
void
AddLoadBackgroundFlag
(
nsIChannel
*
aChannel
)
;
void
AddLinkPreloadNode
(
nsINode
*
aNode
)
;
void
RemoveLinkPreloadNode
(
nsINode
*
aNode
)
;
protected
:
virtual
~
PreloaderBase
(
)
;
private
:
void
NotifyNodeEvent
(
nsINode
*
aNode
)
;
class
RedirectSink
final
:
public
nsIInterfaceRequestor
public
nsIChannelEventSink
public
nsIRedirectResultListener
{
RedirectSink
(
)
=
delete
;
virtual
~
RedirectSink
(
)
=
default
;
public
:
NS_DECL_THREADSAFE_ISUPPORTS
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIREDIRECTRESULTLISTENER
RedirectSink
(
PreloaderBase
*
aPreloader
nsIInterfaceRequestor
*
aCallbacks
)
;
private
:
nsMainThreadPtrHandle
<
PreloaderBase
>
mPreloader
;
nsCOMPtr
<
nsIInterfaceRequestor
>
mCallbacks
;
nsCOMPtr
<
nsIChannel
>
mRedirectChannel
;
}
;
private
:
nsTArray
<
nsWeakPtr
>
mNodes
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
PreloadHashKey
mKey
;
bool
mShouldFireLoadEvent
=
false
;
bool
mIsUsed
=
false
;
Maybe
<
nsresult
>
mOnStopStatus
;
}
;
}
#
endif
