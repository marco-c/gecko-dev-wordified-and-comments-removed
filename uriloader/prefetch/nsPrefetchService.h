#
ifndef
nsPrefetchService_h__
#
define
nsPrefetchService_h__
#
include
"
nsIObserver
.
h
"
#
include
"
nsIInterfaceRequestor
.
h
"
#
include
"
nsIChannelEventSink
.
h
"
#
include
"
nsIPrefetchService
.
h
"
#
include
"
nsIRedirectResultListener
.
h
"
#
include
"
nsIWebProgressListener
.
h
"
#
include
"
nsIStreamListener
.
h
"
#
include
"
nsIChannel
.
h
"
#
include
"
nsIURI
.
h
"
#
include
"
nsWeakReference
.
h
"
#
include
"
nsCOMPtr
.
h
"
#
include
"
nsAutoPtr
.
h
"
#
include
"
mozilla
/
Attributes
.
h
"
#
include
<
deque
>
class
nsPrefetchService
;
class
nsPrefetchNode
;
class
nsPrefetchService
final
:
public
nsIPrefetchService
public
nsIWebProgressListener
public
nsIObserver
public
nsSupportsWeakReference
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIPREFETCHSERVICE
NS_DECL_NSIWEBPROGRESSLISTENER
NS_DECL_NSIOBSERVER
nsPrefetchService
(
)
;
nsresult
Init
(
)
;
void
RemoveNodeAndMaybeStartNextPrefetchURI
(
nsPrefetchNode
*
aFinished
)
;
void
ProcessNextPrefetchURI
(
)
;
void
NotifyLoadRequested
(
nsPrefetchNode
*
node
)
;
void
NotifyLoadCompleted
(
nsPrefetchNode
*
node
)
;
void
DispatchEvent
(
nsPrefetchNode
*
node
bool
aSuccess
)
;
private
:
~
nsPrefetchService
(
)
;
nsresult
Prefetch
(
nsIURI
*
aURI
nsIURI
*
aReferrerURI
nsINode
*
aSource
bool
aExplicit
)
;
nsresult
Preload
(
nsIURI
*
aURI
nsIURI
*
aReferrerURI
nsINode
*
aSource
nsContentPolicyType
aPolicyType
)
;
void
AddProgressListener
(
)
;
void
RemoveProgressListener
(
)
;
nsresult
EnqueueURI
(
nsIURI
*
aURI
nsIURI
*
aReferrerURI
nsINode
*
aSource
nsPrefetchNode
*
*
node
)
;
void
EmptyPrefetchQueue
(
)
;
void
StartPrefetching
(
)
;
void
StopPrefetching
(
)
;
void
StopCurrentPrefetchsPreloads
(
bool
aPreload
)
;
void
StopAll
(
)
;
nsresult
CheckURIScheme
(
nsIURI
*
aURI
nsIURI
*
aReferrerURI
)
;
std
:
:
deque
<
RefPtr
<
nsPrefetchNode
>
>
mPrefetchQueue
;
nsTArray
<
RefPtr
<
nsPrefetchNode
>
>
mCurrentNodes
;
int32_t
mMaxParallelism
;
int32_t
mStopCount
;
bool
mHaveProcessed
;
bool
mPrefetchDisabled
;
bool
mPreloadDisabled
;
bool
mAggressive
;
}
;
class
nsPrefetchNode
final
:
public
nsIStreamListener
public
nsIInterfaceRequestor
public
nsIChannelEventSink
public
nsIRedirectResultListener
{
public
:
NS_DECL_ISUPPORTS
NS_DECL_NSIREQUESTOBSERVER
NS_DECL_NSISTREAMLISTENER
NS_DECL_NSIINTERFACEREQUESTOR
NS_DECL_NSICHANNELEVENTSINK
NS_DECL_NSIREDIRECTRESULTLISTENER
nsPrefetchNode
(
nsPrefetchService
*
aPrefetchService
nsIURI
*
aURI
nsIURI
*
aReferrerURI
nsINode
*
aSource
nsContentPolicyType
aPolicyType
bool
aPreload
)
;
nsresult
OpenChannel
(
)
;
nsresult
CancelChannel
(
nsresult
error
)
;
nsCOMPtr
<
nsIURI
>
mURI
;
nsCOMPtr
<
nsIURI
>
mReferrerURI
;
nsTArray
<
nsWeakPtr
>
mSources
;
nsContentPolicyType
mPolicyType
;
bool
mPreload
;
private
:
~
nsPrefetchNode
(
)
{
}
RefPtr
<
nsPrefetchService
>
mService
;
nsCOMPtr
<
nsIChannel
>
mChannel
;
nsCOMPtr
<
nsIChannel
>
mRedirectChannel
;
int64_t
mBytesRead
;
bool
mShouldFireLoadEvent
;
}
;
#
endif
