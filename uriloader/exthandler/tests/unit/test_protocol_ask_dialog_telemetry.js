"
use
strict
"
;
const
{
ContentDispatchChooserTelemetry
}
=
ChromeUtils
.
import
(
"
resource
:
/
/
gre
/
modules
/
ContentDispatchChooser
.
jsm
"
)
;
let
telemetryLabels
=
Services
.
telemetry
.
getCategoricalLabels
(
)
.
EXTERNAL_PROTOCOL_HANDLER_DIALOG_CONTEXT_SCHEME
;
let
schemeToLabel
=
ContentDispatchChooserTelemetry
.
SCHEME_TO_LABEL
;
let
schemePrefixToLabel
=
ContentDispatchChooserTelemetry
.
SCHEME_PREFIX_TO_LABEL
;
add_task
(
async
function
test_telemetry_label_maps
(
)
{
let
mapValues
=
Object
.
values
(
schemeToLabel
)
.
concat
(
Object
.
values
(
schemePrefixToLabel
)
)
;
mapValues
.
forEach
(
label
=
>
{
Assert
.
ok
(
telemetryLabels
.
includes
(
label
)
Exists
label
:
{
label
}
)
;
}
)
;
telemetryLabels
.
forEach
(
label
=
>
{
Assert
.
equal
(
label
=
=
"
OTHER
"
|
|
mapValues
.
includes
(
label
)
label
=
=
label
.
toUpperCase
(
)
Exists
label
:
{
label
}
)
;
}
)
;
Object
.
keys
(
schemeToLabel
)
.
forEach
(
key
=
>
{
Assert
.
ok
(
!
telemetryLabels
.
includes
(
key
)
Not
exists
label
:
{
key
}
)
;
Assert
.
ok
(
!
schemePrefixToLabel
[
key
]
No
duplicate
key
:
{
key
}
)
;
}
)
;
}
)
;
add_task
(
async
function
test_telemetry_getTelemetryLabel
(
)
{
Object
.
keys
(
schemeToLabel
)
.
forEach
(
scheme
=
>
{
Assert
.
equal
(
schemeToLabel
[
scheme
]
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
scheme
)
)
;
}
)
;
Assert
.
throws
(
(
)
=
>
{
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
null
)
;
}
/
Invalid
scheme
/
)
;
ContentDispatchChooserTelemetry
.
SCHEME_TO_LABEL
=
{
foo
:
"
FOOLABEL
"
bar
:
"
BARLABEL
"
}
;
ContentDispatchChooserTelemetry
.
SCHEME_PREFIX_TO_LABEL
=
{
fooPrefix
:
"
FOOPREFIXLABEL
"
barPrefix
:
"
BARPREFIXLABEL
"
fo
:
"
PREFIXLABEL
"
}
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
foo
"
)
"
FOOLABEL
"
"
Non
prefix
mapping
should
have
priority
"
)
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
bar
"
)
"
BARLABEL
"
"
Should
return
the
correct
label
"
)
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
fooPrefix
"
)
"
FOOPREFIXLABEL
"
"
Should
return
the
correct
label
"
)
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
fooPrefix1
"
)
"
FOOPREFIXLABEL
"
"
Should
return
the
correct
label
"
)
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
fooPrefix2
"
)
"
FOOPREFIXLABEL
"
"
Should
return
the
correct
label
"
)
;
Assert
.
equal
(
ContentDispatchChooserTelemetry
.
_getTelemetryLabel
(
"
doesnotexist
"
)
"
OTHER
"
"
Should
return
the
correct
label
for
unknown
scheme
"
)
;
ContentDispatchChooserTelemetry
.
SCHEME_TO_LABEL
=
schemeToLabel
;
ContentDispatchChooserTelemetry
.
SCHEME_PREFIX_TO_LABEL
=
schemePrefixToLabel
;
}
)
;
