let
gHandlerService
=
gHandlerServiceJSON
;
let
unloadHandlerStore
=
unloadHandlerStoreJSON
;
let
deleteHandlerStore
=
deleteHandlerStoreJSON
;
let
copyTestDataToHandlerStore
=
copyTestDataToHandlerStoreJSON
;
var
scriptFile
=
do_get_file
(
"
common_test_handlerService
.
js
"
)
;
Services
.
scriptloader
.
loadSubScript
(
NetUtil
.
newURI
(
scriptFile
)
.
spec
)
;
add_task
(
async
function
test_store_keeps_unknown_properties
(
)
{
await
deleteHandlerStore
(
)
;
let
handlerInfo
=
HandlerServiceTestUtils
.
getHandlerInfo
(
"
example
/
type
.
handleinternally
"
)
;
await
copyTestDataToHandlerStore
(
)
;
gHandlerService
.
store
(
handlerInfo
)
;
await
unloadHandlerStore
(
)
;
let
data
=
JSON
.
parse
(
new
TextDecoder
(
)
.
decode
(
await
OS
.
File
.
read
(
jsonPath
)
)
)
;
do_check_eq
(
data
.
mimeTypes
[
"
example
/
type
.
handleinternally
"
]
.
unknownProperty
"
preserved
"
)
;
}
)
;
add_task
(
async
function
test_async_init
(
)
{
await
deleteHandlerStore
(
)
;
await
copyTestDataToHandlerStore
(
)
;
gHandlerService
.
asyncInit
(
)
;
await
TestUtils
.
topicObserved
(
"
handlersvc
-
store
-
initialized
"
)
;
await
assertAllHandlerInfosMatchTestData
(
)
;
await
unloadHandlerStore
(
)
;
}
)
;
add_task
(
async
function
test_race_async_init
(
)
{
await
deleteHandlerStore
(
)
;
await
copyTestDataToHandlerStore
(
)
;
let
storeInitialized
=
false
;
TestUtils
.
topicObserved
(
"
handlersvc
-
store
-
initialized
"
(
)
=
>
{
storeInitialized
=
true
;
return
true
;
}
)
;
gHandlerService
.
asyncInit
(
)
;
do_check_false
(
storeInitialized
)
;
gHandlerService
.
enumerate
(
)
;
do_check_true
(
storeInitialized
)
;
await
assertAllHandlerInfosMatchTestData
(
)
;
await
unloadHandlerStore
(
)
;
}
)
;
add_task
(
async
function
test_migration_rdf_present
(
)
{
await
deleteHandlerStore
(
)
;
await
copyTestDataToHandlerStoreRDF
(
)
;
Services
.
prefs
.
setBoolPref
(
"
gecko
.
handlerService
.
migrated
"
false
)
;
await
assertAllHandlerInfosMatchTestData
(
)
;
do_check_true
(
Services
.
prefs
.
getBoolPref
(
"
gecko
.
handlerService
.
migrated
"
)
)
;
await
unloadHandlerStore
(
)
;
await
unloadHandlerStoreRDF
(
)
;
Services
.
prefs
.
setBoolPref
(
"
gecko
.
handlerService
.
migrated
"
false
)
;
await
assertAllHandlerInfosMatchTestData
(
)
;
do_check_true
(
Services
.
prefs
.
getBoolPref
(
"
gecko
.
handlerService
.
migrated
"
)
)
;
}
)
;
add_task
(
async
function
test_migration_rdf_present_keeps_new_data
(
)
{
await
deleteHandlerStore
(
)
;
let
handlerInfo
=
getKnownHandlerInfo
(
"
example
/
new
"
)
;
gHandlerService
.
store
(
handlerInfo
)
;
await
unloadHandlerStore
(
)
;
await
copyTestDataToHandlerStoreRDF
(
)
;
Services
.
prefs
.
setBoolPref
(
"
gecko
.
handlerService
.
migrated
"
false
)
;
let
actualHandlerInfo
=
HandlerServiceTestUtils
.
getHandlerInfo
(
"
example
/
new
"
)
;
HandlerServiceTestUtils
.
assertHandlerInfoMatches
(
actualHandlerInfo
{
type
:
"
example
/
new
"
preferredAction
:
Ci
.
nsIHandlerInfo
.
saveToDisk
alwaysAskBeforeHandling
:
false
}
)
;
do_check_true
(
Services
.
prefs
.
getBoolPref
(
"
gecko
.
handlerService
.
migrated
"
)
)
;
}
)
;
add_task
(
async
function
test_migration_rdf_absent
(
)
{
if
(
!
Services
.
prefs
.
getPrefType
(
"
gecko
.
handlerService
.
defaultHandlersVersion
"
)
)
{
do_print
(
"
This
platform
or
locale
does
not
have
default
handlers
.
"
)
;
return
;
}
await
deleteHandlerStore
(
)
;
await
deleteHandlerStoreRDF
(
)
;
Services
.
prefs
.
setBoolPref
(
"
gecko
.
handlerService
.
migrated
"
false
)
;
await
assertAllHandlerInfosMatchDefaultHandlers
(
)
;
do_check_true
(
Services
.
prefs
.
getBoolPref
(
"
gecko
.
handlerService
.
migrated
"
)
)
;
await
unloadHandlerStore
(
)
;
await
unloadHandlerStoreRDF
(
)
;
Services
.
prefs
.
setBoolPref
(
"
gecko
.
handlerService
.
migrated
"
false
)
;
await
assertAllHandlerInfosMatchDefaultHandlers
(
)
;
do_check_true
(
Services
.
prefs
.
getBoolPref
(
"
gecko
.
handlerService
.
migrated
"
)
)
;
}
)
;
