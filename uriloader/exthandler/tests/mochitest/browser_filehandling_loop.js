"
use
strict
"
;
add_task
(
async
function
test_helperapp
(
)
{
const
mimeSvc
=
Cc
[
"
mozilla
.
org
/
mime
;
1
"
]
.
getService
(
Ci
.
nsIMIMEService
)
;
const
handlerSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
handler
-
service
;
1
"
]
.
getService
(
Ci
.
nsIHandlerService
)
;
let
handlerInfo
=
mimeSvc
.
getFromTypeAndExtension
(
"
application
/
x
-
foo
"
"
foo
"
)
;
registerCleanupFunction
(
(
)
=
>
{
handlerSvc
.
remove
(
handlerInfo
)
;
}
)
;
handlerInfo
.
preferredAction
=
Ci
.
nsIHandlerInfo
.
useHelperApp
;
handlerInfo
.
alwaysAskBeforeHandling
=
false
;
let
selfFile
=
Services
.
dirsvc
.
get
(
"
XREExeF
"
Ci
.
nsIFile
)
;
if
(
AppConstants
.
platform
=
=
"
macosx
"
)
{
while
(
!
selfFile
.
leafName
.
endsWith
(
"
.
app
"
)
&
&
!
selfFile
.
leafName
.
endsWith
(
"
.
app
/
"
)
)
{
selfFile
=
selfFile
.
parent
;
}
}
let
selfHandlerApp
=
Cc
[
"
mozilla
.
org
/
uriloader
/
local
-
handler
-
app
;
1
"
]
.
createInstance
(
Ci
.
nsILocalHandlerApp
)
;
selfHandlerApp
.
executable
=
selfFile
;
handlerInfo
.
possibleApplicationHandlers
.
appendElement
(
selfHandlerApp
)
;
handlerInfo
.
preferredApplicationHandler
=
selfHandlerApp
;
handlerSvc
.
store
(
handlerInfo
)
;
await
BrowserTestUtils
.
withNewTab
(
"
about
:
blank
"
async
browser
=
>
{
let
oldAddTab
=
gBrowser
.
addTab
;
registerCleanupFunction
(
(
)
=
>
(
gBrowser
.
addTab
=
oldAddTab
)
)
;
let
wrongThingHappenedPromise
=
new
Promise
(
resolve
=
>
{
gBrowser
.
addTab
=
function
(
aURI
)
{
ok
(
false
"
Tried
to
open
unexpected
URL
in
a
tab
:
"
+
aURI
)
;
resolve
(
null
)
;
return
{
}
;
}
;
}
)
;
let
askedUserPromise
=
BrowserTestUtils
.
domWindowOpenedAndLoaded
(
)
;
info
(
"
Clicking
a
link
that
should
open
the
unknown
content
type
dialog
"
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
(
)
=
>
{
let
link
=
content
.
document
.
createElement
(
"
a
"
)
;
link
.
download
=
"
foo
.
foo
"
;
link
.
textContent
=
"
Foo
file
"
;
link
.
href
=
"
data
:
application
/
x
-
foo
hello
"
;
content
.
document
.
body
.
append
(
link
)
;
link
.
click
(
)
;
}
)
;
let
dialog
=
await
Promise
.
race
(
[
wrongThingHappenedPromise
askedUserPromise
]
)
;
ok
(
dialog
"
Should
have
gotten
a
dialog
"
)
;
Assert
.
stringContains
(
dialog
.
document
.
location
.
href
"
unknownContentType
"
"
Should
have
opened
correct
dialog
.
"
)
;
let
closePromise
=
BrowserTestUtils
.
windowClosed
(
dialog
)
;
dialog
.
close
(
)
;
await
closePromise
;
askedUserPromise
=
null
;
}
)
;
}
)
;
