"
use
strict
"
;
const
TEST_URL
=
"
https
:
/
/
example
.
com
/
browser
/
"
+
"
uriloader
/
exthandler
/
tests
/
mochitest
/
FTPprotocolHandler
.
html
"
;
add_task
(
async
function
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
security
.
external_protocol_requires_permission
"
false
]
]
}
)
;
let
browser
=
gBrowser
.
selectedBrowser
;
BrowserTestUtils
.
startLoadingURIString
(
browser
TEST_URL
)
;
await
BrowserTestUtils
.
browserLoaded
(
browser
false
TEST_URL
)
;
let
protoSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
external
-
protocol
-
service
;
1
"
]
.
getService
(
Ci
.
nsIExternalProtocolService
)
;
let
protoInfo
=
protoSvc
.
getProtocolHandlerInfo
(
"
ftp
"
)
;
ok
(
!
protoInfo
.
preferredApplicationHandler
"
no
preferred
handler
is
set
"
)
;
let
handlers
=
protoInfo
.
possibleApplicationHandlers
;
is
(
0
handlers
.
length
"
no
handler
registered
for
ftp
"
)
;
protoInfo
.
alwaysAskBeforeHandling
=
true
;
let
handlerSvc
=
Cc
[
"
mozilla
.
org
/
uriloader
/
handler
-
service
;
1
"
]
.
getService
(
Ci
.
nsIHandlerService
)
;
handlerSvc
.
store
(
protoInfo
)
;
let
_getTabDialogBox
=
gBrowser
.
getTabDialogBox
;
delete
gBrowser
.
getTabDialogBox
;
let
appChooserDialogOpenPromise
=
BrowserTestUtils
.
domWindowOpened
(
null
async
win
=
>
{
await
BrowserTestUtils
.
waitForEvent
(
win
"
load
"
)
;
Assert
.
ok
(
win
.
document
.
documentURI
=
=
"
chrome
:
/
/
mozapps
/
content
/
handling
/
appChooser
.
xhtml
"
"
application
chooser
dialog
opened
"
)
;
return
true
;
}
)
;
let
link
=
"
#
link
"
;
await
BrowserTestUtils
.
synthesizeMouseAtCenter
(
link
{
}
browser
)
;
let
appChooserDialog
=
await
appChooserDialogOpenPromise
;
let
appChooserDialogClosePromise
=
BrowserTestUtils
.
domWindowClosed
(
appChooserDialog
)
;
let
dialog
=
appChooserDialog
.
document
.
getElementsByTagName
(
"
dialog
"
)
[
0
]
;
let
cancelButton
=
dialog
.
getButton
(
"
cancel
"
)
;
cancelButton
.
click
(
)
;
await
appChooserDialogClosePromise
;
gBrowser
.
getTabDialogBox
=
_getTabDialogBox
;
}
)
;
