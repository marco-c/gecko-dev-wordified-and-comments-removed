"
use
strict
"
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
Downloads
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
gre
/
modules
/
DownloadPaths
.
jsm
"
this
)
;
Cu
.
import
(
"
resource
:
/
/
testing
-
common
/
MockRegistrar
.
jsm
"
this
)
;
const
TEST_TARGET_FILE_NAME
=
"
test
-
download
.
txt
"
;
let
gFileCounter
=
Math
.
floor
(
Math
.
random
(
)
*
1000000
)
;
function
getTempFile
(
aLeafName
)
{
let
[
base
ext
]
=
DownloadPaths
.
splitBaseNameAndExtension
(
aLeafName
)
;
let
leafName
=
base
+
"
-
"
+
gFileCounter
+
ext
;
gFileCounter
+
+
;
let
file
=
FileUtils
.
getFile
(
"
TmpD
"
[
leafName
]
)
;
Assert
.
ok
(
!
file
.
exists
(
)
)
;
registerCleanupFunction
(
(
)
=
>
{
try
{
file
.
remove
(
false
)
;
}
catch
(
ex
)
{
if
(
!
(
ex
instanceof
Components
.
Exception
&
&
(
ex
.
result
=
=
Cr
.
NS_ERROR_FILE_ACCESS_DENIED
|
|
ex
.
result
=
=
Cr
.
NS_ERROR_FILE_TARGET_DOES_NOT_EXIST
|
|
ex
.
result
=
=
Cr
.
NS_ERROR_FILE_NOT_FOUND
)
)
)
{
throw
ex
;
}
}
}
)
;
return
file
;
}
add_task
(
async
function
test_setup
(
)
{
let
cid
=
MockRegistrar
.
register
(
"
mozilla
.
org
/
helperapplauncherdialog
;
1
"
{
QueryInterface
:
XPCOMUtils
.
generateQI
(
[
Ci
.
nsIHelperAppLauncherDialog
]
)
show
(
launcher
)
{
launcher
.
saveToDisk
(
null
false
)
;
}
promptForSaveToFileAsync
(
launcher
)
{
let
file
=
getTempFile
(
TEST_TARGET_FILE_NAME
)
;
file
.
create
(
Ci
.
nsIFile
.
NORMAL_FILE_TYPE
FileUtils
.
PERMS_FILE
)
;
launcher
.
saveDestinationAvailable
(
file
)
;
}
}
)
;
registerCleanupFunction
(
(
)
=
>
{
MockRegistrar
.
unregister
(
cid
)
;
}
)
;
}
)
;
add_task
(
async
function
test_download_privatebrowsing
(
)
{
let
privateList
=
await
Downloads
.
getList
(
Downloads
.
PRIVATE
)
;
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
let
win
=
await
BrowserTestUtils
.
openNewBrowserWindow
(
{
private
:
true
}
)
;
try
{
let
tab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
win
.
gBrowser
data
:
text
/
html
<
a
download
href
=
"
data
:
text
/
plain
"
>
download
<
/
a
>
)
;
let
promiseNextPrivateDownload
=
new
Promise
(
resolve
=
>
{
privateList
.
addView
(
{
onDownloadAdded
(
download
)
{
privateList
.
removeView
(
this
)
;
resolve
(
download
)
;
}
}
)
;
}
)
;
await
ContentTask
.
spawn
(
tab
.
linkedBrowser
{
}
async
function
(
)
{
content
.
document
.
querySelector
(
"
a
"
)
.
click
(
)
;
}
)
;
let
download
=
await
promiseNextPrivateDownload
;
await
download
.
whenSucceeded
(
)
;
let
publicDownloads
=
await
publicList
.
getAll
(
)
;
Assert
.
equal
(
publicDownloads
.
length
0
)
;
await
privateList
.
removeFinished
(
)
;
}
finally
{
await
BrowserTestUtils
.
closeWindow
(
win
)
;
}
}
)
;
