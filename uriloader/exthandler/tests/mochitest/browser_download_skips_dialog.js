const
{
DownloadIntegration
}
=
ChromeUtils
.
importESModule
(
"
resource
:
/
/
gre
/
modules
/
DownloadIntegration
.
sys
.
mjs
"
)
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
skipDialogAndDownloadFile
(
)
{
await
SpecialPowers
.
pushPrefEnv
(
{
set
:
[
[
"
browser
.
download
.
improvements_to_download_panel
"
true
]
[
"
browser
.
download
.
always_ask_before_handling_new_types
"
false
]
[
"
browser
.
download
.
useDownloadDir
"
true
]
[
"
image
.
webp
.
enabled
"
true
]
]
}
)
;
let
publicList
=
await
Downloads
.
getList
(
Downloads
.
PUBLIC
)
;
registerCleanupFunction
(
async
(
)
=
>
{
await
publicList
.
removeFinished
(
)
;
}
)
;
let
downloadFinishedPromise
=
promiseDownloadFinished
(
publicList
)
;
let
initialTabsCount
=
gBrowser
.
tabs
.
length
;
let
loadingTab
=
await
BrowserTestUtils
.
openNewForegroundTab
(
{
gBrowser
opening
:
TEST_PATH
+
"
file_green
.
webp
"
waitForLoad
:
false
waitForStateStop
:
true
}
)
;
let
download
=
await
downloadFinishedPromise
;
await
BrowserTestUtils
.
waitForCondition
(
(
)
=
>
gBrowser
.
tabs
.
length
=
=
initialTabsCount
+
2
)
;
gBrowser
.
removeCurrentTab
(
)
;
BrowserTestUtils
.
removeTab
(
loadingTab
)
;
Assert
.
ok
(
await
IOUtils
.
exists
(
download
.
target
.
path
)
"
The
file
should
have
been
downloaded
.
"
)
;
try
{
info
(
"
removing
"
+
download
.
target
.
path
)
;
if
(
Services
.
appinfo
.
OS
=
=
=
"
WINNT
"
)
{
await
IOUtils
.
setPermissions
(
download
.
target
.
path
0o600
)
;
}
await
IOUtils
.
remove
(
download
.
target
.
path
)
;
}
catch
(
ex
)
{
info
(
"
The
file
"
+
download
.
target
.
path
+
"
is
not
removed
"
+
ex
)
;
}
}
)
;
