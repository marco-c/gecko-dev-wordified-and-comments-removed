"
use
strict
"
;
const
TEST_PATH
=
getRootDirectory
(
gTestPath
)
.
replace
(
"
chrome
:
/
/
mochitests
/
content
"
"
https
:
/
/
example
.
com
"
)
;
add_task
(
async
function
load_errored_content_disposition_header
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
blank
.
html
"
async
browser
=
>
{
info
(
"
blank
loaded
adding
link
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
TEST_PATH
+
"
emptyErrorPage
.
sjs
?
attachment
"
true
true
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
body
.
innerHTML
=
<
a
href
=
"
emptyErrorPage
.
sjs
?
attachment
"
>
click
<
/
a
>
;
let
link
=
content
.
document
.
querySelector
(
"
a
"
)
;
link
.
click
(
)
;
}
)
;
let
newTab
=
await
newTabPromise
;
let
documentURI
=
await
SpecialPowers
.
spawn
(
newTab
.
linkedBrowser
[
]
(
)
=
>
content
.
document
.
documentURI
)
;
ok
(
documentURI
.
startsWith
(
"
about
:
neterror
"
)
"
has
loaded
neterror
page
in
new
tab
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
}
)
;
add_task
(
async
function
load_errored_download_attribute
(
)
{
await
BrowserTestUtils
.
withNewTab
(
TEST_PATH
+
"
blank
.
html
"
async
browser
=
>
{
info
(
"
blank
loaded
adding
link
"
)
;
let
newTabPromise
=
BrowserTestUtils
.
waitForNewTab
(
gBrowser
null
true
true
true
)
;
await
SpecialPowers
.
spawn
(
browser
[
]
async
(
)
=
>
{
content
.
document
.
body
.
innerHTML
=
<
a
href
=
"
emptyErrorPage
.
sjs
"
download
>
click
<
/
a
>
;
let
link
=
content
.
document
.
querySelector
(
"
a
"
)
;
link
.
click
(
)
;
}
)
;
let
newTab
=
await
newTabPromise
;
let
documentURI
=
await
SpecialPowers
.
spawn
(
newTab
.
linkedBrowser
[
]
(
)
=
>
content
.
document
.
documentURI
)
;
ok
(
documentURI
.
startsWith
(
"
about
:
neterror
"
)
"
has
loaded
neterror
page
in
new
tab
"
)
;
BrowserTestUtils
.
removeTab
(
newTab
)
;
}
)
;
}
)
;
