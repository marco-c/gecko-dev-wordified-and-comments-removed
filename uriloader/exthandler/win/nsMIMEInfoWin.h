#
ifndef
nsMIMEInfoWin_h_
#
define
nsMIMEInfoWin_h_
#
include
"
nsMIMEInfoImpl
.
h
"
#
include
"
nsIPropertyBag
.
h
"
#
include
"
nsIMutableArray
.
h
"
#
include
"
nsTArray
.
h
"
class
nsMIMEInfoWin
:
public
nsMIMEInfoBase
public
nsIPropertyBag
{
virtual
~
nsMIMEInfoWin
(
)
;
public
:
explicit
nsMIMEInfoWin
(
const
char
*
aType
=
"
"
)
:
nsMIMEInfoBase
(
aType
)
{
}
explicit
nsMIMEInfoWin
(
const
nsACString
&
aMIMEType
)
:
nsMIMEInfoBase
(
aMIMEType
)
{
}
nsMIMEInfoWin
(
const
nsACString
&
aType
HandlerClass
aClass
)
:
nsMIMEInfoBase
(
aType
aClass
)
{
}
NS_IMETHOD
LaunchWithFile
(
nsIFile
*
aFile
)
override
;
NS_IMETHOD
GetHasDefaultHandler
(
bool
*
_retval
)
override
;
NS_IMETHOD
GetDefaultExecutable
(
nsIFile
*
*
aExecutable
)
override
;
NS_IMETHOD
GetDefaultDescription
(
nsAString
&
aDescription
)
override
;
NS_IMETHOD
GetPossibleLocalHandlers
(
nsIArray
*
*
_retval
)
override
;
NS_IMETHOD
IsCurrentAppOSDefault
(
bool
*
_retval
)
override
;
void
UpdateDefaultInfoIfStale
(
)
;
NS_DECL_ISUPPORTS_INHERITED
NS_DECL_NSIPROPERTYBAG
void
SetDefaultApplicationHandler
(
nsIFile
*
aDefaultApplication
)
{
mDefaultApplication
=
aDefaultApplication
;
}
protected
:
nsIFile
*
GetDefaultApplication
(
)
{
UpdateDefaultInfoIfStale
(
)
;
return
mDefaultApplication
;
}
virtual
nsresult
LoadUriInternal
(
nsIURI
*
aURI
)
;
virtual
nsresult
LaunchDefaultWithFile
(
nsIFile
*
aFile
)
;
private
:
nsCOMPtr
<
nsIFile
>
mDefaultApplication
;
bool
GetLocalHandlerApp
(
const
nsAString
&
aCommandHandler
nsCOMPtr
<
nsILocalHandlerApp
>
&
aApp
)
;
bool
GetAppsVerbCommandHandler
(
const
nsAString
&
appExeName
nsAString
&
applicationPath
bool
bEdit
)
;
bool
GetProgIDVerbCommandHandler
(
const
nsAString
&
appProgIDName
nsAString
&
applicationPath
bool
bEdit
)
;
bool
GetDllLaunchInfo
(
nsIFile
*
aDll
nsIFile
*
aFile
nsAString
&
args
bool
bEdit
)
;
void
ProcessPath
(
nsCOMPtr
<
nsIMutableArray
>
&
appList
nsTArray
<
nsString
>
&
trackList
const
nsAutoString
&
appId
const
nsAString
&
appFilesystemCommand
)
;
nsresult
ShellExecuteWithIFile
(
nsIFile
*
aExecutable
int
aArgc
const
wchar_t
*
*
aArgv
)
;
}
;
#
endif
