#
include
"
nsLocalHandlerAppWin
.
h
"
#
include
"
nsString
.
h
"
#
include
"
nsIWindowsRegKey
.
h
"
static
nsresult
GetPrettyNameFromFileDescription
(
const
nsCOMPtr
<
nsILocalFileWin
>
&
executableOnWindows
const
nsString
&
assignedName
nsString
&
aName
)
{
nsresult
result
=
NS_ERROR_FAILURE
;
if
(
executableOnWindows
)
{
result
=
executableOnWindows
-
>
GetVersionInfoField
(
"
FileDescription
"
aName
)
;
if
(
NS_FAILED
(
result
)
|
|
aName
.
IsEmpty
(
)
)
{
if
(
!
assignedName
.
IsEmpty
(
)
)
{
aName
=
assignedName
;
}
else
{
result
=
executableOnWindows
-
>
GetLeafName
(
aName
)
;
}
if
(
!
aName
.
IsEmpty
(
)
)
{
result
=
NS_OK
;
}
else
{
result
=
NS_ERROR_FAILURE
;
}
}
}
return
result
;
}
static
nsresult
GetValueFromRegistry
(
nsString
&
aName
const
nsCOMPtr
<
nsIWindowsRegKey
>
&
appKey
const
nsString
&
registryPath
const
nsString
&
valueName
)
{
nsresult
rv
=
appKey
-
>
Open
(
nsIWindowsRegKey
:
:
ROOT_KEY_CLASSES_ROOT
registryPath
nsIWindowsRegKey
:
:
ACCESS_QUERY_VALUE
)
;
if
(
NS_SUCCEEDED
(
rv
)
)
{
nsAutoString
applicationName
;
if
(
NS_SUCCEEDED
(
appKey
-
>
ReadStringValue
(
valueName
applicationName
)
)
)
{
aName
=
applicationName
;
return
NS_OK
;
}
}
return
NS_ERROR_FAILURE
;
}
;
std
:
:
function
<
nsresult
(
nsString
&
)
>
nsLocalHandlerAppWin
:
:
GetPrettyNameOnNonMainThreadCallback
(
)
{
nsCOMPtr
<
nsIFile
>
executable
;
mExecutable
-
>
Clone
(
getter_AddRefs
(
executable
)
)
;
nsCOMPtr
<
nsILocalFileWin
>
executableOnWindows
(
do_QueryInterface
(
executable
)
)
;
auto
appIdOrName
=
mAppIdOrName
;
auto
assignedName
=
mName
;
std
:
:
function
<
nsresult
(
nsString
&
)
>
callback
=
[
assignedName
appIdOrName
executableOnWindows
=
std
:
:
move
(
executableOnWindows
)
]
(
nsString
&
aName
)
{
if
(
appIdOrName
.
IsEmpty
(
)
)
{
return
GetPrettyNameFromFileDescription
(
executableOnWindows
assignedName
aName
)
;
}
nsCOMPtr
<
nsIWindowsRegKey
>
appKey
=
do_CreateInstance
(
"
mozilla
.
org
/
windows
-
registry
-
key
;
1
"
)
;
if
(
!
appKey
)
{
return
GetPrettyNameFromFileDescription
(
executableOnWindows
assignedName
aName
)
;
}
nsresult
rv
=
GetValueFromRegistry
(
aName
appKey
appIdOrName
+
u
"
\
\
Application
"
_ns
u
"
ApplicationName
"
_ns
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
aName
.
IsEmpty
(
)
)
{
return
rv
;
}
rv
=
GetValueFromRegistry
(
aName
appKey
u
"
Applications
\
\
"
_ns
+
appIdOrName
u
"
"
_ns
)
;
if
(
NS_SUCCEEDED
(
rv
)
&
&
!
aName
.
IsEmpty
(
)
)
{
return
rv
;
}
return
GetPrettyNameFromFileDescription
(
executableOnWindows
assignedName
aName
)
;
}
;
return
callback
;
}
