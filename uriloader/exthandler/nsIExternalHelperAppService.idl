#
include
"
nsICancelable
.
idl
"
interface
nsIURI
;
interface
nsIRequest
;
interface
nsIStreamListener
;
interface
nsIFile
;
interface
nsIMIMEInfo
;
interface
nsIWebProgressListener2
;
interface
nsIInterfaceRequestor
;
webidl
BrowsingContext
;
[
scriptable
uuid
(
1E4F3AE1
-
B737
-
431F
-
A95D
-
31FA8DA70199
)
]
interface
nsIExternalHelperAppService
:
nsISupports
{
nsIStreamListener
doContent
(
in
ACString
aMimeContentType
in
nsIRequest
aRequest
in
nsIInterfaceRequestor
aContentContext
in
boolean
aForceSave
[
optional
]
in
nsIInterfaceRequestor
aWindowContext
)
;
nsIStreamListener
createListener
(
in
ACString
aMimeContentType
in
nsIRequest
aRequest
in
BrowsingContext
aContentContext
in
boolean
aForceSave
[
optional
]
in
nsIInterfaceRequestor
aWindowContext
)
;
boolean
applyDecodingForExtension
(
in
AUTF8String
aExtension
in
ACString
aEncodingType
)
;
}
;
[
scriptable
uuid
(
6613e2e7
-
feab
-
4e3a
-
bb1f
-
b03200d544ec
)
]
interface
nsPIExternalAppLauncher
:
nsISupports
{
void
deleteTemporaryFileOnExit
(
in
nsIFile
aTemporaryFile
)
;
void
deleteTemporaryPrivateFileWhenPossible
(
in
nsIFile
aTemporaryFile
)
;
}
;
[
scriptable
uuid
(
acf2a516
-
7d7f
-
4771
-
8b22
-
6c4a559c088e
)
]
interface
nsIHelperAppLauncher
:
nsICancelable
{
readonly
attribute
nsIMIMEInfo
MIMEInfo
;
readonly
attribute
nsIURI
source
;
readonly
attribute
AString
suggestedFileName
;
void
promptForSaveDestination
(
)
;
void
setDownloadToLaunch
(
in
boolean
aHandleInternally
in
nsIFile
aFile
)
;
void
launchLocalFile
(
)
;
void
saveDestinationAvailable
(
in
nsIFile
aFile
[
optional
]
in
boolean
aDialogWasShown
)
;
void
setWebProgressListener
(
in
nsIWebProgressListener2
aWebProgressListener
)
;
readonly
attribute
nsIFile
targetFile
;
readonly
attribute
boolean
targetFileIsExecutable
;
readonly
attribute
PRTime
timeDownloadStarted
;
readonly
attribute
int64_t
contentLength
;
readonly
attribute
uint64_t
browsingContextId
;
}
;
