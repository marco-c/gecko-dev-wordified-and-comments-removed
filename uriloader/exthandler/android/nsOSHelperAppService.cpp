#
include
"
nsOSHelperAppService
.
h
"
#
include
"
nsMIMEInfoAndroid
.
h
"
nsOSHelperAppService
:
:
nsOSHelperAppService
(
)
:
nsExternalHelperAppService
(
)
{
}
nsOSHelperAppService
:
:
~
nsOSHelperAppService
(
)
{
}
nsresult
nsOSHelperAppService
:
:
GetMIMEInfoFromOS
(
const
nsACString
&
aMIMEType
const
nsACString
&
aFileExt
bool
*
aFound
nsIMIMEInfo
*
*
aMIMEInfo
)
{
RefPtr
<
nsMIMEInfoAndroid
>
mimeInfo
;
*
aFound
=
false
;
if
(
!
aMIMEType
.
IsEmpty
(
)
)
*
aFound
=
nsMIMEInfoAndroid
:
:
GetMimeInfoForMimeType
(
aMIMEType
getter_AddRefs
(
mimeInfo
)
)
;
if
(
!
*
aFound
)
*
aFound
=
nsMIMEInfoAndroid
:
:
GetMimeInfoForFileExt
(
aFileExt
getter_AddRefs
(
mimeInfo
)
)
;
if
(
!
*
aFound
)
mimeInfo
=
new
nsMIMEInfoAndroid
(
aMIMEType
)
;
mimeInfo
.
forget
(
aMIMEInfo
)
;
return
NS_OK
;
}
nsresult
nsOSHelperAppService
:
:
OSProtocolHandlerExists
(
const
char
*
aScheme
bool
*
aExists
)
{
nsAutoCString
scheme
(
aScheme
)
;
*
aExists
=
!
scheme
.
Equals
(
"
unsupported
"
_ns
)
&
&
!
scheme
.
Equals
(
"
unknownextproto
"
_ns
)
;
return
NS_OK
;
}
NS_IMETHODIMP
nsOSHelperAppService
:
:
GetApplicationDescription
(
const
nsACString
&
aScheme
nsAString
&
_retval
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
NS_IMETHODIMP
nsOSHelperAppService
:
:
IsCurrentAppOSDefaultForProtocol
(
const
nsACString
&
aScheme
bool
*
_retval
)
{
return
NS_ERROR_NOT_AVAILABLE
;
}
nsresult
nsOSHelperAppService
:
:
GetProtocolHandlerInfoFromOS
(
const
nsACString
&
aScheme
bool
*
found
nsIHandlerInfo
*
*
info
)
{
return
NS_ERROR_NOT_IMPLEMENTED
;
}
