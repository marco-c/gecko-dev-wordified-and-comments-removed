#
include
"
ExternalHelperAppChild
.
h
"
#
include
"
mozilla
/
net
/
ChannelDiverterChild
.
h
"
#
include
"
mozilla
/
dom
/
TabChild
.
h
"
#
include
"
nsIDivertableChannel
.
h
"
#
include
"
nsIInputStream
.
h
"
#
include
"
nsIFTPChannel
.
h
"
#
include
"
nsIRequest
.
h
"
#
include
"
nsIResumableChannel
.
h
"
#
include
"
nsNetUtil
.
h
"
namespace
mozilla
{
namespace
dom
{
NS_IMPL_ISUPPORTS
(
ExternalHelperAppChild
nsIStreamListener
nsIRequestObserver
)
ExternalHelperAppChild
:
:
ExternalHelperAppChild
(
)
:
mStatus
(
NS_OK
)
{
}
ExternalHelperAppChild
:
:
~
ExternalHelperAppChild
(
)
{
}
NS_IMETHODIMP
ExternalHelperAppChild
:
:
OnDataAvailable
(
nsIRequest
*
request
nsISupports
*
ctx
nsIInputStream
*
input
uint64_t
offset
uint32_t
count
)
{
if
(
NS_FAILED
(
mStatus
)
)
return
mStatus
;
static
uint32_t
const
kCopyChunkSize
=
128
*
1024
;
uint32_t
toRead
=
std
:
:
min
<
uint32_t
>
(
count
kCopyChunkSize
)
;
nsCString
data
;
while
(
count
)
{
nsresult
rv
=
NS_ReadInputStreamToString
(
input
data
toRead
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
if
(
NS_WARN_IF
(
!
SendOnDataAvailable
(
data
offset
toRead
)
)
)
{
return
NS_ERROR_UNEXPECTED
;
}
count
-
=
toRead
;
offset
+
=
toRead
;
toRead
=
std
:
:
min
<
uint32_t
>
(
count
kCopyChunkSize
)
;
}
return
NS_OK
;
}
NS_IMETHODIMP
ExternalHelperAppChild
:
:
OnStartRequest
(
nsIRequest
*
request
)
{
nsresult
rv
=
mHandler
-
>
OnStartRequest
(
request
)
;
NS_ENSURE_SUCCESS
(
rv
NS_ERROR_UNEXPECTED
)
;
nsCOMPtr
<
nsPIDOMWindowOuter
>
window
=
do_GetInterface
(
mHandler
-
>
GetDialogParent
(
)
)
;
NS_ENSURE_TRUE
(
window
NS_ERROR_NOT_AVAILABLE
)
;
TabChild
*
tabChild
=
mozilla
:
:
dom
:
:
TabChild
:
:
GetFrom
(
window
)
;
NS_ENSURE_TRUE
(
tabChild
NS_ERROR_NOT_AVAILABLE
)
;
nsCOMPtr
<
nsIDivertableChannel
>
divertable
=
do_QueryInterface
(
request
)
;
if
(
divertable
)
{
return
DivertToParent
(
divertable
request
tabChild
)
;
}
nsCString
entityID
;
nsCOMPtr
<
nsIResumableChannel
>
resumable
(
do_QueryInterface
(
request
)
)
;
if
(
resumable
)
{
resumable
-
>
GetEntityID
(
entityID
)
;
}
SendOnStartRequest
(
entityID
tabChild
)
;
return
NS_OK
;
}
NS_IMETHODIMP
ExternalHelperAppChild
:
:
OnStopRequest
(
nsIRequest
*
request
nsresult
status
)
{
if
(
mHandler
)
{
nsresult
rv
=
mHandler
-
>
OnStopRequest
(
request
status
)
;
SendOnStopRequest
(
status
)
;
NS_ENSURE_SUCCESS
(
rv
NS_ERROR_UNEXPECTED
)
;
}
return
NS_OK
;
}
nsresult
ExternalHelperAppChild
:
:
DivertToParent
(
nsIDivertableChannel
*
divertable
nsIRequest
*
request
TabChild
*
tabChild
)
{
MOZ_ASSERT
(
mHandler
)
;
mHandler
-
>
MaybeApplyDecodingForExtension
(
request
)
;
mozilla
:
:
net
:
:
ChannelDiverterChild
*
diverter
=
nullptr
;
nsresult
rv
=
divertable
-
>
DivertToParent
(
&
diverter
)
;
if
(
NS_WARN_IF
(
NS_FAILED
(
rv
)
)
)
{
return
rv
;
}
MOZ_ASSERT
(
diverter
)
;
if
(
SendDivertToParentUsing
(
diverter
tabChild
)
)
{
mHandler
-
>
DidDivertRequest
(
request
)
;
mHandler
=
nullptr
;
return
NS_OK
;
}
return
NS_ERROR_FAILURE
;
}
mozilla
:
:
ipc
:
:
IPCResult
ExternalHelperAppChild
:
:
RecvCancel
(
const
nsresult
&
aStatus
)
{
mStatus
=
aStatus
;
return
IPC_OK
(
)
;
}
}
}
