#
ifndef
mozilla_DBusHelpers_h
#
define
mozilla_DBusHelpers_h
#
include
<
dbus
/
dbus
.
h
>
#
include
"
mozilla
/
UniquePtr
.
h
"
#
include
"
mozilla
/
RefPtr
.
h
"
namespace
mozilla
{
template
<
>
struct
RefPtrTraits
<
DBusMessage
>
{
static
void
AddRef
(
DBusMessage
*
aMessage
)
{
MOZ_ASSERT
(
aMessage
)
;
dbus_message_ref
(
aMessage
)
;
}
static
void
Release
(
DBusMessage
*
aMessage
)
{
MOZ_ASSERT
(
aMessage
)
;
dbus_message_unref
(
aMessage
)
;
}
}
;
template
<
>
struct
RefPtrTraits
<
DBusPendingCall
>
{
static
void
AddRef
(
DBusPendingCall
*
aPendingCall
)
{
MOZ_ASSERT
(
aPendingCall
)
;
dbus_pending_call_ref
(
aPendingCall
)
;
}
static
void
Release
(
DBusPendingCall
*
aPendingCall
)
{
MOZ_ASSERT
(
aPendingCall
)
;
dbus_pending_call_unref
(
aPendingCall
)
;
}
}
;
template
<
>
struct
RefPtrTraits
<
DBusConnection
>
{
static
void
AddRef
(
DBusConnection
*
aConnection
)
{
MOZ_ASSERT
(
aConnection
)
;
dbus_connection_ref
(
aConnection
)
;
}
static
void
Release
(
DBusConnection
*
aConnection
)
{
MOZ_ASSERT
(
aConnection
)
;
dbus_connection_unref
(
aConnection
)
;
}
}
;
class
DBusConnectionDelete
{
public
:
constexpr
DBusConnectionDelete
(
)
{
}
void
operator
(
)
(
DBusConnection
*
aConnection
)
const
{
MOZ_ASSERT
(
aConnection
)
;
if
(
dbus_connection_get_is_connected
(
aConnection
)
)
{
dbus_connection_close
(
aConnection
)
;
}
dbus_connection_unref
(
aConnection
)
;
}
}
;
}
#
endif
